{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the Textual framework documentation.</p> <p>Tip</p> <p>See the navigation links in the header or side-bars. Click the  button (top left) on mobile.</p> <p>Get started or go straight to the Tutorial</p>"},{"location":"#what-is-textual","title":"What is Textual?","text":"<p>Textual is a Rapid Application Development framework for Python, built by Textualize.io.</p> <p>Build sophisticated user interfaces with a simple Python API. Run your apps in the terminal and (coming soon) a web browser.</p> <ul> <li> <p> Rapid development</p> <p>Uses your existing Python skills to build beautiful user interfaces.</p> </li> <li> <p> Low requirements</p> <p>Run Textual on a single board computer if you want to.</p> </li> <li> <p> Cross platform</p> <p>Textual runs just about everywhere.</p> </li> <li> <p> Remote</p> <p>Textual apps can run over SSH.</p> </li> <li> <p> CLI Integration</p> <p>Textual apps can be launched and run from the command prompt.</p> </li> <li> <p> Open Source</p> <p>Textual is licensed under MIT.</p> </li> </ul> <p> CalculatorApp 3.14592 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 C+/-%\u00f7 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 789\u00d7 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 456- \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 123+ \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 0.= \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3094371209-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3094371209-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3094371209-r1 { fill: #ffdddd } .terminal-3094371209-r2 { fill: #c5c8c6 } .terminal-3094371209-r3 { fill: #fff3dd } .terminal-3094371209-r4 { fill: #ffffdd } .terminal-3094371209-r5 { fill: #ddeedd } .terminal-3094371209-r6 { fill: #ddddff } .terminal-3094371209-r7 { fill: #eeddee }      PrideApp </p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-4250660802-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-4250660802-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-4250660802-r1 { fill: #c5c8c6 } .terminal-4250660802-r2 { fill: #1e1e1e } .terminal-4250660802-r3 { fill: #1f1f1f } .terminal-4250660802-r4 { fill: #e76580 } .terminal-4250660802-r5 { fill: #f5e5e9;font-weight: bold } .terminal-4250660802-r6 { fill: #0a180e;font-weight: bold } .terminal-4250660802-r7 { fill: #780028 } .terminal-4250660802-r8 { fill: #7ae998 } .terminal-4250660802-r9 { fill: #ffffff } .terminal-4250660802-r10 { fill: #707070 } .terminal-4250660802-r11 { fill: #1c1d1e;font-weight: bold } .terminal-4250660802-r12 { fill: #008139 } .terminal-4250660802-r13 { fill: #9ea4a9 } .terminal-4250660802-r14 { fill: #dde8f3;font-weight: bold } .terminal-4250660802-r15 { fill: #ddedf9 }      StopwatchApp \u2b58StopwatchApp \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Stop00:00:00.13 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0\u00a0A\u00a0\u00a0Add\u00a0\u00a0R\u00a0\u00a0Remove\u00a0 </p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1524942234-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1524942234-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1524942234-r1 { fill: #c5c8c6 } .terminal-1524942234-r2 { fill: #e3e3e3 } .terminal-1524942234-r3 { fill: #1e90ff } .terminal-1524942234-r4 { fill: #c71585 } .terminal-1524942234-r5 { fill: #e3e4e5 } .terminal-1524942234-r6 { fill: #adff2f }      CombiningLayoutsExample \u2b58CombiningLayoutsExample \u250c\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502\u2502HorizontallyPositionedChildrenHere\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502\u2502Thispanelis\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502usinggrid\u00a0layout!\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2514\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3718827072-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3718827072-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3718827072-r1 { fill: #c5c8c6 } .terminal-3718827072-r2 { fill: #e2e3e3 } .terminal-3718827072-r3 { fill: #e2e3e3;font-weight: bold } .terminal-3718827072-r4 { fill: #e2e3e3;font-style: italic; } .terminal-3718827072-r5 { fill: #e2e3e3;font-weight: bold;text-decoration: underline; } .terminal-3718827072-r6 { fill: #98729f } .terminal-3718827072-r7 { fill: #7ae998 } .terminal-3718827072-r8 { fill: #0a180e;font-weight: bold } .terminal-3718827072-r9 { fill: #008139 }      WelcomeApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Welcome!\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b Textual\u00a0is\u00a0a\u00a0TUI,\u00a0or\u00a0Text\u00a0User\u00a0Interface,\u00a0framework\u00a0for\u00a0Python\u00a0inspired\u00a0by\u00a0 modern\u00a0web\u00a0development.\u00a0We\u00a0hope\u00a0you\u00a0enjoy\u00a0using\u00a0Textual! Dune\u00a0quote \u258c\u00a0\"I\u00a0must\u00a0not\u00a0fear.Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0little-death\u00a0that \u258c\u00a0brings\u00a0total\u00a0obliteration.I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass \u258c\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner \u258c\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only \u258c\u00a0I\u00a0will\u00a0remain.\" \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 OK \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p>"},{"location":"getting_started/","title":"Getting started","text":"<p>All you need to get started building Textual apps.</p>"},{"location":"getting_started/#requirements","title":"Requirements","text":"<p>Textual requires Python 3.7 or later (if you have a choice, pick the most recent Python). Textual runs on Linux, macOS, Windows and probably any OS where Python also runs.</p> <p>Your platform</p>"},{"location":"getting_started/#linux-all-distros","title":"Linux (all distros)","text":"<p>All Linux distros come with a terminal emulator that can run Textual apps.</p>"},{"location":"getting_started/#macos","title":"macOS","text":"<p>The default terminal app is limited to 256 colors. We recommend installing a newer terminal such as iterm2, Kitty, or WezTerm.</p>"},{"location":"getting_started/#windows","title":"Windows","text":"<p>The new Windows Terminal runs Textual apps beautifully.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>You can install Textual via PyPI.</p> <p>If you plan on developing Textual apps, then you should install <code>textual[dev]</code>. The <code>[dev]</code> part installs a few extra dependencies for development.</p> <pre><code>pip install \"textual[dev]\"\n</code></pre> <p>If you only plan on running Textual apps, then you can drop the <code>[dev]</code> part:</p> <pre><code>pip install textual\n</code></pre>"},{"location":"getting_started/#demo","title":"Demo","text":"<p>Once you have Textual installed, run the following to get an impression of what it can do:</p> <pre><code>python -m textual\n</code></pre> <p>If Textual is installed you should see the following:</p> <p> Textual\u00a0Demo \u2b58Textual\u00a0Demo TOP\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Widgets\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Textual\u00a0widgets\u00a0are\u00a0powerful\u00a0interactive\u00a0components. Widgets Build\u00a0your\u00a0own\u00a0or\u00a0use\u00a0the\u00a0builtin\u00a0widgets. \u00a0\u2022\u00a0Input\u00a0Text\u00a0/\u00a0Password\u00a0input. Rich\u00a0content\u00a0\u2022\u00a0Button\u00a0Clickable\u00a0button\u00a0with\u00a0a\u00a0number\u00a0of\u00a0styles. \u00a0\u2022\u00a0Switch\u00a0A\u00a0switch\u00a0to\u00a0toggle\u00a0between\u00a0states.\u2582\u2582 \u00a0\u2022\u00a0DataTable\u00a0A\u00a0spreadsheet-like\u00a0widget\u00a0for\u00a0navigating\u00a0data.\u00a0Cells\u00a0may\u00a0contain\u00a0text\u00a0or\u00a0Rich\u00a0 renderables. CSS\u00a0\u2022\u00a0Tree\u00a0An\u00a0generic\u00a0tree\u00a0with\u00a0expandable\u00a0nodes. \u00a0\u2022\u00a0DirectoryTree\u00a0A\u00a0tree\u00a0of\u00a0file\u00a0and\u00a0folders. \u00a0\u2022\u00a0...\u00a0many\u00a0more\u00a0planned\u00a0... \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258e\u258b \u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258b \u258eUsername\u258awill\u258e\u258b \u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258b \u258e\u258b\u2583\u2583 \u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258b \u258ePassword\u258aPassword\u258e\u258b \u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258b \u258e\u258b \u258e\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258b \u258eLogin\u258b \u258e\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258b \u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Foo\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bar\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Baz\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Foo\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Cell\u00a0(0,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(0,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(0,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(0,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Cell\u00a0(1,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(1,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(1,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(1,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Cell\u00a0(2,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(2,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(2,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(2,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Cell\u00a0(3,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(3,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(3,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(3,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Cell\u00a0(4,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(4,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(4,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(4,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Cell\u00a0(5,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(5,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(5,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(5,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Cell\u00a0(6,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(6,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(6,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(6,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Cell\u00a0(7,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(7,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(7,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(7,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Cell\u00a0(8,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(8,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(8,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(8,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Cell\u00a0(9,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(9,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(9,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(9,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2582\u2582 \u00a0Cell\u00a0(10,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(10,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(10,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(10,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Cell\u00a0(11,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(11,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(11,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(11,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Cell\u00a0(12,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(12,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(12,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(12,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0Cell\u00a0(13,\u00a00)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(13,\u00a01)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(13,\u00a02)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell\u00a0(13,\u00a03)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u258f \u00a0CTRL+C\u00a0\u00a0Quit\u00a0\u00a0CTRL+B\u00a0\u00a0Sidebar\u00a0\u00a0CTRL+T\u00a0\u00a0Toggle\u00a0Dark\u00a0mode\u00a0\u00a0CTRL+S\u00a0\u00a0Screenshot\u00a0\u00a0F1\u00a0\u00a0Notes\u00a0 </p>"},{"location":"getting_started/#examples","title":"Examples","text":"<p>The Textual repository comes with a number of example apps. To try out the examples, first clone the Textual repository:</p> HTTPSSSHGitHub CLI <pre><code>git clone https://github.com/Textualize/textual.git\n</code></pre> <pre><code>git clone git@github.com:Textualize/textual.git\n</code></pre> <pre><code>gh repo clone Textualize/textual\n</code></pre> <p>With the repository cloned, navigate to the <code>/examples/</code> directory where you will find a number of Python files you can run from the command line:</p> <pre><code>cd textual/examples/\npython code_browser.py ../\n</code></pre>"},{"location":"getting_started/#textual-cli","title":"Textual CLI","text":"<p>If you installed the dev dependencies you have access to the <code>textual</code> CLI command. There are a number of sub-commands which will aid you in building Textual apps.</p> <pre><code>textual --help\n</code></pre> <p>See devtools for more about the <code>textual</code> command.</p>"},{"location":"getting_started/#need-help","title":"Need help?","text":"<p>See the help page for how to get help with Textual, or to report bugs.</p>"},{"location":"help/","title":"Help","text":"<p>If you need help with any aspect of Textual, let us know! We would be happy to hear from you.</p>"},{"location":"help/#bugs-and-feature-requests","title":"Bugs and feature requests","text":"<p>Report bugs via GitHub on the Textual issues page. You can also post feature requests via GitHub issues, but see the roadmap first.</p>"},{"location":"help/#help-with-using-textual","title":"Help with using Textual","text":"<p>You can seek help with using Textual in the discussion area on GitHub.</p>"},{"location":"help/#discord-server","title":"Discord Server","text":"<p>For more realtime feedback or chat, join our discord server to connect with the Textual community.</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>We (textualize.io) are actively building and maintaining Textual.</p> <p>We have many new features in the pipeline. This page will keep track of that work.</p>"},{"location":"roadmap/#features","title":"Features","text":"<p>High-level features we plan on implementing.</p> <ul> <li> Accessibility<ul> <li> Integration with screen readers</li> <li> Monochrome mode</li> <li> High contrast theme</li> <li> Color-blind themes</li> </ul> </li> <li> Command interface<ul> <li> Command menu</li> <li> Fuzzy search</li> </ul> </li> <li> Configuration (.toml based extensible configuration format)</li> <li> Console</li> <li> Devtools<ul> <li> Integrated log</li> <li> DOM tree view</li> <li> REPL</li> </ul> </li> <li> Reactive state abstraction</li> <li> Themes<ul> <li> Customize via config</li> <li> Builtin theme editor</li> </ul> </li> </ul>"},{"location":"roadmap/#widgets","title":"Widgets","text":"<p>Widgets are key to making user-friendly interfaces. The builtin widgets should cover many common (and some uncommon) use-cases. The following is a list of the widgets we have built or are planning to build.</p> <ul> <li> Buttons<ul> <li> Error / warning variants</li> </ul> </li> <li> Color picker</li> <li> Checkbox</li> <li> Content switcher</li> <li> DataTable<ul> <li> Cell select</li> <li> Row / Column select</li> <li> API to update cells / rows</li> <li> Lazy loading API</li> </ul> </li> <li> Date picker</li> <li> Drop-down menus</li> <li> Form Widget<ul> <li> Serialization / Deserialization</li> <li> Export to <code>attrs</code> objects</li> <li> Export to <code>PyDantic</code> objects</li> </ul> </li> <li> Image support<ul> <li> Half block</li> <li> Braille</li> <li> Sixels, and other image extensions</li> </ul> </li> <li> Input<ul> <li> Validation</li> <li> Error / warning states</li> <li> Template types: IP address, physical units (weight, volume), currency, credit card etc</li> </ul> </li> <li> Markdown viewer<ul> <li> Collapsible sections</li> <li> Custom widgets</li> </ul> </li> <li> Plots<ul> <li> bar chart</li> <li> line chart</li> <li> Candlestick chars</li> </ul> </li> <li> Progress bars<ul> <li> Style variants (solid, thin etc)</li> </ul> </li> <li> Radio boxes</li> <li> Spark-lines</li> <li> Switch</li> <li> Tabs</li> <li> TextArea (multi-line input)<ul> <li> Basic controls</li> <li> Indentation guides</li> <li> Smart features for various languages</li> <li> Syntax highlighting</li> </ul> </li> </ul>"},{"location":"tutorial/","title":"Tutorial","text":"<p>Welcome to the Textual Tutorial!</p> <p>By the end of this page you should have a solid understanding of app development with Textual.</p> <p>Quote</p> <p>If you want people to build things, make it fun.</p> <p>\u2014 Will McGugan (creator of Rich and Textual)</p>"},{"location":"tutorial/#stopwatch-application","title":"Stopwatch Application","text":"<p>We're going to build a stopwatch application. This application should show a list of stopwatches with buttons to start, stop, and reset the stopwatches. We also want the user to be able to add and remove stopwatches as required.</p> <p>This will be a simple yet fully featured app \u2014 you could distribute this app if you wanted to!</p> <p>Here's what the finished app will look like:</p> <p> StopwatchApp \u2b58StopwatchApp \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.25Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0\u00a0A\u00a0\u00a0Add\u00a0\u00a0R\u00a0\u00a0Remove\u00a0 </p>"},{"location":"tutorial/#get-the-code","title":"Get the code","text":"<p>If you want to try the finished Stopwatch app and follow along with the code, first make sure you have Textual installed then check out the Textual repository:</p> HTTPSSSHGitHub CLI <pre><code>git clone https://github.com/Textualize/textual.git\n</code></pre> <pre><code>git clone git@github.com:Textualize/textual.git\n</code></pre> <pre><code>gh repo clone Textualize/textual\n</code></pre> <p>With the repository cloned, navigate to <code>docs/examples/tutorial</code> and run <code>stopwatch.py</code>.</p> <pre><code>cd textual/docs/examples/tutorial\npython stopwatch.py\n</code></pre>"},{"location":"tutorial/#type-hints-in-brief","title":"Type hints (in brief)","text":"<p>Tip</p> <p>Type hints are entirely optional in Textual. We've included them in the example code but it's up to you whether you add them to your own projects.</p> <p>We're a big fan of Python type hints at Textualize. If you haven't encountered type hinting, it's a way to express the types of your data, parameters, and return values. Type hinting allows tools like mypy to catch bugs before your code runs.</p> <p>The following function contains type hints:</p> <pre><code>def repeat(text: str, count: int) -&gt; str:\n\"\"\"Repeat a string a given number of times.\"\"\"\nreturn text * count\n</code></pre> <p>Parameter types follow a colon. So <code>text: str</code> indicates that <code>text</code> requires a string and <code>count: int</code> means that <code>count</code> requires an integer.</p> <p>Return types follow <code>-&gt;</code>. So <code>-&gt; str:</code> indicates this method returns a string.</p>"},{"location":"tutorial/#the-app-class","title":"The App class","text":"<p>The first step in building a Textual app is to import and extend the <code>App</code> class. Here's a basic app class we will use as a starting point for the stopwatch app.</p> stopwatch01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Header, Footer\nclass StopwatchApp(App):\n\"\"\"A Textual app to manage stopwatches.\"\"\"\nBINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets for the app.\"\"\"\nyield Header()\nyield Footer()\ndef action_toggle_dark(self) -&gt; None:\n\"\"\"An action to toggle dark mode.\"\"\"\nself.dark = not self.dark\nif __name__ == \"__main__\":\napp = StopwatchApp()\napp.run()\n</code></pre> <p>If you run this code, you should see something like the following:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1951600224-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1951600224-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1951600224-r1 { fill: #c5c8c6 } .terminal-1951600224-r2 { fill: #e3e3e3 } .terminal-1951600224-r3 { fill: #e1e1e1 } .terminal-1951600224-r4 { fill: #dde8f3;font-weight: bold } .terminal-1951600224-r5 { fill: #ddedf9 }      StopwatchApp \u2b58StopwatchApp \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0 </p> <p>Hit the D key to toggle between light and dark mode.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2012814877-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2012814877-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2012814877-r1 { fill: #c5c8c6 } .terminal-2012814877-r2 { fill: #1e1e1e } .terminal-2012814877-r3 { fill: #1f1f1f } .terminal-2012814877-r4 { fill: #dde8f3;font-weight: bold } .terminal-2012814877-r5 { fill: #ddedf9 }      StopwatchApp\u00a0+\u00a0dark \u2b58StopwatchApp \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0 </p> <p>Hit Ctrl+C to exit the app and return to the command prompt.</p>"},{"location":"tutorial/#a-closer-look-at-the-app-class","title":"A closer look at the App class","text":"<p>Let's examine <code>stopwatch01.py</code> in more detail.</p> stopwatch01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Header, Footer\nclass StopwatchApp(App):\n\"\"\"A Textual app to manage stopwatches.\"\"\"\nBINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets for the app.\"\"\"\nyield Header()\nyield Footer()\ndef action_toggle_dark(self) -&gt; None:\n\"\"\"An action to toggle dark mode.\"\"\"\nself.dark = not self.dark\nif __name__ == \"__main__\":\napp = StopwatchApp()\napp.run()\n</code></pre> <p>The first line imports the Textual <code>App</code> class, which we will use as the base class for our App. The second line imports two builtin widgets: <code>Footer</code> which shows a bar at the bottom of the screen with bound keys, and <code>Header</code> which shows a title at the top of the screen. Widgets are re-usable components responsible for managing a part of the screen. We will cover how to build widgets in this tutorial.</p> <p>The following lines define the app itself:</p> stopwatch01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Header, Footer\nclass StopwatchApp(App):\n\"\"\"A Textual app to manage stopwatches.\"\"\"\nBINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets for the app.\"\"\"\nyield Header()\nyield Footer()\ndef action_toggle_dark(self) -&gt; None:\n\"\"\"An action to toggle dark mode.\"\"\"\nself.dark = not self.dark\nif __name__ == \"__main__\":\napp = StopwatchApp()\napp.run()\n</code></pre> <p>The App class is where most of the logic of Textual apps is written. It is responsible for loading configuration, setting up widgets, handling keys, and more.</p> <p>Here's what the above app defines:</p> <ul> <li> <p><code>BINDINGS</code> is a list of tuples that maps (or binds) keys to actions in your app. The first value in the tuple is the key; the second value is the name of the action; the final value is a short description. We have a single binding which maps the D key on to the \"toggle_dark\" action. See key bindings in the guide for details.</p> </li> <li> <p><code>compose()</code> is where we construct a user interface with widgets. The <code>compose()</code> method may return a list of widgets, but it is generally easier to yield them (making this method a generator). In the example code we yield an instance of each of the widget classes we imported, i.e. <code>Header()</code> and <code>Footer()</code>.</p> </li> <li> <p><code>action_toggle_dark()</code> defines an action method. Actions are methods beginning with <code>action_</code> followed by the name of the action. The <code>BINDINGS</code> list above tells Textual to run this action when the user hits the D key. See actions in the guide for details.</p> </li> </ul> stopwatch01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Header, Footer\nclass StopwatchApp(App):\n\"\"\"A Textual app to manage stopwatches.\"\"\"\nBINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets for the app.\"\"\"\nyield Header()\nyield Footer()\ndef action_toggle_dark(self) -&gt; None:\n\"\"\"An action to toggle dark mode.\"\"\"\nself.dark = not self.dark\nif __name__ == \"__main__\":\napp = StopwatchApp()\napp.run()\n</code></pre> <p>The final three lines create an instance of the app and calls the run() method which puts your terminal in to application mode and runs the app until you exit with Ctrl+C. This happens within a <code>__name__ == \"__main__\"</code> block so we could run the app with <code>python stopwatch01.py</code> or import it as part of a larger project.</p>"},{"location":"tutorial/#designing-a-ui-with-widgets","title":"Designing a UI with widgets","text":"<p>Textual comes with a number of builtin widgets, like Header and Footer, which are versatile and re-usable. We will need to build some custom widgets for the stopwatch. Before we dive in to that, let's first sketch a design for the app \u2014 so we know what we're aiming for.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nNVcXGlP40pcdTAwMTb93r9cdTAwMDIxX2akxq/2paXRqFx1MDAwM4R9XHUwMDBiW8PMXHUwMDEzMrFDXGbxguNA4Kn/+5SddOwktuM4S/tFLVx1MDAxYVxcjuu66tx77lJVf33Z2NhcZj48c/PbxqbZb+pcdTAwMWTL8PX3za/h9TfT71quo5pQ9HfX7fnN6M52XHUwMDEweN1vf/xh6/6LXHUwMDE5eFx1MDAxZL1pam9Wt6d3ukHPsFxcrenaf1iBaXf/XHUwMDEz/jzVbfPfnmtcdTAwMWKBr8WdbJmGXHUwMDE1uP6gL7Nj2qZcdTAwMTN01dP/q/7e2Pgr+pmQzjebge48dczoXHUwMDBiUVMsIFx1MDAwNmzy6qnrRMJcbi5cdTAwMDWFXGaR0VxyVndHdVx1MDAxN5iGam0pkc24Jby0+aizxo/G/VPr6uX83Hu/ueqSPo97bVmdzmXw0Ymk6rrqZeK2buC7L+atZVx1MDAwNG3VXG4nrmd9y3d7T23H7HbHvuN6etNcbj7Ca1x1MDAwMIyuXHUwMDBlhuDbRnylXHUwMDFmTlx1MDAxMCdcdTAwMWFkXHUwMDAwUoboqCH8KpJcXCOEYpi4Plx1MDAxMGbb7ajBV8L8XHUwMDAzRJ9YnEe9+fKkZHKM+Fx1MDAxZVx1MDAwMpqAJlx1MDAwNuF9+IqqQ1xyy4lcdTAwMGXapvXUXHUwMDBlXHUwMDA2gmtcdTAwMWNcbp7o24yGXHUwMDFkXCLEOUFcYqNRS9ijd2BEXGL4c3Lg2rrvXHJcdTAwMDdos1x1MDAxYv6RkDZcdTAwMTR0d1x1MDAxMj5JXGIlpvag2/C2m5+HRzdcdTAwMTf1t7uL8114vnc4etZcdTAwMTjedN933zdHLT+Hv8Wi9TxDXHUwMDFmgFxiMlx1MDAwNiRcdTAwMTaSXHUwMDEwgmNcdTAwMWN2LOdFNTq9Tie+5jZfYtxFV39+LYF3gmBcdTAwMTbeJVx1MDAxNYJQSorj3XrEnty37P7JsSlcdTAwMWT97NV7/VGvON5cdTAwMDXRXHUwMDA0wXxcdTAwMWPsXHUwMDE4YlxyYyqT18uAvaVTRNE02JWGTWOcsSlwc8FcdTAwMDRUUCDrXHUwMDAy9y/MXHUwMDA0Zj9cdTAwMThH82CG67KPb+3+/bFcclx1MDAwZnZunFx1MDAwN3v/sL01XHUwMDE3tlx1MDAxOVx1MDAwNVxigWVhe0zOYmZcdTAwMWMqXHUwMDExXHUwMDE4R1x1MDAxY4nCuE5/63RcXLf1Zrvnm1VAtkxDNlZ4X1x1MDAxY9mBrztdT/dcdTAwMTWaUtBNU9CN8LTpJlAqky9WgO5lXHUwMDAyMJ5n11x0Lq3PcKhcdTAwMTNcdTAwMGZcYq/WddvqfIxNVYRMJell4CZcdTAwMDXVu6bqMcIhXHUwMDFmu/d7x3pcbpG72VTvYPpjoFx1MDAwZSzl6oxusC3DSFx1MDAxYfOmXHUwMDEyQFfP9Fx1MDAwZopcdTAwMThh17eeLEfvXFwl5SvPXHUwMDFmjMlM/lAug0SCo8J65lx1MDAxY2/3t06R6Fx1MDAxY8BG42brXHUwMDAzXFw1/I9q81x1MDAwN2NEXHUwMDAzWIJJd4lgpPRcZoGF/aWmaVx1MDAxMEMvSiFiSskgR8q1XHUwMDEyZG1cdTAwMTQymMpeXHUwMDFmn+zsideL9zuj9tK6sE9/bDfS/aNIU2Jcbvma/thZzJTeYXFmXHUwMDEyWPmXWMaTtVwiZqJcdOM4yUycXHUwMDAzyVxiT8zsLI3JXHUwMDFm5ooyk7JcdTAwMTnpOkOp8rpcdTAwMTbXmaWQXHUwMDEzXHUwMDA3XGIoXHUwMDFkS7jhqyenXHUwMDEyXHUwMDE4XFyMnFx1MDAxYWbXXGbWyk4zTPwkO1xyXHUwMDA0LE9PMGFcdTAwMTEntI1wXGKQXHUwMDE0rHh4c/zs9smja183ru5Ojp73jWtcdTAwMTI0q01PhCtVo2Lc34v8QMQ1oMhhPKYuXHUwMDEz4kSfND3DXHUwMDFhnExcdTAwMTiMXHUwMDE0XHUwMDBlU02OO6dDveMq5FRcdTAwMTaArkDtyvHKx0n/ljx8Xlx1MDAwN96xW/NZv+18st1cbkY8kmRcdTAwMDFcdTAwMWQyjpVZ4ax4wJP+0lx1MDAxNadcdTAwMTVcdTAwMTVIZGBd+WJ0knCWzitcdTAwMDRPwzyFV6hcdTAwMDQq5GGr8MeqXHUwMDEz9Fx1MDAwMPAt/Mc1XHUwMDA018ouMyz0JLskxSzPMVhmptCgQFxicVxuOSusende//LkZGf39uiqVoeg3Ttv+8e/k2RwkZQxXHUwMDA1krOpnDGBQmOccrGqIIgypnHO8Vx1MDAxOJOMJY1cdTAwMDVcdTAwMWRPZY/CXCJcdTAwMDRcdTAwMTX/XHUwMDEwsVYtXHUwMDE0XHUwMDEwYonm0MLyoKRcdTAwMTRngpJcdTAwMTPJkVx1MDAwNKQ4XHUwMDFmyGOhO/unXHKf1M97bbttXl1cdTAwMWZUvZAhqFx1MDAwNlx1MDAwNaWEXHQ+XHUwMDE5mlx1MDAxM00uI7ubVcoomt1ccrP8gvLEq6wlNP++3Xpr2O32XHUwMDE2Mz6fejY4erg74uOuz3JD8/RcdTAwMGWr50IpK5KlM0x5XHUwMDBmXHUwMDAwwDlcXKj8Ua6oXHUwMDBipaxCltJQppElKM1yYnMsXHUwMDAwXHUwMDEwfFx1MDAxNTW/6vhQl4Hurzc2n2HlpzPHoYBcdTAwMGL4TSiborCQiOE5XHUwMDEyYW7t5NW8QPzItnuNeqv/dnyB33+vuvFcIsE5XHUwMDAxqZkwXCKVT1xuVqxspVx1MDAwMnRKwuhFrrve/iDfL8+O/Ju9k7bVMPZcdTAwMGZcdTAwMDS+P2uvkrTSO6xcdTAwMWVpIZpZgFGBP8CcUFA8xZU/zFx1MDAxNVUjXHUwMDE192eoXHUwMDExpVx1MDAxYV9xOrlY2C9cdFx1MDAxMpJSuM5s8lx1MDAxMIFwXHUwMDBlXHUwMDA0LsZYw3BcdTAwMWFo41x1MDAwM7py3pph+zOi/kjM8uyFWKazKFx1MDAxOEZcdTAwMDBcdTAwMTFQ3Fl8RkivfaKzXHUwMDFh3vGI34JXd82b/d9cdTAwMTlfkdlBP9Mog1x1MDAxNOGpJVx1MDAwNsroaVx1MDAwYkf8Lf1cdTAwMTFcdTAwMDCaXHUwMDE28XNccipdXHUwMDFh0/WR4il9R1igsPeoXHUwMDBmOKmHXGJcdTAwMTBlXHUwMDEwMV1fOXRcdTAwMTbP6PpcdTAwMTXbu7o/OFx1MDAwMSe39nZw+eRcdTAwMWScXs63WkxIXHRji7NcIp6BIDvBLJByJOZYXHUwMDE3mf7O6XBv+m63u9XWg2b794NewEzQh1x1MDAwZVx1MDAxM4aMrDTJTCmfXHUwMDA2fUqAxCRcdTAwMDJUKcl6k8xzXHUwMDAzcTG62Td1I0lcdTAwMWJrYJpcdTAwMTl2epJphlx1MDAxMpYnXHUwMDE5XG4zSVx1MDAwNlwiyKOca2Gtc+y3k8tcdTAwMTf48Irk+71OwFx1MDAxYjx9LpVZRkvSNzpb34CGXGKcjIRcIq9cdTAwMTAqfWNkXCJEKUE0XGKJR5OlXHUwMDExXHKZVjWcsohcciNcdTAwMTLSUWVcYuU2QPrdzsOWj/pta5/dP+3hXHUwMDA3ez5CkYrd4/dZVeDCM0vzkGEogUCgePyf/ta/nVJcbkCcZkJcXPlRy4D4XGZGSYF5SvxcdTAwMTKuhyFcdTAwMDCtmVDmXHUwMDA14mKEUnfdYM2EMsMmT1x1MDAxMspQwkVcYiUn56ZAiOZSujP60NxvdY1cdTAwMWYt1Kyf39qn/aB5U/FaJdOYXHUwMDEwJKVYSTHXplLf1ShWXCLMJcOYraBamc4xw1x1MDAxMsZcdTAwMWU7O3uxrf7lNjk6291BXHUwMDFl+Vx1MDAxMOk5t1x1MDAxMntcXFx1MDAxMGF8PbVQxrM3XHUwMDAzIE64ilx1MDAwN+fINNvPp/a2d3x0dF4zOvt35lPt8sWpei2Ua5hcdTAwMTE0UYn/XHUwMDE42H9ccirVXzhgX7RcdTAwMTgqiFRTQcSai6E7XHI9eDyy2s9cdTAwMTdcdTAwMTf711x1MDAwZl3y2q5jP1x1MDAxZOPF8soreuwsry+9w3lcdTAwMTRS4DCHumqvj+akq7lcdTAwMDBcdTAwMTBcdFx1MDAwNouHNPnDXFzZXCIrytRGTjW2XHUwMDA0bVxcSpVcdTAwMTVcYkokoGtdXHUwMDAxXVx1MDAwMoaL+Xzrr7LO4I9lV1lcdMkmP4wogpTC4jt0asfXzkO7Z+yC163vV/XWNdjln5WvXHUwMDBmQY1yXHRTNjVTJrRVr1x1MDAwYi1XZoWIXHUwMDAxiClfRVxuL4+4LpqH6PFwz3Vfnlxm9/Ni79Opi93F+XDpj53Fh+lcdTAwMWRWj1x1MDAwZrHIXFw8ijBcdTAwMDVcXMGmeFx1MDAxOSl/lKuqnSxTOznRhFgxXHUwMDE5XHUwMDE2q98qXHUwMDE2RGqq1rxVdc1cXPi76rczSKV0/TYz84hpls5cdTAwMTGBJZtrb3jt7HnLe39/dPmLrd95dYs9YiND59aSVZ/tgEpGNSogSFnmR2G4LUjmXHUwMDFm84FcdNZJ2W2rXHUwMDAwpejbXHUwMDE0/SGiXGaCSM5D1TNcdTAwMWW59Cdr37dcdTAwMGbPXHUwMDFmxPfDmjh8faa017r/sbRMXG6lXHUwMDAwr6/sXHUwMDE2blx1MDAxOH9cdTAwMWbPnSdthFx1MDAxOPvCyFx1MDAwNHTMVpBjIcY2yY+bh7FcdTAwMTdJ270+XHUwMDEwJtdcdTAwMTJcZlx1MDAwNjWNfrOPP1FcdTAwMDAkmPB5zvvJn+Zq2lx1MDAwMlxuNFxmXHUwMDA1Y1x1MDAwMmMsMJw0XHUwMDA3QoOYhVx1MDAwYiZouFtyNTaBizBcdTAwMDWFZbhcdTAwMWSR8OSBXHUwMDAx8cJcdTAwMGWoQYSEomGGpVx1MDAwMvykvVAuNCfhSq/57UUkZNn6hGCiVH2iXHUwMDFiRnU1yzEs50k1xibj1/lVXHUwMDA3XHUwMDA1yCXS1WYvlHJcdTAwMGJoTKrRXHUwMDEzMFxc8IeT5yGFY6F7USSiodCLYThcdTAwMWNGQeTwhpHp2jRcdTAwMWQjlmn8NfRusO3atlx1MDAxNahcdTAwMDE4dy0nmLwjeqPvoZ61TX1Kb9WTk22TXG7phU9cdTAwMWO3zvFvXHUwMDFiMWSjP0a///k19e6tTDxFrZNQilx1MDAxZvcl+f/cplx1MDAwNKHszJZEUir9wsUzW/lMVFFTwjV1V9pcdTAwMGVMisP1zFxmQ45BaFNXYkaksmScyF9cdTAwMWaeslSGKFx0XHUwMDE5XHUwMDAyXHUwMDEw8TCyXHUwMDAyaOq4XGbVICVgskTOa1x1MDAxMTtCldqW8vOXbUeApiw9UapcdTAwMDEg41xckZ9I3DQwI0IjXHUwMDAyRJ5jvv3IkiW/aDgmXHUwMDBilzzccqIgxaREdFpcdTAwMTaENUSHO1x1MDAwZqek+VvZrEzwhp8p2M5pszKTXHUwMDBmXHS+nNzwhChnhOHiqcGjz7u911Zw8456jkktv9WA9duKWywsNJZusZQnpFx0wfLPR1gsXHUwMDEwimWO3ZxYvtFSPlx1MDAwZVx1MDAxMFwiZM1lsVx1MDAwNVx1MDAwMpbcQGhVXHUwMDAx1mqPY1x1MDAxNJSBeUrVS1xusP7n/DOyUKbxr9RYK5G6mi9cdTAwMWazcLSVlKyct4SzXHUwMDE3okjCwpNw5ti1kj/7XHUwMDE1NT1UxV2/llx1MDAxMidXqlx1MDAwZk6skJpiWIakcth5cqf2Mk1cdTAwMTBcdTAwMTOaXHUwMDE4nLhcdTAwMWFcdTAwMTGPiD2QODOjUVxuOFx1MDAwZuXkTFwiknagXHUwMDA1XHUwMDA2UGBaJlVT5dArn87G3Fx1MDAxNFxiiVQ2XHUwMDFhcCYoJ3FcYj1yU5SXMtixkO8x/X0jrkwkhZ9pXGbN6b7k1jd5zuJcdTAwMWWoaF1IJIpnc9+E3fQ+3G6999yRXHUwMDA3dv2cg+1SlmSdp6lRXHJcdTAwMDCkQszpbC5ccjclrGg5W9FcdTAwMDNcYjFV1mE1S0fzPILT21OvfaVcdTAwMDb70rm+wVcnwdbxoZ3uXHUwMDExzFPIXFz6Y2dcdTAwMTUy0zss7r4oJlxy/cd5dlx1MDAwMeYqY1YskdyJMJX+4FhKguY4ai1/mCu6sEe56pmayFXYXFyBo1x1MDAxM1x1MDAxMMRcZofnXHUwMDExrfPgm1x1MDAxMlx1MDAxMFxczINe/7GGM3gj71jDL0Pl3dQ97zJQ4zZyStTUWMbw5eOx2nyzzPda9kl8X4a6XHUwMDFiKolcdTAwMTlOzF8/v/z8P1xiXCJcdTAwMWT6In0=        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Cascadia.woff2\");       }      StopReset00:00:07.21Start00:00:00.00HeaderFooterStart00:00:00.00StopwatchStopwatch(started)Reset"},{"location":"tutorial/#custom-widgets","title":"Custom widgets","text":"<p>We need a <code>Stopwatch</code> widget composed of the following child widgets:</p> <ul> <li>A \"Start\" button</li> <li>A \"Stop\" button</li> <li>A \"Reset\" button</li> <li>A time display</li> </ul> <p>Textual has a builtin <code>Button</code> widget which takes care of the first three components. All we need to build is the time display widget which will show the elapsed time and the stopwatch widget itself.</p> <p>Let's add those to the app. Just a skeleton for now, we will add the rest of the features as we go.</p> stopwatch02.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.widgets import Button, Header, Footer, Static\nclass TimeDisplay(Static):\n\"\"\"A widget to display elapsed time.\"\"\"\nclass Stopwatch(Static):\n\"\"\"A stopwatch widget.\"\"\"\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets of a stopwatch.\"\"\"\nyield Button(\"Start\", id=\"start\", variant=\"success\")\nyield Button(\"Stop\", id=\"stop\", variant=\"error\")\nyield Button(\"Reset\", id=\"reset\")\nyield TimeDisplay(\"00:00:00.00\")\nclass StopwatchApp(App):\n\"\"\"A Textual app to manage stopwatches.\"\"\"\nBINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets for the app.\"\"\"\nyield Header()\nyield Footer()\nyield Container(Stopwatch(), Stopwatch(), Stopwatch())\ndef action_toggle_dark(self) -&gt; None:\n\"\"\"An action to toggle dark mode.\"\"\"\nself.dark = not self.dark\nif __name__ == \"__main__\":\napp = StopwatchApp()\napp.run()\n</code></pre> <p>We've imported two new widgets in this code: <code>Button</code>, which creates a clickable button, and <code>Static</code> which is a base class for a simple control. We've also imported <code>Container</code> from <code>textual.containers</code> which (as the name suggests) is a <code>Widget</code> which contains other widgets.</p> <p>We've defined an empty <code>TimeDisplay</code> widget by extending <code>Static</code>. We will flesh this out later.</p> <p>The Stopwatch widget class also extends <code>Static</code>. This class has a <code>compose()</code> method which yields child widgets, consisting of three <code>Button</code> objects and a single <code>TimeDisplay</code> object. These widgets will form the stopwatch in our sketch.</p>"},{"location":"tutorial/#the-buttons","title":"The buttons","text":"<p>The Button constructor takes a label to be displayed in the button (<code>\"Start\"</code>, <code>\"Stop\"</code>, or <code>\"Reset\"</code>). Additionally, some of the buttons set the following parameters:</p> <ul> <li><code>id</code> is an identifier we can use to tell the buttons apart in code and apply styles. More on that later.</li> <li><code>variant</code> is a string which selects a default style. The \"success\" variant makes the button green, and the \"error\" variant makes it red.</li> </ul>"},{"location":"tutorial/#composing-the-widgets","title":"Composing the widgets","text":"<p>To add widgets to our application we first need to yield them from the app's <code>compose()</code> method:</p> <p>The new line in <code>Stopwatch.compose()</code> yields a single <code>Container</code> object which will create a scrolling list of stopwatches. When classes contain other widgets (like <code>Container</code>) they will typically accept their child widgets as positional arguments. We want to start the app with three stopwatches, so we construct three <code>Stopwatch</code> instances and pass them to the container's constructor.</p>"},{"location":"tutorial/#the-unstyled-app","title":"The unstyled app","text":"<p>Let's see what happens when we run <code>stopwatch02.py</code>.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1140655237-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1140655237-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1140655237-r1 { fill: #c5c8c6 } .terminal-1140655237-r2 { fill: #e3e3e3 } .terminal-1140655237-r3 { fill: #7ae998 } .terminal-1140655237-r4 { fill: #e1e1e1 } .terminal-1140655237-r5 { fill: #0a180e;font-weight: bold } .terminal-1140655237-r6 { fill: #008139 } .terminal-1140655237-r7 { fill: #e76580 } .terminal-1140655237-r8 { fill: #f5e5e9;font-weight: bold } .terminal-1140655237-r9 { fill: #780028 } .terminal-1140655237-r10 { fill: #454a50 } .terminal-1140655237-r11 { fill: #e2e3e3;font-weight: bold } .terminal-1140655237-r12 { fill: #000000 } .terminal-1140655237-r13 { fill: #14191f } .terminal-1140655237-r14 { fill: #dde8f3;font-weight: bold } .terminal-1140655237-r15 { fill: #ddedf9 }      stopwatch02.py \u2b58StopwatchApp \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Stop \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 00:00:00.00 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Stop \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2586\u2586 Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 00:00:00.00 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0 </p> <p>The elements of the stopwatch application are there. The buttons are clickable and you can scroll the container but it doesn't look like the sketch. This is because we have yet to apply any styles to our new widgets.</p>"},{"location":"tutorial/#writing-textual-css","title":"Writing Textual CSS","text":"<p>Every widget has a <code>styles</code> object with a number of attributes that impact how the widget will appear. Here's how you might set white text and a blue background for a widget:</p> <pre><code>self.styles.background = \"blue\"\nself.styles.color = \"white\"\n</code></pre> <p>While it's possible to set all styles for an app this way, it is rarely necessary. Textual has support for CSS (Cascading Style Sheets), a technology used by web browsers. CSS files are data files loaded by your app which contain information about styles to apply to your widgets.</p> <p>Info</p> <p>The dialect of CSS used in Textual is greatly simplified over web based CSS and much easier to learn.</p> <p>CSS makes it easy to iterate on the design of your app and enables live-editing \u2014 you can edit CSS and see the changes without restarting the app!</p> <p>Let's add a CSS file to our application.</p> stopwatch03.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.widgets import Button, Header, Footer, Static\nclass TimeDisplay(Static):\n\"\"\"A widget to display elapsed time.\"\"\"\nclass Stopwatch(Static):\n\"\"\"A stopwatch widget.\"\"\"\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets of a stopwatch.\"\"\"\nyield Button(\"Start\", id=\"start\", variant=\"success\")\nyield Button(\"Stop\", id=\"stop\", variant=\"error\")\nyield Button(\"Reset\", id=\"reset\")\nyield TimeDisplay(\"00:00:00.00\")\nclass StopwatchApp(App):\n\"\"\"A Textual app to manage stopwatches.\"\"\"\nCSS_PATH = \"stopwatch03.css\"\nBINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets for the app.\"\"\"\nyield Header()\nyield Footer()\nyield Container(Stopwatch(), Stopwatch(), Stopwatch())\ndef action_toggle_dark(self) -&gt; None:\n\"\"\"An action to toggle dark mode.\"\"\"\nself.dark = not self.dark\nif __name__ == \"__main__\":\napp = StopwatchApp()\napp.run()\n</code></pre> <p>Adding the <code>CSS_PATH</code> class variable tells Textual to load the following file when the app starts:</p> stopwatch03.css<pre><code>Stopwatch {\nlayout: horizontal;\nbackground: $boost;\nheight: 5;\nmargin: 1;\nmin-width: 50;\npadding: 1;\n}\nTimeDisplay {\ncontent-align: center middle;\ntext-opacity: 60%;\nheight: 3;\n}\nButton {\nwidth: 16;\n}\n#start {\ndock: left;\n}\n#stop {\ndock: left;\ndisplay: none;\n}\n#reset {\ndock: right;\n}\n</code></pre> <p>If we run the app now, it will look very different.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2770996054-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2770996054-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2770996054-r1 { fill: #c5c8c6 } .terminal-2770996054-r2 { fill: #e3e3e3 } .terminal-2770996054-r3 { fill: #e1e1e1 } .terminal-2770996054-r4 { fill: #7ae998 } .terminal-2770996054-r5 { fill: #454a50 } .terminal-2770996054-r6 { fill: #0a180e;font-weight: bold } .terminal-2770996054-r7 { fill: #969696 } .terminal-2770996054-r8 { fill: #e2e3e3;font-weight: bold } .terminal-2770996054-r9 { fill: #008139 } .terminal-2770996054-r10 { fill: #000000 } .terminal-2770996054-r11 { fill: #dde8f3;font-weight: bold } .terminal-2770996054-r12 { fill: #ddedf9 }      stopwatch03.py \u2b58StopwatchApp \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0 </p> <p>This app looks much more like our sketch. Let's look at how Textual uses <code>stopwatch03.css</code> to apply styles.</p>"},{"location":"tutorial/#css-basics","title":"CSS basics","text":"<p>CSS files contain a number of declaration blocks. Here's the first such block from <code>stopwatch03.css</code> again:</p> <pre><code>Stopwatch {\nlayout: horizontal;\nbackground: $boost;\nheight: 5;\nmargin: 1;\nmin-width: 50;\npadding: 1;\n}\n</code></pre> <p>The first line tells Textual that the styles should apply to the <code>Stopwatch</code> widget. The lines between the curly brackets contain the styles themselves.</p> <p>Here's how this CSS code changes how the <code>Stopwatch</code> widget is displayed.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1cXGlT40hcdTAwMTL93r/Cwe7Hdk3dR0dsbIChgaG5mqO7d2diQkjCViNbakvm8MT8901cdLBuY4xNm4lVXHUwMDEwgFVSVaoyX+XLrJT/fNdqrcV3obv2obXm3tqW7zlD62btfXL+2lx1MDAxZEZeMIAmmn6OgtHQTq/sxXFcdTAwMTh9+OWXvjW8cuPQt2xcdTAwMTdde9HI8qN45HhcdTAwMDGyg/4vXuz2o38nv1x1MDAwZqy++68w6DvxXHUwMDEwZYO0XceLg+H9WK7v9t1BXHUwMDFjQe//hc+t1p/p75x0Q9eOrUHXd9NcdTAwMWLSpkxAqWn57EEwSIVl2lAmqSaTXHUwMDBivGhcdTAwMTOGi11cdTAwMDdaL0FkN2tJTq2dnp9f9e6+XHUwMDFkn3S6t39cdTAwMDTc3/A+n5Fs1EvP90/iOz+VKlxu4GGytihcdTAwMWVcdTAwMDZX7lx1MDAxN8+Je9BKSueb7lx1MDAxYVx1MDAwNqNub+BGUeGeILRsL75LXHUwMDFlXHUwMDAxT07ez8CHVnbmNtGPYVxia2Y0Z0pMWpJbKedI6tzJe0k6gVx1MDAwZjNcdTAwMGaS/Fx1MDAwM6dHJsuFZV91QaCBk11ju1x1MDAwZXes7Jqbh+dcdTAwMTNSXCKlXHUwMDE0K4zac71uL06eXHUwMDA0Y6RcdTAwMDVcdTAwMTGS5kZ301knQjMpucTZ0yZjhrtOalx1MDAwML+X561nXHLDh/lZi5JcdTAwMGY5eVx1MDAxM1G3ytaTt6CcZte35eHhVd+7PenwvcOtTVx1MDAxYfI7PemrYG7WcFx1MDAxONysTVr+ej+tX+6PO0c3jjP6KK4x2dbtsO9/nK3fh/+yR1x1MDAxZYWOdW+bREpstMBCKqon7b43uILGwcj3s3OBfZWZ87ucwM+Dkc5ZWlx0RtxgsDBlzMwwuvtyvNUxu+3di+3401x1MDAxZnGwuf7Ht7ufXHQjMMgncMQwQ0pcdTAwMTglXHUwMDBiRpviSGJkuGCEvlxmSlx1MDAxY9tYqCqUiMRVXHUwMDA0SVlcdTAwMDFOYlx1MDAxMExhXCJeXHUwMDE3OJ/Wncue27fV2fZ3ur9zfni8e3xbb+Cxe1x1MDAxYs+Km7fSbeHq97NcdTAwMGX480BekDOHb0VcdTAwMWHxTYQgRlx1MDAxMDm7m5w+y0V89yy7N1x1MDAxYbqrgHDdhHBNXHUwMDExfznC46E1iEJrXGKoqkG5qEE5ZVx1MDAxNZRrwjHhkpvFo3yRNpjpOlx1MDAxOMQn3jiZbopcdTAwMGJnP1p9z78rqCs1TpD0JLaGcX4uI1x1MDAxN4ZMbVFcdTAwMTUuXve9bmK9azY8hDssXHUwMDE4duxcdTAwMDGdnFxc0PdcdTAwMWMn79lskMCCPoe7s3ikYOh1vYHln1x1MDAxNlx1MDAwNJzfm0rcjDaMqVx1MDAxNJRjNTPcLs87R+2D/e92XHUwMDE0nV7zL52rbXbo/VxcuKmn0MaNQkZcdTAwMDHPM1x1MDAxNV6qXHUwMDA0opRcdTAwMTZhuHi4MUTKmJ7gjlx0VFwizFx1MDAwZvCTXHUwMDAyXFwsl2pcdOib5rV+dH6cXHUwMDFkdunBRnggo1x1MDAwM1x1MDAxNq7v8976y53hW+n2KVx1MDAxZls/4Or5WMFcdTAwMWFDUVx1MDAwMlx1MDAxZZZJxujsTnb6NK8m6lx1MDAwNaZNqNdcdTAwMDQpwkuoWzTqOauCvcbJYlxmfIfklfE3dLJcdTAwMTh/SH9QcUaX7mqf8FZlV5tcdTAwMTdzfodrXHUwMDE4aYKe5FxcUaPV7OEricfHwaX+KI6v8d5Fe+ey2zXj1Vx1MDAwZV8lwKs2XHQkKVLSvDx6bUpcdTAwMDTVR6+6XHUwMDAyOVx1MDAwMUJcdTAwMTBDc2B8XHUwMDE1z0rWnWM2tP2uPmLYXHUwMDFm71njz/b+y13gW+n2Kc9aP+CM0r6h1FeTx9Y5XHUwMDE2Xs56UWokZSYz2CeXjanaW9GoWGpZv3BoYOlcdTAwMGJYOFx1MDAxNlx1MDAxMlx1MDAxNFx1MDAxM1xylFxcSP639tef3ch93aD4XHQ/V/bU91x1MDAwMs6FM66a42HKhKKEPiNcdTAwMWW2zU1b3vw63tzZMfZG2P66fbHprzrQXGZcdTAwMDeKU0DTPcxcZjLLpMSS1yCsXHUwMDEy91JcdTAwMDIqXHUwMDEwS/HOq1x1MDAwMzDRSvBcdTAwMTTVQ0zPXHSxOFxim/BVeJAymFx1MDAxZYWZXG6ne7dZhycjmvBkXGZcdTAwMTVKUj473Y10ZH23w/Obs30pdLBcdTAwMWZcdTAwMWSNembl4URcZlLlLFKKKGNcdTAwMTCBSSAv3PqciiqMuMa8sLs6QVx1MDAxNzdIXHUwMDBiUWx8hFx1MDAxOWaYXHUwMDAzrVx1MDAxMOr5OEule22cRUlcdTAwMWV0w1x1MDAxYjjeoFu+xVx1MDAxZDhcci2+XHUwMDE1xZ2g3/diXHUwMDEw4yjwXHUwMDA2cfmKtN/1xLp7rlXBXG70nG8rwyBMeiwy/+y/VmYn6YfJ/7+/r726XVVlejqnxayLd/m/z1x1MDAwNq0gsnx24lx1MDAwNDnmXHUwMDFjQD17dijY2/xOPlx1MDAwZa797e/H7lx1MDAwMVx1MDAxZrEtvi9XXHUwMDFmtFx1MDAxMqlyYcB9mYNB8PzLXHUwMDA1LUEwXHUwMDAwVlxuw+iSwu9MXHUwMDFkXHUwMDE5eDGSxIBFSNA+OMVcblx1MDAxNWVcZtyk0PPsz/xcdTAwMWbBS0Fws1qTo6zQZ4I5pVx1MDAwNzVYXHUwMDA2XCLXiGUjTFLjwmaPXHUwMDFjN1x1MDAxONk4wieCXW73Ozf/6Vx1MDAxZI5D/9eVXHUwMDA3M2BWYGZwxVx1MDAwM3OJsJRcdTAwMWMvc4OHYlx1MDAxOFxc6drtXHUwMDFkaCqJNUn8ck3BQH5cdTAwMDZ6syHfXHUwMDFhelx1MDAwYm1cdTAwMGKFblWJ6W2P6ltcdTAwMTBWqWDls1x1MDAxM6wqaSSsXHUwMDBms5Nlucv3jszh7fru4W7Q+1witkbOsVp9qCqkyphI/a6AoJSWyvhcdTAwMTZcdTAwMGVVXc0kZVitYJRcdTAwMDBDVtrIn8CR/4/R6tU12ivdN1x1MDAxMzin7t5wzctnXHUwMDFmXHUwMDExXG5KMYxqPXt2SG/g/tG+/Wn75uLzKNZb23a3c7lghDpW1HNcdTAwMTdcblGqXHUwMDE04qounqVcdTAwMDKxUqy58CRcdTAwMTGmSJQ9dlbNy1xmwmkoxE16ZLp4wKzB2Fx1MDAxME3wK5cmjkPdXHUwMDFi75OvO9+Ogo2wz3bUOs/yl1x1MDAwNfN7Vk3v5rfo6sw56O7cee3DXHUwMDFk7VxcR6eDzkI3Np6z0EyFVVPCleJGRIGaKFdS5lJIT0Fqz1x1MDAxY+3fnlx1MDAwZsbHwUdcdTAwMGKf7nb2TmPHWX1IXHUwMDE5jYypqUVcdTAwMDBTRcvmp0SaKpJqXHUwMDE4qVx1MDAxNNhQxl+7qvdcdTAwMDXQedrEXHRXOleJsey8bi9cdTAwMTh64yTz6rd86y5cdTAwMTg1bKI0ZHh997KIoMXkd6tCTcVxY9JcYqazXHTIUlx0joUms7vG6VpfUfLKXHJDtFxcOZTealx1MDAwNDIk2T9cdTAwMDKUU86XXGJmXCKRllx1MDAxNKxcdTAwMWGEXHUwMDAxXHUwMDBiVzVlRlx1MDAxODFcdTAwMDJOklx1MDAwMFHSXHUwMDFhlJKLMbNcbn5cdTAwMDFNks2xjflcdTAwMDJmXHUwMDBif2hun3V+ZpstI4/vbO3OQLhS/NqjRMo2QVx1MDAxY+bAMIk1T4xX69xVXStMXHUwMDE3bcRcZuOCXGJcZvpcdTAwMTaPMeDEYVx1MDAxNyn1i0VcIohpLFx1MDAxNVx1MDAxM1RcYqXAlOolXHUwMDEyXHUwMDE4KyEhguKYU1qR6U2ly1x1MDAxYW05OdpVM34m0W9kJKaxQkthTohiz4jCXHUwMDBmgzuLO9H19Zfx3bmOzm6xOdtb9YWMXG6NOOGVIJxcdTAwMTODhC5cdTAwMTckL3xcdMvcxDQ+wiTRmC2l1OLtUO6X8Vx1MDAxMdKyXd9v9a0hMIJV4FwiRYHm4yHCNFZKUaqowvRcdTAwMTn57unaXlH4MspcdTAwMTBcdTAwMTdcXFx1MDAwMThcZqBVZo97XHUwMDBmYoJMeU940SBcdTAwMTZcdTAwMThcdTAwMTGpXHUwMDE0JlxuYnFw6zU0hHOEy0n5XHS2qZFJwDFHlccqZNaanP10Z5DnXHUwMDFmXHUwMDE4USog8FOCJb48tyE78fZcbt1cdTAwMDeMS+ZcdTAwMWSJmzWGcCY1XHUwMDA1i6EsK3+aiMKQJIroXHUwMDFhWd5cdTAwMTLfaLTZ5GjnzHVBPIOr5p05iLUhYlJ69pUq+Fx1MDAxNG6ffu13Tva2NsdfutxcYra56GTiwlcqxVx1MDAxNYI4Q1x1MDAxNXbT00VcbrgswWTJb15l8z9ZlUQ1zS+VTjbTzStcdTAwMTONpVx1MDAxNi1cdTAwMTPK8/tcdTAwMTavRDRCy0mWpd9cdTAwMDZWqqbWxSiOg0F9nVsuLfM6dW5PyDhcdTAwMWZcdTAwMTkxZlxuxjlOtPGMctLpJrGiXHUwMDE411hcdTAwMDPfMIIkO9qGq6yXezai0XJLt2lcdTAwMTLLY82ESjhPUvJQRb1cdTAwMDRcdTAwMTEhklx1MDAxMFx1MDAxOEiRVEbWZD8hxKRGiVfOiCQwXUQ1TVx1MDAxM1xymO41ioxcdTAwMDRzoaRkQlx1MDAwYkY1XHUwMDE1mVwiJzyAYFx1MDAwNLOcaHM+UjL9S22K0lx1MDAwMLflSmtsYIJcdTAwMTRhplwiXGb4a5pcdTAwMDSIoDdGMVx1MDAxM287XHUwMDE50m4247S5YsFcdTAwMGJcIimUNpdcdTAwMDKSpEZUMzX7XHUwMDAy5l9dbv+wP5newa72+1x1MDAxZsVmcOZcZld9XHUwMDAx41x1MDAxYdh4qfIgXbpcdTAwMThFklx1MDAxMrzUqniiamr/qiRFY2U0qP+VX1r7XHUwMDE2fVxyZW/zx+2FP+j9uNnvXHUwMDBl+782fInJXHUwMDFjXHUwMDFjXHUwMDA1rF3OlVx1MDAwZZ6Lo2SaadmJan5cdTAwMWJ4UeufoTVw/baTfIfYoE1Wg6nMJOl8fIU0v2ZcdTAwMDZol8IwIWZPfk43j1x1MDAxNYW7kFx1MDAwMtWAnXK03C+CkM1lgkai0pfBTF5WNVx1MDAxMDlcdTAwMDGFfGVaMjcyZ6Ql0/1EiZZcYsW0Tt7M4lx1MDAwMmtMeO6yx0xcdLjGNGk9nZa82cLiiukkR3tiNU1U4N1Dh2tWXHUwMDE4nsSg4olGwIo852FcdTAwMDXNnmrt2nNvNmpeub5Mj2TJSWc2XHUwMDAxtps8259/vfvrf4F0XHUwMDFiRyJ9        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Cascadia.woff2\");       }      Start00:00:00.00Reset5 lineshorizontal layout1 cell margin1 cell paddingaround buttonsbackground coloris $panel-darken-1 <ul> <li><code>layout: horizontal</code> aligns child widgets horizontally from left to right.</li> <li><code>background: $boost</code> sets the background color to <code>$boost</code>. The <code>$</code> prefix picks a pre-defined color from the builtin theme. There are other ways to specify colors such as <code>\"blue\"</code> or <code>rgb(20,46,210)</code>.</li> <li><code>height: 5</code> sets the height of our widget to 5 lines of text.</li> <li><code>margin: 1</code> sets a margin of 1 cell around the <code>Stopwatch</code> widget to create a little space between widgets in the list.</li> <li><code>min-width: 50</code> sets the minimum width of our widget to 50 cells.</li> <li><code>padding: 1</code> sets a padding of 1 cell around the child widgets.</li> </ul> <p>Here's the rest of <code>stopwatch03.css</code> which contains further declaration blocks:</p> <pre><code>TimeDisplay {\ncontent-align: center middle;\nopacity: 60%;\nheight: 3;\n}\nButton {\nwidth: 16;\n}\n#start {\ndock: left;\n}\n#stop {\ndock: left;\ndisplay: none;\n}\n#reset {\ndock: right;\n}\n</code></pre> <p>The <code>TimeDisplay</code> block aligns text to the center (<code>content-align</code>), fades it slightly (<code>opacity</code>), and sets its height (<code>height</code>) to 3 lines.</p> <p>The <code>Button</code> block sets the width (<code>width</code>) of buttons to 16 cells (character widths).</p> <p>The last 3 blocks have a slightly different format. When the declaration begins with a <code>#</code> then the styles will be applied to widgets with a matching \"id\" attribute. We've set an ID on the <code>Button</code> widgets we yielded in <code>compose</code>. For instance the first button has <code>id=\"start\"</code> which matches <code>#start</code> in the CSS.</p> <p>The buttons have a <code>dock</code> style which aligns the widget to a given edge. The start and stop buttons are docked to the left edge, while the reset button is docked to the right edge.</p> <p>You may have noticed that the stop button (<code>#stop</code> in the CSS) has <code>display: none;</code>. This tells Textual to not show the button. We do this because we don't want to display the stop button when the timer is not running. Similarly, we don't want to show the start button when the timer is running. We will cover how to manage such dynamic user interfaces in the next section.</p>"},{"location":"tutorial/#dynamic-css","title":"Dynamic CSS","text":"<p>We want our <code>Stopwatch</code> widget to have two states: a default state with a Start and Reset button; and a started state with a Stop button. When a stopwatch is started it should also have a green background and bold text.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nNVaa1PiSFx1MDAxNP3ur7CYr5rp98OqrS1fOO4oXCLq6ri1ZYWkIZFAMFx0XHUwMDAzOOV/305wJYFEXHUwMDEwXHUwMDExXHUwMDE5Synp7vS96b6nz+nb/Wtjc7NcdTAwMTRccruqtLNZUlx1MDAwM8v0XFw7MPulrbj8p1xuQtfv6CqUfFx1MDAwZv1eYCUtnSjqhjtfv7bNoKWirmdayvjphj3TXHUwMDBio57t+oblt7+6kWqHf8afXHUwMDE1s63+6PptO1xujLGRbWW7kVx1MDAxZoxsKU+1VSdcbnXv/+jvm5u/ks+Ud4GyXCKz0/RU8kBSNXZcdTAwMTBTNlla8TuJs1x1MDAxMENcdTAwMDExxlx1MDAwMr20cMNcdTAwMDNtL1K2rm5on9W4Ji4qoW23o/reoSjzk6FPh+JQXHUwMDBl62OzXHLX8y6ioZe4XHUwMDE1+vptxnVhXHUwMDE0+C117dqRXHUwMDEz254oL3oq8HtNp6PCMPOM3zUtN1x1MDAxYcZlXHUwMDAwvJSOxmBnc1xcMohniFx1MDAwMlx1MDAwM0GJ9GtcbojoS138NELSoIhiXHRYqmbk0b7v6SnQXHUwMDFlfVx1MDAwMcnP2Ke6abWa2rGOPW5DgFx1MDAwNShcdTAwMWa36T+/J2XIwJJQnDbtKLfpRCPvXHJcdTAwMGVcdTAwMDVP2VbJ2ENcdTAwMDRcdTAwMDRHXHUwMDEwkfHUxFx1MDAxNrvHdlx1MDAxMlx1MDAwN/9Ojp5jXHUwMDA23edRKoXxl5S3saOHk0GUXHUwMDBlpNT87pFcdTAwMTCE/UFj96T5sCtxXHUwMDEz/+Wdf3/pK1x1MDAxM3VmXHUwMDEw+P3SS83T839j13pd21x1MDAxY0VcdTAwMTJkXGZxyKCk+u+l3nM7LV3Z6XneuMy3WuPgS0qftlx1MDAxNoh6wkFh1EtcdTAwMGUklZSLuaM+qNTR7vZcdL4/sitn1UrtR3hb21vzqGfAkFx1MDAwMFx0jFx1MDAwMJ6KekJcclx1MDAwMlx1MDAxOYD0vVHfMDV60HTU686ng52xqSiHUlxuXHUwMDAyQGqyVlx1MDAxMuWHu4d30VEzVJWWffvQOFx1MDAwNPBuu5dcdTAwMWblkVx1MDAxYUSpIN/K7zbTemteg5+HnYyfXHUwMDE5siBFsEFcYnKs10syN2peXHUwMDFm5SxqXHUwMDFj03J6gVpcdTAwMDfc0GLcMGbIZeAmXG7MTtg1XHUwMDAzXHUwMDFkqznYoTnYQXhcbjtSYqqdoWL52FlmXHUwMDFjjufb70RcdTAwMTfuY1x1MDAxMksgU1o22643zExZXHUwMDEyoNrTi8hPO2qGSltMVnGeabvruc04gEuWflx1MDAwN1x1MDAxNWRiO3K1rnpp0HZtO81cdTAwMTmWdsDUfVx1MDAwNsfzLPV+4Dbdjuldpv1bnKZQ6jUmaUpALUpcdTAwMDCZX5v1XHUwMDBlr1x1MDAwM+fS/SZJvyo6dXl601x1MDAxMt/Wm6VcYqVcdTAwMDaEnHHNxlNoo9JcdTAwMDBcdTAwMTJyyTL6aFx1MDAxMZZKfvKQhlxySIq0XHUwMDE51lx1MDAwYoEgOEebMY6JXlxiXHRbPvJeY63WXfPQbLdcdTAwMWQk78hjXHUwMDE5n4fSuyrQZsthrXyD68dakMhCXHUwMDE0SUxcdTAwMDSjLKUwZsHo9WFeU9pcIlruXHUwMDE1XHUwMDAySVNcdTAwMWFcdTAwMTV4MpiXTVtcdTAwMDRPY2iatqhcdTAwMDZcdTAwMWRcdTAwMTP4I7CzPqxcdTAwMDXATvJrZFx1MDAwN/TDyWtcdTAwMDZcdTAwMDNMklfazcU5jMvirVx1MDAxNlx1MDAxMZzogYfzi0bYP6uehFF9t7ZrXHUwMDFmPJRZ11xu67X1JjGGpcFFNoVcdTAwMTA/uc1cclx1MDAxZOlUvlx1MDAxM3VfLGVcdTAwMTPbnHeTJSZcdTAwMTHHXHUwMDA0xVxcolXvsS49//6x45fvavVqZ7/Svq5W9uvvYavfq9tZ3Jpv8Fxy3Eo5kzKlXHUwMDBlP4hbXHUwMDE5K1aoVCAuxVx1MDAxYsD9+iivKbUyQnLhXHKJISAj781cdTAwMWMuZy9IuVx1MDAxNrJcdTAwMWN/XHUwMDAwxpdcdTAwMTmB72PVmlxuVbRSPp1BRpN8OnJwcSalQFx1MDAxNGGNx0hcdTAwMTNcZr9cdTAwMDFrXHUwMDAz+O3+7j4kofqhRexpMPjR3f5MXCLFcyXqqeSMTjEpgsYyXHUwMDA0bCGVUsZcZs71ti5tIJOlXHUwMDE3dFwi6/N/nlx1MDAxZSMtcEBqXHUwMDExXFyJno1XXHUwMDFl+Fx1MDAwNuQtXHUwMDFllIyjoqDEXHUwMDE4MoTwXHUwMDFiUlx1MDAxNOft87NK1ynT/burRlx1MDAxN3lcdTAwMTXsW0frre6SRDqmlGTSXHUwMDEwSVTG26qJNOEyj47mTaJTXHUwMDBl9NKPwYrTXHUwMDExe41WebD7/Vie3J62L09cdTAwMDfgxqyU36/EfpduZ1x0vHyD6yfwaHHKX6+4klxuXCLnz528PsprKvCSlH8uwqGuWEJcdTAwMDJyXHUwMDE5XHUwMDEyXHUwMDBmaX2nXaFopYmTVUu8i8hcZlYr8WYw0nS+P3ZwcTYlpJBNIcNcdTAwMTJLXHUwMDFkb/NrvL9r29fSqdVOq4KU/dtcdTAwMDPn4LzZ/FxcuPG5Uv5cdTAwMTTg6VxylTCYpO9l01x1MDAxOVhbLOFPmdB2Kf6Ao7bXOOvCeri+8/f/dlx1MDAwNvXHq+F5w2pcdTAwMGWCo/dT4e/S7SyGzTe4flxmi3nhXHIsxiiIz3Hnh/zro7ymkI9cdTAwMGYnciGvXHRcdTAwMTZ+KLnOdyghpN5eM/BcdTAwMTH4Xlx1MDAxZm79rEOJXHUwMDE5JLXwoURcdTAwMTHcXGIovsNCMJGI0vlcdTAwMDXtzZk68Fx1MDAxYex+31x1MDAxOYKa1+Ku6Fx1MDAwNnTdXHUwMDA1LYlcdTAwMTMpOVlcdTAwMTQujUmVu3TAXHUwMDAxlFx1MDAwM7hpRiWAUckkXm3aXHUwMDA0QcRTm+pVXFxe6ZuR5eTjTeTjzVON6Fx1MDAxNbRlLsRkoZZ5kbybKiNnXHUwMDE2Qlx1MDAxNS1GXHUwMDE1RHqXKKVEb4BVs/5Ar1x1MDAxYSdcdTAwMDdu9fjspkrCI+ZcdTAwMDRrXHUwMDBmK6hcdTAwMTUqZtn7usmjnFx1MDAxOIxcIvyx5+tcdTAwMTLOhSwmXHUwMDEwkECI1e1cdTAwMTOJ5jLGqcSrRJbehil7czGEzWS0xTE26dZcYmtcdTAwMWLPKrRkdru6TVx1MDAxNDs3Qp6eXHUwMDFj135+/XHXpZ+u6u9cdTAwMTXfZNp4xm9cZlx1MDAxNFx1MDAxNU/Nr6eNp/9cdTAwMDDD6SGzIn0=        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      Stop00:00:00.00ResetStart00:00:00.00StopwatchStarted Stopwatch <p>We can accomplish this with a CSS class. Not to be confused with a Python class, a CSS class is like a tag you can add to a widget to modify its styles.</p> <p>Here's the new CSS:</p> stopwatch04.css<pre><code>Stopwatch {\nlayout: horizontal;\nbackground: $boost;\nheight: 5;\nmargin: 1;\nmin-width: 50;\npadding: 1;\n}\nTimeDisplay {\ncontent-align: center middle;\ntext-opacity: 60%;\nheight: 3;\n}\nButton {\nwidth: 16;\n}\n#start {\ndock: left;\n}\n#stop {\ndock: left;\ndisplay: none;\n}\n#reset {\ndock: right;\n}\n.started {\ntext-style: bold;\nbackground: $success;\ncolor: $text;\n}\n.started TimeDisplay {\ntext-opacity: 100%;\n}\n.started #start {\ndisplay: none\n}\n.started #stop {\ndisplay: block\n}\n.started #reset {\nvisibility: hidden\n}\n</code></pre> <p>These new rules are prefixed with <code>.started</code>. The <code>.</code> indicates that <code>.started</code> refers to a CSS class called \"started\". The new styles will be applied only to widgets that have this CSS class.</p> <p>Some of the new styles have more than one selector separated by a space. The space indicates that the rule should match the second selector if it is a child of the first. Let's look at one of these styles:</p> <pre><code>.started #start {\ndisplay: none\n}\n</code></pre> <p>The <code>.started</code> selector matches any widget with a <code>\"started\"</code> CSS class. While <code>#start</code> matches a child widget with an ID of <code>\"start\"</code>. So it matches the Start button only for Stopwatches in a started state.</p> <p>The rule is <code>\"display: none\"</code> which tells Textual to hide the button.</p>"},{"location":"tutorial/#manipulating-classes","title":"Manipulating classes","text":"<p>Modifying a widget's CSS classes is a convenient way to update visuals without introducing a lot of messy display related code.</p> <p>You can add and remove CSS classes with the add_class() and remove_class() methods. We will use these methods to connect the started state to the Start / Stop buttons.</p> <p>The following code will start or stop the stopwatches in response to clicking a button.</p> stopwatch04.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.widgets import Button, Header, Footer, Static\nclass TimeDisplay(Static):\n\"\"\"A widget to display elapsed time.\"\"\"\nclass Stopwatch(Static):\n\"\"\"A stopwatch widget.\"\"\"\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\n\"\"\"Event handler called when a button is pressed.\"\"\"\nif event.button.id == \"start\":\nself.add_class(\"started\")\nelif event.button.id == \"stop\":\nself.remove_class(\"started\")\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets of a stopwatch.\"\"\"\nyield Button(\"Start\", id=\"start\", variant=\"success\")\nyield Button(\"Stop\", id=\"stop\", variant=\"error\")\nyield Button(\"Reset\", id=\"reset\")\nyield TimeDisplay(\"00:00:00.00\")\nclass StopwatchApp(App):\n\"\"\"A Textual app to manage stopwatches.\"\"\"\nCSS_PATH = \"stopwatch04.css\"\nBINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets for the app.\"\"\"\nyield Header()\nyield Footer()\nyield Container(Stopwatch(), Stopwatch(), Stopwatch())\ndef action_toggle_dark(self) -&gt; None:\n\"\"\"An action to toggle dark mode.\"\"\"\nself.dark = not self.dark\nif __name__ == \"__main__\":\napp = StopwatchApp()\napp.run()\n</code></pre> <p>The <code>on_button_pressed</code> method is an event handler. Event handlers are methods called by Textual in response to an event such as a key press, mouse click, etc. Event handlers begin with <code>on_</code> followed by the name of the event they will handle. Hence <code>on_button_pressed</code> will handle the button pressed event.</p> <p>If you run <code>stopwatch04.py</code> now you will be able to toggle between the two states by clicking the first button:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3424103241-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3424103241-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3424103241-r1 { fill: #c5c8c6 } .terminal-3424103241-r2 { fill: #e3e3e3 } .terminal-3424103241-r3 { fill: #e1e1e1 } .terminal-3424103241-r4 { fill: #7ae998 } .terminal-3424103241-r5 { fill: #454a50 } .terminal-3424103241-r6 { fill: #0a180e;font-weight: bold } .terminal-3424103241-r7 { fill: #969696 } .terminal-3424103241-r8 { fill: #e2e3e3;font-weight: bold } .terminal-3424103241-r9 { fill: #008139 } .terminal-3424103241-r10 { fill: #000000 } .terminal-3424103241-r11 { fill: #e76580 } .terminal-3424103241-r12 { fill: #f5e5e9;font-weight: bold } .terminal-3424103241-r13 { fill: #780028 } .terminal-3424103241-r14 { fill: #dde8f3;font-weight: bold } .terminal-3424103241-r15 { fill: #ddedf9 }      stopwatch04.py \u2b58StopwatchApp \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Stop00:00:00.00 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0 </p>"},{"location":"tutorial/#reactive-attributes","title":"Reactive attributes","text":"<p>A recurring theme in Textual is that you rarely need to explicitly update a widget. It is possible: you can call refresh() to display new data. However, Textual prefers to do this automatically via reactive attributes.</p> <p>You can declare a reactive attribute with reactive. Let's use this feature to create a timer that displays elapsed time and keeps it updated.</p> stopwatch05.py<pre><code>from time import monotonic\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.reactive import reactive\nfrom textual.widgets import Button, Header, Footer, Static\nclass TimeDisplay(Static):\n\"\"\"A widget to display elapsed time.\"\"\"\nstart_time = reactive(monotonic)\ntime = reactive(0.0)\ndef on_mount(self) -&gt; None:\n\"\"\"Event handler called when widget is added to the app.\"\"\"\nself.set_interval(1 / 60, self.update_time)\ndef update_time(self) -&gt; None:\n\"\"\"Method to update the time to the current time.\"\"\"\nself.time = monotonic() - self.start_time\ndef watch_time(self, time: float) -&gt; None:\n\"\"\"Called when the time attribute changes.\"\"\"\nminutes, seconds = divmod(time, 60)\nhours, minutes = divmod(minutes, 60)\nself.update(f\"{hours:02,.0f}:{minutes:02.0f}:{seconds:05.2f}\")\nclass Stopwatch(Static):\n\"\"\"A stopwatch widget.\"\"\"\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\n\"\"\"Event handler called when a button is pressed.\"\"\"\nif event.button.id == \"start\":\nself.add_class(\"started\")\nelif event.button.id == \"stop\":\nself.remove_class(\"started\")\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets of a stopwatch.\"\"\"\nyield Button(\"Start\", id=\"start\", variant=\"success\")\nyield Button(\"Stop\", id=\"stop\", variant=\"error\")\nyield Button(\"Reset\", id=\"reset\")\nyield TimeDisplay()\nclass StopwatchApp(App):\n\"\"\"A Textual app to manage stopwatches.\"\"\"\nCSS_PATH = \"stopwatch04.css\"\nBINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets for the app.\"\"\"\nyield Header()\nyield Footer()\nyield Container(Stopwatch(), Stopwatch(), Stopwatch())\ndef action_toggle_dark(self) -&gt; None:\n\"\"\"An action to toggle dark mode.\"\"\"\nself.dark = not self.dark\nif __name__ == \"__main__\":\napp = StopwatchApp()\napp.run()\n</code></pre> <p>We have added two reactive attributes: <code>start_time</code> will contain the time in seconds when the stopwatch was started, and <code>time</code> will contain the time to be displayed on the <code>Stopwatch</code>.</p> <p>Both attributes will be available on <code>self</code> as if you had assigned them in <code>__init__</code>. If you write to either of these attributes the widget will update automatically.</p> <p>Info</p> <p>The <code>monotonic</code> function in this example is imported from the standard library <code>time</code> module. It is similar to <code>time.time</code> but won't go backwards if the system clock is changed.</p> <p>The first argument to <code>reactive</code> may be a default value or a callable that returns the default value. The default for <code>start_time</code> is <code>monotonic</code>. When <code>TimeDisplay</code> is added to the app, the <code>start_time</code> attribute will be set to the result of <code>monotonic()</code>.</p> <p>The <code>time</code> attribute has a simple float as the default value, so <code>self.time</code> will be <code>0</code> on start.</p> <p>The <code>on_mount</code> method is an event handler called when the widget is first added to the application (or mounted). In this method we call set_interval() to create a timer which calls <code>self.update_time</code> sixty times a second. This <code>update_time</code> method calculates the time elapsed since the widget started and assigns it to <code>self.time</code>. Which brings us to one of Reactive's super-powers.</p> <p>If you implement a method that begins with <code>watch_</code> followed by the name of a reactive attribute (making it a watch method), that method will be called when the attribute is modified.</p> <p>Because <code>watch_time</code> watches the <code>time</code> attribute, when we update <code>self.time</code> 60 times a second we also implicitly call <code>watch_time</code> which converts the elapsed time in to a string and updates the widget with a call to <code>self.update</code>.</p> <p>The end result is that the <code>Stopwatch</code> widgets show the time elapsed since the widget was created:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-519375755-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-519375755-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-519375755-r1 { fill: #c5c8c6 } .terminal-519375755-r2 { fill: #e3e3e3 } .terminal-519375755-r3 { fill: #e1e1e1 } .terminal-519375755-r4 { fill: #7ae998 } .terminal-519375755-r5 { fill: #454a50 } .terminal-519375755-r6 { fill: #0a180e;font-weight: bold } .terminal-519375755-r7 { fill: #969696 } .terminal-519375755-r8 { fill: #e2e3e3;font-weight: bold } .terminal-519375755-r9 { fill: #008139 } .terminal-519375755-r10 { fill: #000000 } .terminal-519375755-r11 { fill: #dde8f3;font-weight: bold } .terminal-519375755-r12 { fill: #ddedf9 }      stopwatch05.py \u2b58StopwatchApp \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:01.97Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:01.97Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:01.97Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0 </p> <p>We've seen how we can update widgets with a timer, but we still need to wire up the buttons so we can operate stopwatches independently.</p>"},{"location":"tutorial/#wiring-buttons","title":"Wiring buttons","text":"<p>We need to be able to start, stop, and reset each stopwatch independently. We can do this by adding a few more methods to the <code>TimeDisplay</code> class.</p> stopwatch06.py<pre><code>from time import monotonic\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.reactive import reactive\nfrom textual.widgets import Button, Header, Footer, Static\nclass TimeDisplay(Static):\n\"\"\"A widget to display elapsed time.\"\"\"\nstart_time = reactive(monotonic)\ntime = reactive(0.0)\ntotal = reactive(0.0)\ndef on_mount(self) -&gt; None:\n\"\"\"Event handler called when widget is added to the app.\"\"\"\nself.update_timer = self.set_interval(1 / 60, self.update_time, pause=True)\ndef update_time(self) -&gt; None:\n\"\"\"Method to update time to current.\"\"\"\nself.time = self.total + (monotonic() - self.start_time)\ndef watch_time(self, time: float) -&gt; None:\n\"\"\"Called when the time attribute changes.\"\"\"\nminutes, seconds = divmod(time, 60)\nhours, minutes = divmod(minutes, 60)\nself.update(f\"{hours:02,.0f}:{minutes:02.0f}:{seconds:05.2f}\")\ndef start(self) -&gt; None:\n\"\"\"Method to start (or resume) time updating.\"\"\"\nself.start_time = monotonic()\nself.update_timer.resume()\ndef stop(self) -&gt; None:\n\"\"\"Method to stop the time display updating.\"\"\"\nself.update_timer.pause()\nself.total += monotonic() - self.start_time\nself.time = self.total\ndef reset(self) -&gt; None:\n\"\"\"Method to reset the time display to zero.\"\"\"\nself.total = 0\nself.time = 0\nclass Stopwatch(Static):\n\"\"\"A stopwatch widget.\"\"\"\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\n\"\"\"Event handler called when a button is pressed.\"\"\"\nbutton_id = event.button.id\ntime_display = self.query_one(TimeDisplay)\nif button_id == \"start\":\ntime_display.start()\nself.add_class(\"started\")\nelif button_id == \"stop\":\ntime_display.stop()\nself.remove_class(\"started\")\nelif button_id == \"reset\":\ntime_display.reset()\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets of a stopwatch.\"\"\"\nyield Button(\"Start\", id=\"start\", variant=\"success\")\nyield Button(\"Stop\", id=\"stop\", variant=\"error\")\nyield Button(\"Reset\", id=\"reset\")\nyield TimeDisplay()\nclass StopwatchApp(App):\n\"\"\"A Textual app to manage stopwatches.\"\"\"\nCSS_PATH = \"stopwatch04.css\"\nBINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Called to add widgets to the app.\"\"\"\nyield Header()\nyield Footer()\nyield Container(Stopwatch(), Stopwatch(), Stopwatch())\ndef action_toggle_dark(self) -&gt; None:\n\"\"\"An action to toggle dark mode.\"\"\"\nself.dark = not self.dark\nif __name__ == \"__main__\":\napp = StopwatchApp()\napp.run()\n</code></pre> <p>Here's a summary of the changes made to <code>TimeDisplay</code>.</p> <ul> <li>We've added a <code>total</code> reactive attribute to store the total time elapsed between clicking the start and stop buttons.</li> <li>The call to <code>set_interval</code> has grown a <code>pause=True</code> argument which starts the timer in pause mode (when a timer is paused it won't run until resume() is called). This is because we don't want the time to update until the user hits the start button.</li> <li>The <code>update_time</code> method now adds <code>total</code> to the current time to account for the time between any previous clicks of the start and stop buttons.</li> <li>We've stored the result of <code>set_interval</code> which returns a Timer object. We will use this later to resume the timer when we start the Stopwatch.</li> <li>We've added <code>start()</code>, <code>stop()</code>, and <code>reset()</code> methods.</li> </ul> <p>In addition, the <code>on_button_pressed</code> method on <code>Stopwatch</code> has grown some code to manage the time display when the user clicks a button. Let's look at that in detail:</p> <pre><code>    def on_button_pressed(self, event: Button.Pressed) -&gt; None:\n\"\"\"Event handler called when a button is pressed.\"\"\"\nbutton_id = event.button.id\ntime_display = self.query_one(TimeDisplay)\nif button_id == \"start\":\ntime_display.start()\nself.add_class(\"started\")\nelif button_id == \"stop\":\ntime_display.stop()\nself.remove_class(\"started\")\nelif button_id == \"reset\":\ntime_display.reset()\n</code></pre> <p>This code supplies missing features and makes our app useful. We've made the following changes.</p> <ul> <li>The first line retrieves <code>id</code> attribute of the button that was pressed. We can use this to decide what to do in response.</li> <li>The second line calls <code>query_one</code> to get a reference to the <code>TimeDisplay</code> widget.</li> <li>We call the method on <code>TimeDisplay</code> that matches the pressed button.</li> <li>We add the <code>\"started\"</code> class when the Stopwatch is started (<code>self.add_class(\"started\")</code>), and remove it (<code>self.remove_class(\"started\")</code>) when it is stopped. This will update the Stopwatch visuals via CSS.</li> </ul> <p>If you run <code>stopwatch06.py</code> you will be able to use the stopwatches independently.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2715162776-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2715162776-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2715162776-r1 { fill: #c5c8c6 } .terminal-2715162776-r2 { fill: #e3e3e3 } .terminal-2715162776-r3 { fill: #e1e1e1 } .terminal-2715162776-r4 { fill: #166d39 } .terminal-2715162776-r5 { fill: #454a50 } .terminal-2715162776-r6 { fill: #3c8b54;font-weight: bold } .terminal-2715162776-r7 { fill: #969696 } .terminal-2715162776-r8 { fill: #e2e3e3;font-weight: bold } .terminal-2715162776-r9 { fill: #5aa86f } .terminal-2715162776-r10 { fill: #000000 } .terminal-2715162776-r11 { fill: #7ae998 } .terminal-2715162776-r12 { fill: #0a180e;font-weight: bold } .terminal-2715162776-r13 { fill: #008139 } .terminal-2715162776-r14 { fill: #dde8f3;font-weight: bold } .terminal-2715162776-r15 { fill: #ddedf9 }      stopwatch06.py \u2b58StopwatchApp \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.15Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0 </p> <p>The only remaining feature of the Stopwatch app left to implement is the ability to add and remove stopwatches.</p>"},{"location":"tutorial/#dynamic-widgets","title":"Dynamic widgets","text":"<p>The Stopwatch app creates widgets when it starts via the <code>compose</code> method. We will also need to create new widgets while the app is running, and remove widgets we no longer need. We can do this by calling mount() to add a widget, and remove() to remove a widget.</p> <p>Let's use these methods to implement adding and removing stopwatches to our app.</p> stopwatch.py<pre><code>from time import monotonic\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.reactive import reactive\nfrom textual.widgets import Button, Header, Footer, Static\nclass TimeDisplay(Static):\n\"\"\"A widget to display elapsed time.\"\"\"\nstart_time = reactive(monotonic)\ntime = reactive(0.0)\ntotal = reactive(0.0)\ndef on_mount(self) -&gt; None:\n\"\"\"Event handler called when widget is added to the app.\"\"\"\nself.update_timer = self.set_interval(1 / 60, self.update_time, pause=True)\ndef update_time(self) -&gt; None:\n\"\"\"Method to update time to current.\"\"\"\nself.time = self.total + (monotonic() - self.start_time)\ndef watch_time(self, time: float) -&gt; None:\n\"\"\"Called when the time attribute changes.\"\"\"\nminutes, seconds = divmod(time, 60)\nhours, minutes = divmod(minutes, 60)\nself.update(f\"{hours:02,.0f}:{minutes:02.0f}:{seconds:05.2f}\")\ndef start(self) -&gt; None:\n\"\"\"Method to start (or resume) time updating.\"\"\"\nself.start_time = monotonic()\nself.update_timer.resume()\ndef stop(self):\n\"\"\"Method to stop the time display updating.\"\"\"\nself.update_timer.pause()\nself.total += monotonic() - self.start_time\nself.time = self.total\ndef reset(self):\n\"\"\"Method to reset the time display to zero.\"\"\"\nself.total = 0\nself.time = 0\nclass Stopwatch(Static):\n\"\"\"A stopwatch widget.\"\"\"\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\n\"\"\"Event handler called when a button is pressed.\"\"\"\nbutton_id = event.button.id\ntime_display = self.query_one(TimeDisplay)\nif button_id == \"start\":\ntime_display.start()\nself.add_class(\"started\")\nelif button_id == \"stop\":\ntime_display.stop()\nself.remove_class(\"started\")\nelif button_id == \"reset\":\ntime_display.reset()\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Create child widgets of a stopwatch.\"\"\"\nyield Button(\"Start\", id=\"start\", variant=\"success\")\nyield Button(\"Stop\", id=\"stop\", variant=\"error\")\nyield Button(\"Reset\", id=\"reset\")\nyield TimeDisplay()\nclass StopwatchApp(App):\n\"\"\"A Textual app to manage stopwatches.\"\"\"\nCSS_PATH = \"stopwatch.css\"\nBINDINGS = [\n(\"d\", \"toggle_dark\", \"Toggle dark mode\"),\n(\"a\", \"add_stopwatch\", \"Add\"),\n(\"r\", \"remove_stopwatch\", \"Remove\"),\n]\ndef compose(self) -&gt; ComposeResult:\n\"\"\"Called to add widgets to the app.\"\"\"\nyield Header()\nyield Footer()\nyield Container(Stopwatch(), Stopwatch(), Stopwatch(), id=\"timers\")\ndef action_add_stopwatch(self) -&gt; None:\n\"\"\"An action to add a timer.\"\"\"\nnew_stopwatch = Stopwatch()\nself.query_one(\"#timers\").mount(new_stopwatch)\nnew_stopwatch.scroll_visible()\ndef action_remove_stopwatch(self) -&gt; None:\n\"\"\"Called to remove a timer.\"\"\"\ntimers = self.query(\"Stopwatch\")\nif timers:\ntimers.last().remove()\ndef action_toggle_dark(self) -&gt; None:\n\"\"\"An action to toggle dark mode.\"\"\"\nself.dark = not self.dark\nif __name__ == \"__main__\":\napp = StopwatchApp()\napp.run()\n</code></pre> <p>Here's a summary of the changes:</p> <ul> <li>The <code>Container</code> object in <code>StopWatchApp</code> grew a <code>\"timers\"</code> ID.</li> <li>Added <code>action_add_stopwatch</code> to add a new stopwatch.</li> <li>Added <code>action_remove_stopwatch</code> to remove a stopwatch.</li> <li>Added keybindings for the actions.</li> </ul> <p>The <code>action_add_stopwatch</code> method creates and mounts a new stopwatch. Note the call to query_one() with a CSS selector of <code>\"#timers\"</code> which gets the timer's container via its ID. Once mounted, the new Stopwatch will appear in the terminal. That last line in <code>action_add_stopwatch</code> calls scroll_visible() which will scroll the container to make the new <code>Stopwatch</code> visible (if required).</p> <p>The <code>action_remove_stopwatch</code> function calls query() with a CSS selector of <code>\"Stopwatch\"</code> which gets all the <code>Stopwatch</code> widgets. If there are stopwatches then the action calls last() to get the last stopwatch, and remove() to remove it.</p> <p>If you run <code>stopwatch.py</code> now you can add a new stopwatch with the A key and remove a stopwatch with R.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1492394847-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1492394847-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1492394847-r1 { fill: #c5c8c6 } .terminal-1492394847-r2 { fill: #1e1e1e } .terminal-1492394847-r3 { fill: #1f1f1f } .terminal-1492394847-r4 { fill: #e76580 } .terminal-1492394847-r5 { fill: #f5e5e9;font-weight: bold } .terminal-1492394847-r6 { fill: #0a180e;font-weight: bold } .terminal-1492394847-r7 { fill: #780028 } .terminal-1492394847-r8 { fill: #7ae998 } .terminal-1492394847-r9 { fill: #ffffff } .terminal-1492394847-r10 { fill: #707070 } .terminal-1492394847-r11 { fill: #1c1d1e;font-weight: bold } .terminal-1492394847-r12 { fill: #008139 } .terminal-1492394847-r13 { fill: #9ea4a9 } .terminal-1492394847-r14 { fill: #dde8f3;font-weight: bold } .terminal-1492394847-r15 { fill: #ddedf9 }      StopwatchApp \u2b58StopwatchApp \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Stop00:00:05.03 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Start00:00:00.00Reset \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0\u00a0A\u00a0\u00a0Add\u00a0\u00a0R\u00a0\u00a0Remove\u00a0 </p>"},{"location":"tutorial/#what-next","title":"What next?","text":"<p>Congratulations on building your first Textual application! This tutorial has covered a lot of ground. If you are the type that prefers to learn a framework by coding, feel free. You could tweak <code>stopwatch.py</code> or look through the examples.</p> <p>Read the guide for the full details on how to build sophisticated TUI applications with Textual.</p>"},{"location":"widget_gallery/","title":"Widgets","text":"<p>Welcome to the Textual widget gallery.</p> <p>We have many more widgets planned, or you can build your own.</p> <p>Info</p> <p>Textual is a TUI framework. Everything below runs in the terminal.</p>"},{"location":"widget_gallery/#button","title":"Button","text":"<p>A simple button with a variety of semantic styles.</p> <p>Button reference</p> <p> ButtonsApp Standard\u00a0ButtonsDisabled\u00a0Buttons \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 DefaultDefault \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Primary!Primary! \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Success!Success! \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Warning!Warning! \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Error!Error! \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p>"},{"location":"widget_gallery/#checkbox","title":"Checkbox","text":"<p>A classic checkbox control.</p> <p>Checkbox reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2118990000-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2118990000-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2118990000-r1 { fill: #e1e1e1 } .terminal-2118990000-r2 { fill: #c5c8c6 } .terminal-2118990000-r3 { fill: #004578 } .terminal-2118990000-r4 { fill: #42464b } .terminal-2118990000-r5 { fill: #24292f;font-weight: bold } .terminal-2118990000-r6 { fill: #e2e3e3 } .terminal-2118990000-r7 { fill: #e2e3e3;font-weight: bold } .terminal-2118990000-r8 { fill: #98729f } .terminal-2118990000-r9 { fill: #4ebf71;font-weight: bold } .terminal-2118990000-r10 { fill: #565a5e } .terminal-2118990000-r11 { fill: #e2e3e3;text-decoration: underline; }      CheckboxApp \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502 \u2502\u2502 \u2502\u2590X\u258cArrakis\u00a0\ud83d\ude13\u2502 \u2502\u2590X\u258cCaladan\u2502 \u2502\u2590X\u258cChusuk\u2502 \u2502\u2590X\u258cGiedi\u00a0Prime\u2502 \u2502\u2590X\u258cGinaz\u2502 \u2502\u2590X\u258cGrumman\u2502 \u2502\u2590X\u258cKaitain\u2502 \u2502\u2590X\u258cNovebruns\u2502 \u2502\u2502 \u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p>"},{"location":"widget_gallery/#contentswitcher","title":"ContentSwitcher","text":"<p>A widget for containing and switching display between multiple child widgets.</p> <p>ContentSwitcher reference</p>"},{"location":"widget_gallery/#datatable","title":"DataTable","text":"<p>A powerful data table, with configurable cursors.</p> <p>DataTable reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-383448697-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-383448697-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-383448697-r1 { fill: #dde6ed;font-weight: bold } .terminal-383448697-r2 { fill: #dde6ed } .terminal-383448697-r3 { fill: #c5c8c6 } .terminal-383448697-r4 { fill: #211505 } .terminal-383448697-r5 { fill: #e1e1e1 }      TableApp \u00a0lane\u00a0\u00a0swimmer\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0country\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time\u00a0\u00a0 \u00a04\u00a0\u00a0\u00a0\u00a0\u00a0Joseph\u00a0Schooling\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Singapore\u00a0\u00a0\u00a0\u00a0\u00a0\u00a050.39\u00a0 \u00a02\u00a0\u00a0\u00a0\u00a0\u00a0Michael\u00a0Phelps\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0United\u00a0States\u00a0\u00a051.14\u00a0 \u00a05\u00a0\u00a0\u00a0\u00a0\u00a0Chad\u00a0le\u00a0Clos\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0South\u00a0Africa\u00a0\u00a0\u00a051.14\u00a0 \u00a06\u00a0\u00a0\u00a0\u00a0\u00a0L\u00e1szl\u00f3\u00a0Cseh\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Hungary\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a051.14\u00a0 \u00a03\u00a0\u00a0\u00a0\u00a0\u00a0Li\u00a0Zhuhao\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0China\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a051.26\u00a0 \u00a08\u00a0\u00a0\u00a0\u00a0\u00a0Mehdy\u00a0Metella\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0France\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a051.58\u00a0 \u00a07\u00a0\u00a0\u00a0\u00a0\u00a0Tom\u00a0Shields\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0United\u00a0States\u00a0\u00a051.73\u00a0 \u00a01\u00a0\u00a0\u00a0\u00a0\u00a0Aleksandr\u00a0Sadovnikov\u00a0\u00a0Russia\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a051.84\u00a0 \u00a010\u00a0\u00a0\u00a0\u00a0Darren\u00a0Burns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Scotland\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a051.84\u00a0 </p>"},{"location":"widget_gallery/#directorytree","title":"DirectoryTree","text":"<p>A tree view of files and folders.</p> <p>DirectoryTree reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2696175273-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2696175273-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2696175273-r1 { fill: #e2e3e3 } .terminal-2696175273-r2 { fill: #1a1000;font-weight: bold } .terminal-2696175273-r3 { fill: #c5c8c6 } .terminal-2696175273-r4 { fill: #008139 } .terminal-2696175273-r5 { fill: #919497;font-weight: bold } .terminal-2696175273-r6 { fill: #e2e3e3;font-weight: bold } .terminal-2696175273-r7 { fill: #14191f } .terminal-2696175273-r8 { fill: #919497;font-style: italic; }      DirectoryTreeApp \ud83d\udcc2\u00a0./ \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0.faq \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0.git \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0.github \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0.ipynb_checkpoints \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0.mypy_cache \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0.pytest_cache \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0.screenshot_cache \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0.vscode \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0__pycache__ \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0dist \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0docs \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0examples \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0imgs\u2587\u2587 \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0notes \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0questions \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0reference \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0sandbox \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0site \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0src \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0tests \u251c\u2500\u2500\u00a0\ud83d\udcc1\u00a0tools \u251c\u2500\u2500\u00a0\ud83d\udcc4\u00a0.coverage \u251c\u2500\u2500\u00a0\ud83d\udcc4\u00a0.coveragerc </p>"},{"location":"widget_gallery/#footer","title":"Footer","text":"<p>A footer to display and interact with key bindings.</p> <p>Footer reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-77658860-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-77658860-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-77658860-r1 { fill: #e1e1e1 } .terminal-77658860-r2 { fill: #c5c8c6 } .terminal-77658860-r3 { fill: #dde8f3;font-weight: bold } .terminal-77658860-r4 { fill: #ddedf9 }      FooterApp \u00a0Q\u00a0\u00a0Quit\u00a0the\u00a0app\u00a0\u00a0?\u00a0\u00a0Show\u00a0help\u00a0screen\u00a0\u00a0DELETE\u00a0\u00a0Delete\u00a0the\u00a0thing\u00a0 </p>"},{"location":"widget_gallery/#header","title":"Header","text":"<p>A header to display the app's title and subtitle.</p> <p>Header reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2909041558-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2909041558-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2909041558-r1 { fill: #c5c8c6 } .terminal-2909041558-r2 { fill: #e3e3e3 } .terminal-2909041558-r3 { fill: #e1e1e1 }      HeaderApp \u2b58HeaderApp </p>"},{"location":"widget_gallery/#input","title":"Input","text":"<p>A control to enter text.</p> <p>Input reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-952536214-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-952536214-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-952536214-r1 { fill: #1e1e1e } .terminal-952536214-r2 { fill: #0178d4 } .terminal-952536214-r3 { fill: #c5c8c6 } .terminal-952536214-r4 { fill: #e2e2e2 } .terminal-952536214-r5 { fill: #121212 } .terminal-952536214-r6 { fill: #787878 } .terminal-952536214-r7 { fill: #e1e1e1 }      InputApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258aDarren\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258aLast\u00a0Name\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p>"},{"location":"widget_gallery/#label","title":"Label","text":"<p>A simple text label.</p> <p>Label reference</p>"},{"location":"widget_gallery/#listview","title":"ListView","text":"<p>Display a list of items (items may be other widgets).</p> <p>ListView reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1585045600-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1585045600-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1585045600-r1 { fill: #e1e1e1 } .terminal-1585045600-r2 { fill: #c5c8c6 } .terminal-1585045600-r3 { fill: #dfe7ed } .terminal-1585045600-r4 { fill: #e4e5e6 } .terminal-1585045600-r5 { fill: #ddedf9 }      ListViewExample One Two Three </p>"},{"location":"widget_gallery/#loadingindicator","title":"LoadingIndicator","text":"<p>Display an animation while data is loading.</p> <p>LoadingIndicator reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3238413778-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3238413778-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3238413778-r1 { fill: #c5c8c6 } .terminal-3238413778-r2 { fill: #3f90ef } .terminal-3238413778-r3 { fill: #1a2833 } .terminal-3238413778-r4 { fill: #182e3e } .terminal-3238413778-r5 { fill: #153750 } .terminal-3238413778-r6 { fill: #11436a }      LoadingApp \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0\u25cf\u00a0\u25cf </p>"},{"location":"widget_gallery/#markdownviewer","title":"MarkdownViewer","text":"<p>Display and interact with a Markdown document (adds a table of contents and browser-like navigation to Markdown).</p> <p>MarkdownViewer reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3725584237-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3725584237-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3725584237-r1 { fill: #c5c8c6 } .terminal-3725584237-r2 { fill: #24292f } .terminal-3725584237-r3 { fill: #121212 } .terminal-3725584237-r4 { fill: #e1e1e1 } .terminal-3725584237-r5 { fill: #e2e3e3 } .terminal-3725584237-r6 { fill: #96989b } .terminal-3725584237-r7 { fill: #0053aa } .terminal-3725584237-r8 { fill: #008139 } .terminal-3725584237-r9 { fill: #dde8f3;font-weight: bold } .terminal-3725584237-r10 { fill: #939393;font-weight: bold } .terminal-3725584237-r11 { fill: #e2e3e3;font-weight: bold } .terminal-3725584237-r12 { fill: #4ebf71;font-weight: bold } .terminal-3725584237-r13 { fill: #e1e1e1;font-style: italic; } .terminal-3725584237-r14 { fill: #e1e1e1;font-weight: bold } .terminal-3725584237-r15 { fill: #dde6ed;font-weight: bold } .terminal-3725584237-r16 { fill: #dde6ed } .terminal-3725584237-r17 { fill: #e1e2e3 } .terminal-3725584237-r18 { fill: #919599;font-weight: bold } .terminal-3725584237-r19 { fill: #14191f }      MarkdownExampleApp \u258b\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u25bc\u00a0\u2160\u00a0Markdown\u00a0Viewer\u258b\u258e\u258b \u251c\u2500\u2500\u00a0\u2161\u00a0Features\u258b\u258eMarkdown\u00a0Viewer\u258b \u251c\u2500\u2500\u00a0\u2161\u00a0Tables\u258b\u258e\u258b \u2514\u2500\u2500\u00a0\u2161\u00a0Code\u00a0Blocks\u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u258bThis\u00a0is\u00a0an\u00a0example\u00a0of\u00a0Textual's\u00a0MarkdownViewer\u00a0widget. \u258b \u258b\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258b\u258e\u258b \u258b\u258eFeatures\u258b \u258b\u258e\u258b \u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u258bMarkdown\u00a0syntax\u00a0and\u00a0extensions\u00a0are\u00a0supported. \u258b \u258b\u25cf\u00a0Typography\u00a0emphasis,\u00a0strong,\u00a0inline\u00a0code\u00a0etc. \u258b\u25cf\u00a0Headers \u258b\u25cf\u00a0Lists\u00a0(bullet\u00a0and\u00a0ordered) \u258b\u25cf\u00a0Syntax\u00a0highlighted\u00a0code\u00a0blocks \u258b\u25cf\u00a0Tables! \u258b \u258b\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258b\u258e\u258b \u258b\u258eTables\u258b \u258b\u258e\u258b \u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u258bTables\u00a0are\u00a0displayed\u00a0in\u00a0a\u00a0DataTable\u00a0widget. \u258b \u258b\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type\u00a0\u00a0Default\u00a0\u00a0Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u258bshow_headerboolTrue\u00a0Show\u00a0the\u00a0table\u00a0header\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u258bfixed_rowsint0\u00a0Number\u00a0of\u00a0fixed\u00a0rows\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u258bfixed_columnsint0\u00a0Number\u00a0of\u00a0fixed\u00a0columns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u258bzebra_stripesboolFalse\u00a0Display\u00a0alternating\u00a0colors\u00a0on\u00a0rows\u00a0 \u258bheader_heightint1\u00a0Height\u00a0of\u00a0header\u00a0row\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2582\u2582 \u258bshow_cursorboolTrue\u00a0Show\u00a0a\u00a0cell\u00a0cursor\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u258b \u258b\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258b\u258e\u258b \u258b\u258eCode\u00a0Blocks\u258b \u258b\u258e\u258b \u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u258bCode\u00a0blocks\u00a0are\u00a0syntax\u00a0highlighted,\u00a0with\u00a0guidelines. \u258b </p>"},{"location":"widget_gallery/#markdown","title":"Markdown","text":"<p>Display a markdown document.</p> <p>Markdown reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-4078770422-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-4078770422-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-4078770422-r1 { fill: #e1e1e1 } .terminal-4078770422-r2 { fill: #121212 } .terminal-4078770422-r3 { fill: #c5c8c6 } .terminal-4078770422-r4 { fill: #0053aa } .terminal-4078770422-r5 { fill: #dde8f3;font-weight: bold } .terminal-4078770422-r6 { fill: #939393;font-weight: bold } .terminal-4078770422-r7 { fill: #24292f } .terminal-4078770422-r8 { fill: #e2e3e3;font-weight: bold } .terminal-4078770422-r9 { fill: #4ebf71;font-weight: bold } .terminal-4078770422-r10 { fill: #e1e1e1;font-style: italic; } .terminal-4078770422-r11 { fill: #e1e1e1;font-weight: bold }      MarkdownExampleApp \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258e\u258b \u258eMarkdown\u00a0Document\u258b \u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 This\u00a0is\u00a0an\u00a0example\u00a0of\u00a0Textual's\u00a0Markdown\u00a0widget. \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258e\u258b \u258eFeatures\u258b \u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Markdown\u00a0syntax\u00a0and\u00a0extensions\u00a0are\u00a0supported. \u25cf\u00a0Typography\u00a0emphasis,\u00a0strong,\u00a0inline\u00a0code\u00a0etc. \u25cf\u00a0Headers \u25cf\u00a0Lists\u00a0(bullet\u00a0and\u00a0ordered) \u25cf\u00a0Syntax\u00a0highlighted\u00a0code\u00a0blocks \u25cf\u00a0Tables! </p>"},{"location":"widget_gallery/#placeholder","title":"Placeholder","text":"<p>Display placeholder content while you are designing a UI.</p> <p>Placeholder reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1570661136-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1570661136-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1570661136-r1 { fill: #c5c8c6 } .terminal-1570661136-r2 { fill: #eae3e5 } .terminal-1570661136-r3 { fill: #e8e0e7 } .terminal-1570661136-r4 { fill: #efe9e4 } .terminal-1570661136-r5 { fill: #ede6e6 } .terminal-1570661136-r6 { fill: #efeedf } .terminal-1570661136-r7 { fill: #e9eee5 } .terminal-1570661136-r8 { fill: #e2edeb } .terminal-1570661136-r9 { fill: #e4eee8;font-weight: bold } .terminal-1570661136-r10 { fill: #dfebed;font-weight: bold } .terminal-1570661136-r11 { fill: #dfe9ed } .terminal-1570661136-r12 { fill: #e3e6eb;font-weight: bold } .terminal-1570661136-r13 { fill: #e6e3e9 }      PlaceholderApp Placeholder\u00a0p2\u00a0here! This\u00a0is\u00a0a\u00a0custom\u00a0label\u00a0for\u00a0p1. #p4 #p3#p5Placeholde r Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0 26\u00a0x\u00a06amet,\u00a0consectetur\u00a027\u00a0x\u00a06 adipiscing\u00a0elit.\u00a0Etiam\u00a0 feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0 Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0amet,\u00a0 consectetur\u00a0adipiscing\u00a0elit.\u00a0Etiam\u00a040\u00a0x\u00a06 feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0accumsan.\u00a0 Suspendisse\u00a0bibendum\u00a0nec\u00a0libero\u00a0quis\u00a0 gravida.\u00a0Phasellus\u00a0id\u00a0eleifend\u00a0ligula. Nullam\u00a0imperdiet\u00a0sem\u00a0tellus,\u00a0sed\u00a0 vehicula\u00a0nisl\u00a0faucibus\u00a0sit\u00a0amet.\u00a0Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0amet,\u00a0 Praesent\u00a0iaculis\u00a0tempor\u00a0ultricies.\u00a0Sedconsectetur\u00a0adipiscing\u00a0elit.\u00a0Etiam\u00a0 lacinia,\u00a0tellus\u00a0id\u00a0rutrum\u00a0lacinia,\u00a0feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0accumsan.\u00a0 sapien\u00a0sapien\u00a0congue\u00a0mauris,\u00a0sit\u00a0amet\u00a0Suspendisse\u00a0bibendum\u00a0nec\u00a0libero\u00a0quis\u00a0 </p>"},{"location":"widget_gallery/#radiobutton","title":"RadioButton","text":"<p>A simple radio button.</p> <p>RadioButton reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1209678307-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1209678307-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1209678307-r1 { fill: #e1e1e1 } .terminal-1209678307-r2 { fill: #c5c8c6 } .terminal-1209678307-r3 { fill: #666666 } .terminal-1209678307-r4 { fill: #3d3d3d } .terminal-1209678307-r5 { fill: #1e1e1e;font-weight: bold } .terminal-1209678307-r6 { fill: #515151 } .terminal-1209678307-r7 { fill: #e1e1e1;text-decoration: underline; } .terminal-1209678307-r8 { fill: #4ebf71;font-weight: bold }      RadioChoicesApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2590\u25cf\u258cBattlestar\u00a0Galactica\u2502 \u2502\u2590\u25cf\u258cDune\u00a01984\u2502 \u2502\u2590\u25cf\u258cDune\u00a02021\u2502 \u2502\u2590\u25cf\u258cSerenity\u2502 \u2502\u2590\u25cf\u258cStar\u00a0Trek:\u00a0The\u00a0Motion\u00a0Picture\u2502 \u2502\u2590\u25cf\u258cStar\u00a0Wars:\u00a0A\u00a0New\u00a0Hope\u2502 \u2502\u2590\u25cf\u258cThe\u00a0Last\u00a0Starfighter\u2502 \u2502\u2590\u25cf\u258cTotal\u00a0Recall\u00a0\ud83d\udc49\u00a0\ud83d\udd34\u2502 \u2502\u2590\u25cf\u258cWing\u00a0Commander\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p>"},{"location":"widget_gallery/#radioset","title":"RadioSet","text":"<p>A collection of radio buttons, that enforces uniqueness.</p> <p>RadioSet reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-4238820762-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-4238820762-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-4238820762-r1 { fill: #e1e1e1 } .terminal-4238820762-r2 { fill: #c5c8c6 } .terminal-4238820762-r3 { fill: #666666 } .terminal-4238820762-r4 { fill: #3d3d3d } .terminal-4238820762-r5 { fill: #1e1e1e;font-weight: bold } .terminal-4238820762-r6 { fill: #4ebf71;font-weight: bold } .terminal-4238820762-r7 { fill: #cc555a;font-weight: bold;font-style: italic; } .terminal-4238820762-r8 { fill: #515151 } .terminal-4238820762-r9 { fill: #e1e1e1;text-decoration: underline; }      RadioChoicesApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2590\u25cf\u258cBattlestar\u00a0Galactica\u2502\u2502\u2590\u25cf\u258cAmanda\u2502 \u2502\u2590\u25cf\u258cDune\u00a01984\u2502\u2502\u2590\u25cf\u258cConnor\u00a0MacLeod\u2502 \u2502\u2590\u25cf\u258cDune\u00a02021\u2502\u2502\u2590\u25cf\u258cDuncan\u00a0MacLeod\u2502 \u2502\u2590\u25cf\u258cSerenity\u2502\u2502\u2590\u25cf\u258cHeather\u00a0MacLeod\u2502 \u2502\u2590\u25cf\u258cStar\u00a0Trek:\u00a0The\u00a0Motion\u00a0Picture\u2502\u2502\u2590\u25cf\u258cJoe\u00a0Dawson\u2502 \u2502\u2590\u25cf\u258cStar\u00a0Wars:\u00a0A\u00a0New\u00a0Hope\u2502\u2502\u2590\u25cf\u258cKurgan,\u00a0The\u2502 \u2502\u2590\u25cf\u258cThe\u00a0Last\u00a0Starfighter\u2502\u2502\u2590\u25cf\u258cMethos\u2502 \u2502\u2590\u25cf\u258cTotal\u00a0Recall\u00a0\ud83d\udc49\u00a0\ud83d\udd34\u2502\u2502\u2590\u25cf\u258cRachel\u00a0Ellenstein\u2502 \u2502\u2590\u25cf\u258cWing\u00a0Commander\u2502\u2502\u2590\u25cf\u258cRam\u00edrez\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p>"},{"location":"widget_gallery/#static","title":"Static","text":"<p>Displays simple static content. Typically used as a base class.</p> <p>Static reference</p>"},{"location":"widget_gallery/#switch","title":"Switch","text":"<p>A on / off control, inspired by toggle buttons.</p> <p>Switch reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1593024266-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1593024266-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1593024266-r1 { fill: #e1e1e1 } .terminal-1593024266-r2 { fill: #c5c8c6 } .terminal-1593024266-r3 { fill: #e1e1e1;font-weight: bold } .terminal-1593024266-r4 { fill: #1e1e1e } .terminal-1593024266-r5 { fill: #e2e3e3 } .terminal-1593024266-r6 { fill: #0178d4 } .terminal-1593024266-r7 { fill: #e3e8e8 }      SwitchApp Example\u00a0switches \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e off:\u00a0\u00a0\u00a0\u00a0\u00a0\u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e on:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e focused:\u00a0\u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e custom:\u00a0\u00a0\u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p>"},{"location":"widget_gallery/#tabs","title":"Tabs","text":"<p>A row of tabs you can select with the mouse or navigate with keys.</p> <p>Tabs reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-62649237-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-62649237-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-62649237-r1 { fill: #c5c8c6 } .terminal-62649237-r2 { fill: #737373 } .terminal-62649237-r3 { fill: #e1e1e1;font-weight: bold } .terminal-62649237-r4 { fill: #474747 } .terminal-62649237-r5 { fill: #0178d4 } .terminal-62649237-r6 { fill: #e1e1e1 } .terminal-62649237-r7 { fill: #1e1e1e } .terminal-62649237-r8 { fill: #004578 } .terminal-62649237-r9 { fill: #e2e3e3 } .terminal-62649237-r10 { fill: #dde8f3;font-weight: bold } .terminal-62649237-r11 { fill: #ddedf9 }      TabsApp Paul\u00a0AtreidiesDuke\u00a0Leto\u00a0AtreidesLady\u00a0JessicaGurney\u00a0HalleckBaron\u00a0Vl \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u257a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258aLady\u00a0Jessica\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u00a0A\u00a0\u00a0Add\u00a0tab\u00a0\u00a0R\u00a0\u00a0Remove\u00a0active\u00a0tab\u00a0\u00a0C\u00a0\u00a0Clear\u00a0tabs\u00a0 </p>"},{"location":"widget_gallery/#textlog","title":"TextLog","text":"<p>Display and update text in a scrolling panel.</p> <p>TextLog reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1652636431-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1652636431-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1652636431-r1 { fill: #555346 } .terminal-1652636431-r2 { fill: #f8f8f2 } .terminal-1652636431-r3 { fill: #f92672 } .terminal-1652636431-r4 { fill: #e1e1e1 } .terminal-1652636431-r5 { fill: #c5c8c6 } .terminal-1652636431-r6 { fill: #66d9ef } .terminal-1652636431-r7 { fill: #a6e22e } .terminal-1652636431-r8 { fill: #23568b } .terminal-1652636431-r9 { fill: #e1e1e1;font-weight: bold } .terminal-1652636431-r10 { fill: #98729f;font-weight: bold } .terminal-1652636431-r11 { fill: #d0b344 } .terminal-1652636431-r12 { fill: #98a84b } .terminal-1652636431-r13 { fill: #00823d;font-style: italic; }      TextLogApp \u2502\u00a0\u00a0\u00a0\u2502\u00a0\u00a0\u00a0previous_value=next(iter_values) \u2502\u00a0\u00a0\u00a0exceptStopIteration: \u2502\u00a0\u00a0\u00a0\u2502\u00a0\u00a0\u00a0return \u2502\u00a0\u00a0\u00a0first=True\u2585\u2585 \u2502\u00a0\u00a0\u00a0forvalueiniter_values: \u2502\u00a0\u00a0\u00a0\u2502\u00a0\u00a0\u00a0yieldfirst,False,previous_value \u2502\u00a0\u00a0\u00a0\u2502\u00a0\u00a0\u00a0first=False \u2502\u00a0\u00a0\u00a0\u2502\u00a0\u00a0\u00a0previous_value=value \u2502\u00a0\u00a0\u00a0yieldfirst,True,previous_value \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503lane\u2503swimmer\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503country\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503time\u00a0\u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u25024\u00a0\u00a0\u00a0\u2502Joseph\u00a0Schooling\u00a0\u00a0\u00a0\u00a0\u2502Singapore\u00a0\u00a0\u00a0\u00a0\u250250.39\u2502 \u25022\u00a0\u00a0\u00a0\u2502Michael\u00a0Phelps\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502United\u00a0States\u250251.14\u2502 \u25025\u00a0\u00a0\u00a0\u2502Chad\u00a0le\u00a0Clos\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502South\u00a0Africa\u00a0\u250251.14\u2502 \u25026\u00a0\u00a0\u00a0\u2502L\u00e1szl\u00f3\u00a0Cseh\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502Hungary\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u250251.14\u2502 \u25023\u00a0\u00a0\u00a0\u2502Li\u00a0Zhuhao\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502China\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u250251.26\u2502 \u25028\u00a0\u00a0\u00a0\u2502Mehdy\u00a0Metella\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502France\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u250251.58\u2502 \u25027\u00a0\u00a0\u00a0\u2502Tom\u00a0Shields\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502United\u00a0States\u250251.73\u2502 \u25021\u00a0\u00a0\u00a0\u2502Aleksandr\u00a0Sadovnikov\u2502Russia\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u250251.84\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Write\u00a0text\u00a0or\u00a0any\u00a0Rich\u00a0renderable! Key(key='H',\u00a0character='H',\u00a0name='upper_h',\u00a0is_printable=True) Key(key='i',\u00a0character='i',\u00a0name='i',\u00a0is_printable=True) </p>"},{"location":"widget_gallery/#tree","title":"Tree","text":"<p>A tree control with expandable nodes.</p> <p>Tree reference</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1336653930-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1336653930-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1336653930-r1 { fill: #e2e3e3 } .terminal-1336653930-r2 { fill: #1a1000;font-weight: bold } .terminal-1336653930-r3 { fill: #c5c8c6 } .terminal-1336653930-r4 { fill: #008139 }      TreeApp \u25bc\u00a0Dune \u2514\u2500\u2500\u00a0\u25bc\u00a0Characters \u251c\u2500\u2500\u00a0Paul \u251c\u2500\u2500\u00a0Jessica \u2514\u2500\u2500\u00a0Chani </p>"},{"location":"api/","title":"API","text":"<p>This is a API-level reference to the Textual API. Click the links to your left (or in the burger menu) to open a reference for each module.</p> <p>If you are new to Textual, you may want to read the tutorial or guide first.</p>"},{"location":"api/app/","title":"App","text":""},{"location":"api/app/#textual.app","title":"<code>app</code>","text":""},{"location":"api/app/#textual.app.App","title":"<code>App</code>","text":"<p>         Bases: <code>Generic[ReturnType]</code>, <code>DOMNode</code></p> <p>The base class for Textual Applications.</p> <p>Parameters:</p> Name Type Description Default <code>driver_class</code> <code>Type[Driver] | None</code> <p>Driver class or <code>None</code> to auto-detect. Defaults to None.</p> <code>None</code> <code>css_path</code> <code>CSSPathType | None</code> <p>Path to CSS or <code>None</code> for no CSS file. Defaults to None. To load multiple CSS files, pass a list of strings or paths which will be loaded in order.</p> <code>None</code> <code>watch_css</code> <code>bool</code> <p>Watch CSS for changes. Defaults to False.</p> <code>False</code> <p>Raises:</p> Type Description <code>CssPathError</code> <p>When the supplied CSS path(s) are an unexpected type.</p>"},{"location":"api/app/#textual.app.App.CSS","title":"<code>CSS</code>  <code>class-attribute</code>","text":"<p>Inline CSS, useful for quick scripts. This is loaded after CSS_PATH, and therefore takes priority in the event of a specificity clash.</p>"},{"location":"api/app/#textual.app.App.SUB_TITLE","title":"<code>SUB_TITLE: str | None</code>  <code>class-attribute</code>","text":"<p>str | None: The default sub-title for the application.</p> <p>If set to a string, this sets the default sub-title for the application. See also the <code>sub_title</code> attribute.</p>"},{"location":"api/app/#textual.app.App.TITLE","title":"<code>TITLE: str | None</code>  <code>class-attribute</code>","text":"<p>str | None: The default title for the application.</p> <p>If set to a string, this sets the default title for the application. See also the <code>title</code> attribute.</p>"},{"location":"api/app/#textual.app.App.children","title":"<code>children: Sequence[Widget]</code>  <code>property</code>","text":"<p>A view on to the children which contains just the screen.</p>"},{"location":"api/app/#textual.app.App.debug","title":"<code>debug: bool</code>  <code>property</code>","text":""},{"location":"api/app/#textual.app.App.focused","title":"<code>focused: Widget | None</code>  <code>property</code>","text":"<p>Widget | None: the widget that is focused on the currently active screen.</p>"},{"location":"api/app/#textual.app.App.is_headless","title":"<code>is_headless: bool</code>  <code>property</code>","text":""},{"location":"api/app/#textual.app.App.log","title":"<code>log: Logger</code>  <code>property</code>","text":""},{"location":"api/app/#textual.app.App.namespace_bindings","title":"<code>namespace_bindings: dict[str, tuple[DOMNode, Binding]]</code>  <code>property</code>","text":"<p>Get current bindings. If no widget is focused, then the app-level bindings are returned. If a widget is focused, then any bindings present in the active screen and app are merged and returned.</p>"},{"location":"api/app/#textual.app.App.return_value","title":"<code>return_value: ReturnType | None</code>  <code>property</code>","text":"<p>ReturnType | None: The return type of the app.</p>"},{"location":"api/app/#textual.app.App.screen","title":"<code>screen: Screen</code>  <code>property</code>","text":"<p>Raises:</p> Type Description <code>ScreenStackError</code> <p>If there are no screens on the stack.</p>"},{"location":"api/app/#textual.app.App.screen_stack","title":"<code>screen_stack: list[Screen]</code>  <code>property</code>","text":"<p>list[Screen]: A copy of the screen stack.</p>"},{"location":"api/app/#textual.app.App.scroll_sensitivity_x","title":"<code>scroll_sensitivity_x: float</code>  <code>instance-attribute</code>","text":"<p>Number of columns to scroll in the X direction with wheel or trackpad.</p>"},{"location":"api/app/#textual.app.App.scroll_sensitivity_y","title":"<code>scroll_sensitivity_y: float</code>  <code>instance-attribute</code>","text":"<p>Number of lines to scroll in the Y direction with wheel or trackpad.</p>"},{"location":"api/app/#textual.app.App.size","title":"<code>size: Size</code>  <code>property</code>","text":""},{"location":"api/app/#textual.app.App.sub_title","title":"<code>sub_title</code>  <code>instance-attribute</code>","text":"<p>The sub-title for the application.</p> <p>The initial value in a running application will be that set in <code>SUB_TITLE</code> (if one is set). Assign new values to this instance attribute to change the sub-title.</p>"},{"location":"api/app/#textual.app.App.title","title":"<code>title</code>  <code>instance-attribute</code>","text":"<p>The title for the application.</p> <p>The initial value in a running application will be that set in <code>TITLE</code> (if one is set). Assign new values to this instance attribute to change the title.</p>"},{"location":"api/app/#textual.app.App.action_bell","title":"<code>action_bell()</code>  <code>async</code>","text":"<p>Play the terminal 'bell'.</p>"},{"location":"api/app/#textual.app.App.action_focus","title":"<code>action_focus(widget_id)</code>  <code>async</code>","text":"<p>Focus the given widget.</p> <p>Parameters:</p> Name Type Description Default <code>widget_id</code> <code>str</code> <p>ID of widget to focus.</p> required"},{"location":"api/app/#textual.app.App.action_focus_next","title":"<code>action_focus_next()</code>","text":"<p>Focus the next widget.</p>"},{"location":"api/app/#textual.app.App.action_focus_previous","title":"<code>action_focus_previous()</code>","text":"<p>Focus the previous widget.</p>"},{"location":"api/app/#textual.app.App.action_pop_screen","title":"<code>action_pop_screen()</code>  <code>async</code>","text":"<p>Removes the topmost screen and makes the new topmost screen active.</p>"},{"location":"api/app/#textual.app.App.action_push_screen","title":"<code>action_push_screen(screen)</code>  <code>async</code>","text":"<p>Pushes a screen on to the screen stack and makes it active.</p> <p>Parameters:</p> Name Type Description Default <code>screen</code> <code>str</code> <p>Name of the screen.</p> required"},{"location":"api/app/#textual.app.App.action_quit","title":"<code>action_quit()</code>  <code>async</code>","text":"<p>Quit the app as soon as possible.</p>"},{"location":"api/app/#textual.app.App.action_screenshot","title":"<code>action_screenshot(filename=None, path='./')</code>","text":"<p>Save an SVG \"screenshot\". This action will save an SVG file containing the current contents of the screen.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str | None</code> <p>Filename of screenshot, or None to auto-generate. Defaults to None.</p> <code>None</code> <code>path</code> <code>str</code> <p>Path to directory. Defaults to current working directory.</p> <code>'./'</code>"},{"location":"api/app/#textual.app.App.action_switch_screen","title":"<code>action_switch_screen(screen)</code>  <code>async</code>","text":"<p>Switches to another screen.</p> <p>Parameters:</p> Name Type Description Default <code>screen</code> <code>str</code> <p>Name of the screen.</p> required"},{"location":"api/app/#textual.app.App.action_toggle_dark","title":"<code>action_toggle_dark()</code>","text":"<p>Action to toggle dark mode.</p>"},{"location":"api/app/#textual.app.App.animate","title":"<code>animate(attribute, value, *, final_value=Ellipsis, duration=None, speed=None, delay=0.0, easing=DEFAULT_EASING, on_complete=None)</code>","text":"<p>Animate an attribute.</p> <p>Parameters:</p> Name Type Description Default <code>attribute</code> <code>str</code> <p>Name of the attribute to animate.</p> required <code>value</code> <code>float | Animatable</code> <p>The value to animate to.</p> required <code>final_value</code> <code>object</code> <p>The final value of the animation. Defaults to <code>value</code> if not set.</p> <code>Ellipsis</code> <code>duration</code> <code>float | None</code> <p>The duration of the animate. Defaults to None.</p> <code>None</code> <code>speed</code> <code>float | None</code> <p>The speed of the animation. Defaults to None.</p> <code>None</code> <code>delay</code> <code>float</code> <p>A delay (in seconds) before the animation starts. Defaults to 0.0.</p> <code>0.0</code> <code>easing</code> <code>EasingFunction | str</code> <p>An easing method. Defaults to \"in_out_cubic\".</p> <code>DEFAULT_EASING</code> <code>on_complete</code> <code>CallbackType | None</code> <p>A callable to invoke when the animation is finished. Defaults to None.</p> <code>None</code>"},{"location":"api/app/#textual.app.App.batch_update","title":"<code>batch_update()</code>","text":"<p>A context manager to suspend all repaints until the end of the batch.</p>"},{"location":"api/app/#textual.app.App.bell","title":"<code>bell()</code>","text":"<p>Play the console 'bell'.</p>"},{"location":"api/app/#textual.app.App.bind","title":"<code>bind(keys, action, *, description='', show=True, key_display=None)</code>","text":"<p>Bind a key to an action.</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>str</code> <p>A comma separated list of keys, i.e.</p> required <code>action</code> <code>str</code> <p>Action to bind to.</p> required <code>description</code> <code>str</code> <p>Short description of action. Defaults to \"\".</p> <code>''</code> <code>show</code> <code>bool</code> <p>Show key in UI. Defaults to True.</p> <code>True</code> <code>key_display</code> <code>str | None</code> <p>Replacement text for key, or None to use default. Defaults to None.</p> <code>None</code>"},{"location":"api/app/#textual.app.App.call_from_thread","title":"<code>call_from_thread(callback, *args, **kwargs)</code>","text":"<p>Run a callback from another thread.</p> <p>Like asyncio apps in general, Textual apps are not thread-safe. If you call methods or set attributes on Textual objects from a thread, you may get unpredictable results.</p> <p>This method will ensure that your code runs within the correct context.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[..., CallThreadReturnType | Awaitable[CallThreadReturnType]]</code> <p>A callable to run.</p> required <code>*args</code> <p>Arguments to the callback.</p> <code>()</code> <code>**kwargs</code> <p>Keyword arguments for the callback.</p> <code>{}</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the app isn't running or if this method is called from the same thread where the app is running.</p>"},{"location":"api/app/#textual.app.App.capture_mouse","title":"<code>capture_mouse(widget)</code>","text":"<p>Send all mouse events to the given widget, disable mouse capture.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget | None</code> <p>If a widget, capture mouse event, or None to end mouse capture.</p> required"},{"location":"api/app/#textual.app.App.check_bindings","title":"<code>check_bindings(key, priority=False)</code>  <code>async</code>","text":"<p>Handle a key press.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>A key.</p> required <code>priority</code> <code>bool</code> <p>If <code>True</code> check from <code>App</code> down, otherwise from focused up.</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the key was handled by a binding, otherwise False</p>"},{"location":"api/app/#textual.app.App.compose","title":"<code>compose()</code>","text":"<p>Yield child widgets for a container.</p>"},{"location":"api/app/#textual.app.App.exit","title":"<code>exit(result=None, message=None)</code>","text":"<p>Exit the app, and return the supplied result.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>ReturnType | None</code> <p>Return value. Defaults to None.</p> <code>None</code> <code>message</code> <code>RenderableType | None</code> <p>Optional message to display on exit.</p> <code>None</code>"},{"location":"api/app/#textual.app.App.export_screenshot","title":"<code>export_screenshot(*, title=None)</code>","text":"<p>Export an SVG screenshot of the current screen.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str | None</code> <p>The title of the exported screenshot or None to use app title. Defaults to None.</p> <code>None</code>"},{"location":"api/app/#textual.app.App.fatal_error","title":"<code>fatal_error()</code>","text":"<p>Exits the app after an unhandled exception.</p>"},{"location":"api/app/#textual.app.App.get_child_by_id","title":"<code>get_child_by_id(id, expect_type=None)</code>","text":"<p>Shorthand for self.screen.get_child(id: str) Returns the first child (immediate descendent) of this DOMNode with the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the node to search for.</p> required <code>expect_type</code> <code>type[ExpectType] | None</code> <p>Require the object be of the supplied type, or None for any type. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>ExpectType | Widget</code> <p>The first child of this node with the specified ID.</p> <p>Raises:</p> Type Description <code>NoMatches</code> <p>if no children could be found for this ID</p> <code>WrongType</code> <p>if the wrong type was found.</p>"},{"location":"api/app/#textual.app.App.get_css_variables","title":"<code>get_css_variables()</code>","text":"<p>Get a mapping of variables used to pre-populate CSS.</p> <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>A mapping of variable name to value.</p>"},{"location":"api/app/#textual.app.App.get_driver_class","title":"<code>get_driver_class()</code>","text":"<p>Get a driver class for this platform.</p> <p>Called by the constructor.</p> <p>Returns:</p> Type Description <code>Type[Driver]</code> <p>A Driver class which manages input and display.</p>"},{"location":"api/app/#textual.app.App.get_key_display","title":"<code>get_key_display(key)</code>","text":"<p>For a given key, return how it should be displayed in an app (e.g. in the Footer widget). By key, we refer to the string used in the \"key\" argument for a Binding instance. By overriding this method, you can ensure that keys are displayed consistently throughout your app, without needing to add a key_display to every binding.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The binding key string.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The display string for the input key.</p>"},{"location":"api/app/#textual.app.App.get_screen","title":"<code>get_screen(screen)</code>","text":"<p>Get an installed screen.</p> <p>Parameters:</p> Name Type Description Default <code>screen</code> <code>Screen | str</code> <p>Either a Screen object or screen name (the <code>name</code> argument when installed).</p> required <p>Raises:</p> Type Description <code>KeyError</code> <p>If the named screen doesn't exist.</p> <p>Returns:</p> Type Description <code>Screen</code> <p>A screen instance.</p>"},{"location":"api/app/#textual.app.App.get_widget_at","title":"<code>get_widget_at(x, y)</code>","text":"<p>Get the widget under the given coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>X coordinate.</p> required <code>y</code> <code>int</code> <p>Y coordinate.</p> required <p>Returns:</p> Type Description <code>tuple[Widget, Region]</code> <p>The widget and the widget's screen region.</p>"},{"location":"api/app/#textual.app.App.get_widget_by_id","title":"<code>get_widget_by_id(id, expect_type=None)</code>","text":"<p>Shorthand for self.screen.get_widget_by_id(id) Return the first descendant widget with the given ID.</p> <p>Performs a breadth-first search rooted at the current screen. It will not return the Screen if that matches the ID. To get the screen, use <code>self.screen</code>.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID to search for in the subtree</p> required <code>expect_type</code> <code>type[ExpectType] | None</code> <p>Require the object be of the supplied type, or None for any type. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>ExpectType | Widget</code> <p>The first descendant encountered with this ID.</p> <p>Raises:</p> Type Description <code>NoMatches</code> <p>if no children could be found for this ID</p> <code>WrongType</code> <p>if the wrong type was found.</p>"},{"location":"api/app/#textual.app.App.install_screen","title":"<code>install_screen(screen, name)</code>","text":"<p>Install a screen.</p> <p>Installing a screen prevents Textual from destroying it when it is no longer on the screen stack. Note that you don't need to install a screen to use it. See push_screen or switch_screen to make a new screen current.</p> <p>Parameters:</p> Name Type Description Default <code>screen</code> <code>Screen</code> <p>Screen to install.</p> required <code>name</code> <code>str</code> <p>Unique name to identify the screen.</p> required <p>Raises:</p> Type Description <code>ScreenError</code> <p>If the screen can't be installed.</p> <p>Returns:</p> Type Description <code>None</code> <p>An awaitable that awaits the mounting of the screen and its children.</p>"},{"location":"api/app/#textual.app.App.is_mounted","title":"<code>is_mounted(widget)</code>","text":"<p>Check if a widget is mounted.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>A widget.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True of the widget is mounted.</p>"},{"location":"api/app/#textual.app.App.is_screen_installed","title":"<code>is_screen_installed(screen)</code>","text":"<p>Check if a given screen has been installed.</p> <p>Parameters:</p> Name Type Description Default <code>screen</code> <code>Screen | str</code> <p>Either a Screen object or screen name (the <code>name</code> argument when installed).</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the screen is currently installed,</p>"},{"location":"api/app/#textual.app.App.mount","title":"<code>mount(*widgets, before=None, after=None)</code>","text":"<p>Mount the given widgets relative to the app's screen.</p> <p>Parameters:</p> Name Type Description Default <code>*widgets</code> <code>Widget</code> <p>The widget(s) to mount.</p> <code>()</code> <code>before</code> <code>int | str | Widget | None</code> <p>Optional location to mount before. An <code>int</code> is the index of the child to mount before, a <code>str</code> is a <code>query_one</code> query to find the widget to mount before.</p> <code>None</code> <code>after</code> <code>int | str | Widget | None</code> <p>Optional location to mount after. An <code>int</code> is the index of the child to mount after, a <code>str</code> is a <code>query_one</code> query to find the widget to mount after.</p> <code>None</code> <p>Returns:</p> Type Description <code>AwaitMount</code> <p>An awaitable object that waits for widgets to be mounted.</p> <p>Raises:</p> Type Description <code>MountError</code> <p>If there is a problem with the mount request.</p> Note <p>Only one of <code>before</code> or <code>after</code> can be provided. If both are provided a <code>MountError</code> will be raised.</p>"},{"location":"api/app/#textual.app.App.mount_all","title":"<code>mount_all(widgets, *, before=None, after=None)</code>","text":"<p>Mount widgets from an iterable.</p> <p>Parameters:</p> Name Type Description Default <code>widgets</code> <code>Iterable[Widget]</code> <p>An iterable of widgets.</p> required <code>before</code> <code>int | str | Widget | None</code> <p>Optional location to mount before. An <code>int</code> is the index of the child to mount before, a <code>str</code> is a <code>query_one</code> query to find the widget to mount before.</p> <code>None</code> <code>after</code> <code>int | str | Widget | None</code> <p>Optional location to mount after. An <code>int</code> is the index of the child to mount after, a <code>str</code> is a <code>query_one</code> query to find the widget to mount after.</p> <code>None</code> <p>Returns:</p> Type Description <code>AwaitMount</code> <p>An awaitable object that waits for widgets to be mounted.</p> <p>Raises:</p> Type Description <code>MountError</code> <p>If there is a problem with the mount request.</p> Note <p>Only one of <code>before</code> or <code>after</code> can be provided. If both are provided a <code>MountError</code> will be raised.</p>"},{"location":"api/app/#textual.app.App.panic","title":"<code>panic(*renderables)</code>","text":"<p>Exits the app then displays a message.</p> <p>Parameters:</p> Name Type Description Default <code>*renderables</code> <code>RenderableType</code> <p>Rich renderables to display on exit.</p> <code>()</code>"},{"location":"api/app/#textual.app.App.pop_screen","title":"<code>pop_screen()</code>","text":"<p>Pop the current screen from the stack, and switch to the previous screen.</p> <p>Returns:</p> Type Description <code>Screen</code> <p>The screen that was replaced.</p>"},{"location":"api/app/#textual.app.App.post_display_hook","title":"<code>post_display_hook()</code>","text":"<p>Called immediately after a display is done. Used in tests.</p>"},{"location":"api/app/#textual.app.App.push_screen","title":"<code>push_screen(screen)</code>","text":"<p>Push a new screen on the screen stack, making it the current screen.</p> <p>Parameters:</p> Name Type Description Default <code>screen</code> <code>Screen | str</code> <p>A Screen instance or the name of an installed screen.</p> required"},{"location":"api/app/#textual.app.App.refresh_css","title":"<code>refresh_css(animate=True)</code>","text":"<p>Refresh CSS.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>bool</code> <p>Also execute CSS animations. Defaults to True.</p> <code>True</code>"},{"location":"api/app/#textual.app.App.run","title":"<code>run(*, headless=False, size=None, auto_pilot=None)</code>","text":"<p>Run the app.</p> <p>Parameters:</p> Name Type Description Default <code>headless</code> <code>bool</code> <p>Run in headless mode (no output). Defaults to False.</p> <code>False</code> <code>size</code> <code>tuple[int, int] | None</code> <p>Force terminal size to <code>(WIDTH, HEIGHT)</code>, or None to auto-detect. Defaults to None.</p> <code>None</code> <code>auto_pilot</code> <code>AutopilotCallbackType | None</code> <p>An auto pilot coroutine.</p> <code>None</code> <p>Returns:</p> Type Description <code>ReturnType | None</code> <p>App return value.</p>"},{"location":"api/app/#textual.app.App.run_action","title":"<code>run_action(action, default_namespace=None)</code>  <code>async</code>","text":"<p>Perform an action.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>str | ActionParseResult</code> <p>Action encoded in a string.</p> required <code>default_namespace</code> <code>object | None</code> <p>Namespace to use if not provided in the action, or None to use app. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the event has handled.</p>"},{"location":"api/app/#textual.app.App.run_async","title":"<code>run_async(*, headless=False, size=None, auto_pilot=None)</code>  <code>async</code>","text":"<p>Run the app asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>headless</code> <code>bool</code> <p>Run in headless mode (no output). Defaults to False.</p> <code>False</code> <code>size</code> <code>tuple[int, int] | None</code> <p>Force terminal size to <code>(WIDTH, HEIGHT)</code>, or None to auto-detect. Defaults to None.</p> <code>None</code> <code>auto_pilot</code> <code>AutopilotCallbackType | None</code> <p>An auto pilot coroutine.</p> <code>None</code> <p>Returns:</p> Type Description <code>ReturnType | None</code> <p>App return value.</p>"},{"location":"api/app/#textual.app.App.run_test","title":"<code>run_test(*, headless=True, size=(80, 24))</code>  <code>async</code>","text":"<p>An asynchronous context manager for testing app.</p> <p>Parameters:</p> Name Type Description Default <code>headless</code> <code>bool</code> <p>Run in headless mode (no output or input). Defaults to True.</p> <code>True</code> <code>size</code> <code>tuple[int, int] | None</code> <p>Force terminal size to <code>(WIDTH, HEIGHT)</code>, or None to auto-detect. Defaults to None.</p> <code>(80, 24)</code>"},{"location":"api/app/#textual.app.App.save_screenshot","title":"<code>save_screenshot(filename=None, path='./', time_format=None)</code>","text":"<p>Save an SVG screenshot of the current screen.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str | None</code> <p>Filename of SVG screenshot, or None to auto-generate a filename with the date and time. Defaults to None.</p> <code>None</code> <code>path</code> <code>str</code> <p>Path to directory for output. Defaults to current working directory.</p> <code>'./'</code> <code>time_format</code> <code>str | None</code> <p>Date and time format to use if filename is None. Defaults to a format like ISO 8601 with some reserved characters replaced with underscores.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Filename of screenshot.</p>"},{"location":"api/app/#textual.app.App.set_focus","title":"<code>set_focus(widget, scroll_visible=True)</code>","text":"<p>Focus (or unfocus) a widget. A focused widget will receive key events first.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget | None</code> <p>Widget to focus.</p> required <code>scroll_visible</code> <code>bool</code> <p>Scroll widget in to view.</p> <code>True</code>"},{"location":"api/app/#textual.app.App.switch_screen","title":"<code>switch_screen(screen)</code>","text":"<p>Switch to another screen by replacing the top of the screen stack with a new screen.</p> <p>Parameters:</p> Name Type Description Default <code>screen</code> <code>Screen | str</code> <p>Either a Screen object or screen name (the <code>name</code> argument when installed).</p> required"},{"location":"api/app/#textual.app.App.uninstall_screen","title":"<code>uninstall_screen(screen)</code>","text":"<p>Uninstall a screen.</p> <p>If the screen was not previously installed then this method is a null-op. Uninstalling a screen allows Textual to delete it when it is popped or switched. Note that uninstalling a screen is only required if you have previously installed it with install_screen. Textual will also uninstall screens automatically on exit.</p> <p>Parameters:</p> Name Type Description Default <code>screen</code> <code>Screen | str</code> <p>The screen to uninstall or the name of a installed screen.</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>The name of the screen that was uninstalled, or None if no screen was uninstalled.</p>"},{"location":"api/app/#textual.app.App.update_styles","title":"<code>update_styles(node=None)</code>","text":"<p>Request update of styles.</p> <p>Should be called whenever CSS classes / pseudo classes change.</p>"},{"location":"api/app/#textual.app.App.watch_dark","title":"<code>watch_dark(dark)</code>","text":"<p>Watches the dark bool.</p>"},{"location":"api/app/#textual.app.CssPathError","title":"<code>CssPathError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Raised when supplied CSS path(s) are invalid.</p>"},{"location":"api/app/#textual.app.ScreenStackError","title":"<code>ScreenStackError</code>","text":"<p>         Bases: <code>ScreenError</code></p> <p>Raised when attempting to pop the last screen from the stack.</p>"},{"location":"api/await_remove/","title":"Await remove","text":""},{"location":"api/await_remove/#textual.await_remove","title":"<code>await_remove</code>","text":"<p>Provides the type of an awaitable remove.</p>"},{"location":"api/await_remove/#textual.await_remove.AwaitRemove","title":"<code>AwaitRemove</code>","text":"<p>An awaitable returned by a method that removes DOM nodes.</p> <p>Returned by Widget.remove and DOMQuery.remove.</p>"},{"location":"api/await_remove/#textual.await_remove.AwaitRemove.__init__","title":"<code>__init__(finished_flag, task)</code>","text":"<p>Initialise the instance of <code>AwaitRemove</code>.</p> <p>Parameters:</p> Name Type Description Default <code>finished_flag</code> <code>Event</code> <p>The asyncio event to wait on.</p> required <code>task</code> <code>Task</code> <p>The task which does the remove (required to keep a reference).</p> required"},{"location":"api/binding/","title":"Binding","text":""},{"location":"api/binding/#textual.binding","title":"<code>binding</code>","text":""},{"location":"api/binding/#textual.binding.Binding","title":"<code>Binding</code>  <code>dataclass</code>","text":"<p>The configuration of a key binding.</p>"},{"location":"api/binding/#textual.binding.Binding.action","title":"<code>action: str</code>  <code>class-attribute</code>","text":"<p>Action to bind to.</p>"},{"location":"api/binding/#textual.binding.Binding.description","title":"<code>description: str</code>  <code>class-attribute</code>","text":"<p>Description of action.</p>"},{"location":"api/binding/#textual.binding.Binding.key","title":"<code>key: str</code>  <code>class-attribute</code>","text":"<p>Key to bind. This can also be a comma-separated list of keys to map multiple keys to a single action.</p>"},{"location":"api/binding/#textual.binding.Binding.key_display","title":"<code>key_display: str | None</code>  <code>class-attribute</code>","text":"<p>How the key should be shown in footer.</p>"},{"location":"api/binding/#textual.binding.Binding.priority","title":"<code>priority: bool</code>  <code>class-attribute</code>","text":"<p>Enable priority binding for this key.</p>"},{"location":"api/binding/#textual.binding.Binding.show","title":"<code>show: bool</code>  <code>class-attribute</code>","text":"<p>Show the action in Footer, or False to hide.</p>"},{"location":"api/binding/#textual.binding.BindingError","title":"<code>BindingError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>A binding related error.</p>"},{"location":"api/binding/#textual.binding.Bindings","title":"<code>Bindings</code>","text":"<p>Manage a set of bindings.</p>"},{"location":"api/binding/#textual.binding.Bindings.shown_keys","title":"<code>shown_keys: list[Binding]</code>  <code>property</code>","text":"<p>A list of bindings for shown keys.</p>"},{"location":"api/binding/#textual.binding.Bindings.__init__","title":"<code>__init__(bindings=None)</code>","text":"<p>Initialise a collection of bindings.</p> <p>Parameters:</p> Name Type Description Default <code>bindings</code> <code>Iterable[BindingType] | None</code> <p>An optional set of initial bindings.</p> <code>None</code> Note <p>The iterable of bindings can contain either a <code>Binding</code> instance, or a tuple of 3 values mapping to the first three properties of a <code>Binding</code>.</p>"},{"location":"api/binding/#textual.binding.Bindings.bind","title":"<code>bind(keys, action, description='', show=True, key_display=None, priority=False)</code>","text":"<p>Bind keys to an action.</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>str</code> <p>The keys to bind. Can be a comma-separated list of keys.</p> required <code>action</code> <code>str</code> <p>The action to bind the keys to.</p> required <code>description</code> <code>str</code> <p>An optional description for the binding.</p> <code>''</code> <code>show</code> <code>bool</code> <p>A flag to say if the binding should appear in the footer.</p> <code>True</code> <code>key_display</code> <code>str | None</code> <p>Optional string to display in the footer for the key.</p> <code>None</code> <code>priority</code> <code>bool</code> <p>Is this a priority binding, checked form app down to focused widget?</p> <code>False</code>"},{"location":"api/binding/#textual.binding.Bindings.get_key","title":"<code>get_key(key)</code>","text":"<p>Get a binding if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Key to look up.</p> required <p>Raises:</p> Type Description <code>NoBinding</code> <p>If the binding does not exist.</p> <p>Returns:</p> Type Description <code>Binding</code> <p>A binding object for the key,</p>"},{"location":"api/binding/#textual.binding.Bindings.merge","title":"<code>merge(bindings)</code>  <code>classmethod</code>","text":"<p>Merge a bindings. Subsequent bound keys override initial keys.</p> <p>Parameters:</p> Name Type Description Default <code>bindings</code> <code>Iterable[Bindings]</code> <p>A number of bindings.</p> required <p>Returns:</p> Type Description <code>Bindings</code> <p>New bindings.</p>"},{"location":"api/binding/#textual.binding.InvalidBinding","title":"<code>InvalidBinding</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Binding key is in an invalid format.</p>"},{"location":"api/binding/#textual.binding.NoBinding","title":"<code>NoBinding</code>","text":"<p>         Bases: <code>Exception</code></p> <p>A binding was not found.</p>"},{"location":"api/button/","title":"Button","text":""},{"location":"api/button/#textual.widgets.Button","title":"<code>Button</code>","text":"<p>         Bases: <code>Static</code></p> <p>A simple clickable button.</p>"},{"location":"api/button/#textual.widgets._button.Button.ACTIVE_EFFECT_DURATION","title":"<code>ACTIVE_EFFECT_DURATION</code>  <code>class-attribute</code>","text":"<p>When buttons are clicked they get the <code>-active</code> class for this duration (in seconds)</p>"},{"location":"api/button/#textual.widgets._button.Button.Pressed","title":"<code>Pressed</code>","text":"<p>         Bases: <code>Message</code></p> <p>Event sent when a <code>Button</code> is pressed.</p> <p>Can be handled using <code>on_button_pressed</code> in a subclass of <code>Button</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>button</code> <p>The button that was pressed.</p>"},{"location":"api/button/#textual.widgets._button.Button.Pressed.control","title":"<code>control: Button</code>  <code>property</code>","text":"<p>Alias for the button.</p>"},{"location":"api/button/#textual.widgets._button.Button.__init__","title":"<code>__init__(label=None, variant='default', *, name=None, id=None, classes=None, disabled=False)</code>","text":"<p>Create a Button widget.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType | None</code> <p>The text that appears within the button.</p> <code>None</code> <code>variant</code> <code>ButtonVariant</code> <p>The variant of the button.</p> <code>'default'</code> <code>name</code> <code>str | None</code> <p>The name of the button.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the button in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the button.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the button is disabled or not.</p> <code>False</code>"},{"location":"api/button/#textual.widgets._button.Button.error","title":"<code>error(label=None, *, name=None, id=None, classes=None, disabled=False)</code>  <code>classmethod</code>","text":"<p>Utility constructor for creating an error Button variant.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType | None</code> <p>The text that appears within the button.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the button is disabled or not.</p> <code>False</code> <code>name</code> <code>str | None</code> <p>The name of the button.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the button in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the button.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the button is disabled or not.</p> <code>False</code> <p>Returns:</p> Type Description <code>Button</code> <p>A Button widget of the 'error' variant.</p>"},{"location":"api/button/#textual.widgets._button.Button.press","title":"<code>press()</code>","text":"<p>Respond to a button press.</p>"},{"location":"api/button/#textual.widgets._button.Button.success","title":"<code>success(label=None, *, name=None, id=None, classes=None, disabled=False)</code>  <code>classmethod</code>","text":"<p>Utility constructor for creating a success Button variant.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType | None</code> <p>The text that appears within the button.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the button is disabled or not.</p> <code>False</code> <code>name</code> <code>str | None</code> <p>The name of the button.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the button in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the button.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the button is disabled or not.</p> <code>False</code> <p>Returns:</p> Type Description <code>Button</code> <p>A Button widget of the 'success' variant.</p>"},{"location":"api/button/#textual.widgets._button.Button.validate_label","title":"<code>validate_label(label)</code>","text":"<p>Parse markup for self.label</p>"},{"location":"api/button/#textual.widgets._button.Button.warning","title":"<code>warning(label=None, *, name=None, id=None, classes=None, disabled=False)</code>  <code>classmethod</code>","text":"<p>Utility constructor for creating a warning Button variant.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType | None</code> <p>The text that appears within the button.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the button is disabled or not.</p> <code>False</code> <code>name</code> <code>str | None</code> <p>The name of the button.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the button in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the button.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the button is disabled or not.</p> <code>False</code> <p>Returns:</p> Type Description <code>Button</code> <p>A Button widget of the 'warning' variant.</p>"},{"location":"api/button/#textual.widgets._button.ButtonVariant","title":"<code>ButtonVariant</code>  <code>module-attribute</code>","text":"<p>The names of the valid button variants.</p> <p>These are the variants that can be used with a Button.</p>"},{"location":"api/button/#textual.widgets._button.InvalidButtonVariant","title":"<code>InvalidButtonVariant</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Exception raised if an invalid button variant is used.</p>"},{"location":"api/checkbox/","title":"Checkbox","text":""},{"location":"api/checkbox/#textual.widgets.Checkbox","title":"<code>Checkbox</code>","text":"<p>         Bases: <code>ToggleButton</code></p> <p>A check box widget that represents a boolean value.</p>"},{"location":"api/checkbox/#textual.widgets._checkbox.Checkbox.Changed","title":"<code>Changed</code>","text":"<p>         Bases: <code>ToggleButton.Changed</code></p> <p>Posted when the value of the checkbox changes.</p> <p>This message can be handled using an <code>on_checkbox_changed</code> method.</p>"},{"location":"api/checkbox/#textual.widgets._checkbox.Checkbox.Changed.checkbox","title":"<code>checkbox: Checkbox</code>  <code>property</code>","text":"<p>The checkbox that was changed.</p>"},{"location":"api/checkbox/#textual.widgets._checkbox.Checkbox.Changed.control","title":"<code>control: Checkbox</code>  <code>property</code>","text":"<p>An alias for self.checkbox</p>"},{"location":"api/color/","title":"Color","text":""},{"location":"api/color/#textual.color","title":"<code>color</code>","text":"<p>This module contains a powerful Color class which Textual uses to expose colors.</p> <p>The only exception would be for Rich renderables, which require a rich.color.Color instance. You can convert from a Textual color to a Rich color with the rich_color property.</p>"},{"location":"api/color/#textual.color--named-colors","title":"Named colors","text":"<p>The following named colors are used by the parse method.</p> <p> colors \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503hex\u00a0\u00a0\u00a0\u00a0\u2503RGB\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503Color\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502\"aliceblue\"\u2502#F0F8FF\u2502rgb(240,\u00a0248,\u00a0255)\u2502\u2502 \u2502\"ansi_black\"\u2502#000000\u2502rgb(0,\u00a00,\u00a00)\u2502\u2502 \u2502\"ansi_blue\"\u2502#000080\u2502rgb(0,\u00a00,\u00a0128)\u2502\u2502 \u2502\"ansi_bright_black\"\u2502#808080\u2502rgb(128,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"ansi_bright_blue\"\u2502#0000FF\u2502rgb(0,\u00a00,\u00a0255)\u2502\u2502 \u2502\"ansi_bright_cyan\"\u2502#00FFFF\u2502rgb(0,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"ansi_bright_green\"\u2502#00FF00\u2502rgb(0,\u00a0255,\u00a00)\u2502\u2502 \u2502\"ansi_bright_magenta\"\u2502#FF00FF\u2502rgb(255,\u00a00,\u00a0255)\u2502\u2502 \u2502\"ansi_bright_red\"\u2502#FF0000\u2502rgb(255,\u00a00,\u00a00)\u2502\u2502 \u2502\"ansi_bright_white\"\u2502#FFFFFF\u2502rgb(255,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"ansi_bright_yellow\"\u2502#FFFF00\u2502rgb(255,\u00a0255,\u00a00)\u2502\u2502 \u2502\"ansi_cyan\"\u2502#008080\u2502rgb(0,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"ansi_green\"\u2502#008000\u2502rgb(0,\u00a0128,\u00a00)\u2502\u2502 \u2502\"ansi_magenta\"\u2502#800080\u2502rgb(128,\u00a00,\u00a0128)\u2502\u2502 \u2502\"ansi_red\"\u2502#800000\u2502rgb(128,\u00a00,\u00a00)\u2502\u2502 \u2502\"ansi_white\"\u2502#C0C0C0\u2502rgb(192,\u00a0192,\u00a0192)\u2502\u2502 \u2502\"ansi_yellow\"\u2502#808000\u2502rgb(128,\u00a0128,\u00a00)\u2502\u2502 \u2502\"antiquewhite\"\u2502#FAEBD7\u2502rgb(250,\u00a0235,\u00a0215)\u2502\u2502 \u2502\"aqua\"\u2502#00FFFF\u2502rgb(0,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"aquamarine\"\u2502#7FFFD4\u2502rgb(127,\u00a0255,\u00a0212)\u2502\u2502 \u2502\"azure\"\u2502#F0FFFF\u2502rgb(240,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"beige\"\u2502#F5F5DC\u2502rgb(245,\u00a0245,\u00a0220)\u2502\u2502 \u2502\"bisque\"\u2502#FFE4C4\u2502rgb(255,\u00a0228,\u00a0196)\u2502\u2502 \u2502\"black\"\u2502#000000\u2502rgb(0,\u00a00,\u00a00)\u2502\u2502 \u2502\"blanchedalmond\"\u2502#FFEBCD\u2502rgb(255,\u00a0235,\u00a0205)\u2502\u2502 \u2502\"blue\"\u2502#0000FF\u2502rgb(0,\u00a00,\u00a0255)\u2502\u2502 \u2502\"blueviolet\"\u2502#8A2BE2\u2502rgb(138,\u00a043,\u00a0226)\u2502\u2502 \u2502\"brown\"\u2502#A52A2A\u2502rgb(165,\u00a042,\u00a042)\u2502\u2502 \u2502\"burlywood\"\u2502#DEB887\u2502rgb(222,\u00a0184,\u00a0135)\u2502\u2502 \u2502\"cadetblue\"\u2502#5F9EA0\u2502rgb(95,\u00a0158,\u00a0160)\u2502\u2502 \u2502\"chartreuse\"\u2502#7FFF00\u2502rgb(127,\u00a0255,\u00a00)\u2502\u2502 \u2502\"chocolate\"\u2502#D2691E\u2502rgb(210,\u00a0105,\u00a030)\u2502\u2502 \u2502\"coral\"\u2502#FF7F50\u2502rgb(255,\u00a0127,\u00a080)\u2502\u2502 \u2502\"cornflowerblue\"\u2502#6495ED\u2502rgb(100,\u00a0149,\u00a0237)\u2502\u2502 \u2502\"cornsilk\"\u2502#FFF8DC\u2502rgb(255,\u00a0248,\u00a0220)\u2502\u2502 \u2502\"crimson\"\u2502#DC143C\u2502rgb(220,\u00a020,\u00a060)\u2502\u2502 \u2502\"cyan\"\u2502#00FFFF\u2502rgb(0,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"darkblue\"\u2502#00008B\u2502rgb(0,\u00a00,\u00a0139)\u2502\u2502 \u2502\"darkcyan\"\u2502#008B8B\u2502rgb(0,\u00a0139,\u00a0139)\u2502\u2502 \u2502\"darkgoldenrod\"\u2502#B8860B\u2502rgb(184,\u00a0134,\u00a011)\u2502\u2502 \u2502\"darkgray\"\u2502#A9A9A9\u2502rgb(169,\u00a0169,\u00a0169)\u2502\u2502 \u2502\"darkgreen\"\u2502#006400\u2502rgb(0,\u00a0100,\u00a00)\u2502\u2502 \u2502\"darkgrey\"\u2502#A9A9A9\u2502rgb(169,\u00a0169,\u00a0169)\u2502\u2502 \u2502\"darkkhaki\"\u2502#BDB76B\u2502rgb(189,\u00a0183,\u00a0107)\u2502\u2502 \u2502\"darkmagenta\"\u2502#8B008B\u2502rgb(139,\u00a00,\u00a0139)\u2502\u2502 \u2502\"darkolivegreen\"\u2502#556B2F\u2502rgb(85,\u00a0107,\u00a047)\u2502\u2502 \u2502\"darkorange\"\u2502#FF8C00\u2502rgb(255,\u00a0140,\u00a00)\u2502\u2502 \u2502\"darkorchid\"\u2502#9932CC\u2502rgb(153,\u00a050,\u00a0204)\u2502\u2502 \u2502\"darkred\"\u2502#8B0000\u2502rgb(139,\u00a00,\u00a00)\u2502\u2502 \u2502\"darksalmon\"\u2502#E9967A\u2502rgb(233,\u00a0150,\u00a0122)\u2502\u2502 \u2502\"darkseagreen\"\u2502#8FBC8F\u2502rgb(143,\u00a0188,\u00a0143)\u2502\u2502 \u2502\"darkslateblue\"\u2502#483D8B\u2502rgb(72,\u00a061,\u00a0139)\u2502\u2502 \u2502\"darkslategray\"\u2502#2F4F4F\u2502rgb(47,\u00a079,\u00a079)\u2502\u2502 \u2502\"darkslategrey\"\u2502#2F4F4F\u2502rgb(47,\u00a079,\u00a079)\u2502\u2502 \u2502\"darkturquoise\"\u2502#00CED1\u2502rgb(0,\u00a0206,\u00a0209)\u2502\u2502 \u2502\"darkviolet\"\u2502#9400D3\u2502rgb(148,\u00a00,\u00a0211)\u2502\u2502 \u2502\"deeppink\"\u2502#FF1493\u2502rgb(255,\u00a020,\u00a0147)\u2502\u2502 \u2502\"deepskyblue\"\u2502#00BFFF\u2502rgb(0,\u00a0191,\u00a0255)\u2502\u2502 \u2502\"dimgray\"\u2502#696969\u2502rgb(105,\u00a0105,\u00a0105)\u2502\u2502 \u2502\"dimgrey\"\u2502#696969\u2502rgb(105,\u00a0105,\u00a0105)\u2502\u2502 \u2502\"dodgerblue\"\u2502#1E90FF\u2502rgb(30,\u00a0144,\u00a0255)\u2502\u2502 \u2502\"firebrick\"\u2502#B22222\u2502rgb(178,\u00a034,\u00a034)\u2502\u2502 \u2502\"floralwhite\"\u2502#FFFAF0\u2502rgb(255,\u00a0250,\u00a0240)\u2502\u2502 \u2502\"forestgreen\"\u2502#228B22\u2502rgb(34,\u00a0139,\u00a034)\u2502\u2502 \u2502\"fuchsia\"\u2502#FF00FF\u2502rgb(255,\u00a00,\u00a0255)\u2502\u2502 \u2502\"gainsboro\"\u2502#DCDCDC\u2502rgb(220,\u00a0220,\u00a0220)\u2502\u2502 \u2502\"ghostwhite\"\u2502#F8F8FF\u2502rgb(248,\u00a0248,\u00a0255)\u2502\u2502 \u2502\"gold\"\u2502#FFD700\u2502rgb(255,\u00a0215,\u00a00)\u2502\u2502 \u2502\"goldenrod\"\u2502#DAA520\u2502rgb(218,\u00a0165,\u00a032)\u2502\u2502 \u2502\"gray\"\u2502#808080\u2502rgb(128,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"green\"\u2502#008000\u2502rgb(0,\u00a0128,\u00a00)\u2502\u2502 \u2502\"greenyellow\"\u2502#ADFF2F\u2502rgb(173,\u00a0255,\u00a047)\u2502\u2502 \u2502\"grey\"\u2502#808080\u2502rgb(128,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"honeydew\"\u2502#F0FFF0\u2502rgb(240,\u00a0255,\u00a0240)\u2502\u2502 \u2502\"hotpink\"\u2502#FF69B4\u2502rgb(255,\u00a0105,\u00a0180)\u2502\u2502 \u2502\"indianred\"\u2502#CD5C5C\u2502rgb(205,\u00a092,\u00a092)\u2502\u2502 \u2502\"indigo\"\u2502#4B0082\u2502rgb(75,\u00a00,\u00a0130)\u2502\u2502 \u2502\"ivory\"\u2502#FFFFF0\u2502rgb(255,\u00a0255,\u00a0240)\u2502\u2502 \u2502\"khaki\"\u2502#F0E68C\u2502rgb(240,\u00a0230,\u00a0140)\u2502\u2502 \u2502\"lavender\"\u2502#E6E6FA\u2502rgb(230,\u00a0230,\u00a0250)\u2502\u2502 \u2502\"lavenderblush\"\u2502#FFF0F5\u2502rgb(255,\u00a0240,\u00a0245)\u2502\u2502 \u2502\"lawngreen\"\u2502#7CFC00\u2502rgb(124,\u00a0252,\u00a00)\u2502\u2502 \u2502\"lemonchiffon\"\u2502#FFFACD\u2502rgb(255,\u00a0250,\u00a0205)\u2502\u2502 \u2502\"lightblue\"\u2502#ADD8E6\u2502rgb(173,\u00a0216,\u00a0230)\u2502\u2502 \u2502\"lightcoral\"\u2502#F08080\u2502rgb(240,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"lightcyan\"\u2502#E0FFFF\u2502rgb(224,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"lightgoldenrodyellow\"\u2502#FAFAD2\u2502rgb(250,\u00a0250,\u00a0210)\u2502\u2502 \u2502\"lightgray\"\u2502#D3D3D3\u2502rgb(211,\u00a0211,\u00a0211)\u2502\u2502 \u2502\"lightgreen\"\u2502#90EE90\u2502rgb(144,\u00a0238,\u00a0144)\u2502\u2502 \u2502\"lightgrey\"\u2502#D3D3D3\u2502rgb(211,\u00a0211,\u00a0211)\u2502\u2502 \u2502\"lightpink\"\u2502#FFB6C1\u2502rgb(255,\u00a0182,\u00a0193)\u2502\u2502 \u2502\"lightsalmon\"\u2502#FFA07A\u2502rgb(255,\u00a0160,\u00a0122)\u2502\u2502 \u2502\"lightseagreen\"\u2502#20B2AA\u2502rgb(32,\u00a0178,\u00a0170)\u2502\u2502 \u2502\"lightskyblue\"\u2502#87CEFA\u2502rgb(135,\u00a0206,\u00a0250)\u2502\u2502 \u2502\"lightslategray\"\u2502#778899\u2502rgb(119,\u00a0136,\u00a0153)\u2502\u2502 \u2502\"lightslategrey\"\u2502#778899\u2502rgb(119,\u00a0136,\u00a0153)\u2502\u2502 \u2502\"lightsteelblue\"\u2502#B0C4DE\u2502rgb(176,\u00a0196,\u00a0222)\u2502\u2502 \u2502\"lightyellow\"\u2502#FFFFE0\u2502rgb(255,\u00a0255,\u00a0224)\u2502\u2502 \u2502\"lime\"\u2502#00FF00\u2502rgb(0,\u00a0255,\u00a00)\u2502\u2502 \u2502\"limegreen\"\u2502#32CD32\u2502rgb(50,\u00a0205,\u00a050)\u2502\u2502 \u2502\"linen\"\u2502#FAF0E6\u2502rgb(250,\u00a0240,\u00a0230)\u2502\u2502 \u2502\"magenta\"\u2502#FF00FF\u2502rgb(255,\u00a00,\u00a0255)\u2502\u2502 \u2502\"maroon\"\u2502#800000\u2502rgb(128,\u00a00,\u00a00)\u2502\u2502 \u2502\"mediumaquamarine\"\u2502#66CDAA\u2502rgb(102,\u00a0205,\u00a0170)\u2502\u2502 \u2502\"mediumblue\"\u2502#0000CD\u2502rgb(0,\u00a00,\u00a0205)\u2502\u2502 \u2502\"mediumorchid\"\u2502#BA55D3\u2502rgb(186,\u00a085,\u00a0211)\u2502\u2502 \u2502\"mediumpurple\"\u2502#9370DB\u2502rgb(147,\u00a0112,\u00a0219)\u2502\u2502 \u2502\"mediumseagreen\"\u2502#3CB371\u2502rgb(60,\u00a0179,\u00a0113)\u2502\u2502 \u2502\"mediumslateblue\"\u2502#7B68EE\u2502rgb(123,\u00a0104,\u00a0238)\u2502\u2502 \u2502\"mediumspringgreen\"\u2502#00FA9A\u2502rgb(0,\u00a0250,\u00a0154)\u2502\u2502 \u2502\"mediumturquoise\"\u2502#48D1CC\u2502rgb(72,\u00a0209,\u00a0204)\u2502\u2502 \u2502\"mediumvioletred\"\u2502#C71585\u2502rgb(199,\u00a021,\u00a0133)\u2502\u2502 \u2502\"midnightblue\"\u2502#191970\u2502rgb(25,\u00a025,\u00a0112)\u2502\u2502 \u2502\"mintcream\"\u2502#F5FFFA\u2502rgb(245,\u00a0255,\u00a0250)\u2502\u2502 \u2502\"mistyrose\"\u2502#FFE4E1\u2502rgb(255,\u00a0228,\u00a0225)\u2502\u2502 \u2502\"moccasin\"\u2502#FFE4B5\u2502rgb(255,\u00a0228,\u00a0181)\u2502\u2502 \u2502\"navajowhite\"\u2502#FFDEAD\u2502rgb(255,\u00a0222,\u00a0173)\u2502\u2502 \u2502\"navy\"\u2502#000080\u2502rgb(0,\u00a00,\u00a0128)\u2502\u2502 \u2502\"oldlace\"\u2502#FDF5E6\u2502rgb(253,\u00a0245,\u00a0230)\u2502\u2502 \u2502\"olive\"\u2502#808000\u2502rgb(128,\u00a0128,\u00a00)\u2502\u2502 \u2502\"olivedrab\"\u2502#6B8E23\u2502rgb(107,\u00a0142,\u00a035)\u2502\u2502 \u2502\"orange\"\u2502#FFA500\u2502rgb(255,\u00a0165,\u00a00)\u2502\u2502 \u2502\"orangered\"\u2502#FF4500\u2502rgb(255,\u00a069,\u00a00)\u2502\u2502 \u2502\"orchid\"\u2502#DA70D6\u2502rgb(218,\u00a0112,\u00a0214)\u2502\u2502 \u2502\"palegoldenrod\"\u2502#EEE8AA\u2502rgb(238,\u00a0232,\u00a0170)\u2502\u2502 \u2502\"palegreen\"\u2502#98FB98\u2502rgb(152,\u00a0251,\u00a0152)\u2502\u2502 \u2502\"paleturquoise\"\u2502#AFEEEE\u2502rgb(175,\u00a0238,\u00a0238)\u2502\u2502 \u2502\"palevioletred\"\u2502#DB7093\u2502rgb(219,\u00a0112,\u00a0147)\u2502\u2502 \u2502\"papayawhip\"\u2502#FFEFD5\u2502rgb(255,\u00a0239,\u00a0213)\u2502\u2502 \u2502\"peachpuff\"\u2502#FFDAB9\u2502rgb(255,\u00a0218,\u00a0185)\u2502\u2502 \u2502\"peru\"\u2502#CD853F\u2502rgb(205,\u00a0133,\u00a063)\u2502\u2502 \u2502\"pink\"\u2502#FFC0CB\u2502rgb(255,\u00a0192,\u00a0203)\u2502\u2502 \u2502\"plum\"\u2502#DDA0DD\u2502rgb(221,\u00a0160,\u00a0221)\u2502\u2502 \u2502\"powderblue\"\u2502#B0E0E6\u2502rgb(176,\u00a0224,\u00a0230)\u2502\u2502 \u2502\"purple\"\u2502#800080\u2502rgb(128,\u00a00,\u00a0128)\u2502\u2502 \u2502\"rebeccapurple\"\u2502#663399\u2502rgb(102,\u00a051,\u00a0153)\u2502\u2502 \u2502\"red\"\u2502#FF0000\u2502rgb(255,\u00a00,\u00a00)\u2502\u2502 \u2502\"rosybrown\"\u2502#BC8F8F\u2502rgb(188,\u00a0143,\u00a0143)\u2502\u2502 \u2502\"royalblue\"\u2502#4169E1\u2502rgb(65,\u00a0105,\u00a0225)\u2502\u2502 \u2502\"saddlebrown\"\u2502#8B4513\u2502rgb(139,\u00a069,\u00a019)\u2502\u2502 \u2502\"salmon\"\u2502#FA8072\u2502rgb(250,\u00a0128,\u00a0114)\u2502\u2502 \u2502\"sandybrown\"\u2502#F4A460\u2502rgb(244,\u00a0164,\u00a096)\u2502\u2502 \u2502\"seagreen\"\u2502#2E8B57\u2502rgb(46,\u00a0139,\u00a087)\u2502\u2502 \u2502\"seashell\"\u2502#FFF5EE\u2502rgb(255,\u00a0245,\u00a0238)\u2502\u2502 \u2502\"sienna\"\u2502#A0522D\u2502rgb(160,\u00a082,\u00a045)\u2502\u2502 \u2502\"silver\"\u2502#C0C0C0\u2502rgb(192,\u00a0192,\u00a0192)\u2502\u2502 \u2502\"skyblue\"\u2502#87CEEB\u2502rgb(135,\u00a0206,\u00a0235)\u2502\u2502 \u2502\"slateblue\"\u2502#6A5ACD\u2502rgb(106,\u00a090,\u00a0205)\u2502\u2502 \u2502\"slategray\"\u2502#708090\u2502rgb(112,\u00a0128,\u00a0144)\u2502\u2502 \u2502\"slategrey\"\u2502#708090\u2502rgb(112,\u00a0128,\u00a0144)\u2502\u2502 \u2502\"snow\"\u2502#FFFAFA\u2502rgb(255,\u00a0250,\u00a0250)\u2502\u2502 \u2502\"springgreen\"\u2502#00FF7F\u2502rgb(0,\u00a0255,\u00a0127)\u2502\u2502 \u2502\"steelblue\"\u2502#4682B4\u2502rgb(70,\u00a0130,\u00a0180)\u2502\u2502 \u2502\"tan\"\u2502#D2B48C\u2502rgb(210,\u00a0180,\u00a0140)\u2502\u2502 \u2502\"teal\"\u2502#008080\u2502rgb(0,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"thistle\"\u2502#D8BFD8\u2502rgb(216,\u00a0191,\u00a0216)\u2502\u2502 \u2502\"tomato\"\u2502#FF6347\u2502rgb(255,\u00a099,\u00a071)\u2502\u2502 \u2502\"turquoise\"\u2502#40E0D0\u2502rgb(64,\u00a0224,\u00a0208)\u2502\u2502 \u2502\"violet\"\u2502#EE82EE\u2502rgb(238,\u00a0130,\u00a0238)\u2502\u2502 \u2502\"wheat\"\u2502#F5DEB3\u2502rgb(245,\u00a0222,\u00a0179)\u2502\u2502 \u2502\"white\"\u2502#FFFFFF\u2502rgb(255,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"whitesmoke\"\u2502#F5F5F5\u2502rgb(245,\u00a0245,\u00a0245)\u2502\u2502 \u2502\"yellow\"\u2502#FFFF00\u2502rgb(255,\u00a0255,\u00a00)\u2502\u2502 \u2502\"yellowgreen\"\u2502#9ACD32\u2502rgb(154,\u00a0205,\u00a050)\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p>"},{"location":"api/color/#textual.color.Color","title":"<code>Color</code>","text":"<p>         Bases: <code>NamedTuple</code></p> <p>A class to represent a RGB color with an alpha component.</p>"},{"location":"api/color/#textual.color.Color.a","title":"<code>a: float</code>  <code>class-attribute</code>","text":"<p>Alpha component (0-1)</p>"},{"location":"api/color/#textual.color.Color.b","title":"<code>b: int</code>  <code>class-attribute</code>","text":"<p>Blue component (0-255)</p>"},{"location":"api/color/#textual.color.Color.brightness","title":"<code>brightness: float</code>  <code>property</code>","text":"<p>Get the human perceptual brightness.</p> <p>Returns:</p> Type Description <code>float</code> <p>Brightness value (0-1).</p>"},{"location":"api/color/#textual.color.Color.clamped","title":"<code>clamped: Color</code>  <code>property</code>","text":"<p>Get a color with all components saturated to maximum and minimum values.</p> <p>Returns:</p> Type Description <code>Color</code> <p>A color object.</p>"},{"location":"api/color/#textual.color.Color.css","title":"<code>css: str</code>  <code>property</code>","text":"<p>The color in CSS rgb or rgba form.</p> <p>Returns:</p> Type Description <code>str</code> <p>A CSS style color, e.g. <code>\"rgb(10,20,30)\"</code> or <code>\"rgb(50,70,80,0.5)\"</code></p>"},{"location":"api/color/#textual.color.Color.g","title":"<code>g: int</code>  <code>class-attribute</code>","text":"<p>Green component (0-255)</p>"},{"location":"api/color/#textual.color.Color.hex","title":"<code>hex: str</code>  <code>property</code>","text":"<p>The color in CSS hex form, with 6 digits for RGB, and 8 digits for RGBA.</p> <p>Returns:</p> Type Description <code>str</code> <p>A CSS hex-style color, e.g. <code>\"#46b3de\"</code> or <code>\"#3342457f\"</code></p>"},{"location":"api/color/#textual.color.Color.hex6","title":"<code>hex6: str</code>  <code>property</code>","text":"<p>The color in CSS hex form, with 6 digits for RGB. Alpha is ignored.</p> <p>Returns:</p> Type Description <code>str</code> <p>A CSS hex-style color, e.g. \"#46b3de\"</p>"},{"location":"api/color/#textual.color.Color.hsl","title":"<code>hsl: HSL</code>  <code>property</code>","text":"<p>Get the color as HSL.</p> <p>Returns:</p> Type Description <code>HSL</code> <p>Color in HSL format.</p>"},{"location":"api/color/#textual.color.Color.inverse","title":"<code>inverse: Color</code>  <code>property</code>","text":"<p>The inverse of this color.</p>"},{"location":"api/color/#textual.color.Color.is_transparent","title":"<code>is_transparent: bool</code>  <code>property</code>","text":"<p>Check if the color is transparent, i.e. has 0 alpha.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if transparent, otherwise False.</p>"},{"location":"api/color/#textual.color.Color.monochrome","title":"<code>monochrome: Color</code>  <code>property</code>","text":"<p>Get a monochrome version of this color.</p> <p>Returns:</p> Type Description <code>Color</code> <p>A new monochrome color.</p>"},{"location":"api/color/#textual.color.Color.normalized","title":"<code>normalized: tuple[float, float, float]</code>  <code>property</code>","text":"<p>A tuple of the color components normalized to between 0 and 1.</p> <p>Returns:</p> Type Description <code>tuple[float, float, float]</code> <p>Normalized components.</p>"},{"location":"api/color/#textual.color.Color.r","title":"<code>r: int</code>  <code>class-attribute</code>","text":"<p>Red component (0-255)</p>"},{"location":"api/color/#textual.color.Color.rgb","title":"<code>rgb: tuple[int, int, int]</code>  <code>property</code>","text":"<p>Get just the red, green, and blue components.</p> <p>Returns:</p> Type Description <code>tuple[int, int, int]</code> <p>Color components</p>"},{"location":"api/color/#textual.color.Color.rich_color","title":"<code>rich_color: RichColor</code>  <code>property</code>","text":"<p>This color encoded in Rich's Color class.</p> <p>Returns:</p> Type Description <code>RichColor</code> <p>A color object as used by Rich.</p>"},{"location":"api/color/#textual.color.Color.blend","title":"<code>blend(destination, factor, alpha=None)</code>","text":"<p>Generate a new color between two colors.</p> <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>Color</code> <p>Another color.</p> required <code>factor</code> <code>float</code> <p>A blend factor, 0 -&gt; 1.</p> required <code>alpha</code> <code>float | None</code> <p>New alpha for result. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Color</code> <p>A new color.</p>"},{"location":"api/color/#textual.color.Color.darken","title":"<code>darken(amount, alpha=None)</code>  <code>cached</code>","text":"<p>Darken the color by a given amount.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>float</code> <p>Value between 0-1 to reduce luminance by.</p> required <code>alpha</code> <code>float | None</code> <p>Alpha component for new color or None to copy alpha. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Color</code> <p>New color.</p>"},{"location":"api/color/#textual.color.Color.from_hsl","title":"<code>from_hsl(h, s, l)</code>  <code>classmethod</code>","text":"<p>Create a color from HLS components.</p> <p>Parameters:</p> Name Type Description Default <code>h</code> <code>float</code> <p>Hue.</p> required <code>l</code> <code>float</code> <p>Lightness.</p> required <code>s</code> <code>float</code> <p>Saturation.</p> required <p>Returns:</p> Type Description <code>Color</code> <p>A new color.</p>"},{"location":"api/color/#textual.color.Color.from_rich_color","title":"<code>from_rich_color(rich_color)</code>  <code>classmethod</code>","text":"<p>Create a new color from Rich's Color class.</p> <p>Parameters:</p> Name Type Description Default <code>rich_color</code> <code>RichColor</code> <p>An instance of rich.color.Color.</p> required <p>Returns:</p> Type Description <code>Color</code> <p>A new Color.</p>"},{"location":"api/color/#textual.color.Color.get_contrast_text","title":"<code>get_contrast_text(alpha=0.95)</code>  <code>cached</code>","text":"<p>Get a light or dark color that best contrasts this color, for use with text.</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <p>An alpha value to adjust the pure white / black by. Defaults to 0.95.</p> <code>0.95</code> <p>Returns:</p> Type Description <code>Color</code> <p>A new color, either an off-white or off-black</p>"},{"location":"api/color/#textual.color.Color.lighten","title":"<code>lighten(amount, alpha=None)</code>","text":"<p>Lighten the color by a given amount.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>float</code> <p>Value between 0-1 to increase luminance by.</p> required <code>alpha</code> <code>float | None</code> <p>Alpha component for new color or None to copy alpha. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Color</code> <p>New color.</p>"},{"location":"api/color/#textual.color.Color.multiply_alpha","title":"<code>multiply_alpha(alpha)</code>","text":"<p>Create a new color, multiplying the alpha with a new alpha.</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>float</code> <p>The alpha value to multiple by.</p> required <p>Returns:</p> Type Description <code>Color</code> <p>A new color.</p>"},{"location":"api/color/#textual.color.Color.parse","title":"<code>parse(color_text)</code>  <code>cached</code> <code>classmethod</code>","text":"<p>Parse a string containing a named color or CSS-style color.</p> <p>Colors may be parsed from the following formats:</p> <ul> <li> <p>Text beginning with a <code>#</code> is parsed as a hexadecimal color code,  where R, G, B, and A must be hexadecimal digits (0-9A-F):</p> <ul> <li><code>#RGB</code></li> <li><code>#RGBA</code></li> <li><code>#RRGGBB</code></li> <li><code>#RRGGBBAA</code></li> </ul> </li> <li> <p>Alternatively, RGB colors can also be specified in the format  that follows, where R, G, and B must be numbers between 0 and 255  and A must be a value between 0 and 1:</p> <ul> <li><code>rgb(R,G,B)</code></li> <li><code>rgb(R,G,B,A)</code></li> </ul> </li> <li> <p>The HSL model can also be used, with a syntax similar to the above,  if H is a value between 0 and 360, S and L are percentages, and A  is a value between 0 and 1:</p> <ul> <li><code>hsl(H,S,L)</code></li> <li><code>hsla(H,S,L,A)</code></li> </ul> </li> </ul> <p>Any other formats will raise a <code>ColorParseError</code>.</p> <p>Parameters:</p> Name Type Description Default <code>color_text</code> <code>str | Color</code> <p>Text with a valid color format. Color objects will be returned unmodified.</p> required <p>Raises:</p> Type Description <code>ColorParseError</code> <p>If the color is not encoded correctly.</p> <p>Returns:</p> Type Description <code>Color</code> <p>Instance encoding the color specified by the argument.</p>"},{"location":"api/color/#textual.color.Color.with_alpha","title":"<code>with_alpha(alpha)</code>","text":"<p>Create a new color with the given alpha.</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>float</code> <p>New value for alpha.</p> required <p>Returns:</p> Type Description <code>Color</code> <p>A new color.</p>"},{"location":"api/color/#textual.color.ColorParseError","title":"<code>ColorParseError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>A color failed to parse.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The error message</p> required <code>suggested_color</code> <code>str | None</code> <p>A close color we can suggest. Defaults to None.</p> <code>None</code>"},{"location":"api/color/#textual.color.Gradient","title":"<code>Gradient</code>","text":"<p>Defines a color gradient.</p>"},{"location":"api/color/#textual.color.Gradient.__init__","title":"<code>__init__(*stops)</code>","text":"<p>Create a color gradient that blends colors to form a spectrum.</p> <p>A gradient is defined by a sequence of \"stops\" consisting of a float and a color. The stop indicate the color at that point on a spectrum between 0 and 1.</p> <p>Parameters:</p> Name Type Description Default <code>stops</code> <code>tuple[float, Color]</code> <p>A colors stop.</p> <code>()</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any stops are missing (must be at least a stop for 0 and 1).</p>"},{"location":"api/color/#textual.color.Gradient.get_color","title":"<code>get_color(position)</code>","text":"<p>Get a color from the gradient at a position between 0 and 1.</p> <p>Positions that are between stops will return a blended color.</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <p>A number between 0 and 1, where 0 is the first stop, and 1 is the last.</p> required <p>Returns:</p> Type Description <code>Color</code> <p>A color.</p>"},{"location":"api/color/#textual.color.HSL","title":"<code>HSL</code>","text":"<p>         Bases: <code>NamedTuple</code></p> <p>A color in HLS format.</p>"},{"location":"api/color/#textual.color.HSL.css","title":"<code>css: str</code>  <code>property</code>","text":"<p>HSL in css format.</p>"},{"location":"api/color/#textual.color.HSL.h","title":"<code>h: float</code>  <code>class-attribute</code>","text":"<p>Hue</p>"},{"location":"api/color/#textual.color.HSL.l","title":"<code>l: float</code>  <code>class-attribute</code>","text":"<p>Lightness</p>"},{"location":"api/color/#textual.color.HSL.s","title":"<code>s: float</code>  <code>class-attribute</code>","text":"<p>Saturation</p>"},{"location":"api/color/#textual.color.HSV","title":"<code>HSV</code>","text":"<p>         Bases: <code>NamedTuple</code></p> <p>A color in HSV format.</p>"},{"location":"api/color/#textual.color.HSV.h","title":"<code>h: float</code>  <code>class-attribute</code>","text":"<p>Hue</p>"},{"location":"api/color/#textual.color.HSV.s","title":"<code>s: float</code>  <code>class-attribute</code>","text":"<p>Saturation</p>"},{"location":"api/color/#textual.color.HSV.v","title":"<code>v: float</code>  <code>class-attribute</code>","text":"<p>Value</p>"},{"location":"api/color/#textual.color.Lab","title":"<code>Lab</code>","text":"<p>         Bases: <code>NamedTuple</code></p> <p>A color in CIE-L*ab format.</p>"},{"location":"api/color/#textual.color.lab_to_rgb","title":"<code>lab_to_rgb(lab, alpha=1.0)</code>","text":"<p>Convert a CIE-L*ab color to RGB.</p> <p>Uses the standard RGB color space with a D65/2\u2070 standard illuminant. Conversion passes through the XYZ color space. Cf. http://www.easyrgb.com/en/math.php.</p>"},{"location":"api/color/#textual.color.rgb_to_lab","title":"<code>rgb_to_lab(rgb)</code>","text":"<p>Convert an RGB color to the CIE-L*ab format.</p> <p>Uses the standard RGB color space with a D65/2\u2070 standard illuminant. Conversion passes through the XYZ color space. Cf. http://www.easyrgb.com/en/math.php.</p>"},{"location":"api/containers/","title":"Containers","text":""},{"location":"api/containers/#textual.containers","title":"<code>containers</code>","text":""},{"location":"api/containers/#textual.containers.Center","title":"<code>Center</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A container which centers children horizontally.</p>"},{"location":"api/containers/#textual.containers.Container","title":"<code>Container</code>","text":"<p>         Bases: <code>Widget</code></p> <p>Simple container widget, with vertical layout.</p>"},{"location":"api/containers/#textual.containers.Content","title":"<code>Content</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A container for content such as text.</p>"},{"location":"api/containers/#textual.containers.Grid","title":"<code>Grid</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A container with grid alignment.</p>"},{"location":"api/containers/#textual.containers.Horizontal","title":"<code>Horizontal</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A container which arranges children horizontally.</p>"},{"location":"api/containers/#textual.containers.HorizontalScroll","title":"<code>HorizontalScroll</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A container which arranges children horizontally, with an automatic horizontal scrollbar.</p>"},{"location":"api/containers/#textual.containers.Middle","title":"<code>Middle</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A container which aligns children vertically in the middle.</p>"},{"location":"api/containers/#textual.containers.Vertical","title":"<code>Vertical</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A container which arranges children vertically.</p>"},{"location":"api/containers/#textual.containers.VerticalScroll","title":"<code>VerticalScroll</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A container which arranges children vertically, with an automatic vertical scrollbar.</p>"},{"location":"api/content_switcher/","title":"Content switcher","text":""},{"location":"api/content_switcher/#textual.widgets.ContentSwitcher","title":"<code>ContentSwitcher</code>","text":"<p>         Bases: <code>Container</code></p> <p>A widget for switching between different children.</p> Note <p>All child widgets that are to be switched between need a unique ID. Children that have no ID will be hidden and ignored.</p>"},{"location":"api/content_switcher/#textual.widgets._content_switcher.ContentSwitcher.current","title":"<code>current: reactive[str | None]</code>  <code>class-attribute</code>","text":"<p>The ID of the currently-displayed widget.</p> <p>If set to <code>None</code> then no widget is visible.</p> Note <p>If set to an unknown ID, this will result in NoMatches being raised.</p>"},{"location":"api/content_switcher/#textual.widgets._content_switcher.ContentSwitcher.visible_content","title":"<code>visible_content: Widget | None</code>  <code>property</code>","text":"<p>A reference to the currently-visible widget.</p> <p><code>None</code> if nothing is visible.</p>"},{"location":"api/content_switcher/#textual.widgets._content_switcher.ContentSwitcher.__init__","title":"<code>__init__(*children, name=None, id=None, classes=None, disabled=False, initial=None)</code>","text":"<p>Initialise the content switching widget.</p> <p>Parameters:</p> Name Type Description Default <code>*children</code> <code>Widget</code> <p>The widgets to switch between.</p> <code>()</code> <code>name</code> <code>str | None</code> <p>The name of the content switcher.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the content switcher in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the content switcher.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the content switcher is disabled or not.</p> <code>False</code> <code>initial</code> <code>str | None</code> <p>The ID of the initial widget to show.</p> <code>None</code> Note <p>If <code>initial</code> is not supplied no children will be shown to start with.</p>"},{"location":"api/content_switcher/#textual.widgets._content_switcher.ContentSwitcher.on_mount","title":"<code>on_mount()</code>","text":"<p>Perform the initial setup of the widget once the DOM is ready.</p>"},{"location":"api/content_switcher/#textual.widgets._content_switcher.ContentSwitcher.watch_current","title":"<code>watch_current(old, new)</code>","text":"<p>React to the current visible child choice being changed.</p> <p>Parameters:</p> Name Type Description Default <code>old</code> <code>str | None</code> <p>The old widget ID (or <code>None</code> if there was no widget).</p> required <code>new</code> <code>str | None</code> <p>The new widget ID (or <code>None</code> if nothing should be shown).</p> required"},{"location":"api/coordinate/","title":"Coordinate","text":""},{"location":"api/coordinate/#textual.coordinate","title":"<code>coordinate</code>","text":""},{"location":"api/coordinate/#textual.coordinate.Coordinate","title":"<code>Coordinate</code>","text":"<p>         Bases: <code>NamedTuple</code></p> <p>An object representing a row/column coordinate within a grid.</p>"},{"location":"api/coordinate/#textual.coordinate.Coordinate.column","title":"<code>column: int</code>  <code>class-attribute</code>","text":"<p>The column of the coordinate within a grid.</p>"},{"location":"api/coordinate/#textual.coordinate.Coordinate.row","title":"<code>row: int</code>  <code>class-attribute</code>","text":"<p>The row of the coordinate within a grid.</p>"},{"location":"api/coordinate/#textual.coordinate.Coordinate.down","title":"<code>down()</code>","text":"<p>Get the coordinate below.</p> <p>Returns:</p> Type Description <code>Coordinate</code> <p>The coordinate below.</p>"},{"location":"api/coordinate/#textual.coordinate.Coordinate.left","title":"<code>left()</code>","text":"<p>Get the coordinate to the left.</p> <p>Returns:</p> Type Description <code>Coordinate</code> <p>The coordinate to the left.</p>"},{"location":"api/coordinate/#textual.coordinate.Coordinate.right","title":"<code>right()</code>","text":"<p>Get the coordinate to the right.</p> <p>Returns:</p> Type Description <code>Coordinate</code> <p>The coordinate to the right.</p>"},{"location":"api/coordinate/#textual.coordinate.Coordinate.up","title":"<code>up()</code>","text":"<p>Get the coordinate above.</p> <p>Returns:</p> Type Description <code>Coordinate</code> <p>The coordinate above.</p>"},{"location":"api/data_table/","title":"Data table","text":""},{"location":"api/data_table/#textual.widgets.DataTable","title":"<code>DataTable</code>","text":"<p>         Bases: <code>ScrollView</code>, <code>Generic[CellType]</code></p> <p>A tabular widget that contains data.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.BINDINGS","title":"<code>BINDINGS: ClassVar[list[BindingType]]</code>  <code>class-attribute</code>","text":"Key(s) Description enter Select cells under the cursor. up Move the cursor up. down Move the cursor down. right Move the cursor right. left Move the cursor left."},{"location":"api/data_table/#textual.widgets._data_table.DataTable.COMPONENT_CLASSES","title":"<code>COMPONENT_CLASSES: ClassVar[set[str]]</code>  <code>class-attribute</code>","text":"Class Description <code>datatable--cursor</code> Target the cursor. <code>datatable--hover</code> Target the cells under the hover cursor. <code>datatable--fixed</code> Target fixed columns and fixed rows. <code>datatable--fixed-cursor</code> Target highlighted and fixed columns or header. <code>datatable--header</code> Target the header of the data table. <code>datatable--header-cursor</code> Target cells highlighted by the cursor. <code>datatable--header-hover</code> Target hovered header or row label cells. <code>datatable--even-row</code> Target even rows (row indices start at 0). <code>datatable--odd-row</code> Target odd rows (row indices start at 0)."},{"location":"api/data_table/#textual.widgets._data_table.DataTable.columns","title":"<code>columns: dict[ColumnKey, Column]</code>  <code>instance-attribute</code>","text":"<p>Metadata about the columns of the table, indexed by their key.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.cursor_column","title":"<code>cursor_column: int</code>  <code>property</code>","text":"<p>The index of the column that the DataTable cursor is currently on.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.cursor_row","title":"<code>cursor_row: int</code>  <code>property</code>","text":"<p>The index of the row that the DataTable cursor is currently on.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.fixed_columns","title":"<code>fixed_columns</code>  <code>instance-attribute</code>","text":"<p>The number of columns to fix (prevented from scrolling).</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.fixed_rows","title":"<code>fixed_rows</code>  <code>instance-attribute</code>","text":"<p>The number of rows to fix (prevented from scrolling).</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.header_height","title":"<code>header_height</code>  <code>instance-attribute</code>","text":"<p>The height of the header row (the row of column labels).</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.hover_column","title":"<code>hover_column: int</code>  <code>property</code>","text":"<p>The index of the column that the mouse cursor is currently hovering above.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.hover_row","title":"<code>hover_row: int</code>  <code>property</code>","text":"<p>The index of the row that the mouse cursor is currently hovering above.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.ordered_columns","title":"<code>ordered_columns: list[Column]</code>  <code>property</code>","text":"<p>The list of Columns in the DataTable, ordered as they appear on screen.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.ordered_rows","title":"<code>ordered_rows: list[Row]</code>  <code>property</code>","text":"<p>The list of Rows in the DataTable, ordered as they appear on screen.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.row_count","title":"<code>row_count: int</code>  <code>property</code>","text":"<p>The number of rows currently present in the DataTable.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.rows","title":"<code>rows: dict[RowKey, Row]</code>  <code>instance-attribute</code>","text":"<p>Metadata about the rows of the table, indexed by their key.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.show_cursor","title":"<code>show_cursor</code>  <code>instance-attribute</code>","text":"<p>Show/hide both the keyboard and hover cursor.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.show_header","title":"<code>show_header</code>  <code>instance-attribute</code>","text":"<p>Show/hide the header row (the row of column labels).</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.show_row_labels","title":"<code>show_row_labels</code>  <code>instance-attribute</code>","text":"<p>Show/hide the column containing the labels of rows.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.zebra_stripes","title":"<code>zebra_stripes</code>  <code>instance-attribute</code>","text":"<p>Apply zebra effect on row backgrounds (light, dark, light, dark, ...).</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.CellHighlighted","title":"<code>CellHighlighted</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when the cursor moves to highlight a new cell.</p> <p>This is only relevant when the <code>cursor_type</code> is <code>\"cell\"</code>. It's also posted when the cell cursor is re-enabled (by setting <code>show_cursor=True</code>), and when the cursor type is changed to <code>\"cell\"</code>. Can be handled using <code>on_data_table_cell_highlighted</code> in a subclass of <code>DataTable</code> or in a parent widget in the DOM.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.CellHighlighted.cell_key","title":"<code>cell_key: CellKey</code>  <code>instance-attribute</code>","text":"<p>The key for the highlighted cell.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.CellHighlighted.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.CellHighlighted.coordinate","title":"<code>coordinate: Coordinate</code>  <code>instance-attribute</code>","text":"<p>The coordinate of the highlighted cell.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.CellHighlighted.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.CellHighlighted.value","title":"<code>value: CellType</code>  <code>instance-attribute</code>","text":"<p>The value in the highlighted cell.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.CellSelected","title":"<code>CellSelected</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted by the <code>DataTable</code> widget when a cell is selected.</p> <p>This is only relevant when the <code>cursor_type</code> is <code>\"cell\"</code>. Can be handled using <code>on_data_table_cell_selected</code> in a subclass of <code>DataTable</code> or in a parent widget in the DOM.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.CellSelected.cell_key","title":"<code>cell_key: CellKey</code>  <code>instance-attribute</code>","text":"<p>The key for the selected cell.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.CellSelected.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.CellSelected.coordinate","title":"<code>coordinate: Coordinate</code>  <code>instance-attribute</code>","text":"<p>The coordinate of the cell that was selected.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.CellSelected.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.CellSelected.value","title":"<code>value: CellType</code>  <code>instance-attribute</code>","text":"<p>The value in the cell that was selected.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.ColumnHighlighted","title":"<code>ColumnHighlighted</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a column is highlighted.</p> <p>This message is only posted when the <code>cursor_type</code> is set to <code>\"column\"</code>. Can be handled using <code>on_data_table_column_highlighted</code> in a subclass of <code>DataTable</code> or in a parent widget in the DOM.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.ColumnHighlighted.column_key","title":"<code>column_key</code>  <code>instance-attribute</code>","text":"<p>The key of the column that was highlighted.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.ColumnHighlighted.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.ColumnHighlighted.cursor_column","title":"<code>cursor_column: int</code>  <code>instance-attribute</code>","text":"<p>The x-coordinate of the column that was highlighted.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.ColumnHighlighted.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.ColumnSelected","title":"<code>ColumnSelected</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a column is selected.</p> <p>This message is only posted when the <code>cursor_type</code> is set to <code>\"column\"</code>. Can be handled using <code>on_data_table_column_selected</code> in a subclass of <code>DataTable</code> or in a parent widget in the DOM.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.ColumnSelected.column_key","title":"<code>column_key</code>  <code>instance-attribute</code>","text":"<p>The key of the column that was selected.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.ColumnSelected.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.ColumnSelected.cursor_column","title":"<code>cursor_column: int</code>  <code>instance-attribute</code>","text":"<p>The x-coordinate of the column that was selected.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.ColumnSelected.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.HeaderSelected","title":"<code>HeaderSelected</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a column header/label is clicked.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.HeaderSelected.column_index","title":"<code>column_index</code>  <code>instance-attribute</code>","text":"<p>The index for the column.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.HeaderSelected.column_key","title":"<code>column_key</code>  <code>instance-attribute</code>","text":"<p>The key for the column.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.HeaderSelected.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.HeaderSelected.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.HeaderSelected.label","title":"<code>label</code>  <code>instance-attribute</code>","text":"<p>The text of the label.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowHighlighted","title":"<code>RowHighlighted</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a row is highlighted.</p> <p>This message is only posted when the <code>cursor_type</code> is set to <code>\"row\"</code>. Can be handled using <code>on_data_table_row_highlighted</code> in a subclass of <code>DataTable</code> or in a parent widget in the DOM.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowHighlighted.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowHighlighted.cursor_row","title":"<code>cursor_row: int</code>  <code>instance-attribute</code>","text":"<p>The y-coordinate of the cursor that highlighted the row.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowHighlighted.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowHighlighted.row_key","title":"<code>row_key: RowKey</code>  <code>instance-attribute</code>","text":"<p>The key of the row that was highlighted.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowLabelSelected","title":"<code>RowLabelSelected</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a row label is clicked.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowLabelSelected.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowLabelSelected.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowLabelSelected.label","title":"<code>label</code>  <code>instance-attribute</code>","text":"<p>The text of the label.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowLabelSelected.row_index","title":"<code>row_index</code>  <code>instance-attribute</code>","text":"<p>The index for the column.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowLabelSelected.row_key","title":"<code>row_key</code>  <code>instance-attribute</code>","text":"<p>The key for the column.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowSelected","title":"<code>RowSelected</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a row is selected.</p> <p>This message is only posted when the <code>cursor_type</code> is set to <code>\"row\"</code>. Can be handled using <code>on_data_table_row_selected</code> in a subclass of <code>DataTable</code> or in a parent widget in the DOM.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowSelected.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowSelected.cursor_row","title":"<code>cursor_row: int</code>  <code>instance-attribute</code>","text":"<p>The y-coordinate of the cursor that made the selection.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowSelected.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.RowSelected.row_key","title":"<code>row_key: RowKey</code>  <code>instance-attribute</code>","text":"<p>The key of the row that was selected.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.add_column","title":"<code>add_column(label, *, width=None, key=None)</code>","text":"<p>Add a column to the table.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType</code> <p>A str or Text object containing the label (shown top of column).</p> required <code>width</code> <code>int | None</code> <p>Width of the column in cells or None to fit content.</p> <code>None</code> <code>key</code> <code>str | None</code> <p>A key which uniquely identifies this column. If None, it will be generated for you.</p> <code>None</code> <p>Returns:</p> Type Description <code>ColumnKey</code> <p>Uniquely identifies this column. Can be used to retrieve this column regardless of its current location in the DataTable (it could have moved after being added due to sorting/insertion/deletion of other columns).</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.add_columns","title":"<code>add_columns(*labels)</code>","text":"<p>Add a number of columns.</p> <p>Parameters:</p> Name Type Description Default <code>*labels</code> <code>TextType</code> <p>Column headers.</p> <code>()</code> <p>Returns:</p> Type Description <code>list[ColumnKey]</code> <p>A list of the keys for the columns that were added. See the <code>add_column</code> method docstring for more information on how these keys are used.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.add_row","title":"<code>add_row(*cells, height=1, key=None, label=None)</code>","text":"<p>Add a row at the bottom of the DataTable.</p> <p>Parameters:</p> Name Type Description Default <code>*cells</code> <code>CellType</code> <p>Positional arguments should contain cell data.</p> <code>()</code> <code>height</code> <code>int</code> <p>The height of a row (in lines).</p> <code>1</code> <code>key</code> <code>str | None</code> <p>A key which uniquely identifies this row. If None, it will be generated for you and returned.</p> <code>None</code> <code>label</code> <code>TextType | None</code> <p>The label for the row. Will be displayed to the left if supplied.</p> <code>None</code> <p>Returns:</p> Type Description <code>RowKey</code> <p>Uniquely identifies this row. Can be used to retrieve this row regardless of its current location in the DataTable (it could have moved after being added due to sorting or insertion/deletion of other rows).</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.add_rows","title":"<code>add_rows(rows)</code>","text":"<p>Add a number of rows at the bottom of the DataTable.</p> <p>Parameters:</p> Name Type Description Default <code>rows</code> <code>Iterable[Iterable[CellType]]</code> <p>Iterable of rows. A row is an iterable of cells.</p> required <p>Returns:</p> Type Description <code>list[RowKey]</code> <p>A list of the keys for the rows that were added. See the <code>add_row</code> method docstring for more information on how these keys are used.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.clear","title":"<code>clear(columns=False)</code>","text":"<p>Clear the table.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>bool</code> <p>Also clear the columns. Defaults to False.</p> <code>False</code>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.coordinate_to_cell_key","title":"<code>coordinate_to_cell_key(coordinate)</code>","text":"<p>Return the key for the cell currently occupying this coordinate.</p> <p>Parameters:</p> Name Type Description Default <code>coordinate</code> <code>Coordinate</code> <p>The coordinate to exam the current cell key of.</p> required <p>Returns:</p> Type Description <code>CellKey</code> <p>The key of the cell currently occupying this coordinate.</p> <p>Raises:</p> Type Description <code>CellDoesNotExist</code> <p>If the coordinate is not valid.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.get_cell","title":"<code>get_cell(row_key, column_key)</code>","text":"<p>Given a row key and column key, return the value of the corresponding cell.</p> <p>Parameters:</p> Name Type Description Default <code>row_key</code> <code>RowKey</code> <p>The row key of the cell.</p> required <code>column_key</code> <code>ColumnKey</code> <p>The column key of the cell.</p> required <p>Returns:</p> Type Description <code>CellType</code> <p>The value of the cell identified by the row and column keys.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.get_cell_at","title":"<code>get_cell_at(coordinate)</code>","text":"<p>Get the value from the cell occupying the given coordinate.</p> <p>Parameters:</p> Name Type Description Default <code>coordinate</code> <code>Coordinate</code> <p>The coordinate to retrieve the value from.</p> required <p>Returns:</p> Type Description <code>CellType</code> <p>The value of the cell at the coordinate.</p> <p>Raises:</p> Type Description <code>CellDoesNotExist</code> <p>If there is no cell with the given coordinate.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.get_column","title":"<code>get_column(column_key)</code>","text":"<p>Get the values from the column identified by the given column key.</p> <p>Parameters:</p> Name Type Description Default <code>column_key</code> <code>ColumnKey | str</code> <p>The key of the column.</p> required <p>Returns:</p> Type Description <code>Iterable[CellType]</code> <p>A generator which yields the cells in the column.</p> <p>Raises:</p> Type Description <code>ColumnDoesNotExist</code> <p>If there is no column corresponding to the key.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.get_column_at","title":"<code>get_column_at(column_index)</code>","text":"<p>Get the values from the column at a given index.</p> <p>Parameters:</p> Name Type Description Default <code>column_index</code> <code>int</code> <p>The index of the column.</p> required <p>Returns:</p> Type Description <code>Iterable[CellType]</code> <p>A generator which yields the cells in the column.</p> <p>Raises:</p> Type Description <code>ColumnDoesNotExist</code> <p>If there is no column with the given index.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.get_row","title":"<code>get_row(row_key)</code>","text":"<p>Get the values from the row identified by the given row key.</p> <p>Parameters:</p> Name Type Description Default <code>row_key</code> <code>RowKey | str</code> <p>The key of the row.</p> required <p>Returns:</p> Type Description <code>list[CellType]</code> <p>A list of the values contained within the row.</p> <p>Raises:</p> Type Description <code>RowDoesNotExist</code> <p>When there is no row corresponding to the key.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.get_row_at","title":"<code>get_row_at(row_index)</code>","text":"<p>Get the values from the cells in a row at a given index. This will return the values from a row based on the rows current position in the table.</p> <p>Parameters:</p> Name Type Description Default <code>row_index</code> <code>int</code> <p>The index of the row.</p> required <p>Returns:</p> Type Description <code>list[CellType]</code> <p>A list of the values contained in the row.</p> <p>Raises:</p> Type Description <code>RowDoesNotExist</code> <p>If there is no row with the given index.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.get_row_height","title":"<code>get_row_height(row_key)</code>","text":"<p>Given a row key, return the height of that row in terminal cells.</p> <p>Parameters:</p> Name Type Description Default <code>row_key</code> <code>RowKey</code> <p>The key of the row.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The height of the row, measured in terminal character cells.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.is_valid_column_index","title":"<code>is_valid_column_index(column_index)</code>","text":"<p>Return a boolean indicating whether the column_index is within table bounds.</p> <p>Parameters:</p> Name Type Description Default <code>column_index</code> <code>int</code> <p>The column index to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the column index is within the bounds of the table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.is_valid_coordinate","title":"<code>is_valid_coordinate(coordinate)</code>","text":"<p>Return a boolean indicating whether the given coordinate is valid.</p> <p>Parameters:</p> Name Type Description Default <code>coordinate</code> <code>Coordinate</code> <p>The coordinate to validate.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the coordinate is within the bounds of the table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.is_valid_row_index","title":"<code>is_valid_row_index(row_index)</code>","text":"<p>Return a boolean indicating whether the row_index is within table bounds.</p> <p>Parameters:</p> Name Type Description Default <code>row_index</code> <code>int</code> <p>The row index to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the row index is within the bounds of the table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.on_idle","title":"<code>on_idle()</code>","text":"<p>Runs when the message pump is empty.</p> <p>We use this for some expensive calculations like re-computing dimensions of the whole DataTable and re-computing column widths after some cells have been updated. This is more efficient in the case of high frequency updates, ensuring we only do expensive computations once.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.on_mouse_move","title":"<code>on_mouse_move(event)</code>","text":"<p>If the hover cursor is visible, display it by extracting the row and column metadata from the segments present in the cells.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.refresh_column","title":"<code>refresh_column(column_index)</code>","text":"<p>Refresh the column at the given index.</p> <p>Parameters:</p> Name Type Description Default <code>column_index</code> <code>int</code> <p>The index of the column to refresh.</p> required"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.refresh_coordinate","title":"<code>refresh_coordinate(coordinate)</code>","text":"<p>Refresh the cell at a coordinate.</p> <p>Parameters:</p> Name Type Description Default <code>coordinate</code> <code>Coordinate</code> <p>The coordinate to refresh.</p> required"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.refresh_row","title":"<code>refresh_row(row_index)</code>","text":"<p>Refresh the row at the given index.</p> <p>Parameters:</p> Name Type Description Default <code>row_index</code> <code>int</code> <p>The index of the row to refresh.</p> required"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.sort","title":"<code>sort(*columns, reverse=False)</code>","text":"<p>Sort the rows in the DataTable by one or more column keys.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>ColumnKey | str</code> <p>One or more columns to sort by the values in.</p> <code>()</code> <code>reverse</code> <code>bool</code> <p>If True, the sort order will be reversed.</p> <code>False</code>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.update_cell","title":"<code>update_cell(row_key, column_key, value, *, update_width=False)</code>","text":"<p>Update the cell identified by the specified row key and column key.</p> <p>Parameters:</p> Name Type Description Default <code>row_key</code> <code>RowKey | str</code> <p>The key identifying the row.</p> required <code>column_key</code> <code>ColumnKey | str</code> <p>The key identifying the column.</p> required <code>value</code> <code>CellType</code> <p>The new value to put inside the cell.</p> required <code>update_width</code> <code>bool</code> <p>Whether to resize the column width to accommodate for the new cell content.</p> <code>False</code> <p>Raises:</p> Type Description <code>CellDoesNotExist</code> <p>When the supplied <code>row_key</code> and <code>column_key</code> cannot be found in the table.</p>"},{"location":"api/data_table/#textual.widgets._data_table.DataTable.update_cell_at","title":"<code>update_cell_at(coordinate, value, *, update_width=False)</code>","text":"<p>Update the content inside the cell currently occupying the given coordinate.</p> <p>Parameters:</p> Name Type Description Default <code>coordinate</code> <code>Coordinate</code> <p>The coordinate to update the cell at.</p> required <code>value</code> <code>CellType</code> <p>The new value to place inside the cell.</p> required <code>update_width</code> <code>bool</code> <p>Whether to resize the column width to accommodate for the new cell content.</p> <code>False</code>"},{"location":"api/directory_tree/","title":"Directory tree","text":""},{"location":"api/directory_tree/#textual.widgets.DirectoryTree","title":"<code>DirectoryTree</code>","text":"<p>         Bases: <code>Tree[DirEntry]</code></p> <p>A Tree widget that presents files and directories.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to directory.</p> required <code>name</code> <code>str | None</code> <p>The name of the widget, or None for no name. Defaults to None.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the widget in the DOM, or None for no ID. Defaults to None.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>A space-separated list of classes, or None for no classes. Defaults to None.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the directory tree is disabled or not.</p> <code>False</code>"},{"location":"api/directory_tree/#textual.widgets._directory_tree.DirectoryTree.COMPONENT_CLASSES","title":"<code>COMPONENT_CLASSES: ClassVar[set[str]]</code>  <code>class-attribute</code>","text":"Class Description <code>directory-tree--extension</code> Target the extension of a file name. <code>directory-tree--file</code> Target files in the directory structure. <code>directory-tree--folder</code> Target folders in the directory structure. <code>directory-tree--hidden</code> Target hidden items in the directory structure. <p>See also the component classes for <code>Tree</code>.</p>"},{"location":"api/directory_tree/#textual.widgets._directory_tree.DirectoryTree.FileSelected","title":"<code>FileSelected</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a file is selected.</p> <p>Can be handled using <code>on_directory_tree_file_selected</code> in a subclass of <code>DirectoryTree</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>path</code> <code>str</code> <p>The path of the file that was selected.</p>"},{"location":"api/directory_tree/#textual.widgets._directory_tree.DirectoryTree.process_label","title":"<code>process_label(label)</code>","text":"<p>Process a str or Text into a label. Maybe overridden in a subclass to modify how labels are rendered.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType</code> <p>Label.</p> required <p>Returns:</p> Type Description <p>A Rich Text object.</p>"},{"location":"api/dom_node/","title":"Dom node","text":""},{"location":"api/dom_node/#textual.dom","title":"<code>dom</code>","text":""},{"location":"api/dom_node/#textual.dom.BadIdentifier","title":"<code>BadIdentifier</code>","text":"<p>         Bases: <code>Exception</code></p> <p>raised by check_identifiers.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode","title":"<code>DOMNode</code>","text":"<p>         Bases: <code>MessagePump</code></p> <p>The base class for object that can be in the Textual DOM (App and Widget)</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.ancestors","title":"<code>ancestors: list[DOMNode]</code>  <code>property</code>","text":"<p>A list of ancestor nodes Nodes by tracing ancestors all the way back to App.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.ancestors_with_self","title":"<code>ancestors_with_self: list[DOMNode]</code>  <code>property</code>","text":"<p>A list of Nodes by tracing a path all the way back to App.</p> Note <p>This is inclusive of <code>self</code>.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.auto_refresh","title":"<code>auto_refresh: float | None</code>  <code>writable</code> <code>property</code>","text":"<p>Interval to refresh widget, or <code>None</code> for no automatic refresh.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.background_colors","title":"<code>background_colors: tuple[Color, Color]</code>  <code>property</code>","text":"<p>The background color and the color of the parent's background.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.children","title":"<code>children: Sequence[Widget]</code>  <code>property</code>","text":"<p>A view on to the children.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.classes","title":"<code>classes: frozenset[str]</code>  <code>property</code>","text":"<p>A frozenset of the current classes set on the widget.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.colors","title":"<code>colors: tuple[Color, Color, Color, Color]</code>  <code>property</code>","text":"<p>The widget's foreground and background colors, and its parent's (base) colors.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.css_identifier","title":"<code>css_identifier: str</code>  <code>property</code>","text":"<p>A CSS selector that identifies this DOM node.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.css_identifier_styled","title":"<code>css_identifier_styled: Text</code>  <code>property</code>","text":"<p>A stylized CSS identifier.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.css_path_nodes","title":"<code>css_path_nodes: list[DOMNode]</code>  <code>property</code>","text":"<p>A list of nodes from the root to this node, forming a \"path\".</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.css_tree","title":"<code>css_tree: Tree</code>  <code>property</code>","text":"<p>Get a Rich tree object which will recursively render the structure of the node tree, which also displays CSS and size information.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.display","title":"<code>display: bool</code>  <code>writable</code> <code>property</code>","text":"<p>Should the DOM node be displayed?</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.displayed_children","title":"<code>displayed_children: list[Widget]</code>  <code>property</code>","text":"<p>The children which don't have display: none set.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.id","title":"<code>id: str | None</code>  <code>writable</code> <code>property</code>","text":"<p>The ID of this node, or None if the node has no ID.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.name","title":"<code>name: str | None</code>  <code>property</code>","text":"<p>The name of the node.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.parent","title":"<code>parent: DOMNode | None</code>  <code>property</code>","text":"<p>The parent node.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.pseudo_classes","title":"<code>pseudo_classes: frozenset[str]</code>  <code>property</code>","text":"<p>A set of all pseudo classes</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.rich_style","title":"<code>rich_style: Style</code>  <code>property</code>","text":"<p>Get a Rich Style object for this DOMNode.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.screen","title":"<code>screen: Screen</code>  <code>property</code>","text":"<p>The screen that this node is contained within.</p> Note <p>This may not be the currently active screen within the app.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.text_style","title":"<code>text_style: Style</code>  <code>property</code>","text":"<p>Get the text style object.</p> <p>A widget's style is influenced by its parent. for instance if a parent is bold, then the child will also be bold.</p> <p>Returns:</p> Type Description <code>Style</code> <p>Rich Style object.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.tree","title":"<code>tree: Tree</code>  <code>property</code>","text":"<p>Get a Rich tree object which will recursively render the structure of the node tree.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.visible","title":"<code>visible: bool</code>  <code>writable</code> <code>property</code>","text":"<p>Is the DOM node visible?</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.add_class","title":"<code>add_class(*class_names)</code>","text":"<p>Add class names to this Node.</p> <p>Parameters:</p> Name Type Description Default <code>*class_names</code> <code>str</code> <p>CSS class names to add.</p> <code>()</code>"},{"location":"api/dom_node/#textual.dom.DOMNode.get_component_styles","title":"<code>get_component_styles(name)</code>","text":"<p>Get a \"component\" styles object (must be defined in COMPONENT_CLASSES classvar).</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the component.</p> required <p>Raises:</p> Type Description <code>KeyError</code> <p>If the component class doesn't exist.</p> <p>Returns:</p> Type Description <code>RenderStyles</code> <p>A Styles object.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.get_pseudo_classes","title":"<code>get_pseudo_classes()</code>","text":"<p>Get any pseudo classes applicable to this Node, e.g. hover, focus.</p> <p>Returns:</p> Type Description <code>Iterable[str]</code> <p>Iterable of strings, such as a generator.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.has_class","title":"<code>has_class(*class_names)</code>","text":"<p>Check if the Node has all the given class names.</p> <p>Parameters:</p> Name Type Description Default <code>*class_names</code> <code>str</code> <p>CSS class names to check.</p> <code>()</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the node has all the given class names, otherwise <code>False</code>.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.has_pseudo_class","title":"<code>has_pseudo_class(*class_names)</code>","text":"<p>Check for pseudo classes (such as hover, focus etc)</p> <p>Parameters:</p> Name Type Description Default <code>*class_names</code> <code>str</code> <p>The pseudo classes to check for.</p> <code>()</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the DOM node has those pseudo classes, <code>False</code> if not.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.notify_style_update","title":"<code>notify_style_update()</code>","text":"<p>Called after styles are updated.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.query","title":"<code>query(selector=None)</code>","text":"<p>Get a DOM query matching a selector.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>str | type[QueryType] | None</code> <p>A CSS selector or <code>None</code> for all nodes. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>DOMQuery[Widget] | DOMQuery[QueryType]</code> <p>A query object.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.query_one","title":"<code>query_one(selector, expect_type=None)</code>","text":"<p>Get a single Widget matching the given selector or selector type.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>str | type[QueryType]</code> <p>A selector.</p> required <code>expect_type</code> <code>type[QueryType] | None</code> <p>Require the object be of the supplied type, or None for any type. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>WrongType</code> <p>If the wrong type was found.</p> <code>NoMatches</code> <p>If no node matches the query.</p> <code>TooManyMatches</code> <p>If there is more than one matching node in the query.</p> <p>Returns:</p> Type Description <code>QueryType | Widget</code> <p>A widget matching the selector.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.remove_class","title":"<code>remove_class(*class_names)</code>","text":"<p>Remove class names from this Node.</p> <p>Parameters:</p> Name Type Description Default <code>*class_names</code> <code>str</code> <p>CSS class names to remove.</p> <code>()</code>"},{"location":"api/dom_node/#textual.dom.DOMNode.reset_styles","title":"<code>reset_styles()</code>","text":"<p>Reset styles back to their initial state</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.set_class","title":"<code>set_class(add, *class_names)</code>","text":"<p>Add or remove class(es) based on a condition.</p> <p>Parameters:</p> Name Type Description Default <code>add</code> <code>bool</code> <p>Add the classes if True, otherwise remove them.</p> required"},{"location":"api/dom_node/#textual.dom.DOMNode.set_styles","title":"<code>set_styles(css=None, **update_styles)</code>","text":"<p>Set custom styles on this object.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.toggle_class","title":"<code>toggle_class(*class_names)</code>","text":"<p>Toggle class names on this Node.</p> <p>Parameters:</p> Name Type Description Default <code>*class_names</code> <code>str</code> <p>CSS class names to toggle.</p> <code>()</code>"},{"location":"api/dom_node/#textual.dom.DOMNode.walk_children","title":"<code>walk_children(filter_type=None, *, with_self=False, method='depth', reverse=False)</code>","text":"<p>Walk the subtree rooted at this node, and return every descendant encountered in a list.</p> <p>Parameters:</p> Name Type Description Default <code>filter_type</code> <code>type[WalkType] | None</code> <p>Filter only this type, or None for no filter. Defaults to None.</p> <code>None</code> <code>with_self</code> <code>bool</code> <p>Also yield self in addition to descendants. Defaults to False.</p> <code>False</code> <code>method</code> <code>WalkMethod</code> <p>One of \"depth\" or \"breadth\". Defaults to \"depth\".</p> <code>'depth'</code> <code>reverse</code> <code>bool</code> <p>Reverse the order (bottom up). Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[DOMNode] | list[WalkType]</code> <p>A list of nodes.</p>"},{"location":"api/dom_node/#textual.dom.DOMNode.watch","title":"<code>watch(obj, attribute_name, callback, init=True)</code>","text":"<p>Watches for modifications to reactive attributes on another object.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>DOMNode</code> <p>Object containing attribute to watch.</p> required <code>attribute_name</code> <code>str</code> <p>Attribute to watch.</p> required <code>callback</code> <code>WatchCallbackType</code> <p>A callback to run when attribute changes.</p> required <code>init</code> <code>bool</code> <p>Check watchers on first call.</p> <code>True</code>"},{"location":"api/dom_node/#textual.dom.check_identifiers","title":"<code>check_identifiers(description, *names)</code>","text":"<p>Validate identifier and raise an error if it fails.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>Description of where identifier is used for error message.</p> required <code>names</code> <code>str</code> <p>Identifiers to check.</p> <code>()</code> <p>Returns:</p> Type Description <code>None</code> <p>True if the name is valid.</p>"},{"location":"api/events/","title":"Events","text":""},{"location":"api/events/#textual.events","title":"<code>events</code>","text":""},{"location":"api/events/#textual.events.Compose","title":"<code>Compose</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent to a widget to request it to compose and mount children.</p>"},{"location":"api/events/#textual.events.Event","title":"<code>Event</code>","text":"<p>         Bases: <code>Message</code></p> <p>The base class for all events.</p>"},{"location":"api/events/#textual.events.Hide","title":"<code>Hide</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent when a widget has been hidden.</p> <p>A widget may be hidden by setting its <code>visible</code> flag to <code>False</code>, if it is no longer in a layout, or if it has been offset beyond the edges of the terminal.</p>"},{"location":"api/events/#textual.events.Idle","title":"<code>Idle</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent when there are no more items in the message queue.</p> <p>This is a pseudo-event in that it is created by the Textual system and doesn't go through the usual message queue.</p>"},{"location":"api/events/#textual.events.InputEvent","title":"<code>InputEvent</code>","text":"<p>         Bases: <code>Event</code></p> <p>Base class for input events.</p>"},{"location":"api/events/#textual.events.InvokeCallbacks","title":"<code>InvokeCallbacks</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent after the Screen is updated</p>"},{"location":"api/events/#textual.events.Key","title":"<code>Key</code>","text":"<p>         Bases: <code>InputEvent</code></p> <p>Sent when the user hits a key on the keyboard.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key that was pressed.</p> required <code>character</code> <code>str | None</code> <p>A printable character or <code>None</code> if it is not printable.</p> required <p>Attributes:</p> Name Type Description <code>aliases</code> <code>list[str]</code> <p>The aliases for the key, including the key itself.</p>"},{"location":"api/events/#textual.events.Key.is_printable","title":"<code>is_printable: bool</code>  <code>property</code>","text":"<p>Check if the key is printable (produces a unicode character).</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the key is printable.</p>"},{"location":"api/events/#textual.events.Key.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Name of a key suitable for use as a Python identifier.</p>"},{"location":"api/events/#textual.events.Key.name_aliases","title":"<code>name_aliases: list[str]</code>  <code>property</code>","text":"<p>The corresponding name for every alias in <code>aliases</code> list.</p>"},{"location":"api/events/#textual.events.Load","title":"<code>Load</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent when the App is running but before the terminal is in application mode.</p> <p>Use this event to run any set up that doesn't require any visuals such as loading configuration and binding keys.</p>"},{"location":"api/events/#textual.events.Mount","title":"<code>Mount</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent when a widget is mounted and may receive messages.</p>"},{"location":"api/events/#textual.events.MouseCapture","title":"<code>MouseCapture</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent when the mouse has been captured.</p> <p>When a mouse has been captured, all further mouse events will be sent to the capturing widget.</p> <p>Parameters:</p> Name Type Description Default <code>mouse_position</code> <code>Offset</code> <p>The position of the mouse when captured.</p> required"},{"location":"api/events/#textual.events.MouseEvent","title":"<code>MouseEvent</code>","text":"<p>         Bases: <code>InputEvent</code></p> <p>Sent in response to a mouse event.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>The relative x coordinate.</p> required <code>y</code> <code>int</code> <p>The relative y coordinate.</p> required <code>delta_x</code> <code>int</code> <p>Change in x since the last message.</p> required <code>delta_y</code> <code>int</code> <p>Change in y since the last message.</p> required <code>button</code> <code>int</code> <p>Indexed of the pressed button.</p> required <code>shift</code> <code>bool</code> <p>True if the shift key is pressed.</p> required <code>meta</code> <code>bool</code> <p>True if the meta key is pressed.</p> required <code>ctrl</code> <code>bool</code> <p>True if the ctrl key is pressed.</p> required <code>screen_x</code> <code>int | None</code> <p>The absolute x coordinate.</p> <code>None</code> <code>screen_y</code> <code>int | None</code> <p>The absolute y coordinate.</p> <code>None</code> <code>style</code> <code>Style | None</code> <p>The Rich Style under the mouse cursor.</p> <code>None</code>"},{"location":"api/events/#textual.events.MouseEvent.delta","title":"<code>delta: Offset</code>  <code>property</code>","text":"<p>Mouse coordinate delta (change since last event).</p> <p>Returns:</p> Type Description <code>Offset</code> <p>Mouse coordinate.</p>"},{"location":"api/events/#textual.events.MouseEvent.offset","title":"<code>offset: Offset</code>  <code>property</code>","text":"<p>The mouse coordinate as an offset.</p> <p>Returns:</p> Type Description <code>Offset</code> <p>Mouse coordinate.</p>"},{"location":"api/events/#textual.events.MouseEvent.screen_offset","title":"<code>screen_offset: Offset</code>  <code>property</code>","text":"<p>Mouse coordinate relative to the screen.</p> <p>Returns:</p> Type Description <code>Offset</code> <p>Mouse coordinate.</p>"},{"location":"api/events/#textual.events.MouseEvent.style","title":"<code>style: Style</code>  <code>writable</code> <code>property</code>","text":"<p>The (Rich) Style under the cursor.</p>"},{"location":"api/events/#textual.events.MouseEvent.get_content_offset","title":"<code>get_content_offset(widget)</code>","text":"<p>Get offset within a widget's content area, or None if offset is not in content (i.e. padding or border).</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>Widget receiving the event.</p> required <p>Returns:</p> Type Description <code>Offset | None</code> <p>An offset where the origin is at the top left of the content area.</p>"},{"location":"api/events/#textual.events.MouseMove","title":"<code>MouseMove</code>","text":"<p>         Bases: <code>MouseEvent</code></p> <p>Sent when the mouse cursor moves.</p>"},{"location":"api/events/#textual.events.MouseRelease","title":"<code>MouseRelease</code>","text":"<p>         Bases: <code>Event</code></p> <p>Mouse has been released.</p> <p>Parameters:</p> Name Type Description Default <code>mouse_position</code> <code>Offset</code> <p>The position of the mouse when released.</p> required"},{"location":"api/events/#textual.events.Paste","title":"<code>Paste</code>","text":"<p>         Bases: <code>Event</code></p> <p>Event containing text that was pasted into the Textual application. This event will only appear when running in a terminal emulator that supports bracketed paste mode. Textual will enable bracketed pastes when an app starts, and disable it when the app shuts down.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text that has been pasted.</p> required"},{"location":"api/events/#textual.events.Ready","title":"<code>Ready</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent to the app when the DOM is ready.</p>"},{"location":"api/events/#textual.events.Resize","title":"<code>Resize</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent when the app or widget has been resized.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>Size</code> <p>The new size of the Widget.</p> required <code>virtual_size</code> <code>Size</code> <p>The virtual size (scrollable size) of the Widget.</p> required <code>container_size</code> <code>Size | None</code> <p>The size of the Widget's container widget. Defaults to None.</p> <code>None</code>"},{"location":"api/events/#textual.events.Show","title":"<code>Show</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent when a widget has become visible.</p>"},{"location":"api/events/#textual.events.Unmount","title":"<code>Unmount</code>","text":"<p>         Bases: <code>Mount</code></p> <p>Sent when a widget is unmounted and may not longer receive messages.</p>"},{"location":"api/footer/","title":"Footer","text":""},{"location":"api/footer/#textual.widgets.Footer","title":"<code>Footer</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A simple footer widget which docks itself to the bottom of the parent container.</p>"},{"location":"api/footer/#textual.widgets._footer.Footer.COMPONENT_CLASSES","title":"<code>COMPONENT_CLASSES: ClassVar[set[str]]</code>  <code>class-attribute</code>","text":"Class Description <code>footer--description</code> Targets the descriptions of the key bindings. <code>footer--highlight</code> Targets the highlighted key binding. <code>footer--highlight-key</code> Targets the key portion of the highlighted key binding. <code>footer--key</code> Targets the key portions of the key bindings."},{"location":"api/footer/#textual.widgets._footer.Footer.make_key_text","title":"<code>make_key_text()</code>","text":"<p>Create text containing all the keys.</p>"},{"location":"api/footer/#textual.widgets._footer.Footer.on_leave","title":"<code>on_leave(event)</code>  <code>async</code>","text":"<p>Clear any highlight when the mouse leaves the widget</p>"},{"location":"api/footer/#textual.widgets._footer.Footer.on_mouse_move","title":"<code>on_mouse_move(event)</code>  <code>async</code>","text":"<p>Store any key we are moving over.</p>"},{"location":"api/footer/#textual.widgets._footer.Footer.watch_highlight_key","title":"<code>watch_highlight_key(value)</code>  <code>async</code>","text":"<p>If highlight key changes we need to regenerate the text.</p>"},{"location":"api/geometry/","title":"Geometry","text":""},{"location":"api/geometry/#textual.geometry","title":"<code>geometry</code>","text":"<p>Functions and classes to manage terminal geometry (anything involving coordinates or dimensions).</p>"},{"location":"api/geometry/#textual.geometry.Offset","title":"<code>Offset</code>","text":"<p>         Bases: <code>NamedTuple</code></p> <p>A cell offset defined by x and y coordinates. Offsets are typically relative to the top left of the terminal or other container.</p> <p>Textual prefers the names <code>x</code> and <code>y</code>, but you could consider <code>x</code> to be the column and <code>y</code> to be the row.</p>"},{"location":"api/geometry/#textual.geometry.Offset.clamped","title":"<code>clamped: Offset</code>  <code>property</code>","text":"<p>Ensure x and y are above zero.</p> <p>Returns:</p> Type Description <code>Offset</code> <p>New offset.</p>"},{"location":"api/geometry/#textual.geometry.Offset.is_origin","title":"<code>is_origin: bool</code>  <code>property</code>","text":"<p>Check if the point is at the origin (0, 0).</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the offset is the origin.</p>"},{"location":"api/geometry/#textual.geometry.Offset.x","title":"<code>x: int</code>  <code>class-attribute</code>","text":"<p>Offset in the x-axis (horizontal)</p>"},{"location":"api/geometry/#textual.geometry.Offset.y","title":"<code>y: int</code>  <code>class-attribute</code>","text":"<p>Offset in the y-axis (vertical)</p>"},{"location":"api/geometry/#textual.geometry.Offset.blend","title":"<code>blend(destination, factor)</code>","text":"<p>Blend (interpolate) to a new point.</p> <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>Offset</code> <p>Point where factor would be 1.0.</p> required <code>factor</code> <code>float</code> <p>A value between 0 and 1.0.</p> required <p>Returns:</p> Type Description <code>Offset</code> <p>A new point on a line between self and destination.</p>"},{"location":"api/geometry/#textual.geometry.Offset.get_distance_to","title":"<code>get_distance_to(other)</code>","text":"<p>Get the distance to another offset.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Offset</code> <p>An offset.</p> required <p>Returns:</p> Type Description <code>float</code> <p>Distance to other offset.</p>"},{"location":"api/geometry/#textual.geometry.Region","title":"<code>Region</code>","text":"<p>         Bases: <code>NamedTuple</code></p> <p>Defines a rectangular region.</p> <p>A Region consists of a coordinate (x and y) and dimensions (width and height).</p> <pre><code>  (x, y)\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25b2\n    \u2502                    \u2502 \u2502\n    \u2502                    \u2502 \u2502\n    \u2502                    \u2502 height\n    \u2502                    \u2502 \u2502\n    \u2502                    \u2502 \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25bc\n    \u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500 width \u2500\u2500\u2500\u2500\u2500\u2500\u25b6\n</code></pre>"},{"location":"api/geometry/#textual.geometry.Region.area","title":"<code>area: int</code>  <code>property</code>","text":"<p>Get the area within the region.</p> <p>Returns:</p> Type Description <code>int</code> <p>Area covered by this region.</p>"},{"location":"api/geometry/#textual.geometry.Region.bottom","title":"<code>bottom: int</code>  <code>property</code>","text":"<p>Maximum Y value (non inclusive).</p> <p>Returns:</p> Type Description <code>int</code> <p>y coordinate.</p>"},{"location":"api/geometry/#textual.geometry.Region.bottom_left","title":"<code>bottom_left: Offset</code>  <code>property</code>","text":"<p>Bottom left offset of the region.</p> <p>Returns:</p> Type Description <code>Offset</code> <p>Bottom left offset.</p>"},{"location":"api/geometry/#textual.geometry.Region.bottom_right","title":"<code>bottom_right: Offset</code>  <code>property</code>","text":"<p>Bottom right of the region.</p> <p>Returns:</p> Type Description <code>Offset</code> <p>Bottom right.</p>"},{"location":"api/geometry/#textual.geometry.Region.column_range","title":"<code>column_range: range</code>  <code>property</code>","text":"<p>A range object for X coordinates.</p>"},{"location":"api/geometry/#textual.geometry.Region.column_span","title":"<code>column_span: tuple[int, int]</code>  <code>property</code>","text":"<p>Get the start and end columns (x coord).</p> <p>The end value is exclusive.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p>Pair of x coordinates (column numbers).</p>"},{"location":"api/geometry/#textual.geometry.Region.corners","title":"<code>corners: tuple[int, int, int, int]</code>  <code>property</code>","text":"<p>Get the top left and bottom right coordinates as a tuple of integers.</p> <p>Returns:</p> Type Description <code>tuple[int, int, int, int]</code> <p>A tuple of <code>(&lt;left&gt;, &lt;top&gt;, &lt;right&gt;, &lt;bottom&gt;)</code>.</p>"},{"location":"api/geometry/#textual.geometry.Region.height","title":"<code>height: int</code>  <code>class-attribute</code>","text":"<p>The height of the region.</p>"},{"location":"api/geometry/#textual.geometry.Region.line_range","title":"<code>line_range: range</code>  <code>property</code>","text":"<p>A range object for Y coordinates.</p>"},{"location":"api/geometry/#textual.geometry.Region.line_span","title":"<code>line_span: tuple[int, int]</code>  <code>property</code>","text":"<p>Get the start and end line number (y coord).</p> <p>The end value is exclusive.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p>Pair of y coordinates (line numbers).</p>"},{"location":"api/geometry/#textual.geometry.Region.offset","title":"<code>offset: Offset</code>  <code>property</code>","text":"<p>Get the start point of the region.</p> <p>Returns:</p> Type Description <code>Offset</code> <p>Top left offset.</p>"},{"location":"api/geometry/#textual.geometry.Region.reset_offset","title":"<code>reset_offset: Region</code>  <code>property</code>","text":"<p>An region of the same size at (0, 0).</p> <p>Returns:</p> Type Description <code>Region</code> <p>Reset region.</p>"},{"location":"api/geometry/#textual.geometry.Region.right","title":"<code>right: int</code>  <code>property</code>","text":"<p>Maximum X value (non inclusive).</p> <p>Returns:</p> Type Description <code>int</code> <p>x coordinate.</p>"},{"location":"api/geometry/#textual.geometry.Region.size","title":"<code>size: Size</code>  <code>property</code>","text":"<p>Get the size of the region.</p> <p>Returns:</p> Type Description <code>Size</code> <p>Size of the region.</p>"},{"location":"api/geometry/#textual.geometry.Region.top_right","title":"<code>top_right: Offset</code>  <code>property</code>","text":"<p>Top right offset of the region.</p> <p>Returns:</p> Type Description <code>Offset</code> <p>Top right.</p>"},{"location":"api/geometry/#textual.geometry.Region.width","title":"<code>width: int</code>  <code>class-attribute</code>","text":"<p>The width of the region.</p>"},{"location":"api/geometry/#textual.geometry.Region.x","title":"<code>x: int</code>  <code>class-attribute</code>","text":"<p>Offset in the x-axis (horizontal).</p>"},{"location":"api/geometry/#textual.geometry.Region.y","title":"<code>y: int</code>  <code>class-attribute</code>","text":"<p>Offset in the y-axis (vertical).</p>"},{"location":"api/geometry/#textual.geometry.Region.at_offset","title":"<code>at_offset(offset)</code>","text":"<p>Get a new Region with the same size at a given offset.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>tuple[int, int]</code> <p>An offset.</p> required <p>Returns:</p> Type Description <code>Region</code> <p>New Region with adjusted offset.</p>"},{"location":"api/geometry/#textual.geometry.Region.clip","title":"<code>clip(width, height)</code>","text":"<p>Clip this region to fit within width, height.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Width of bounds.</p> required <code>height</code> <code>int</code> <p>Height of bounds.</p> required <p>Returns:</p> Type Description <code>Region</code> <p>Clipped region.</p>"},{"location":"api/geometry/#textual.geometry.Region.clip_size","title":"<code>clip_size(size)</code>","text":"<p>Clip the size to fit within minimum values.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>tuple[int, int]</code> <p>Maximum width and height.</p> required <p>Returns:</p> Type Description <code>Region</code> <p>No region, not bigger than size.</p>"},{"location":"api/geometry/#textual.geometry.Region.contains","title":"<code>contains(x, y)</code>","text":"<p>Check if a point is in the region.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>X coordinate.</p> required <code>y</code> <code>int</code> <p>Y coordinate.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the point is within the region.</p>"},{"location":"api/geometry/#textual.geometry.Region.contains_point","title":"<code>contains_point(point)</code>","text":"<p>Check if a point is in the region.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>tuple[int, int]</code> <p>A tuple of x and y coordinates.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the point is within the region.</p>"},{"location":"api/geometry/#textual.geometry.Region.contains_region","title":"<code>contains_region(other)</code>  <code>cached</code>","text":"<p>Check if a region is entirely contained within this region.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Region</code> <p>A region.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the other region fits perfectly within this region.</p>"},{"location":"api/geometry/#textual.geometry.Region.crop_size","title":"<code>crop_size(size)</code>","text":"<p>Get a region with the same offset, with a size no larger than <code>size</code>.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>tuple[int, int]</code> <p>Maximum width and height (WIDTH, HEIGHT).</p> required <p>Returns:</p> Type Description <code>Region</code> <p>New region that could fit within <code>size</code>.</p>"},{"location":"api/geometry/#textual.geometry.Region.expand","title":"<code>expand(size)</code>","text":"<p>Increase the size of the region by adding a border.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>tuple[int, int]</code> <p>Additional width and height.</p> required <p>Returns:</p> Type Description <code>Region</code> <p>A new region.</p>"},{"location":"api/geometry/#textual.geometry.Region.from_corners","title":"<code>from_corners(x1, y1, x2, y2)</code>  <code>classmethod</code>","text":"<p>Construct a Region form the top left and bottom right corners.</p> <p>Parameters:</p> Name Type Description Default <code>x1</code> <code>int</code> <p>Top left x.</p> required <code>y1</code> <code>int</code> <p>Top left y.</p> required <code>x2</code> <code>int</code> <p>Bottom right x.</p> required <code>y2</code> <code>int</code> <p>Bottom right y.</p> required <p>Returns:</p> Type Description <code>Region</code> <p>A new region.</p>"},{"location":"api/geometry/#textual.geometry.Region.from_offset","title":"<code>from_offset(offset, size)</code>  <code>classmethod</code>","text":"<p>Create a region from offset and size.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>tuple[int, int]</code> <p>Offset (top left point).</p> required <code>size</code> <code>tuple[int, int]</code> <p>Dimensions of region.</p> required <p>Returns:</p> Type Description <code>Region</code> <p>A region instance.</p>"},{"location":"api/geometry/#textual.geometry.Region.from_union","title":"<code>from_union(regions)</code>  <code>classmethod</code>","text":"<p>Create a Region from the union of other regions.</p> <p>Parameters:</p> Name Type Description Default <code>regions</code> <code>Collection[Region]</code> <p>One or more regions.</p> required <p>Returns:</p> Type Description <code>Region</code> <p>A Region that encloses all other regions.</p>"},{"location":"api/geometry/#textual.geometry.Region.get_scroll_to_visible","title":"<code>get_scroll_to_visible(window_region, region, *, top=False)</code>  <code>classmethod</code>","text":"<p>Calculate the smallest offset required to translate a window so that it contains another region.</p> <p>This method is used to calculate the required offset to scroll something in to view.</p> <p>Parameters:</p> Name Type Description Default <code>window_region</code> <code>Region</code> <p>The window region.</p> required <code>region</code> <code>Region</code> <p>The region to move inside the window.</p> required <code>top</code> <code>bool</code> <p>Get offset to top of window. Defaults to False</p> <code>False</code> <p>Returns:</p> Type Description <code>Offset</code> <p>An offset required to add to region to move it inside window_region.</p>"},{"location":"api/geometry/#textual.geometry.Region.grow","title":"<code>grow(margin)</code>  <code>cached</code>","text":"<p>Grow a region by adding spacing.</p> <p>Parameters:</p> Name Type Description Default <code>margin</code> <code>tuple[int, int, int, int]</code> <p>Grow space by <code>(&lt;top&gt;, &lt;right&gt;, &lt;bottom&gt;, &lt;left&gt;)</code>.</p> required <p>Returns:</p> Type Description <code>Region</code> <p>New region.</p>"},{"location":"api/geometry/#textual.geometry.Region.intersection","title":"<code>intersection(region)</code>  <code>cached</code>","text":"<p>Get the overlapping portion of the two regions.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>Region</code> <p>A region that overlaps this region.</p> required <p>Returns:</p> Type Description <code>Region</code> <p>A new region that covers when the two regions overlap.</p>"},{"location":"api/geometry/#textual.geometry.Region.overlaps","title":"<code>overlaps(other)</code>  <code>cached</code>","text":"<p>Check if another region overlaps this region.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Region</code> <p>A Region.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if other region shares any cells with this region.</p>"},{"location":"api/geometry/#textual.geometry.Region.shrink","title":"<code>shrink(margin)</code>  <code>cached</code>","text":"<p>Shrink a region by subtracting spacing.</p> <p>Parameters:</p> Name Type Description Default <code>margin</code> <code>tuple[int, int, int, int]</code> <p>Shrink space by <code>(&lt;top&gt;, &lt;right&gt;, &lt;bottom&gt;, &lt;left&gt;)</code>.</p> required <p>Returns:</p> Type Description <code>Region</code> <p>The new, smaller region.</p>"},{"location":"api/geometry/#textual.geometry.Region.split","title":"<code>split(cut_x, cut_y)</code>  <code>cached</code>","text":"<p>Split a region in to 4 from given x and y offsets (cuts).</p> <pre><code>           cut_x \u2193\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2510\n        \u2502        \u2502 \u2502   \u2502\n        \u2502    0   \u2502 \u2502 1 \u2502\n        \u2502        \u2502 \u2502   \u2502\ncut_y \u2192 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2510\n        \u2502    2   \u2502 \u2502 3 \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cut_x</code> <code>int</code> <p>Offset from self.x where the cut should be made. If negative, the cut is taken from the right edge.</p> required <code>cut_y</code> <code>int</code> <p>Offset from self.y where the cut should be made. If negative, the cut is taken from the lower edge.</p> required <p>Returns:</p> Type Description <code>tuple[Region, Region, Region, Region]</code> <p>Four new regions which add up to the original (self).</p>"},{"location":"api/geometry/#textual.geometry.Region.split_horizontal","title":"<code>split_horizontal(cut)</code>  <code>cached</code>","text":"<p>Split a region in to two, from a given x offset.</p> <pre><code>            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502    0    \u2502\n            \u2502         \u2502\n    cut \u2192   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502    1    \u2502\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cut</code> <code>int</code> <p>An offset from self.x where the cut should be made. May be negative, for the offset to start from the right edge.</p> required <p>Returns:</p> Type Description <code>tuple[Region, Region]</code> <p>Two regions, which add up to the original (self).</p>"},{"location":"api/geometry/#textual.geometry.Region.split_vertical","title":"<code>split_vertical(cut)</code>  <code>cached</code>","text":"<p>Split a region in to two, from a given x offset.</p> <pre><code>         cut \u2193\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2510\n    \u2502    0   \u2502\u2502 1 \u2502\n    \u2502        \u2502\u2502   \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2518\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cut</code> <code>int</code> <p>An offset from self.x where the cut should be made. If cut is negative, it is taken from the right edge.</p> required <p>Returns:</p> Type Description <code>tuple[Region, Region]</code> <p>Two regions, which add up to the original (self).</p>"},{"location":"api/geometry/#textual.geometry.Region.translate","title":"<code>translate(offset)</code>  <code>cached</code>","text":"<p>Move the offset of the Region.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>tuple[int, int]</code> <p>Offset to add to region.</p> required <p>Returns:</p> Type Description <code>Region</code> <p>A new region shifted by (x, y)</p>"},{"location":"api/geometry/#textual.geometry.Region.union","title":"<code>union(region)</code>  <code>cached</code>","text":"<p>Get the smallest region that contains both regions.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>Region</code> <p>Another region.</p> required <p>Returns:</p> Type Description <code>Region</code> <p>An optimally sized region to cover both regions.</p>"},{"location":"api/geometry/#textual.geometry.Size","title":"<code>Size</code>","text":"<p>         Bases: <code>NamedTuple</code></p> <p>The dimensions of a rectangular region.</p>"},{"location":"api/geometry/#textual.geometry.Size.area","title":"<code>area: int</code>  <code>property</code>","text":"<p>Get the area of the size.</p> <p>Returns:</p> Type Description <code>int</code> <p>Area in cells.</p>"},{"location":"api/geometry/#textual.geometry.Size.height","title":"<code>height: int</code>  <code>class-attribute</code>","text":"<p>The height in cells.</p>"},{"location":"api/geometry/#textual.geometry.Size.line_range","title":"<code>line_range: range</code>  <code>property</code>","text":"<p>Get a range covering lines.</p> <p>Returns:</p> Type Description <code>range</code> <p>A builtin range object.</p>"},{"location":"api/geometry/#textual.geometry.Size.region","title":"<code>region: Region</code>  <code>property</code>","text":"<p>Get a region of the same size.</p> <p>Returns:</p> Type Description <code>Region</code> <p>A region with the same size at (0, 0).</p>"},{"location":"api/geometry/#textual.geometry.Size.width","title":"<code>width: int</code>  <code>class-attribute</code>","text":"<p>The width in cells.</p>"},{"location":"api/geometry/#textual.geometry.Size.contains","title":"<code>contains(x, y)</code>","text":"<p>Check if a point is in area defined by the size.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>X coordinate.</p> required <code>y</code> <code>int</code> <p>Y coordinate.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the point is within the region.</p>"},{"location":"api/geometry/#textual.geometry.Size.contains_point","title":"<code>contains_point(point)</code>","text":"<p>Check if a point is in the area defined by the size.</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>tuple[int, int]</code> <p>A tuple of x and y coordinates.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the point is within the region.</p>"},{"location":"api/geometry/#textual.geometry.Spacing","title":"<code>Spacing</code>","text":"<p>         Bases: <code>NamedTuple</code></p> <p>The spacing around a renderable.</p>"},{"location":"api/geometry/#textual.geometry.Spacing.bottom","title":"<code>bottom: int</code>  <code>class-attribute</code>","text":"<p>Space from the bottom of a region.</p>"},{"location":"api/geometry/#textual.geometry.Spacing.bottom_right","title":"<code>bottom_right: tuple[int, int]</code>  <code>property</code>","text":"<p>Bottom right space.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p><code>(&lt;right&gt;, &lt;bottom&gt;)</code></p>"},{"location":"api/geometry/#textual.geometry.Spacing.css","title":"<code>css: str</code>  <code>property</code>","text":"<p>Gets a string containing the spacing in CSS format.</p> <p>Returns:</p> Type Description <code>str</code> <p>Spacing in CSS format.</p>"},{"location":"api/geometry/#textual.geometry.Spacing.height","title":"<code>height: int</code>  <code>property</code>","text":"<p>Total space in height.</p> <p>Returns:</p> Type Description <code>int</code> <p>Height.</p>"},{"location":"api/geometry/#textual.geometry.Spacing.left","title":"<code>left: int</code>  <code>class-attribute</code>","text":"<p>Space from the left of a region.</p>"},{"location":"api/geometry/#textual.geometry.Spacing.right","title":"<code>right: int</code>  <code>class-attribute</code>","text":"<p>Space from the left of a region.</p>"},{"location":"api/geometry/#textual.geometry.Spacing.top","title":"<code>top: int</code>  <code>class-attribute</code>","text":"<p>Space from the top of a region.</p>"},{"location":"api/geometry/#textual.geometry.Spacing.top_left","title":"<code>top_left: tuple[int, int]</code>  <code>property</code>","text":"<p>Top left space.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p><code>(&lt;left&gt;, &lt;top&gt;)</code></p>"},{"location":"api/geometry/#textual.geometry.Spacing.totals","title":"<code>totals: tuple[int, int]</code>  <code>property</code>","text":"<p>Get total horizontal and vertical space.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p><code>(&lt;horizontal&gt;, &lt;vertical&gt;)</code></p>"},{"location":"api/geometry/#textual.geometry.Spacing.width","title":"<code>width: int</code>  <code>property</code>","text":"<p>Total space in width.</p> <p>Returns:</p> Type Description <code>int</code> <p>Width.</p>"},{"location":"api/geometry/#textual.geometry.Spacing.all","title":"<code>all(amount)</code>  <code>classmethod</code>","text":"<p>Construct a Spacing with a given amount of spacing on all edges.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>int</code> <p>The magnitude of spacing to apply to all edges</p> required <p>Returns:</p> Type Description <code>Spacing</code> <p><code>Spacing(amount, amount, amount, amount)</code></p>"},{"location":"api/geometry/#textual.geometry.Spacing.grow_maximum","title":"<code>grow_maximum(other)</code>","text":"<p>Grow spacing with a maximum.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Spacing</code> <p>Spacing object.</p> required <p>Returns:</p> Type Description <code>Spacing</code> <p>New spacing were the values are maximum of the two values.</p>"},{"location":"api/geometry/#textual.geometry.Spacing.horizontal","title":"<code>horizontal(amount)</code>  <code>classmethod</code>","text":"<p>Construct a Spacing with a given amount of spacing on horizontal edges, and no vertical spacing.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>int</code> <p>The magnitude of spacing to apply to horizontal edges</p> required <p>Returns:</p> Type Description <code>Spacing</code> <p><code>Spacing(0, amount, 0, amount)</code></p>"},{"location":"api/geometry/#textual.geometry.Spacing.unpack","title":"<code>unpack(pad)</code>  <code>classmethod</code>","text":"<p>Unpack padding specified in CSS style.</p> <p>Parameters:</p> Name Type Description Default <code>pad</code> <code>SpacingDimensions</code> <p>An integer, or tuple of 1, 2, or 4 integers.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>pad</code> is an invalid value.</p> <p>Returns:</p> Type Description <code>Spacing</code> <p>New Spacing object.</p>"},{"location":"api/geometry/#textual.geometry.Spacing.vertical","title":"<code>vertical(amount)</code>  <code>classmethod</code>","text":"<p>Construct a Spacing with a given amount of spacing on vertical edges, and no horizontal spacing.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>int</code> <p>The magnitude of spacing to apply to vertical edges</p> required <p>Returns:</p> Type Description <code>Spacing</code> <p><code>Spacing(amount, 0, amount, 0)</code></p>"},{"location":"api/geometry/#textual.geometry.clamp","title":"<code>clamp(value, minimum, maximum)</code>","text":"<p>Adjust a value to it is not less than a minimum and not greater than a maximum value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>A value.</p> required <code>minimum</code> <code>T</code> <p>Minimum value.</p> required <code>maximum</code> <code>T</code> <p>Maximum value.</p> required <p>Returns:</p> Type Description <code>T</code> <p>New value that is not less than the minimum or greater than the maximum.</p>"},{"location":"api/header/","title":"Header","text":""},{"location":"api/header/#textual.widgets.Header","title":"<code>Header</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A header widget with icon and clock.</p>"},{"location":"api/header/#textual.widgets._header.Header.tall","title":"<code>tall</code>  <code>class-attribute</code>","text":"<p>Track if the <code>Header</code> is in a tall state or not.</p>"},{"location":"api/header/#textual.widgets._header.Header.__init__","title":"<code>__init__(show_clock=False, *, name=None, id=None, classes=None)</code>","text":"<p>Initialise the header widget.</p> <p>Parameters:</p> Name Type Description Default <code>show_clock</code> <code>bool</code> <p><code>True</code> if the clock should be shown on the right of the header.</p> <code>False</code> <code>name</code> <code>str | None</code> <p>The name of the header widget.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the header widget in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the header widget.</p> <code>None</code>"},{"location":"api/input/","title":"Input","text":""},{"location":"api/input/#textual.widgets.Input","title":"<code>Input</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A text input widget.</p>"},{"location":"api/input/#textual.widgets._input.Input.BINDINGS","title":"<code>BINDINGS: ClassVar[list[BindingType]]</code>  <code>class-attribute</code>","text":"Key(s) Description left Move the cursor left. ctrl+left Move the cursor one word to the left. right Move the cursor right. ctrl+right Move the cursor one word to the right. backspace Delete the character to the left of the cursor. home,ctrl+a Go to the beginning of the input. end,ctrl+e Go to the end of the input. delete,ctrl+d Delete the character to the right of the cursor. enter Submit the current value of the input. ctrl+w Delete the word to the left of the cursor. ctrl+u Delete everything to the left of the cursor. ctrl+f Delete the word to the right of the cursor. ctrl+k Delete everything to the right of the cursor."},{"location":"api/input/#textual.widgets._input.Input.COMPONENT_CLASSES","title":"<code>COMPONENT_CLASSES: ClassVar[set[str]]</code>  <code>class-attribute</code>","text":"Class Description <code>input--cursor</code> Target the cursor. <code>input--placeholder</code> Target the placeholder text (when it exists)."},{"location":"api/input/#textual.widgets._input.Input.cursor_width","title":"<code>cursor_width: int</code>  <code>property</code>","text":"<p>The width of the input (with extra space for cursor at the end).</p>"},{"location":"api/input/#textual.widgets._input.Input.Changed","title":"<code>Changed</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when the value changes.</p> <p>Can be handled using <code>on_input_changed</code> in a subclass of <code>Input</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>str</code> <p>The value that the input was changed to.</p> <code>input</code> <code>Input</code> <p>The <code>Input</code> widget that was changed.</p>"},{"location":"api/input/#textual.widgets._input.Input.Changed.control","title":"<code>control: Input</code>  <code>property</code>","text":"<p>Alias for self.input.</p>"},{"location":"api/input/#textual.widgets._input.Input.Submitted","title":"<code>Submitted</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when the enter key is pressed within an <code>Input</code>.</p> <p>Can be handled using <code>on_input_submitted</code> in a subclass of <code>Input</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>str</code> <p>The value of the <code>Input</code> being submitted.</p> <code>input</code> <code>Input</code> <p>The <code>Input</code> widget that is being submitted.</p>"},{"location":"api/input/#textual.widgets._input.Input.Submitted.control","title":"<code>control: Input</code>  <code>property</code>","text":"<p>Alias for self.input.</p>"},{"location":"api/input/#textual.widgets._input.Input.__init__","title":"<code>__init__(value=None, placeholder='', highlighter=None, password=False, name=None, id=None, classes=None, disabled=False)</code>","text":"<p>Initialise the <code>Input</code> widget.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str | None</code> <p>An optional default value for the input.</p> <code>None</code> <code>placeholder</code> <code>str</code> <p>Optional placeholder text for the input.</p> <code>''</code> <code>highlighter</code> <code>Highlighter | None</code> <p>An optional highlighter for the input.</p> <code>None</code> <code>password</code> <code>bool</code> <p>Flag to say if the field should obfuscate its content. Default is <code>False</code>.</p> <code>False</code> <code>name</code> <code>str | None</code> <p>Optional name for the input widget.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>Optional ID for the widget.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>Optional initial classes for the widget.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the input is disabled or not.</p> <code>False</code>"},{"location":"api/input/#textual.widgets._input.Input.action_cursor_left","title":"<code>action_cursor_left()</code>","text":"<p>Move the cursor one position to the left.</p>"},{"location":"api/input/#textual.widgets._input.Input.action_cursor_left_word","title":"<code>action_cursor_left_word()</code>","text":"<p>Move the cursor left to the start of a word.</p>"},{"location":"api/input/#textual.widgets._input.Input.action_cursor_right","title":"<code>action_cursor_right()</code>","text":"<p>Move the cursor one position to the right.</p>"},{"location":"api/input/#textual.widgets._input.Input.action_cursor_right_word","title":"<code>action_cursor_right_word()</code>","text":"<p>Move the cursor right to the start of a word.</p>"},{"location":"api/input/#textual.widgets._input.Input.action_delete_left","title":"<code>action_delete_left()</code>","text":"<p>Delete one character to the left of the current cursor position.</p>"},{"location":"api/input/#textual.widgets._input.Input.action_delete_left_all","title":"<code>action_delete_left_all()</code>","text":"<p>Delete all characters to the left of the cursor position.</p>"},{"location":"api/input/#textual.widgets._input.Input.action_delete_left_word","title":"<code>action_delete_left_word()</code>","text":"<p>Delete leftward of the cursor position to the start of a word.</p>"},{"location":"api/input/#textual.widgets._input.Input.action_delete_right","title":"<code>action_delete_right()</code>","text":"<p>Delete one character at the current cursor position.</p>"},{"location":"api/input/#textual.widgets._input.Input.action_delete_right_all","title":"<code>action_delete_right_all()</code>","text":"<p>Delete the current character and all characters to the right of the cursor position.</p>"},{"location":"api/input/#textual.widgets._input.Input.action_delete_right_word","title":"<code>action_delete_right_word()</code>","text":"<p>Delete the current character and all rightward to the start of the next word.</p>"},{"location":"api/input/#textual.widgets._input.Input.action_end","title":"<code>action_end()</code>","text":"<p>Move the cursor to the end of the input.</p>"},{"location":"api/input/#textual.widgets._input.Input.action_home","title":"<code>action_home()</code>","text":"<p>Move the cursor to the start of the input.</p>"},{"location":"api/input/#textual.widgets._input.Input.action_submit","title":"<code>action_submit()</code>  <code>async</code>","text":"<p>Handle a submit action (normally the user hitting Enter in the input).</p>"},{"location":"api/input/#textual.widgets._input.Input.insert_text_at_cursor","title":"<code>insert_text_at_cursor(text)</code>","text":"<p>Insert new text at the cursor, move the cursor to the end of the new text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>New text to insert.</p> required"},{"location":"api/label/","title":"Label","text":""},{"location":"api/label/#textual.widgets.Label","title":"<code>Label</code>","text":"<p>         Bases: <code>Static</code></p> <p>A simple label widget for displaying text-oriented renderables.</p>"},{"location":"api/list_item/","title":"List item","text":""},{"location":"api/list_item/#textual.widgets.ListItem","title":"<code>ListItem</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A widget that is an item within a <code>ListView</code>.</p> <p>A <code>ListItem</code> is designed for use within a ListView, please see <code>ListView</code>'s documentation for more details on use.</p>"},{"location":"api/list_item/#textual.widgets._list_item.ListItem.highlighted","title":"<code>highlighted</code>  <code>class-attribute</code>","text":"<p>Is this item highlighted?</p>"},{"location":"api/list_view/","title":"List view","text":""},{"location":"api/list_view/#textual.widgets.ListView","title":"<code>ListView</code>","text":"<p>         Bases: <code>VerticalScroll</code></p> <p>A vertical list view widget.</p> <p>Displays a vertical list of <code>ListItem</code>s which can be highlighted and selected using the mouse or keyboard.</p> <p>Attributes:</p> Name Type Description <code>index</code> <p>The index in the list that's currently highlighted.</p>"},{"location":"api/list_view/#textual.widgets._list_view.ListView.BINDINGS","title":"<code>BINDINGS: ClassVar[list[BindingType]]</code>  <code>class-attribute</code>","text":"Key(s) Description enter Select the current item. up Move the cursor up. down Move the cursor down."},{"location":"api/list_view/#textual.widgets._list_view.ListView.highlighted_child","title":"<code>highlighted_child: ListItem | None</code>  <code>property</code>","text":"<p>The currently highlighted ListItem, or None if nothing is highlighted.</p>"},{"location":"api/list_view/#textual.widgets._list_view.ListView.Highlighted","title":"<code>Highlighted</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when the highlighted item changes.</p> <p>Highlighted item is controlled using up/down keys. Can be handled using <code>on_list_view_highlighted</code> in a subclass of <code>ListView</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>item</code> <code>ListItem | None</code> <p>The highlighted item, if there is one highlighted.</p>"},{"location":"api/list_view/#textual.widgets._list_view.ListView.Selected","title":"<code>Selected</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a list item is selected, e.g. when you press the enter key on it.</p> <p>Can be handled using <code>on_list_view_selected</code> in a subclass of <code>ListView</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>item</code> <code>ListItem</code> <p>The selected item.</p>"},{"location":"api/list_view/#textual.widgets._list_view.ListView.__init__","title":"<code>__init__(*children, initial_index=0, name=None, id=None, classes=None, disabled=False)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>*children</code> <code>ListItem</code> <p>The ListItems to display in the list.</p> <code>()</code> <code>initial_index</code> <code>int | None</code> <p>The index that should be highlighted when the list is first mounted.</p> <code>0</code> <code>name</code> <code>str | None</code> <p>The name of the widget.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The unique ID of the widget used in CSS/query selection.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the widget.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the ListView is disabled or not.</p> <code>False</code>"},{"location":"api/list_view/#textual.widgets._list_view.ListView.action_cursor_down","title":"<code>action_cursor_down()</code>","text":"<p>Highlight the next item in the list.</p>"},{"location":"api/list_view/#textual.widgets._list_view.ListView.action_cursor_up","title":"<code>action_cursor_up()</code>","text":"<p>Highlight the previous item in the list.</p>"},{"location":"api/list_view/#textual.widgets._list_view.ListView.action_select_cursor","title":"<code>action_select_cursor()</code>","text":"<p>Select the current item in the list.</p>"},{"location":"api/list_view/#textual.widgets._list_view.ListView.append","title":"<code>append(item)</code>","text":"<p>Append a new ListItem to the end of the ListView.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>ListItem</code> <p>The ListItem to append.</p> required <p>Returns:</p> Type Description <code>AwaitMount</code> <p>An awaitable that yields control to the event loop until the DOM has been updated with the new child item.</p>"},{"location":"api/list_view/#textual.widgets._list_view.ListView.clear","title":"<code>clear()</code>","text":"<p>Clear all items from the ListView.</p> <p>Returns:</p> Type Description <code>AwaitRemove</code> <p>An awaitable that yields control to the event loop until the DOM has been updated to reflect all children being removed.</p>"},{"location":"api/list_view/#textual.widgets._list_view.ListView.on_mount","title":"<code>on_mount()</code>","text":"<p>Ensure the ListView is fully-settled after mounting.</p>"},{"location":"api/list_view/#textual.widgets._list_view.ListView.validate_index","title":"<code>validate_index(index)</code>","text":"<p>Clamp the index to the valid range, or set to None if there's nothing to highlight.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int | None</code> <p>The index to clamp.</p> required <p>Returns:</p> Type Description <code>int | None</code> <p>The clamped index.</p>"},{"location":"api/list_view/#textual.widgets._list_view.ListView.watch_index","title":"<code>watch_index(old_index, new_index)</code>","text":"<p>Updates the highlighting when the index changes.</p>"},{"location":"api/loading_indicator/","title":"Loading indicator","text":""},{"location":"api/loading_indicator/#textual.widgets.LoadingIndicator","title":"<code>LoadingIndicator</code>","text":"<p>         Bases: <code>Widget</code></p> <p>Display an animated loading indicator.</p>"},{"location":"api/markdown/","title":"Markdown","text":""},{"location":"api/markdown/#textual.widgets.Markdown","title":"<code>Markdown</code>","text":"<p>         Bases: <code>Widget</code></p>"},{"location":"api/markdown/#textual.widgets._markdown.Markdown.LinkClicked","title":"<code>LinkClicked</code>","text":"<p>         Bases: <code>Message</code></p> <p>A link in the document was clicked.</p>"},{"location":"api/markdown/#textual.widgets._markdown.Markdown.LinkClicked.href","title":"<code>href: str</code>  <code>instance-attribute</code>","text":"<p>The link that was selected.</p>"},{"location":"api/markdown/#textual.widgets._markdown.Markdown.TableOfContentsSelected","title":"<code>TableOfContentsSelected</code>","text":"<p>         Bases: <code>Message</code></p> <p>An item in the TOC was selected.</p>"},{"location":"api/markdown/#textual.widgets._markdown.Markdown.TableOfContentsSelected.block_id","title":"<code>block_id</code>  <code>instance-attribute</code>","text":"<p>ID of the block that was selected.</p>"},{"location":"api/markdown/#textual.widgets._markdown.Markdown.TableOfContentsUpdated","title":"<code>TableOfContentsUpdated</code>","text":"<p>         Bases: <code>Message</code></p> <p>The table of contents was updated.</p>"},{"location":"api/markdown/#textual.widgets._markdown.Markdown.TableOfContentsUpdated.table_of_contents","title":"<code>table_of_contents: TableOfContentsType</code>  <code>instance-attribute</code>","text":"<p>Table of contents.</p>"},{"location":"api/markdown/#textual.widgets._markdown.Markdown.__init__","title":"<code>__init__(markdown=None, *, name=None, id=None, classes=None)</code>","text":"<p>A Markdown widget.</p> <p>Parameters:</p> Name Type Description Default <code>markdown</code> <code>str | None</code> <p>String containing Markdown or None to leave blank for now. Defaults to None.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>The name of the widget.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the widget in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the widget.</p> <code>None</code>"},{"location":"api/markdown/#textual.widgets._markdown.Markdown.load","title":"<code>load(path)</code>  <code>async</code>","text":"<p>Load a new Markdown document.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Path to the document.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True    on success, or False if the document could not be read.</p>"},{"location":"api/markdown/#textual.widgets._markdown.Markdown.update","title":"<code>update(markdown)</code>  <code>async</code>","text":"<p>Update the document with new Markdown.</p> <p>Parameters:</p> Name Type Description Default <code>markdown</code> <code>str</code> <p>A string containing Markdown.</p> required"},{"location":"api/markdown_viewer/","title":"Markdown viewer","text":""},{"location":"api/markdown_viewer/#textual.widgets.MarkdownViewer","title":"<code>MarkdownViewer</code>","text":"<p>         Bases: <code>VerticalScroll</code></p> <p>A Markdown viewer widget.</p>"},{"location":"api/markdown_viewer/#textual.widgets._markdown.MarkdownViewer.document","title":"<code>document: Markdown</code>  <code>property</code>","text":"<p>The Markdown document object.</p>"},{"location":"api/markdown_viewer/#textual.widgets._markdown.MarkdownViewer.table_of_contents","title":"<code>table_of_contents: MarkdownTableOfContents</code>  <code>property</code>","text":"<p>The Table of Contents widget</p>"},{"location":"api/markdown_viewer/#textual.widgets._markdown.MarkdownViewer.__init__","title":"<code>__init__(markdown=None, *, show_table_of_contents=True, name=None, id=None, classes=None)</code>","text":"<p>Create a Markdown Viewer object.</p> <p>Parameters:</p> Name Type Description Default <code>markdown</code> <code>str | None</code> <p>String containing Markdown, or None to leave blank. Defaults to None.</p> <code>None</code> <code>show_table_of_contents</code> <code>bool</code> <p>Show a Table of COntents in a sidebar. Defaults to True.</p> <code>True</code> <code>name</code> <code>str | None</code> <p>The name of the widget.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the widget in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the widget.</p> <code>None</code>"},{"location":"api/markdown_viewer/#textual.widgets._markdown.MarkdownViewer.back","title":"<code>back()</code>  <code>async</code>","text":"<p>Go back one level in the history.</p>"},{"location":"api/markdown_viewer/#textual.widgets._markdown.MarkdownViewer.forward","title":"<code>forward()</code>  <code>async</code>","text":"<p>Go forward one level in the history.</p>"},{"location":"api/markdown_viewer/#textual.widgets._markdown.MarkdownViewer.go","title":"<code>go(location)</code>  <code>async</code>","text":"<p>Navigate to a new document path.</p>"},{"location":"api/message/","title":"Message","text":""},{"location":"api/message/#textual.message","title":"<code>message</code>","text":""},{"location":"api/message/#textual.message.Message","title":"<code>Message</code>","text":"<p>Base class for a message.</p>"},{"location":"api/message/#textual.message.Message.handler_name","title":"<code>handler_name: str</code>  <code>property</code>","text":"<p>The name of the handler associated with this message.</p>"},{"location":"api/message/#textual.message.Message.sender","title":"<code>sender: MessageTarget</code>  <code>property</code>","text":"<p>The active message target when the message was posted.</p>"},{"location":"api/message/#textual.message.Message.prevent_default","title":"<code>prevent_default(prevent=True)</code>","text":"<p>Suppress the default action(s). This will prevent handlers in any base classes from being called.</p> <p>Parameters:</p> Name Type Description Default <code>prevent</code> <code>bool</code> <p>True if the default action should be suppressed, or False if the default actions should be performed. Defaults to True.</p> <code>True</code>"},{"location":"api/message/#textual.message.Message.stop","title":"<code>stop(stop=True)</code>","text":"<p>Stop propagation of the message to parent.</p> <p>Parameters:</p> Name Type Description Default <code>stop</code> <code>bool</code> <p>The stop flag. Defaults to True.</p> <code>True</code>"},{"location":"api/message_pump/","title":"Message pump","text":"<p>A message pump is a class that processes messages.</p> <p>It is a base class for the <code>App</code>, <code>Screen</code>, and <code>Widget</code> classes.</p>"},{"location":"api/message_pump/#textual.message_pump","title":"<code>message_pump</code>","text":"<p>A message pump is a class that processes messages.</p> <p>It is a base class for the App, Screen, and Widgets.</p>"},{"location":"api/message_pump/#textual.message_pump.MessagePump","title":"<code>MessagePump</code>","text":""},{"location":"api/message_pump/#textual.message_pump.MessagePump.app","title":"<code>app: App</code>  <code>property</code>","text":"<p>Get the current app.</p> <p>Returns:</p> Type Description <code>App</code> <p>The current app.</p> <p>Raises:</p> Type Description <code>NoActiveAppError</code> <p>if no active app could be found for the current asyncio context</p>"},{"location":"api/message_pump/#textual.message_pump.MessagePump.is_attached","title":"<code>is_attached: bool</code>  <code>property</code>","text":"<p>Is the node is attached to the app via the DOM.</p>"},{"location":"api/message_pump/#textual.message_pump.MessagePump.is_running","title":"<code>is_running: bool</code>  <code>property</code>","text":""},{"location":"api/message_pump/#textual.message_pump.MessagePump.log","title":"<code>log: Logger</code>  <code>property</code>","text":"<p>Get a logger for this object.</p> <p>Returns:</p> Type Description <code>Logger</code> <p>A logger.</p>"},{"location":"api/message_pump/#textual.message_pump.MessagePump.call_after_refresh","title":"<code>call_after_refresh(callback, *args, **kwargs)</code>","text":"<p>Schedule a callback to run after all messages are processed and the screen has been refreshed. Positional and keyword arguments are passed to the callable.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable</code> <p>A callable.</p> required"},{"location":"api/message_pump/#textual.message_pump.MessagePump.call_later","title":"<code>call_later(callback, *args, **kwargs)</code>","text":"<p>Schedule a callback to run after all messages are processed in this object. Positional and keywords arguments are passed to the callable.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable</code> <p>Callable to call next.</p> required <code>*args</code> <p>Positional arguments to pass to the callable.</p> <code>()</code> <code>**kwargs</code> <p>Keyword arguments to pass to the callable.</p> <code>{}</code>"},{"location":"api/message_pump/#textual.message_pump.MessagePump.call_next","title":"<code>call_next(callback, *args, **kwargs)</code>","text":"<p>Schedule a callback to run immediately after processing the current message.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable</code> <p>Callable to run after current event.</p> required <code>*args</code> <p>Positional arguments to pass to the callable.</p> <code>()</code> <code>**kwargs</code> <p>Keyword arguments to pass to the callable.</p> <code>{}</code>"},{"location":"api/message_pump/#textual.message_pump.MessagePump.check_idle","title":"<code>check_idle()</code>","text":"<p>Prompt the message pump to call idle if the queue is empty.</p>"},{"location":"api/message_pump/#textual.message_pump.MessagePump.check_message_enabled","title":"<code>check_message_enabled(message)</code>","text":"<p>Check if a given message is enabled (allowed to be sent).</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Message</code> <p>A message object.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the message will be sent, or <code>False</code> if it is disabled.</p>"},{"location":"api/message_pump/#textual.message_pump.MessagePump.disable_messages","title":"<code>disable_messages(*messages)</code>","text":"<p>Disable message types from being processed.</p>"},{"location":"api/message_pump/#textual.message_pump.MessagePump.dispatch_key","title":"<code>dispatch_key(event)</code>  <code>async</code>","text":"<p>Dispatch a key event to method.</p> <p>This method will call the method named 'key_' if it exists. Some keys have aliases. The first alias found will be invoked if it exists. If multiple handlers exist that match the key, an exception is raised. <p>Parameters:</p> Name Type Description Default <code>event</code> <code>events.Key</code> <p>A key event.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if key was handled, otherwise False.</p> <p>Raises:</p> Type Description <code>DuplicateKeyHandlers</code> <p>When there's more than 1 handler that could handle this key.</p>"},{"location":"api/message_pump/#textual.message_pump.MessagePump.enable_messages","title":"<code>enable_messages(*messages)</code>","text":"<p>Enable processing of messages types.</p>"},{"location":"api/message_pump/#textual.message_pump.MessagePump.on_event","title":"<code>on_event(event)</code>  <code>async</code>","text":"<p>Called to process an event.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>events.Event</code> <p>An Event object.</p> required"},{"location":"api/message_pump/#textual.message_pump.MessagePump.post_message","title":"<code>post_message(message)</code>","text":"<p>Posts a message on the queue.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Message</code> <p>A message (or Event).</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the messages was processed, False if it wasn't.</p>"},{"location":"api/message_pump/#textual.message_pump.MessagePump.prevent","title":"<code>prevent(*message_types)</code>","text":"<p>A context manager to temporarily prevent the given message types from being posted.</p> Example <pre><code>input = self.query_one(Input)\nwith self.prevent(Input.Changed):\ninput.value = \"foo\"\n</code></pre>"},{"location":"api/message_pump/#textual.message_pump.MessagePump.set_interval","title":"<code>set_interval(interval, callback=None, *, name=None, repeat=0, pause=False)</code>","text":"<p>Call a function at periodic intervals.</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>float</code> <p>Time between calls.</p> required <code>callback</code> <code>TimerCallback | None</code> <p>Function to call. Defaults to None.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>Name of the timer object. Defaults to None.</p> <code>None</code> <code>repeat</code> <code>int</code> <p>Number of times to repeat the call or 0 for continuous. Defaults to 0.</p> <code>0</code> <code>pause</code> <code>bool</code> <p>Start the timer paused. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Timer</code> <p>A timer object.</p>"},{"location":"api/message_pump/#textual.message_pump.MessagePump.set_timer","title":"<code>set_timer(delay, callback=None, *, name=None, pause=False)</code>","text":"<p>Make a function call after a delay.</p> <p>Parameters:</p> Name Type Description Default <code>delay</code> <code>float</code> <p>Time to wait before invoking callback.</p> required <code>callback</code> <code>TimerCallback | None</code> <p>Callback to call after time has expired. Defaults to None.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>Name of the timer (for debug). Defaults to None.</p> <code>None</code> <code>pause</code> <code>bool</code> <p>Start timer paused. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Timer</code> <p>A timer object.</p>"},{"location":"api/message_pump/#textual.message_pump.MessagePumpMeta","title":"<code>MessagePumpMeta</code>","text":"<p>         Bases: <code>type</code></p> <p>Metaclass for message pump. This exists to populate a Message inner class of a Widget with the parent classes' name.</p>"},{"location":"api/pilot/","title":"Pilot","text":""},{"location":"api/pilot/#textual.pilot","title":"<code>pilot</code>","text":""},{"location":"api/pilot/#textual.pilot.Pilot","title":"<code>Pilot</code>","text":"<p>         Bases: <code>Generic[ReturnType]</code></p> <p>Pilot object to drive an app.</p>"},{"location":"api/pilot/#textual.pilot.Pilot.app","title":"<code>app: App[ReturnType]</code>  <code>property</code>","text":""},{"location":"api/pilot/#textual.pilot.Pilot.click","title":"<code>click(selector=None, offset=Offset(), shift=False, meta=False, control=False)</code>  <code>async</code>","text":"<p>Simulate clicking with the mouse.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>QueryType | None</code> <p>The widget that should be clicked. If None, then the click will occur relative to the screen. Note that this simply causes a click to occur at the location of the widget. If the widget is currently hidden or obscured by another widget, then the click may not land on it.</p> <code>None</code> <code>offset</code> <code>Offset</code> <p>The offset to click within the selected widget.</p> <code>Offset()</code> <code>shift</code> <code>bool</code> <p>Click with the shift key held down.</p> <code>False</code> <code>meta</code> <code>bool</code> <p>Click with the meta key held down.</p> <code>False</code> <code>control</code> <code>bool</code> <p>Click with the control key held down.</p> <code>False</code>"},{"location":"api/pilot/#textual.pilot.Pilot.exit","title":"<code>exit(result)</code>  <code>async</code>","text":"<p>Exit the app with the given result.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>ReturnType</code> <p>The app result returned by <code>run</code> or <code>run_async</code>.</p> required"},{"location":"api/pilot/#textual.pilot.Pilot.hover","title":"<code>hover(selector=None, offset=Offset())</code>  <code>async</code>","text":"<p>Simulate hovering with the mouse cursor.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>QueryType | None</code> <p>The widget that should be hovered. If None, then the click will occur relative to the screen. Note that this simply causes a hover to occur at the location of the widget. If the widget is currently hidden or obscured by another widget, then the hover may not land on it.</p> <code>None</code> <code>offset</code> <code>Offset</code> <p>The offset to hover over within the selected widget.</p> <code>Offset()</code>"},{"location":"api/pilot/#textual.pilot.Pilot.pause","title":"<code>pause(delay=None)</code>  <code>async</code>","text":"<p>Insert a pause.</p> <p>Parameters:</p> Name Type Description Default <code>delay</code> <code>float | None</code> <p>Seconds to pause, or None to wait for cpu idle.</p> <code>None</code>"},{"location":"api/pilot/#textual.pilot.Pilot.press","title":"<code>press(*keys)</code>  <code>async</code>","text":"<p>Simulate key-presses.</p> <p>Parameters:</p> Name Type Description Default <code>*keys</code> <code>str</code> <p>Keys to press.</p> <code>()</code>"},{"location":"api/pilot/#textual.pilot.Pilot.wait_for_animation","title":"<code>wait_for_animation()</code>  <code>async</code>","text":"<p>Wait for any current animation to complete.</p>"},{"location":"api/pilot/#textual.pilot.Pilot.wait_for_scheduled_animations","title":"<code>wait_for_scheduled_animations()</code>  <code>async</code>","text":"<p>Wait for any current and scheduled animations to complete.</p>"},{"location":"api/placeholder/","title":"Placeholder","text":""},{"location":"api/placeholder/#textual.widgets.Placeholder","title":"<code>Placeholder</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A simple placeholder widget to use before you build your custom widgets.</p> <p>This placeholder has a couple of variants that show different data. Clicking the placeholder cycles through the available variants, but a placeholder can also be initialised in a specific variant.</p> <p>The variants available are:</p> Variant Placeholder shows default Identifier label or the ID of the placeholder. size Size of the placeholder. text Lorem Ipsum text."},{"location":"api/placeholder/#textual.widgets._placeholder.Placeholder.variant","title":"<code>variant</code>  <code>instance-attribute</code>","text":"<p>The current variant of the placeholder.</p>"},{"location":"api/placeholder/#textual.widgets._placeholder.Placeholder.__init__","title":"<code>__init__(label=None, variant='default', *, name=None, id=None, classes=None)</code>","text":"<p>Create a Placeholder widget.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str | None</code> <p>The label to identify the placeholder. If no label is present, uses the placeholder ID instead.</p> <code>None</code> <code>variant</code> <code>PlaceholderVariant</code> <p>The variant of the placeholder.</p> <code>'default'</code> <code>name</code> <code>str | None</code> <p>The name of the placeholder. Defaults to None.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the placeholder in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>A space separated string with the CSS classes of the placeholder, if any.</p> <code>None</code>"},{"location":"api/placeholder/#textual.widgets._placeholder.Placeholder.cycle_variant","title":"<code>cycle_variant()</code>","text":"<p>Get the next variant in the cycle.</p>"},{"location":"api/placeholder/#textual.widgets._placeholder.Placeholder.on_click","title":"<code>on_click()</code>","text":"<p>Click handler to cycle through the placeholder variants.</p>"},{"location":"api/placeholder/#textual.widgets._placeholder.Placeholder.on_resize","title":"<code>on_resize(event)</code>","text":"<p>Update the placeholder \"size\" variant with the new placeholder size.</p>"},{"location":"api/placeholder/#textual.widgets._placeholder.Placeholder.render","title":"<code>render()</code>","text":"<p>Render the placeholder.</p> <p>Returns:</p> Type Description <code>RenderableType</code> <p>The value to render.</p>"},{"location":"api/placeholder/#textual.widgets._placeholder.Placeholder.reset_color_cycle","title":"<code>reset_color_cycle()</code>  <code>classmethod</code>","text":"<p>Reset the placeholder background color cycle.</p>"},{"location":"api/placeholder/#textual.widgets._placeholder.Placeholder.validate_variant","title":"<code>validate_variant(variant)</code>","text":"<p>Validate the variant to which the placeholder was set.</p>"},{"location":"api/placeholder/#textual.widgets._placeholder.PlaceholderVariant","title":"<code>PlaceholderVariant</code>  <code>module-attribute</code>","text":"<p>The different variants of placeholder.</p>"},{"location":"api/query/","title":"Query","text":""},{"location":"api/query/#textual.css.query","title":"<code>query</code>","text":"<p>A DOMQuery is a set of DOM nodes associated with a given CSS selector.</p> <p>This set of nodes may be further filtered with the filter method. Additional methods apply actions to the nodes in the query.</p> <p>If this sounds like JQuery, a (once) popular JS library, it is no coincidence.</p> <p>DOMQuery objects are typically created by Widget.query method.</p> <p>Queries are lazy. Results will be calculated at the point you iterate over the query, or call a method which evaluates the query, such as first() and last().</p>"},{"location":"api/query/#textual.css.query.DOMQuery","title":"<code>DOMQuery</code>","text":"<p>         Bases: <code>Generic[QueryType]</code></p>"},{"location":"api/query/#textual.css.query.DOMQuery.nodes","title":"<code>nodes: list[QueryType]</code>  <code>property</code>","text":"<p>Lazily evaluate nodes.</p>"},{"location":"api/query/#textual.css.query.DOMQuery.add_class","title":"<code>add_class(*class_names)</code>","text":"<p>Add the given class name(s) to nodes.</p>"},{"location":"api/query/#textual.css.query.DOMQuery.exclude","title":"<code>exclude(selector)</code>","text":"<p>Exclude nodes that match a given selector.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>str</code> <p>A CSS selector.</p> required <p>Returns:</p> Type Description <code>DOMQuery[QueryType]</code> <p>New DOM query.</p>"},{"location":"api/query/#textual.css.query.DOMQuery.filter","title":"<code>filter(selector)</code>","text":"<p>Filter this set by the given CSS selector.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>str</code> <p>A CSS selector.</p> required <p>Returns:</p> Type Description <code>DOMQuery[QueryType]</code> <p>New DOM Query.</p>"},{"location":"api/query/#textual.css.query.DOMQuery.first","title":"<code>first(expect_type=None)</code>","text":"<p>Get the first matching node.</p> <p>Parameters:</p> Name Type Description Default <code>expect_type</code> <code>type[ExpectType] | None</code> <p>Require matched node is of this type, or None for any type. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>WrongType</code> <p>If the wrong type was found.</p> <code>NoMatches</code> <p>If there are no matching nodes in the query.</p> <p>Returns:</p> Type Description <code>QueryType | ExpectType</code> <p>The matching Widget.</p>"},{"location":"api/query/#textual.css.query.DOMQuery.last","title":"<code>last(expect_type=None)</code>","text":"<p>Get the last matching node.</p> <p>Parameters:</p> Name Type Description Default <code>expect_type</code> <code>type[ExpectType] | None</code> <p>Require matched node is of this type, or None for any type. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>WrongType</code> <p>If the wrong type was found.</p> <code>NoMatches</code> <p>If there are no matching nodes in the query.</p> <p>Returns:</p> Type Description <code>QueryType | ExpectType</code> <p>The matching Widget.</p>"},{"location":"api/query/#textual.css.query.DOMQuery.only_one","title":"<code>only_one(expect_type=None)</code>","text":"<p>Get the only matching node.</p> <p>Parameters:</p> Name Type Description Default <code>expect_type</code> <code>type[ExpectType] | None</code> <p>Require matched node is of this type, or None for any type. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>WrongType</code> <p>If the wrong type was found.</p> <code>NoMatches</code> <p>If no node matches the query.</p> <code>TooManyMatches</code> <p>If there is more than one matching node in the query.</p> <p>Returns:</p> Type Description <code>Widget | ExpectType</code> <p>The matching Widget.</p>"},{"location":"api/query/#textual.css.query.DOMQuery.refresh","title":"<code>refresh(*, repaint=True, layout=False)</code>","text":"<p>Refresh matched nodes.</p> <p>Parameters:</p> Name Type Description Default <code>repaint</code> <code>bool</code> <p>Repaint node(s). defaults to True.</p> <code>True</code> <code>layout</code> <code>bool</code> <p>Layout node(s). Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>DOMQuery[QueryType]</code> <p>Query for chaining.</p>"},{"location":"api/query/#textual.css.query.DOMQuery.remove","title":"<code>remove()</code>","text":"<p>Remove matched nodes from the DOM.</p> <p>Returns:</p> Type Description <code>AwaitRemove</code> <p>An awaitable object that waits for the widgets to be removed.</p>"},{"location":"api/query/#textual.css.query.DOMQuery.remove_class","title":"<code>remove_class(*class_names)</code>","text":"<p>Remove the given class names from the nodes.</p>"},{"location":"api/query/#textual.css.query.DOMQuery.results","title":"<code>results(filter_type=None)</code>","text":"<p>Get query results, optionally filtered by a given type.</p> <p>Parameters:</p> Name Type Description Default <code>filter_type</code> <code>type[ExpectType] | None</code> <p>A Widget class to filter results, or None for no filter. Defaults to None.</p> <code>None</code> <p>Yields:</p> Type Description <code>Iterator[Widget | ExpectType]</code> <p>Iterator[Widget | ExpectType]: An iterator of Widget instances.</p>"},{"location":"api/query/#textual.css.query.DOMQuery.set_class","title":"<code>set_class(add, *class_names)</code>","text":"<p>Set the given class name(s) according to a condition.</p> <p>Parameters:</p> Name Type Description Default <code>add</code> <code>bool</code> <p>Add the classes if True, otherwise remove them.</p> required <p>Returns:</p> Type Description <code>DOMQuery[QueryType]</code> <p>Self.</p>"},{"location":"api/query/#textual.css.query.DOMQuery.set_styles","title":"<code>set_styles(css=None, **update_styles)</code>","text":"<p>Set styles on matched nodes.</p> <p>Parameters:</p> Name Type Description Default <code>css</code> <code>str | None</code> <p>CSS declarations to parser, or None. Defaults to None.</p> <code>None</code>"},{"location":"api/query/#textual.css.query.DOMQuery.toggle_class","title":"<code>toggle_class(*class_names)</code>","text":"<p>Toggle the given class names from matched nodes.</p>"},{"location":"api/query/#textual.css.query.InvalidQueryFormat","title":"<code>InvalidQueryFormat</code>","text":"<p>         Bases: <code>QueryError</code></p> <p>Query did not parse correctly.</p>"},{"location":"api/query/#textual.css.query.NoMatches","title":"<code>NoMatches</code>","text":"<p>         Bases: <code>QueryError</code></p> <p>No nodes matched the query.</p>"},{"location":"api/query/#textual.css.query.QueryError","title":"<code>QueryError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Base class for a query related error.</p>"},{"location":"api/query/#textual.css.query.TooManyMatches","title":"<code>TooManyMatches</code>","text":"<p>         Bases: <code>QueryError</code></p> <p>Too many nodes matched the query.</p>"},{"location":"api/query/#textual.css.query.WrongType","title":"<code>WrongType</code>","text":"<p>         Bases: <code>QueryError</code></p> <p>Query result was not of the correct type.</p>"},{"location":"api/radiobutton/","title":"Radiobutton","text":""},{"location":"api/radiobutton/#textual.widgets.RadioButton","title":"<code>RadioButton</code>","text":"<p>         Bases: <code>ToggleButton</code></p> <p>A radio button widget that represents a boolean value.</p> Note <p>A <code>RadioButton</code> is best used within a RadioSet.</p>"},{"location":"api/radiobutton/#textual.widgets._radio_button.RadioButton.BUTTON_INNER","title":"<code>BUTTON_INNER</code>  <code>class-attribute</code>","text":"<p>The character used for the inside of the button.</p>"},{"location":"api/radiobutton/#textual.widgets._radio_button.RadioButton.Changed","title":"<code>Changed</code>","text":"<p>         Bases: <code>ToggleButton.Changed</code></p> <p>Posted when the value of the radio button changes.</p> <p>This message can be handled using an <code>on_radio_button_changed</code> method.</p>"},{"location":"api/radiobutton/#textual.widgets._radio_button.RadioButton.Changed.control","title":"<code>control: RadioButton</code>  <code>property</code>","text":"<p>Alias for self.radio_button</p>"},{"location":"api/radiobutton/#textual.widgets._radio_button.RadioButton.Changed.radio_button","title":"<code>radio_button: RadioButton</code>  <code>property</code>","text":"<p>The radio button that was changed.</p>"},{"location":"api/radioset/","title":"Radioset","text":""},{"location":"api/radioset/#textual.widgets.RadioSet","title":"<code>RadioSet</code>","text":"<p>         Bases: <code>Container</code></p> <p>Widget for grouping a collection of radio buttons into a set.</p> <p>When a collection of RadioButtons are grouped with this widget, they will be treated as a mutually-exclusive grouping. If one button is turned on, the previously-on button will be turned off.</p>"},{"location":"api/radioset/#textual.widgets._radio_set.RadioSet.pressed_button","title":"<code>pressed_button: RadioButton | None</code>  <code>property</code>","text":"<p>The currently-pressed button, or <code>None</code> if none are pressed.</p>"},{"location":"api/radioset/#textual.widgets._radio_set.RadioSet.pressed_index","title":"<code>pressed_index: int</code>  <code>property</code>","text":"<p>The index of the currently-pressed button, or -1 if none are pressed.</p>"},{"location":"api/radioset/#textual.widgets._radio_set.RadioSet.Changed","title":"<code>Changed</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when the pressed button in the set changes.</p> <p>This message can be handled using an <code>on_radio_set_changed</code> method.</p>"},{"location":"api/radioset/#textual.widgets._radio_set.RadioSet.Changed.index","title":"<code>index</code>  <code>instance-attribute</code>","text":"<p>The index of the <code>RadioButton</code> that was pressed to make the change.</p>"},{"location":"api/radioset/#textual.widgets._radio_set.RadioSet.Changed.pressed","title":"<code>pressed</code>  <code>instance-attribute</code>","text":"<p>The <code>RadioButton</code> that was pressed to make the change.</p>"},{"location":"api/radioset/#textual.widgets._radio_set.RadioSet.Changed.radio_set","title":"<code>radio_set</code>  <code>instance-attribute</code>","text":"<p>A reference to the <code>RadioSet</code> that was changed.</p>"},{"location":"api/radioset/#textual.widgets._radio_set.RadioSet.Changed.__init__","title":"<code>__init__(radio_set, pressed)</code>","text":"<p>Initialise the message.</p> <p>Parameters:</p> Name Type Description Default <code>pressed</code> <code>RadioButton</code> <p>The radio button that was pressed.</p> required"},{"location":"api/radioset/#textual.widgets._radio_set.RadioSet.__init__","title":"<code>__init__(*buttons, name=None, id=None, classes=None, disabled=False)</code>","text":"<p>Initialise the radio set.</p> <p>Parameters:</p> Name Type Description Default <code>buttons</code> <code>str | RadioButton</code> <p>A collection of labels or RadioButtons to group together.</p> <code>()</code> <code>name</code> <code>str | None</code> <p>The name of the radio set.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the radio set in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the radio set.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the radio set is disabled or not.</p> <code>False</code> Note <p>When a <code>str</code> label is provided, a RadioButton will be created from it.</p>"},{"location":"api/radioset/#textual.widgets._radio_set.RadioSet.on_mount","title":"<code>on_mount()</code>","text":"<p>Perform some processing once mounted in the DOM.</p>"},{"location":"api/radioset/#textual.widgets._radio_set.RadioSet.on_radio_button_changed","title":"<code>on_radio_button_changed(event)</code>","text":"<p>Respond to the value of a button in the set being changed.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>RadioButton.Changed</code> <p>The event.</p> required"},{"location":"api/reactive/","title":"Reactive","text":""},{"location":"api/reactive/#textual.reactive","title":"<code>reactive</code>","text":""},{"location":"api/reactive/#textual.reactive.Reactive","title":"<code>Reactive</code>","text":"<p>         Bases: <code>Generic[ReactiveType]</code></p> <p>Reactive descriptor.</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>ReactiveType | Callable[[], ReactiveType]</code> <p>A default value or callable that returns a default.</p> required <code>layout</code> <code>bool</code> <p>Perform a layout on change. Defaults to False.</p> <code>False</code> <code>repaint</code> <code>bool</code> <p>Perform a repaint on change. Defaults to True.</p> <code>True</code> <code>init</code> <code>bool</code> <p>Call watchers on initialize (post mount). Defaults to False.</p> <code>False</code> <code>always_update</code> <code>bool</code> <p>Call watchers even when the new value equals the old value. Defaults to False.</p> <code>False</code> <code>compute</code> <code>bool</code> <p>Run compute methods when attribute is changed. Defaults to True.</p> <code>True</code>"},{"location":"api/reactive/#textual.reactive.Reactive.var","title":"<code>var(default)</code>  <code>classmethod</code>","text":"<p>A reactive variable that doesn't update or layout.</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>ReactiveType | Callable[[], ReactiveType]</code> <p>A default value or callable that returns a default.</p> required <p>Returns:</p> Type Description <code>Reactive</code> <p>A Reactive descriptor.</p>"},{"location":"api/reactive/#textual.reactive.reactive","title":"<code>reactive</code>","text":"<p>         Bases: <code>Reactive[ReactiveType]</code></p> <p>Create a reactive attribute.</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>ReactiveType | Callable[[], ReactiveType]</code> <p>A default value or callable that returns a default.</p> required <code>layout</code> <code>bool</code> <p>Perform a layout on change. Defaults to False.</p> <code>False</code> <code>repaint</code> <code>bool</code> <p>Perform a repaint on change. Defaults to True.</p> <code>True</code> <code>init</code> <code>bool</code> <p>Call watchers on initialize (post mount). Defaults to True.</p> <code>True</code> <code>always_update</code> <code>bool</code> <p>Call watchers even when the new value equals the old value. Defaults to False.</p> <code>False</code>"},{"location":"api/reactive/#textual.reactive.var","title":"<code>var</code>","text":"<p>         Bases: <code>Reactive[ReactiveType]</code></p> <p>Create a reactive attribute (with no auto-refresh).</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>ReactiveType | Callable[[], ReactiveType]</code> <p>A default value or callable that returns a default.</p> required <code>init</code> <code>bool</code> <p>Call watchers on initialize (post mount). Defaults to True.</p> <code>True</code>"},{"location":"api/screen/","title":"Screen","text":""},{"location":"api/screen/#textual.screen","title":"<code>screen</code>","text":""},{"location":"api/screen/#textual.screen.Screen","title":"<code>Screen</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A widget for the root of the app.</p>"},{"location":"api/screen/#textual.screen.Screen.focus_chain","title":"<code>focus_chain: list[Widget]</code>  <code>property</code>","text":"<p>A list of widgets that may receive focus, in focus order.</p>"},{"location":"api/screen/#textual.screen.Screen.is_current","title":"<code>is_current: bool</code>  <code>property</code>","text":"<p>Is the screen current (i.e. visible to user)?</p>"},{"location":"api/screen/#textual.screen.Screen.update_timer","title":"<code>update_timer: Timer</code>  <code>property</code>","text":"<p>Timer used to perform updates.</p>"},{"location":"api/screen/#textual.screen.Screen.find_widget","title":"<code>find_widget(widget)</code>","text":"<p>Get the screen region of a Widget.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>A Widget within the composition.</p> required <p>Returns:</p> Type Description <code>MapGeometry</code> <p>Region relative to screen.</p> <p>Raises:</p> Type Description <code>NoWidget</code> <p>If the widget could not be found in this screen.</p>"},{"location":"api/screen/#textual.screen.Screen.focus_next","title":"<code>focus_next(selector='*')</code>","text":"<p>Focus the next widget, optionally filtered by a CSS selector.</p> <p>If no widget is currently focused, this will focus the first focusable widget. If no focusable widget matches the given CSS selector, focus is set to <code>None</code>.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>str | type[QueryType]</code> <p>CSS selector to filter what nodes can be focused.</p> <code>'*'</code> <p>Returns:</p> Type Description <code>Widget | None</code> <p>Newly focused widget, or None for no focus. If the return is not <code>None</code>, then it is guaranteed that the widget returned matches the CSS selectors given in the argument.</p>"},{"location":"api/screen/#textual.screen.Screen.focus_previous","title":"<code>focus_previous(selector='*')</code>","text":"<p>Focus the previous widget, optionally filtered by a CSS selector.</p> <p>If no widget is currently focused, this will focus the first focusable widget. If no focusable widget matches the given CSS selector, focus is set to <code>None</code>.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>str | type[QueryType]</code> <p>CSS selector to filter what nodes can be focused.</p> <code>'*'</code> <p>Returns:</p> Type Description <code>Widget | None</code> <p>Newly focused widget, or None for no focus. If the return is not <code>None</code>, then it is guaranteed that the widget returned matches the CSS selectors given in the argument.</p>"},{"location":"api/screen/#textual.screen.Screen.get_offset","title":"<code>get_offset(widget)</code>","text":"<p>Get the absolute offset of a given Widget.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>A widget</p> required <p>Returns:</p> Type Description <code>Offset</code> <p>The widget's offset relative to the top left of the terminal.</p>"},{"location":"api/screen/#textual.screen.Screen.get_style_at","title":"<code>get_style_at(x, y)</code>","text":"<p>Get the style under a given coordinate.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>X Coordinate.</p> required <code>y</code> <code>int</code> <p>Y Coordinate.</p> required <p>Returns:</p> Type Description <code>Style</code> <p>Rich Style object</p>"},{"location":"api/screen/#textual.screen.Screen.get_widget_at","title":"<code>get_widget_at(x, y)</code>","text":"<p>Get the widget at a given coordinate.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>X Coordinate.</p> required <code>y</code> <code>int</code> <p>Y Coordinate.</p> required <p>Returns:</p> Type Description <code>tuple[Widget, Region]</code> <p>Widget and screen region.</p>"},{"location":"api/screen/#textual.screen.Screen.get_widgets_at","title":"<code>get_widgets_at(x, y)</code>","text":"<p>Get all widgets under a given coordinate.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>X coordinate.</p> required <code>y</code> <code>int</code> <p>Y coordinate.</p> required <p>Returns:</p> Type Description <code>Iterable[tuple[Widget, Region]]</code> <p>Sequence of (WIDGET, REGION) tuples.</p>"},{"location":"api/screen/#textual.screen.Screen.set_focus","title":"<code>set_focus(widget, scroll_visible=True)</code>","text":"<p>Focus (or un-focus) a widget. A focused widget will receive key events first.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget | None</code> <p>Widget to focus, or None to un-focus.</p> required <code>scroll_visible</code> <code>bool</code> <p>Scroll widget in to view.</p> <code>True</code>"},{"location":"api/scroll_view/","title":"Scroll view","text":""},{"location":"api/scroll_view/#textual.scroll_view","title":"<code>scroll_view</code>","text":""},{"location":"api/scroll_view/#textual.scroll_view.ScrollView","title":"<code>ScrollView</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A base class for a Widget that handles it's own scrolling (i.e. doesn't rely on the compositor to render children).</p>"},{"location":"api/scroll_view/#textual.scroll_view.ScrollView.is_scrollable","title":"<code>is_scrollable: bool</code>  <code>property</code>","text":"<p>Always scrollable.</p>"},{"location":"api/scroll_view/#textual.scroll_view.ScrollView.is_transparent","title":"<code>is_transparent: bool</code>  <code>property</code>","text":"<p>Not transparent, i.e. renders something.</p>"},{"location":"api/scroll_view/#textual.scroll_view.ScrollView.get_content_height","title":"<code>get_content_height(container, viewport, width)</code>","text":"<p>Gets the height (number of lines) in the content area.</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <code>Size</code> <p>Size of the container (immediate parent) widget.</p> required <code>viewport</code> <code>Size</code> <p>Size of the viewport.</p> required <code>width</code> <code>int</code> <p>Width of renderable.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The height of the content.</p>"},{"location":"api/scroll_view/#textual.scroll_view.ScrollView.get_content_width","title":"<code>get_content_width(container, viewport)</code>","text":"<p>Gets the width of the content area.</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <code>Size</code> <p>Size of the container (immediate parent) widget.</p> required <code>viewport</code> <code>Size</code> <p>Size of the viewport.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The optimal width of the content.</p>"},{"location":"api/scroll_view/#textual.scroll_view.ScrollView.render","title":"<code>render()</code>","text":"<p>Render the scrollable region (if <code>render_lines</code> is not implemented).</p> <p>Returns:</p> Type Description <code>RenderableType</code> <p>Renderable object.</p>"},{"location":"api/static/","title":"Static","text":""},{"location":"api/static/#textual.widgets.Static","title":"<code>Static</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A widget to display simple static content, or use as a base class for more complex widgets.</p> <p>Parameters:</p> Name Type Description Default <code>renderable</code> <code>RenderableType</code> <p>A Rich renderable, or string containing console markup. Defaults to \"\".</p> <code>''</code> <code>expand</code> <code>bool</code> <p>Expand content if required to fill container. Defaults to False.</p> <code>False</code> <code>shrink</code> <code>bool</code> <p>Shrink content if required to fill container. Defaults to False.</p> <code>False</code> <code>markup</code> <code>bool</code> <p>True if markup should be parsed and rendered. Defaults to True.</p> <code>True</code> <code>name</code> <code>str | None</code> <p>Name of widget. Defaults to None.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>ID of Widget. Defaults to None.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>Space separated list of class names. Defaults to None.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the static is disabled or not.</p> <code>False</code>"},{"location":"api/static/#textual.widgets._static.Static.render","title":"<code>render()</code>","text":"<p>Get a rich renderable for the widget's content.</p> <p>Returns:</p> Type Description <code>RenderableType</code> <p>A rich renderable.</p>"},{"location":"api/static/#textual.widgets._static.Static.update","title":"<code>update(renderable='')</code>","text":"<p>Update the widget's content area with new text or Rich renderable.</p> <p>Parameters:</p> Name Type Description Default <code>renderable</code> <code>RenderableType</code> <p>A new rich renderable. Defaults to empty renderable;</p> <code>''</code>"},{"location":"api/strip/","title":"Strip","text":""},{"location":"api/strip/#textual.strip","title":"<code>strip</code>","text":""},{"location":"api/strip/#textual.strip.Strip","title":"<code>Strip</code>","text":"<p>Represents a 'strip' (horizontal line) of a Textual Widget.</p> <p>A Strip is like an immutable list of Segments. The immutability allows for effective caching.</p> <p>Parameters:</p> Name Type Description Default <code>segments</code> <code>Iterable[Segment]</code> <p>An iterable of segments.</p> required <code>cell_length</code> <code>int | None</code> <p>The cell length if known, or None to calculate on demand. Defaults to None.</p> <code>None</code>"},{"location":"api/strip/#textual.strip.Strip.cell_length","title":"<code>cell_length: int</code>  <code>property</code>","text":"<p>Get the number of cells required to render this object.</p>"},{"location":"api/strip/#textual.strip.Strip.link_ids","title":"<code>link_ids: set[str]</code>  <code>property</code>","text":"<p>A set of the link ids in this Strip.</p>"},{"location":"api/strip/#textual.strip.Strip.text","title":"<code>text: str</code>  <code>property</code>","text":"<p>Segment text.</p>"},{"location":"api/strip/#textual.strip.Strip.adjust_cell_length","title":"<code>adjust_cell_length(cell_length, style=None)</code>","text":"<p>Adjust the cell length, possibly truncating or extending.</p> <p>Parameters:</p> Name Type Description Default <code>cell_length</code> <code>int</code> <p>New desired cell length.</p> required <code>style</code> <code>Style | None</code> <p>Style when extending, or <code>None</code>. Defaults to <code>None</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Strip</code> <p>A new strip with the supplied cell length.</p>"},{"location":"api/strip/#textual.strip.Strip.apply_filter","title":"<code>apply_filter(filter)</code>","text":"<p>Apply a filter to all segments in the strip.</p> <p>Parameters:</p> Name Type Description Default <code>filter</code> <code>LineFilter</code> <p>A line filter object.</p> required <p>Returns:</p> Type Description <code>Strip</code> <p>A new Strip.</p>"},{"location":"api/strip/#textual.strip.Strip.apply_style","title":"<code>apply_style(style)</code>","text":"<p>Apply a style to the Strip.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>Style</code> <p>A Rich style.</p> required <p>Returns:</p> Type Description <code>Strip</code> <p>A new strip.</p>"},{"location":"api/strip/#textual.strip.Strip.blank","title":"<code>blank(cell_length, style=None)</code>  <code>classmethod</code>","text":"<p>Create a blank strip.</p> <p>Parameters:</p> Name Type Description Default <code>cell_length</code> <code>int</code> <p>Desired cell length.</p> required <code>style</code> <code>StyleType | None</code> <p>Style of blank.</p> <code>None</code> <p>Returns:</p> Type Description <code>Strip</code> <p>New strip.</p>"},{"location":"api/strip/#textual.strip.Strip.crop","title":"<code>crop(start, end)</code>","text":"<p>Crop a strip between two cell positions.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>The start cell position (inclusive).</p> required <code>end</code> <code>int</code> <p>The end cell position (exclusive).</p> required <p>Returns:</p> Type Description <code>Strip</code> <p>A new Strip.</p>"},{"location":"api/strip/#textual.strip.Strip.divide","title":"<code>divide(cuts)</code>","text":"<p>Divide the strip in to multiple smaller strips by cutting at given (cell) indices.</p> <p>Parameters:</p> Name Type Description Default <code>cuts</code> <code>Iterable[int]</code> <p>An iterable of cell positions as ints.</p> required <p>Returns:</p> Type Description <code>list[Strip]</code> <p>A new list of strips.</p>"},{"location":"api/strip/#textual.strip.Strip.extend_cell_length","title":"<code>extend_cell_length(cell_length, style=None)</code>","text":"<p>Extend the cell length if it is less than the given value.</p> <p>Parameters:</p> Name Type Description Default <code>cell_length</code> <code>int</code> <p>Required minimum cell length.</p> required <code>style</code> <code>Style | None</code> <p>Style for padding if the cell length is extended.</p> <code>None</code> <p>Returns:</p> Type Description <code>Strip</code> <p>A new Strip.</p>"},{"location":"api/strip/#textual.strip.Strip.from_lines","title":"<code>from_lines(lines, cell_length=None)</code>  <code>classmethod</code>","text":"<p>Convert lines (lists of segments) to a list of Strips.</p> <p>Parameters:</p> Name Type Description Default <code>lines</code> <code>list[list[Segment]]</code> <p>List of lines, where a line is a list of segments.</p> required <code>cell_length</code> <code>int | None</code> <p>Cell length of lines (must be same) or None if not known. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Strip]</code> <p>List of strips.</p>"},{"location":"api/strip/#textual.strip.Strip.index_to_cell_position","title":"<code>index_to_cell_position(index)</code>","text":"<p>Given a character index, return the cell position of that character. This is the sum of the cell lengths of all the characters before the character at <code>index</code>.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index to convert.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The cell position of the character at <code>index</code>.</p>"},{"location":"api/strip/#textual.strip.Strip.join","title":"<code>join(strips)</code>  <code>classmethod</code>","text":"<p>Join a number of strips in to one.</p> <p>Parameters:</p> Name Type Description Default <code>strips</code> <code>Iterable[Strip | None]</code> <p>An iterable of Strips.</p> required <p>Returns:</p> Type Description <code>Strip</code> <p>A new combined strip.</p>"},{"location":"api/strip/#textual.strip.Strip.simplify","title":"<code>simplify()</code>","text":"<p>Simplify the segments (join segments with same style)</p> <p>Returns:</p> Type Description <code>Strip</code> <p>New strip.</p>"},{"location":"api/strip/#textual.strip.Strip.style_links","title":"<code>style_links(link_id, link_style)</code>","text":"<p>Apply a style to Segments with the given link_id.</p> <p>Parameters:</p> Name Type Description Default <code>link_id</code> <code>str</code> <p>A link id.</p> required <code>link_style</code> <code>Style</code> <p>Style to apply.</p> required <p>Returns:</p> Type Description <code>Strip</code> <p>New strip (or same Strip if no changes).</p>"},{"location":"api/strip/#textual.strip.get_line_length","title":"<code>get_line_length(segments)</code>","text":"<p>Get the line length (total length of all segments).</p> <p>Parameters:</p> Name Type Description Default <code>segments</code> <code>Iterable[Segment]</code> <p>Iterable of segments.</p> required <p>Returns:</p> Type Description <code>int</code> <p>Length of line in cells.</p>"},{"location":"api/switch/","title":"Switch","text":""},{"location":"api/switch/#textual.widgets.Switch","title":"<code>Switch</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A switch widget that represents a boolean value.</p> <p>Can be toggled by clicking on it or through its bindings.</p> <p>The switch widget also contains component classes that enable more customization.</p>"},{"location":"api/switch/#textual.widgets._switch.Switch.BINDINGS","title":"<code>BINDINGS: ClassVar[list[BindingType]]</code>  <code>class-attribute</code>","text":"Key(s) Description enter,space Toggle the switch state."},{"location":"api/switch/#textual.widgets._switch.Switch.COMPONENT_CLASSES","title":"<code>COMPONENT_CLASSES: ClassVar[set[str]]</code>  <code>class-attribute</code>","text":"Class Description <code>switch--slider</code> Targets the slider of the switch."},{"location":"api/switch/#textual.widgets._switch.Switch.slider_pos","title":"<code>slider_pos</code>  <code>class-attribute</code>","text":"<p>The position of the slider.</p>"},{"location":"api/switch/#textual.widgets._switch.Switch.value","title":"<code>value</code>  <code>class-attribute</code>","text":"<p>The value of the switch; <code>True</code> for on and <code>False</code> for off.</p>"},{"location":"api/switch/#textual.widgets._switch.Switch.Changed","title":"<code>Changed</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when the status of the switch changes.</p> <p>Can be handled using <code>on_switch_changed</code> in a subclass of <code>Switch</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>bool</code> <p>The value that the switch was changed to.</p> <code>input</code> <code>bool</code> <p>The <code>Switch</code> widget that was changed.</p>"},{"location":"api/switch/#textual.widgets._switch.Switch.Changed.control","title":"<code>control: Switch</code>  <code>property</code>","text":"<p>Alias for self.switch.</p>"},{"location":"api/switch/#textual.widgets._switch.Switch.__init__","title":"<code>__init__(value=False, *, animate=True, name=None, id=None, classes=None, disabled=False)</code>","text":"<p>Initialise the switch.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool</code> <p>The initial value of the switch. Defaults to False.</p> <code>False</code> <code>animate</code> <code>bool</code> <p>True if the switch should animate when toggled. Defaults to True.</p> <code>True</code> <code>name</code> <code>str | None</code> <p>The name of the switch.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the switch in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the switch.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the switch is disabled or not.</p> <code>False</code>"},{"location":"api/switch/#textual.widgets._switch.Switch.action_toggle","title":"<code>action_toggle()</code>","text":"<p>Toggle the state of the switch.</p>"},{"location":"api/switch/#textual.widgets._switch.Switch.on_click","title":"<code>on_click()</code>","text":"<p>Toggle the state of the switch.</p>"},{"location":"api/switch/#textual.widgets._switch.Switch.toggle","title":"<code>toggle()</code>","text":"<p>Toggle the switch value.</p> <p>As a result of the value changing, a <code>Switch.Changed</code> message will be posted.</p>"},{"location":"api/tabs/","title":"Tabs","text":""},{"location":"api/tabs/#textual.widgets.Tab","title":"<code>Tab</code>","text":"<p>         Bases: <code>Static</code></p> <p>A Widget to manage a single tab within a Tabs widget.</p>"},{"location":"api/tabs/#textual.widgets._tabs.Tab.label_text","title":"<code>label_text: str</code>  <code>property</code>","text":"<p>Undecorated text of the label.</p>"},{"location":"api/tabs/#textual.widgets._tabs.Tab.Clicked","title":"<code>Clicked</code>","text":"<p>         Bases: <code>Message</code></p> <p>A tab was clicked.</p>"},{"location":"api/tabs/#textual.widgets._tabs.Tab.__init__","title":"<code>__init__(label, *, id=None)</code>","text":"<p>Initialise a Tab.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType</code> <p>The label to use in the tab.</p> required <code>id</code> <code>str | None</code> <p>Optional ID for the widget.</p> <code>None</code>"},{"location":"api/tabs/#textual.widgets.Tabs","title":"<code>Tabs</code>","text":"<p>         Bases: <code>Widget</code></p> <p>A row of tabs.</p>"},{"location":"api/tabs/#textual.widgets._tabs.Tabs.BINDINGS","title":"<code>BINDINGS: ClassVar[list[BindingType]]</code>  <code>class-attribute</code>","text":"Key(s) Description left Move to the previous tab. right Move to the next tab."},{"location":"api/tabs/#textual.widgets._tabs.Tabs.active","title":"<code>active: reactive[str]</code>  <code>class-attribute</code>","text":"<p>The ID of the active tab, or empty string if none are active.</p>"},{"location":"api/tabs/#textual.widgets._tabs.Tabs.active_tab","title":"<code>active_tab: Tab | None</code>  <code>property</code>","text":"<p>The currently active tab, or None if there are no active tabs.</p>"},{"location":"api/tabs/#textual.widgets._tabs.Tabs.tab_count","title":"<code>tab_count: int</code>  <code>property</code>","text":"<p>Total number of tabs.</p>"},{"location":"api/tabs/#textual.widgets._tabs.Tabs.TabActivated","title":"<code>TabActivated</code>","text":"<p>         Bases: <code>Message</code></p> <p>Sent when a new tab is activated.</p>"},{"location":"api/tabs/#textual.widgets._tabs.Tabs.__init__","title":"<code>__init__(*tabs, active=None, name=None, id=None, classes=None, disabled=False)</code>","text":"<p>Construct a Tabs widget.</p> <p>Parameters:</p> Name Type Description Default <code>*tabs</code> <code>Tab | TextType</code> <p>Positional argument should be explicit Tab objects, or a str or Text.</p> <code>()</code> <code>active</code> <code>str | None</code> <p>ID of the tab which should be active on start.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>Optional name for the input widget.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>Optional ID for the widget.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>Optional initial classes for the widget.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the input is disabled or not.</p> <code>False</code>"},{"location":"api/tabs/#textual.widgets._tabs.Tabs.action_next_tab","title":"<code>action_next_tab()</code>","text":"<p>Make the next tab active.</p>"},{"location":"api/tabs/#textual.widgets._tabs.Tabs.action_previous_tab","title":"<code>action_previous_tab()</code>","text":"<p>Make the previous tab active.</p>"},{"location":"api/tabs/#textual.widgets._tabs.Tabs.add_tab","title":"<code>add_tab(tab)</code>","text":"<p>Add a new tab to the end of the tab list.</p> <p>Parameters:</p> Name Type Description Default <code>tab</code> <code>Tab | str | Text</code> <p>A new tab object, or a label (str or Text).</p> required"},{"location":"api/tabs/#textual.widgets._tabs.Tabs.clear","title":"<code>clear()</code>","text":"<p>Clear all the tabs.</p>"},{"location":"api/tabs/#textual.widgets._tabs.Tabs.on_mount","title":"<code>on_mount()</code>","text":"<p>Make the first tab active.</p>"},{"location":"api/tabs/#textual.widgets._tabs.Tabs.remove_tab","title":"<code>remove_tab(tab_or_id)</code>","text":"<p>Remove a tab.</p> <p>Parameters:</p> Name Type Description Default <code>tab_id</code> <p>The Tab's id.</p> required"},{"location":"api/tabs/#textual.widgets._tabs.Tabs.validate_active","title":"<code>validate_active(active)</code>","text":"<p>Check id assigned to active attribute is a valid tab.</p>"},{"location":"api/tabs/#textual.widgets._tabs.Tabs.watch_active","title":"<code>watch_active(previously_active, active)</code>","text":"<p>Handle a change to the active tab.</p>"},{"location":"api/text_log/","title":"Text log","text":""},{"location":"api/text_log/#textual.widgets.TextLog","title":"<code>TextLog</code>","text":"<p>         Bases: <code>ScrollView</code></p> <p>A widget for logging text.</p>"},{"location":"api/text_log/#textual.widgets._text_log.TextLog.highlight","title":"<code>highlight</code>  <code>instance-attribute</code>","text":"<p>Automatically highlight content.</p>"},{"location":"api/text_log/#textual.widgets._text_log.TextLog.markup","title":"<code>markup</code>  <code>instance-attribute</code>","text":"<p>Apply Rich console markup.</p>"},{"location":"api/text_log/#textual.widgets._text_log.TextLog.max_lines","title":"<code>max_lines</code>  <code>instance-attribute</code>","text":"<p>Maximum number of lines in the log or <code>None</code> for no maximum.</p>"},{"location":"api/text_log/#textual.widgets._text_log.TextLog.min_width","title":"<code>min_width</code>  <code>instance-attribute</code>","text":"<p>Minimum width of renderables.</p>"},{"location":"api/text_log/#textual.widgets._text_log.TextLog.wrap","title":"<code>wrap</code>  <code>instance-attribute</code>","text":"<p>Enable word wrapping.</p>"},{"location":"api/text_log/#textual.widgets._text_log.TextLog.__init__","title":"<code>__init__(*, max_lines=None, min_width=78, wrap=False, highlight=False, markup=False, name=None, id=None, classes=None, disabled=False)</code>","text":"<p>Create a TextLog widget.</p> <p>Parameters:</p> Name Type Description Default <code>max_lines</code> <code>int | None</code> <p>Maximum number of lines in the log or <code>None</code> for no maximum.</p> <code>None</code> <code>min_width</code> <code>int</code> <p>Minimum width of renderables.</p> <code>78</code> <code>wrap</code> <code>bool</code> <p>Enable word wrapping (default is off).</p> <code>False</code> <code>highlight</code> <code>bool</code> <p>Automatically highlight content.</p> <code>False</code> <code>markup</code> <code>bool</code> <p>Apply Rich console markup.</p> <code>False</code> <code>name</code> <code>str | None</code> <p>The name of the text log.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the text log in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the text log.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the text log is disabled or not.</p> <code>False</code>"},{"location":"api/text_log/#textual.widgets._text_log.TextLog.clear","title":"<code>clear()</code>","text":"<p>Clear the text log.</p>"},{"location":"api/text_log/#textual.widgets._text_log.TextLog.render_lines","title":"<code>render_lines(crop)</code>","text":"<p>Render the widget in to lines.</p> <p>Parameters:</p> Name Type Description Default <code>crop</code> <code>Region</code> <p>Region within visible area to.</p> required <p>Returns:</p> Type Description <code>list[Strip]</code> <p>A list of list of segments</p>"},{"location":"api/text_log/#textual.widgets._text_log.TextLog.write","title":"<code>write(content, width=None, expand=False, shrink=True)</code>","text":"<p>Write text or a rich renderable.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>RenderableType | object</code> <p>Rich renderable (or text).</p> required <code>width</code> <code>int | None</code> <p>Width to render or <code>None</code> to use optimal width.</p> <code>None</code> <code>expand</code> <code>bool</code> <p>Enable expand to widget width, or <code>False</code> to use <code>width</code>.</p> <code>False</code> <code>shrink</code> <code>bool</code> <p>Enable shrinking of content to fit width.</p> <code>True</code>"},{"location":"api/timer/","title":"Timer","text":""},{"location":"api/timer/#textual.timer","title":"<code>timer</code>","text":"<p>Timer objects are created by set_interval or     set_timer.</p>"},{"location":"api/timer/#textual.timer.Timer","title":"<code>Timer</code>","text":"<p>A class to send timer-based events.</p> <p>Parameters:</p> Name Type Description Default <code>event_target</code> <code>MessageTarget</code> <p>The object which will receive the timer events.</p> required <code>interval</code> <code>float</code> <p>The time between timer events, in seconds.</p> required <code>name</code> <code>str | None</code> <p>A name to assign the event (for debugging). Defaults to None.</p> <code>None</code> <code>callback</code> <code>TimerCallback | None</code> <p>A optional callback to invoke when the event is handled. Defaults to None.</p> <code>None</code> <code>repeat</code> <code>int | None</code> <p>The number of times to repeat the timer, or None to repeat forever. Defaults to None.</p> <code>None</code> <code>skip</code> <code>bool</code> <p>Enable skipping of scheduled events that couldn't be sent in time. Defaults to True.</p> <code>True</code> <code>pause</code> <code>bool</code> <p>Start the timer paused. Defaults to False.</p> <code>False</code>"},{"location":"api/timer/#textual.timer.Timer.pause","title":"<code>pause()</code>","text":"<p>Pause the timer.</p> <p>A paused timer will not send events until it is resumed.</p>"},{"location":"api/timer/#textual.timer.Timer.reset","title":"<code>reset()</code>","text":"<p>Reset the timer, so it starts from the beginning.</p>"},{"location":"api/timer/#textual.timer.Timer.resume","title":"<code>resume()</code>","text":"<p>Resume a paused timer.</p>"},{"location":"api/timer/#textual.timer.Timer.start","title":"<code>start()</code>","text":"<p>Start the timer return the task.</p> <p>Returns:</p> Type Description <code>Task</code> <p>A Task instance for the timer.</p>"},{"location":"api/timer/#textual.timer.Timer.stop","title":"<code>stop()</code>","text":"<p>Stop the timer.</p>"},{"location":"api/toggle_button/","title":"Toggle button","text":""},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton","title":"<code>ToggleButton</code>","text":"<p>         Bases: <code>Static</code></p> <p>Base toggle button widget.</p> Warning <p><code>ToggleButton</code> should be considered to be an internal class; it exists to serve as the common core of Checkbox and RadioButton.</p>"},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.BINDINGS","title":"<code>BINDINGS: ClassVar[list[BindingType]]</code>  <code>class-attribute</code>","text":"Key(s) Description enter, space Toggle the value."},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.BUTTON_INNER","title":"<code>BUTTON_INNER: str</code>  <code>class-attribute</code>","text":"<p>The character used for the inside of the button.</p>"},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.BUTTON_LEFT","title":"<code>BUTTON_LEFT: str</code>  <code>class-attribute</code>","text":"<p>The character used for the left side of the toggle button.</p>"},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.BUTTON_RIGHT","title":"<code>BUTTON_RIGHT: str</code>  <code>class-attribute</code>","text":"<p>The character used for the right side of the toggle button.</p>"},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.COMPONENT_CLASSES","title":"<code>COMPONENT_CLASSES: ClassVar[set[str]]</code>  <code>class-attribute</code>","text":"Class Description <code>toggle--button</code> Targets the toggle button itself. <code>toggle--label</code> Targets the text label of the toggle button."},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.label","title":"<code>label: Text</code>  <code>property</code>","text":"<p>The label associated with the button.</p>"},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.Changed","title":"<code>Changed</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when the value of the toggle button changes.</p>"},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.Changed.value","title":"<code>value</code>  <code>instance-attribute</code>","text":"<p>The value of the toggle button after the change.</p>"},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.Changed.__init__","title":"<code>__init__(toggle_button, value)</code>","text":"<p>Initialise the message.</p> <p>Parameters:</p> Name Type Description Default <code>toggle_button</code> <code>ToggleButton</code> <p>The toggle button sending the message.</p> required <code>value</code> <code>bool</code> <p>The value of the toggle button.</p> required"},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.__init__","title":"<code>__init__(label='', value=False, button_first=True, *, name=None, id=None, classes=None, disabled=False)</code>","text":"<p>Initialise the toggle.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType</code> <p>The label for the toggle.</p> <code>''</code> <code>value</code> <code>bool</code> <p>The initial value of the toggle. Defaults to <code>False</code>.</p> <code>False</code> <code>button_first</code> <code>bool</code> <p>Should the button come before the label, or after?</p> <code>True</code> <code>name</code> <code>str | None</code> <p>The name of the toggle.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the toggle in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the toggle.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the button is disabled or not.</p> <code>False</code>"},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.action_toggle","title":"<code>action_toggle()</code>","text":"<p>Toggle the value of the widget when called as an action.</p> <p>This would normally be used for a keyboard binding.</p>"},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.on_click","title":"<code>on_click()</code>","text":"<p>Toggle the value of the widget when clicked with the mouse.</p>"},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.render","title":"<code>render()</code>","text":"<p>Render the content of the widget.</p> <p>Returns:</p> Type Description <code>RenderResult</code> <p>The content to render for the widget.</p>"},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.toggle","title":"<code>toggle()</code>","text":"<p>Toggle the value of the widget.</p>"},{"location":"api/toggle_button/#textual.widgets._toggle_button.ToggleButton.watch_value","title":"<code>watch_value()</code>","text":"<p>React to the value being changed.</p> <p>When triggered, the CSS class <code>-on</code> is applied to the widget if <code>value</code> has become <code>True</code>, or it is removed if it has become <code>False</code>. Subsequently a related <code>Changed</code> event will be posted.</p>"},{"location":"api/tree/","title":"Tree","text":""},{"location":"api/tree/#textual.widgets.Tree","title":"<code>Tree</code>","text":"<p>         Bases: <code>Generic[TreeDataType]</code>, <code>ScrollView</code></p> <p>A widget for displaying and navigating data in a tree.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.BINDINGS","title":"<code>BINDINGS: ClassVar[list[BindingType]]</code>  <code>class-attribute</code>","text":"Key(s) Description enter Select the current item. space Toggle the expand/collapsed space of the current item. up Move the cursor up. down Move the cursor down."},{"location":"api/tree/#textual.widgets._tree.Tree.COMPONENT_CLASSES","title":"<code>COMPONENT_CLASSES: ClassVar[set[str]]</code>  <code>class-attribute</code>","text":"Class Description <code>tree--cursor</code> Targets the cursor. <code>tree--guides</code> Targets the indentation guides. <code>tree--guides-hover</code> Targets the indentation guides under the cursor. <code>tree--guides-selected</code> Targets the indentation guides that are selected. <code>tree--highlight</code> Targets the highlighted items. <code>tree--highlight-line</code> Targets the lines under the cursor. <code>tree--label</code> Targets the (text) labels of the items."},{"location":"api/tree/#textual.widgets._tree.Tree.auto_expand","title":"<code>auto_expand</code>  <code>class-attribute</code>","text":"<p>Auto expand tree nodes when clicked.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.cursor_line","title":"<code>cursor_line</code>  <code>class-attribute</code>","text":"<p>The line with the cursor, or -1 if no cursor.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.cursor_node","title":"<code>cursor_node: TreeNode[TreeDataType] | None</code>  <code>property</code>","text":"<p>The currently selected node, or <code>None</code> if no selection.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.guide_depth","title":"<code>guide_depth</code>  <code>class-attribute</code>","text":"<p>The indent depth of tree nodes.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.hover_line","title":"<code>hover_line</code>  <code>class-attribute</code>","text":"<p>The line number under the mouse pointer, or -1 if not under the mouse pointer.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.last_line","title":"<code>last_line: int</code>  <code>property</code>","text":"<p>The index of the last line.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.root","title":"<code>root</code>  <code>instance-attribute</code>","text":"<p>The root node of the tree.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.show_guides","title":"<code>show_guides</code>  <code>class-attribute</code>","text":"<p>Enable display of tree guide lines.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.show_root","title":"<code>show_root</code>  <code>class-attribute</code>","text":"<p>Show the root of the tree.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.NodeCollapsed","title":"<code>NodeCollapsed</code>","text":"<p>         Bases: <code>Generic[EventTreeDataType]</code>, <code>Message</code></p> <p>Event sent when a node is collapsed.</p> <p>Can be handled using <code>on_tree_node_collapsed</code> in a subclass of <code>Tree</code> or in a parent node in the DOM.</p> <p>Attributes:</p> Name Type Description <code>node</code> <code>TreeNode[EventTreeDataType]</code> <p>The node that was collapsed.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.NodeExpanded","title":"<code>NodeExpanded</code>","text":"<p>         Bases: <code>Generic[EventTreeDataType]</code>, <code>Message</code></p> <p>Event sent when a node is expanded.</p> <p>Can be handled using <code>on_tree_node_expanded</code> in a subclass of <code>Tree</code> or in a parent node in the DOM.</p> <p>Attributes:</p> Name Type Description <code>node</code> <code>TreeNode[EventTreeDataType]</code> <p>The node that was expanded.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.NodeHighlighted","title":"<code>NodeHighlighted</code>","text":"<p>         Bases: <code>Generic[EventTreeDataType]</code>, <code>Message</code></p> <p>Event sent when a node is highlighted.</p> <p>Can be handled using <code>on_tree_node_highlighted</code> in a subclass of <code>Tree</code> or in a parent node in the DOM.</p> <p>Attributes:</p> Name Type Description <code>node</code> <code>TreeNode[EventTreeDataType]</code> <p>The node that was highlighted.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.NodeSelected","title":"<code>NodeSelected</code>","text":"<p>         Bases: <code>Generic[EventTreeDataType]</code>, <code>Message</code></p> <p>Event sent when a node is selected.</p> <p>Can be handled using <code>on_tree_node_selected</code> in a subclass of <code>Tree</code> or in a parent node in the DOM.</p> <p>Attributes:</p> Name Type Description <code>node</code> <code>TreeNode[EventTreeDataType]</code> <p>The node that was selected.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.UnknownNodeID","title":"<code>UnknownNodeID</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Exception raised when referring to an unknown <code>TreeNode</code> ID.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.__init__","title":"<code>__init__(label, data=None, *, name=None, id=None, classes=None, disabled=False)</code>","text":"<p>Initialise a Tree.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType</code> <p>The label of the root node of the tree.</p> required <code>data</code> <code>TreeDataType | None</code> <p>The optional data to associate with the root node of the tree.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>The name of the Tree.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the tree in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes of the tree.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the tree is disabled or not.</p> <code>False</code>"},{"location":"api/tree/#textual.widgets._tree.Tree.action_cursor_down","title":"<code>action_cursor_down()</code>","text":"<p>Move the cursor down one node.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.action_cursor_up","title":"<code>action_cursor_up()</code>","text":"<p>Move the cursor up one node.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.action_page_down","title":"<code>action_page_down()</code>","text":"<p>Move the cursor down a page's-worth of nodes.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.action_page_up","title":"<code>action_page_up()</code>","text":"<p>Move the cursor up a page's-worth of nodes.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.action_scroll_end","title":"<code>action_scroll_end()</code>","text":"<p>Move the cursor to the bottom of the tree.</p> Note <p>Here bottom means vertically, not branch depth.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.action_scroll_home","title":"<code>action_scroll_home()</code>","text":"<p>Move the cursor to the top of the tree.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.action_select_cursor","title":"<code>action_select_cursor()</code>","text":"<p>Cause a select event for the target node.</p> Note <p>If <code>auto_expand</code> is <code>True</code> use of this action on a non-leaf node will cause both an expand/collapse event to occour, as well as a selected event.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.action_toggle_node","title":"<code>action_toggle_node()</code>","text":"<p>Toggle the expanded state of the target node.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.clear","title":"<code>clear()</code>","text":"<p>Clear all nodes under root.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.get_label_width","title":"<code>get_label_width(node)</code>","text":"<p>Get the width of the nodes label.</p> <p>The default behavior is to call <code>render_node</code> and return the cell length. This method may be overridden in a sub-class if it can be done more efficiently.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>TreeNode[TreeDataType]</code> <p>A node.</p> required <p>Returns:</p> Type Description <code>int</code> <p>Width in cells.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.get_node_at_line","title":"<code>get_node_at_line(line_no)</code>","text":"<p>Get the node for a given line.</p> <p>Parameters:</p> Name Type Description Default <code>line_no</code> <code>int</code> <p>A line number.</p> required <p>Returns:</p> Type Description <code>TreeNode[TreeDataType] | None</code> <p>A tree node, or <code>None</code> if there is no node at that line.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.get_node_by_id","title":"<code>get_node_by_id(node_id)</code>","text":"<p>Get a tree node by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeID</code> <p>The ID of the node to get.</p> required <p>Returns:</p> Type Description <code>TreeNode[TreeDataType]</code> <p>The node associated with that ID.</p> <p>Raises:</p> Type Description <code>Tree.UnknownID</code> <p>Raised if the <code>TreeNode</code> ID is unknown.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.process_label","title":"<code>process_label(label)</code>","text":"<p>Process a <code>str</code> or <code>Text</code> value into a label.</p> <p>Maybe overridden in a subclass to change how labels are rendered.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType</code> <p>Label.</p> required <p>Returns:</p> Type Description <code>Text</code> <p>A Rich Text object.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.refresh_line","title":"<code>refresh_line(line)</code>","text":"<p>Refresh (repaint) a given line in the tree.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>int</code> <p>Line number.</p> required"},{"location":"api/tree/#textual.widgets._tree.Tree.render_label","title":"<code>render_label(node, base_style, style)</code>","text":"<p>Render a label for the given node. Override this to modify how labels are rendered.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>TreeNode[TreeDataType]</code> <p>A tree node.</p> required <code>base_style</code> <code>Style</code> <p>The base style of the widget.</p> required <code>style</code> <code>Style</code> <p>The additional style for the label.</p> required <p>Returns:</p> Type Description <code>Text</code> <p>A Rich Text object containing the label.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.reset","title":"<code>reset(label, data=None)</code>","text":"<p>Clear the tree and reset the root node.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType</code> <p>The label for the root node.</p> required <code>data</code> <code>TreeDataType | None</code> <p>Optional data for the root node.</p> <code>None</code>"},{"location":"api/tree/#textual.widgets._tree.Tree.scroll_to_line","title":"<code>scroll_to_line(line)</code>","text":"<p>Scroll to the given line.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>int</code> <p>A line number.</p> required"},{"location":"api/tree/#textual.widgets._tree.Tree.scroll_to_node","title":"<code>scroll_to_node(node)</code>","text":"<p>Scroll to the given node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>TreeNode[TreeDataType]</code> <p>Node to scroll in to view.</p> required"},{"location":"api/tree/#textual.widgets._tree.Tree.select_node","title":"<code>select_node(node)</code>","text":"<p>Move the cursor to the given node, or reset cursor.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>TreeNode[TreeDataType] | None</code> <p>A tree node, or None to reset cursor.</p> required"},{"location":"api/tree/#textual.widgets._tree.Tree.validate_cursor_line","title":"<code>validate_cursor_line(value)</code>","text":"<p>Prevent cursor line from going outside of range.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The value to test.</p> required Return <p>A valid version of the given value.</p>"},{"location":"api/tree/#textual.widgets._tree.Tree.validate_guide_depth","title":"<code>validate_guide_depth(value)</code>","text":"<p>Restrict guide depth to reasonable range.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The value to test.</p> required Return <p>A valid version of the given value.</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode","title":"<code>TreeNode</code>","text":"<p>         Bases: <code>Generic[TreeDataType]</code></p> <p>An object that represents a \"node\" in a tree control.</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.allow_expand","title":"<code>allow_expand: bool</code>  <code>writable</code> <code>property</code>","text":"<p>Is this node allowed to expand?</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.children","title":"<code>children: TreeNodes[TreeDataType]</code>  <code>property</code>","text":"<p>The child nodes of a TreeNode.</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.data","title":"<code>data</code>  <code>instance-attribute</code>","text":"<p>Optional data associated with the tree node.</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.id","title":"<code>id: NodeID</code>  <code>property</code>","text":"<p>The ID of the  node.</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.is_expanded","title":"<code>is_expanded: bool</code>  <code>property</code>","text":"<p>Is the node expanded?</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.is_last","title":"<code>is_last: bool</code>  <code>property</code>","text":"<p>Is this the last child node of its parent?</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.label","title":"<code>label: TextType</code>  <code>writable</code> <code>property</code>","text":"<p>The label for the node.</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.line","title":"<code>line: int</code>  <code>property</code>","text":"<p>The line number for this node, or -1 if it is not displayed.</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.parent","title":"<code>parent: TreeNode[TreeDataType] | None</code>  <code>property</code>","text":"<p>The parent of the node.</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.__init__","title":"<code>__init__(tree, parent, id, label, data=None, *, expanded=True, allow_expand=True)</code>","text":"<p>Initialise the node.</p> <p>Parameters:</p> Name Type Description Default <code>tree</code> <code>Tree[TreeDataType]</code> <p>The tree that the node is being attached to.</p> required <code>parent</code> <code>TreeNode[TreeDataType] | None</code> <p>The parent node that this node is being attached to.</p> required <code>id</code> <code>NodeID</code> <p>The ID of the node.</p> required <code>label</code> <code>Text</code> <p>The label for the node.</p> required <code>data</code> <code>TreeDataType | None</code> <p>Optional data to associate with the node.</p> <code>None</code> <code>expand</code> <p>Should the node be attached in an expanded state?</p> required <code>allow_expand</code> <code>bool</code> <p>Should the node allow being expanded by the user?</p> <code>True</code>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.add","title":"<code>add(label, data=None, *, expand=False, allow_expand=True)</code>","text":"<p>Add a node to the sub-tree.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType</code> <p>The new node's label.</p> required <code>data</code> <code>TreeDataType | None</code> <p>Data associated with the new node.</p> <code>None</code> <code>expand</code> <code>bool</code> <p>Node should be expanded. Defaults to True.</p> <code>False</code> <code>allow_expand</code> <code>bool</code> <p>Allow use to expand the node via keyboard or mouse. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>TreeNode[TreeDataType]</code> <p>A new Tree node</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.add_leaf","title":"<code>add_leaf(label, data=None)</code>","text":"<p>Add a 'leaf' node (a node that can not expand).</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType</code> <p>Label for the node.</p> required <code>data</code> <code>TreeDataType | None</code> <p>Optional data.</p> <code>None</code> <p>Returns:</p> Type Description <code>TreeNode[TreeDataType]</code> <p>New node.</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.collapse","title":"<code>collapse()</code>","text":"<p>Collapse the node (hide its children).</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.collapse_all","title":"<code>collapse_all()</code>","text":"<p>Collapse the node (hide its children) and all those below it.</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.expand","title":"<code>expand()</code>","text":"<p>Expand the node (show its children).</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.expand_all","title":"<code>expand_all()</code>","text":"<p>Expand the node (show its children) and all those below it.</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.set_label","title":"<code>set_label(label)</code>","text":"<p>Set a new label for the node.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>TextType</code> <p>A <code>str</code> or <code>Text</code> object with the new label.</p> required"},{"location":"api/tree/#textual.widgets._tree.TreeNode.toggle","title":"<code>toggle()</code>","text":"<p>Toggle the node's expanded state.</p>"},{"location":"api/tree/#textual.widgets._tree.TreeNode.toggle_all","title":"<code>toggle_all()</code>","text":"<p>Toggle the node's expanded state and make all those below it match.</p>"},{"location":"api/tree/#textual.widgets._tree.NodeID","title":"<code>NodeID</code>  <code>module-attribute</code>","text":"<p>The type of an ID applied to a TreeNode.</p>"},{"location":"api/tree/#textual.widgets._tree.TreeDataType","title":"<code>TreeDataType</code>  <code>module-attribute</code>","text":"<p>The type of the data for a given instance of a Tree.</p>"},{"location":"api/walk/","title":"Walk","text":""},{"location":"api/walk/#textual.walk","title":"<code>walk</code>","text":""},{"location":"api/walk/#textual.walk.walk_breadth_first","title":"<code>walk_breadth_first(root, filter_type=None, *, with_root=True)</code>","text":"<p>Walk the tree breadth first (children first).</p> <p>Note</p> <p>Avoid changing the DOM (mounting, removing etc.) while iterating with this function. Consider walk_children which doesn't have this limitation.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>DOMNode</code> <p>The root note (starting point).</p> required <code>filter_type</code> <code>type[WalkType] | None</code> <p>Optional DOMNode subclass to filter by, or <code>None</code> for no filter. Defaults to None.</p> <code>None</code> <code>with_root</code> <code>bool</code> <p>Include the root in the walk. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Iterable[DOMNode] | Iterable[WalkType]</code> <p>An iterable of DOMNodes, or the type specified in <code>filter_type</code>.</p>"},{"location":"api/walk/#textual.walk.walk_depth_first","title":"<code>walk_depth_first(root, filter_type=None, *, with_root=True)</code>","text":"<p>Walk the tree depth first (parents first).</p> <p>Note</p> <p>Avoid changing the DOM (mounting, removing etc.) while iterating with this function. Consider walk_children which doesn't have this limitation.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>DOMNode</code> <p>The root note (starting point).</p> required <code>filter_type</code> <code>type[WalkType] | None</code> <p>Optional DOMNode subclass to filter by, or <code>None</code> for no filter. Defaults to None.</p> <code>None</code> <code>with_root</code> <code>bool</code> <p>Include the root in the walk. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Iterable[DOMNode] | Iterable[WalkType]</code> <p>An iterable of DOMNodes, or the type specified in <code>filter_type</code>.</p>"},{"location":"api/welcome/","title":"Welcome","text":""},{"location":"api/welcome/#textual.widgets.Welcome","title":"<code>Welcome</code>","text":"<p>         Bases: <code>Static</code></p> <p>A Textual welcome widget.</p> <p>This widget can be used as a form of placeholder within a Textual application; although also see Placeholder.</p>"},{"location":"api/widget/","title":"Widget","text":""},{"location":"api/widget/#textual.widget","title":"<code>widget</code>","text":""},{"location":"api/widget/#textual.widget.AwaitMount","title":"<code>AwaitMount</code>","text":"<p>An awaitable returned by mount() and mount_all().</p> Example <p>await self.mount(Static(\"foo\"))</p>"},{"location":"api/widget/#textual.widget.MountError","title":"<code>MountError</code>","text":"<p>         Bases: <code>WidgetError</code></p> <p>Error raised when there was a problem with the mount request.</p>"},{"location":"api/widget/#textual.widget.RenderCache","title":"<code>RenderCache</code>","text":"<p>         Bases: <code>NamedTuple</code></p> <p>Stores results of a previous render.</p>"},{"location":"api/widget/#textual.widget.Widget","title":"<code>Widget</code>","text":"<p>         Bases: <code>DOMNode</code></p> <p>A Widget is the base class for Textual widgets.</p> <p>See also static for starting point for your own widgets.</p>"},{"location":"api/widget/#textual.widget.Widget.allow_horizontal_scroll","title":"<code>allow_horizontal_scroll: bool</code>  <code>property</code>","text":"<p>Check if horizontal scroll is permitted.</p> <p>May be overridden if you want different logic regarding allowing scrolling.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the widget may scroll horizontally.</p>"},{"location":"api/widget/#textual.widget.Widget.allow_vertical_scroll","title":"<code>allow_vertical_scroll: bool</code>  <code>property</code>","text":"<p>Check if vertical scroll is permitted.</p> <p>May be overridden if you want different logic regarding allowing scrolling.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the widget may scroll vertically.</p>"},{"location":"api/widget/#textual.widget.Widget.auto_links","title":"<code>auto_links</code>  <code>class-attribute</code>","text":"<p>Widget will highlight links automatically.</p>"},{"location":"api/widget/#textual.widget.Widget.can_focus","title":"<code>can_focus: bool</code>  <code>class-attribute</code>","text":"<p>Widget may receive focus.</p>"},{"location":"api/widget/#textual.widget.Widget.can_focus_children","title":"<code>can_focus_children: bool</code>  <code>class-attribute</code>","text":"<p>Widget's children may receive focus.</p>"},{"location":"api/widget/#textual.widget.Widget.container_size","title":"<code>container_size: Size</code>  <code>property</code>","text":"<p>The size of the container (parent widget).</p> <p>Returns:</p> Type Description <code>Size</code> <p>Container size.</p>"},{"location":"api/widget/#textual.widget.Widget.container_viewport","title":"<code>container_viewport: Region</code>  <code>property</code>","text":"<p>The viewport region (parent window).</p> <p>Returns:</p> Type Description <code>Region</code> <p>The region that contains this widget.</p>"},{"location":"api/widget/#textual.widget.Widget.content_offset","title":"<code>content_offset: Offset</code>  <code>property</code>","text":"<p>An offset from the Widget origin where the content begins.</p> <p>Returns:</p> Type Description <code>Offset</code> <p>Offset from widget's origin.</p>"},{"location":"api/widget/#textual.widget.Widget.content_region","title":"<code>content_region: Region</code>  <code>property</code>","text":"<p>Gets an absolute region containing the content (minus padding and border).</p> <p>Returns:</p> Type Description <code>Region</code> <p>Screen region that contains a widget's content.</p>"},{"location":"api/widget/#textual.widget.Widget.content_size","title":"<code>content_size: Size</code>  <code>property</code>","text":"<p>Get the size of the content area.</p>"},{"location":"api/widget/#textual.widget.Widget.expand","title":"<code>expand</code>  <code>class-attribute</code>","text":"<p>Rich renderable may expand.</p>"},{"location":"api/widget/#textual.widget.Widget.focusable","title":"<code>focusable: bool</code>  <code>property</code>","text":"<p>Can this widget currently receive focus?</p>"},{"location":"api/widget/#textual.widget.Widget.focusable_children","title":"<code>focusable_children: list[Widget]</code>  <code>property</code>","text":"<p>Get the children which may be focused.</p> <p>Returns:</p> Type Description <code>list[Widget]</code> <p>List of widgets that can receive focus.</p>"},{"location":"api/widget/#textual.widget.Widget.gutter","title":"<code>gutter: Spacing</code>  <code>property</code>","text":"<p>Spacing for padding / border / scrollbars.</p> <p>Returns:</p> Type Description <code>Spacing</code> <p>Additional spacing around content area.</p>"},{"location":"api/widget/#textual.widget.Widget.horizontal_scrollbar","title":"<code>horizontal_scrollbar: ScrollBar</code>  <code>property</code>","text":"<p>Get a vertical scrollbar (create if necessary).</p> <p>Returns:</p> Type Description <code>ScrollBar</code> <p>ScrollBar Widget.</p>"},{"location":"api/widget/#textual.widget.Widget.is_container","title":"<code>is_container: bool</code>  <code>property</code>","text":"<p>Check if this widget is a container (contains other widgets).</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if this widget is a container.</p>"},{"location":"api/widget/#textual.widget.Widget.is_scrollable","title":"<code>is_scrollable: bool</code>  <code>property</code>","text":"<p>Check if this Widget may be scrolled.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if this widget may be scrolled.</p>"},{"location":"api/widget/#textual.widget.Widget.is_transparent","title":"<code>is_transparent: bool</code>  <code>property</code>","text":"<p>Check if the background styles is not set.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if there is background color, otherwise <code>False</code>.</p>"},{"location":"api/widget/#textual.widget.Widget.layer","title":"<code>layer: str</code>  <code>property</code>","text":"<p>Get the name of this widgets layer.</p> <p>Returns:</p> Type Description <code>str</code> <p>Name of layer.</p>"},{"location":"api/widget/#textual.widget.Widget.layers","title":"<code>layers: tuple[str, ...]</code>  <code>property</code>","text":"<p>Layers of from parent.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>Tuple of layer names.</p>"},{"location":"api/widget/#textual.widget.Widget.link_hover_style","title":"<code>link_hover_style: Style</code>  <code>property</code>","text":"<p>Style of links with mouse hover.</p>"},{"location":"api/widget/#textual.widget.Widget.link_style","title":"<code>link_style: Style</code>  <code>property</code>","text":"<p>Style of links.</p>"},{"location":"api/widget/#textual.widget.Widget.max_scroll_x","title":"<code>max_scroll_x: int</code>  <code>property</code>","text":"<p>The maximum value of <code>scroll_x</code>.</p>"},{"location":"api/widget/#textual.widget.Widget.max_scroll_y","title":"<code>max_scroll_y: int</code>  <code>property</code>","text":"<p>The maximum value of <code>scroll_y</code>.</p>"},{"location":"api/widget/#textual.widget.Widget.offset","title":"<code>offset: Offset</code>  <code>writable</code> <code>property</code>","text":"<p>Widget offset from origin.</p> <p>Returns:</p> Type Description <code>Offset</code> <p>Relative offset.</p>"},{"location":"api/widget/#textual.widget.Widget.outer_size","title":"<code>outer_size: Size</code>  <code>property</code>","text":"<p>The size of the widget (including padding and border).</p> <p>Returns:</p> Type Description <code>Size</code> <p>Outer size.</p>"},{"location":"api/widget/#textual.widget.Widget.region","title":"<code>region: Region</code>  <code>property</code>","text":"<p>The region occupied by this widget, relative to the Screen.</p> <p>Raises:</p> Type Description <code>NoScreen</code> <p>If there is no screen.</p> <code>errors.NoWidget</code> <p>If the widget is not on the screen.</p> <p>Returns:</p> Type Description <code>Region</code> <p>Region within screen occupied by widget.</p>"},{"location":"api/widget/#textual.widget.Widget.scroll_offset","title":"<code>scroll_offset: Offset</code>  <code>property</code>","text":"<p>Get the current scroll offset.</p> <p>Returns:</p> Type Description <code>Offset</code> <p>Offset a container has been scrolled by.</p>"},{"location":"api/widget/#textual.widget.Widget.scrollable_content_region","title":"<code>scrollable_content_region: Region</code>  <code>property</code>","text":"<p>Gets an absolute region containing the scrollable content (minus padding, border, and scrollbars).</p> <p>Returns:</p> Type Description <code>Region</code> <p>Screen region that contains a widget's content.</p>"},{"location":"api/widget/#textual.widget.Widget.scrollbar_corner","title":"<code>scrollbar_corner: ScrollBarCorner</code>  <code>property</code>","text":"<p>Return the ScrollBarCorner - the cells that appear between the horizontal and vertical scrollbars (only when both are visible).</p>"},{"location":"api/widget/#textual.widget.Widget.scrollbar_gutter","title":"<code>scrollbar_gutter: Spacing</code>  <code>property</code>","text":"<p>Spacing required to fit scrollbar(s).</p> <p>Returns:</p> Type Description <code>Spacing</code> <p>Scrollbar gutter spacing.</p>"},{"location":"api/widget/#textual.widget.Widget.scrollbar_size_horizontal","title":"<code>scrollbar_size_horizontal: int</code>  <code>property</code>","text":"<p>Get the height used by the horizontal scrollbar.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of rows in the horizontal scrollbar.</p>"},{"location":"api/widget/#textual.widget.Widget.scrollbar_size_vertical","title":"<code>scrollbar_size_vertical: int</code>  <code>property</code>","text":"<p>Get the width used by the vertical scrollbar.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of columns in the vertical scrollbar.</p>"},{"location":"api/widget/#textual.widget.Widget.scrollbars_enabled","title":"<code>scrollbars_enabled: tuple[bool, bool]</code>  <code>property</code>","text":"<p>A tuple of booleans that indicate if scrollbars are enabled.</p> <p>Returns:</p> Type Description <code>tuple[bool, bool]</code> <p>A tuple of (, )"},{"location":"api/widget/#textual.widget.Widget.scrollbars_space","title":"<code>scrollbars_space: tuple[int, int]</code>  <code>property</code>","text":"<p>The number of cells occupied by scrollbars for width and height</p>"},{"location":"api/widget/#textual.widget.Widget.shrink","title":"<code>shrink</code>  <code>class-attribute</code>","text":"<p>Rich renderable may shrink.</p>"},{"location":"api/widget/#textual.widget.Widget.siblings","title":"<code>siblings: list[Widget]</code>  <code>property</code>","text":"<p>Get the widget's siblings (self is removed from the return list).</p> <p>Returns:</p> Type Description <code>list[Widget]</code> <p>A list of siblings.</p>"},{"location":"api/widget/#textual.widget.Widget.size","title":"<code>size: Size</code>  <code>property</code>","text":"<p>The size of the content area.</p> <p>Returns:</p> Type Description <code>Size</code> <p>Content area size.</p>"},{"location":"api/widget/#textual.widget.Widget.vertical_scrollbar","title":"<code>vertical_scrollbar: ScrollBar</code>  <code>property</code>","text":"<p>Get a vertical scrollbar (create if necessary).</p> <p>Returns:</p> Type Description <code>ScrollBar</code> <p>ScrollBar Widget.</p>"},{"location":"api/widget/#textual.widget.Widget.virtual_region","title":"<code>virtual_region: Region</code>  <code>property</code>","text":"<p>The widget region relative to it's container. Which may not be visible, depending on scroll offset.</p>"},{"location":"api/widget/#textual.widget.Widget.virtual_region_with_margin","title":"<code>virtual_region_with_margin: Region</code>  <code>property</code>","text":"<p>The widget region relative to its container (including margin), which may not be visible, depending on the scroll offset.</p> <p>Returns:</p> Type Description <code>Region</code> <p>The virtual region of the Widget, inclusive of its margin.</p>"},{"location":"api/widget/#textual.widget.Widget.visible_siblings","title":"<code>visible_siblings: list[Widget]</code>  <code>property</code>","text":"<p>A list of siblings which will be shown.</p> <p>Returns:</p> Type Description <code>list[Widget]</code> <p>List of siblings.</p>"},{"location":"api/widget/#textual.widget.Widget.window_region","title":"<code>window_region: Region</code>  <code>property</code>","text":"<p>The region within the scrollable area that is currently visible.</p> <p>Returns:</p> Type Description <code>Region</code> <p>New region.</p>"},{"location":"api/widget/#textual.widget.Widget.animate","title":"<code>animate(attribute, value, *, final_value=Ellipsis, duration=None, speed=None, delay=0.0, easing=DEFAULT_EASING, on_complete=None)</code>","text":"<p>Animate an attribute.</p> <p>Parameters:</p> Name Type Description Default <code>attribute</code> <code>str</code> <p>Name of the attribute to animate.</p> required <code>value</code> <code>float | Animatable</code> <p>The value to animate to.</p> required <code>final_value</code> <code>object</code> <p>The final value of the animation. Defaults to <code>value</code> if not set.</p> <code>Ellipsis</code> <code>duration</code> <code>float | None</code> <p>The duration of the animate. Defaults to None.</p> <code>None</code> <code>speed</code> <code>float | None</code> <p>The speed of the animation. Defaults to None.</p> <code>None</code> <code>delay</code> <code>float</code> <p>A delay (in seconds) before the animation starts. Defaults to 0.0.</p> <code>0.0</code> <code>easing</code> <code>EasingFunction | str</code> <p>An easing method. Defaults to \"in_out_cubic\".</p> <code>DEFAULT_EASING</code> <code>on_complete</code> <code>CallbackType | None</code> <p>A callable to invoke when the animation is finished. Defaults to None.</p> <code>None</code>"},{"location":"api/widget/#textual.widget.Widget.capture_mouse","title":"<code>capture_mouse(capture=True)</code>","text":"<p>Capture (or release) the mouse.</p> <p>When captured, mouse events will go to this widget even when the pointer is not directly over the widget.</p> <p>Parameters:</p> Name Type Description Default <code>capture</code> <code>bool</code> <p>True to capture or False to release. Defaults to True.</p> <code>True</code>"},{"location":"api/widget/#textual.widget.Widget.check_message_enabled","title":"<code>check_message_enabled(message)</code>","text":"<p>Check if a given message is enabled (allowed to be sent).</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Message</code> <p>A message object</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the message will be sent, or <code>False</code> if it is disabled.</p>"},{"location":"api/widget/#textual.widget.Widget.compose","title":"<code>compose()</code>","text":"<p>Called by Textual to create child widgets.</p> <p>Extend this to build a UI.</p> Example <pre><code>def compose(self) -&gt; ComposeResult:\nyield Header()\nyield Container(\nTree(), Viewer()\n)\nyield Footer()\n</code></pre>"},{"location":"api/widget/#textual.widget.Widget.focus","title":"<code>focus(scroll_visible=True)</code>","text":"<p>Give focus to this widget.</p> <p>Parameters:</p> Name Type Description Default <code>scroll_visible</code> <code>bool</code> <p>Scroll parent to make this widget visible. Defaults to True.</p> <code>True</code>"},{"location":"api/widget/#textual.widget.Widget.get_child_by_id","title":"<code>get_child_by_id(id, expect_type=None)</code>","text":"<p>Return the first child (immediate descendent) of this node with the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the child.</p> required <code>expect_type</code> <code>type[ExpectType] | None</code> <p>Require the object be of the supplied type, or None for any type. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>ExpectType | Widget</code> <p>The first child of this node with the ID.</p> <p>Raises:</p> Type Description <code>NoMatches</code> <p>if no children could be found for this ID</p> <code>WrongType</code> <p>if the wrong type was found.</p>"},{"location":"api/widget/#textual.widget.Widget.get_component_rich_style","title":"<code>get_component_rich_style(name, *, partial=False)</code>","text":"<p>Get a Rich style for a component.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of component.</p> required <code>partial</code> <code>bool</code> <p>Return a partial style (not combined with parent).</p> <code>False</code> <p>Returns:</p> Type Description <code>Style</code> <p>A Rich style object.</p>"},{"location":"api/widget/#textual.widget.Widget.get_content_height","title":"<code>get_content_height(container, viewport, width)</code>","text":"<p>Called by Textual to get the height of the content area. May be overridden in a subclass.</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <code>Size</code> <p>Size of the container (immediate parent) widget.</p> required <code>viewport</code> <code>Size</code> <p>Size of the viewport.</p> required <code>width</code> <code>int</code> <p>Width of renderable.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The height of the content.</p>"},{"location":"api/widget/#textual.widget.Widget.get_content_width","title":"<code>get_content_width(container, viewport)</code>","text":"<p>Called by textual to get the width of the content area. May be overridden in a subclass.</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <code>Size</code> <p>Size of the container (immediate parent) widget.</p> required <code>viewport</code> <code>Size</code> <p>Size of the viewport.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The optimal width of the content.</p>"},{"location":"api/widget/#textual.widget.Widget.get_pseudo_classes","title":"<code>get_pseudo_classes()</code>","text":"<p>Pseudo classes for a widget.</p> <p>Returns:</p> Type Description <code>Iterable[str]</code> <p>Names of the pseudo classes.</p>"},{"location":"api/widget/#textual.widget.Widget.get_style_at","title":"<code>get_style_at(x, y)</code>","text":"<p>Get the Rich style in a widget at a given relative offset.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>X coordinate relative to the widget.</p> required <code>y</code> <code>int</code> <p>Y coordinate relative to the widget.</p> required <p>Returns:</p> Type Description <code>Style</code> <p>A rich Style object.</p>"},{"location":"api/widget/#textual.widget.Widget.get_widget_by_id","title":"<code>get_widget_by_id(id, expect_type=None)</code>","text":"<p>Return the first descendant widget with the given ID.</p> <p>Performs a depth-first search rooted at this widget.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID to search for in the subtree.</p> required <code>expect_type</code> <code>type[ExpectType] | None</code> <p>Require the object be of the supplied type, or None for any type.</p> <code>None</code> <p>Returns:</p> Type Description <code>ExpectType | Widget</code> <p>The first descendant encountered with this ID.</p> <p>Raises:</p> Type Description <code>NoMatches</code> <p>if no children could be found for this ID.</p> <code>WrongType</code> <p>if the wrong type was found.</p>"},{"location":"api/widget/#textual.widget.Widget.mount","title":"<code>mount(*widgets, before=None, after=None)</code>","text":"<p>Mount widgets below this widget (making this widget a container).</p> <p>Parameters:</p> Name Type Description Default <code>*widgets</code> <code>Widget</code> <p>The widget(s) to mount.</p> <code>()</code> <code>before</code> <code>int | str | Widget | None</code> <p>Optional location to mount before. An <code>int</code> is the index of the child to mount before, a <code>str</code> is a <code>query_one</code> query to find the widget to mount before.</p> <code>None</code> <code>after</code> <code>int | str | Widget | None</code> <p>Optional location to mount after. An <code>int</code> is the index of the child to mount after, a <code>str</code> is a <code>query_one</code> query to find the widget to mount after.</p> <code>None</code> <p>Returns:</p> Type Description <code>AwaitMount</code> <p>An awaitable object that waits for widgets to be mounted.</p> <p>Raises:</p> Type Description <code>MountError</code> <p>If there is a problem with the mount request.</p> Note <p>Only one of <code>before</code> or <code>after</code> can be provided. If both are provided a <code>MountError</code> will be raised.</p>"},{"location":"api/widget/#textual.widget.Widget.mount_all","title":"<code>mount_all(widgets, *, before=None, after=None)</code>","text":"<p>Mount widgets from an iterable.</p> <p>Parameters:</p> Name Type Description Default <code>widgets</code> <code>Iterable[Widget]</code> <p>An iterable of widgets.</p> required <code>before</code> <code>int | str | Widget | None</code> <p>Optional location to mount before. An <code>int</code> is the index of the child to mount before, a <code>str</code> is a <code>query_one</code> query to find the widget to mount before.</p> <code>None</code> <code>after</code> <code>int | str | Widget | None</code> <p>Optional location to mount after. An <code>int</code> is the index of the child to mount after, a <code>str</code> is a <code>query_one</code> query to find the widget to mount after.</p> <code>None</code> <p>Returns:</p> Type Description <code>AwaitMount</code> <p>An awaitable object that waits for widgets to be mounted.</p> <p>Raises:</p> Type Description <code>MountError</code> <p>If there is a problem with the mount request.</p> Note <p>Only one of <code>before</code> or <code>after</code> can be provided. If both are provided a <code>MountError</code> will be raised.</p>"},{"location":"api/widget/#textual.widget.Widget.move_child","title":"<code>move_child(child, before=None, after=None)</code>","text":"<p>Move a child widget within its parent's list of children.</p> <p>Parameters:</p> Name Type Description Default <code>child</code> <code>int | Widget</code> <p>The child widget to move.</p> required <code>before</code> <code>int | Widget | None</code> <p>Optional location to move before. An <code>int</code> is the index of the child to move before, a <code>str</code> is a <code>query_one</code> query to find the widget to move before.</p> <code>None</code> <code>after</code> <code>int | Widget | None</code> <p>Optional location to move after. An <code>int</code> is the index of the child to move after, a <code>str</code> is a <code>query_one</code> query to find the widget to move after.</p> <code>None</code> <p>Raises:</p> Type Description <code>WidgetError</code> <p>If there is a problem with the child or target.</p> Note <p>Only one of <code>before</code> or <code>after</code> can be provided. If neither or both are provided a <code>WidgetError</code> will be raised.</p>"},{"location":"api/widget/#textual.widget.Widget.post_message","title":"<code>post_message(message)</code>","text":"<p>Post a message to this widget.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Message</code> <p>Message to post.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the message was posted, False if this widget was closed / closing.</p>"},{"location":"api/widget/#textual.widget.Widget.post_render","title":"<code>post_render(renderable)</code>","text":"<p>Applies style attributes to the default renderable.</p> <p>Returns:</p> Type Description <code>ConsoleRenderable</code> <p>A new renderable.</p>"},{"location":"api/widget/#textual.widget.Widget.refresh","title":"<code>refresh(*regions, repaint=True, layout=False)</code>","text":"<p>Initiate a refresh of the widget.</p> <p>This method sets an internal flag to perform a refresh, which will be done on the next idle event. Only one refresh will be done even if this method is called multiple times.</p> <p>By default this method will cause the content of the widget to refresh, but not change its size. You can also set <code>layout=True</code> to perform a layout.</p> <p>Warning</p> <p>It is rarely necessary to call this method explicitly. Updating styles or reactive attributes will do this automatically.</p> <p>Parameters:</p> Name Type Description Default <code>*regions</code> <code>Region</code> <p>Additional screen regions to mark as dirty.</p> <code>()</code> <code>repaint</code> <code>bool</code> <p>Repaint the widget (will call render() again). Defaults to True.</p> <code>True</code> <code>layout</code> <code>bool</code> <p>Also layout widgets in the view. Defaults to False.</p> <code>False</code>"},{"location":"api/widget/#textual.widget.Widget.release_mouse","title":"<code>release_mouse()</code>","text":"<p>Release the mouse.</p> <p>Mouse events will only be sent when the mouse is over the widget.</p>"},{"location":"api/widget/#textual.widget.Widget.remove","title":"<code>remove()</code>","text":"<p>Remove the Widget from the DOM (effectively deleting it).</p> <p>Returns:</p> Type Description <code>AwaitRemove</code> <p>An awaitable object that waits for the widget to be removed.</p>"},{"location":"api/widget/#textual.widget.Widget.render","title":"<code>render()</code>","text":"<p>Get renderable for widget.</p> <p>Returns:</p> Type Description <code>RenderableType</code> <p>Any renderable.</p>"},{"location":"api/widget/#textual.widget.Widget.render_line","title":"<code>render_line(y)</code>","text":"<p>Render a line of content.</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>int</code> <p>Y Coordinate of line.</p> required <p>Returns:</p> Type Description <code>Strip</code> <p>A rendered line.</p>"},{"location":"api/widget/#textual.widget.Widget.render_lines","title":"<code>render_lines(crop)</code>","text":"<p>Render the widget in to lines.</p> <p>Parameters:</p> Name Type Description Default <code>crop</code> <code>Region</code> <p>Region within visible area to render.</p> required <p>Returns:</p> Type Description <code>list[Strip]</code> <p>A list of list of segments.</p>"},{"location":"api/widget/#textual.widget.Widget.reset_focus","title":"<code>reset_focus()</code>","text":"<p>Reset the focus (move it to the next available widget).</p>"},{"location":"api/widget/#textual.widget.Widget.run_action","title":"<code>run_action(action)</code>  <code>async</code>","text":"<p>Perform a given action, with this widget as the default namespace.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>str</code> <p>Action encoded as a string.</p> required"},{"location":"api/widget/#textual.widget.Widget.scroll_down","title":"<code>scroll_down(*, animate=True, speed=None, duration=None, easing=None, force=False)</code>","text":"<p>Scroll one line down.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>bool</code> <p>Animate scroll.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if <code>animate</code> is <code>True</code>; or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and <code>speed</code> is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code>"},{"location":"api/widget/#textual.widget.Widget.scroll_end","title":"<code>scroll_end(*, animate=True, speed=None, duration=None, easing=None, force=False)</code>","text":"<p>Scroll to the end of the container.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>bool</code> <p>Animate scroll.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if <code>animate</code> is <code>True</code>; or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and <code>speed</code> is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code>"},{"location":"api/widget/#textual.widget.Widget.scroll_home","title":"<code>scroll_home(*, animate=True, speed=None, duration=None, easing=None, force=False)</code>","text":"<p>Scroll to home position.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>bool</code> <p>Animate scroll.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if animate is <code>True</code>; or <code>None</code> to use duration.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and <code>speed</code> is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code>"},{"location":"api/widget/#textual.widget.Widget.scroll_left","title":"<code>scroll_left(*, animate=True, speed=None, duration=None, easing=None, force=False)</code>","text":"<p>Scroll one cell left.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>bool</code> <p>Animate scroll.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if <code>animate</code> is <code>True</code>; or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and <code>speed</code> is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code>"},{"location":"api/widget/#textual.widget.Widget.scroll_page_down","title":"<code>scroll_page_down(*, animate=True, speed=None, duration=None, easing=None, force=False)</code>","text":"<p>Scroll one page down.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>bool</code> <p>Animate scroll.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if animate is <code>True</code>; or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and <code>speed</code> is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code>"},{"location":"api/widget/#textual.widget.Widget.scroll_page_left","title":"<code>scroll_page_left(*, animate=True, speed=None, duration=None, easing=None, force=False)</code>","text":"<p>Scroll one page left.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>bool</code> <p>Animate scroll.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if animate is <code>True</code>; or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and <code>speed</code> is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code>"},{"location":"api/widget/#textual.widget.Widget.scroll_page_right","title":"<code>scroll_page_right(*, animate=True, speed=None, duration=None, easing=None, force=False)</code>","text":"<p>Scroll one page right.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>bool</code> <p>Animate scroll.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if animate is <code>True</code>; or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and <code>speed</code> is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code>"},{"location":"api/widget/#textual.widget.Widget.scroll_page_up","title":"<code>scroll_page_up(*, animate=True, speed=None, duration=None, easing=None, force=False)</code>","text":"<p>Scroll one page up.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>bool</code> <p>Animate scroll.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if animate is <code>True</code>; or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and <code>speed</code> is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code>"},{"location":"api/widget/#textual.widget.Widget.scroll_relative","title":"<code>scroll_relative(x=None, y=None, *, animate=True, speed=None, duration=None, easing=None, force=False)</code>","text":"<p>Scroll relative to current position.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float | None</code> <p>X distance (columns) to scroll, or <code>None</code> for no change.</p> <code>None</code> <code>y</code> <code>float | None</code> <p>Y distance (rows) to scroll, or <code>None</code> for no change.</p> <code>None</code> <code>animate</code> <code>bool</code> <p>Animate to new scroll position.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if <code>animate</code> is <code>True</code>. Or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if animate is <code>True</code> and speed is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code>"},{"location":"api/widget/#textual.widget.Widget.scroll_right","title":"<code>scroll_right(*, animate=True, speed=None, duration=None, easing=None, force=False)</code>","text":"<p>Scroll one cell right.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>bool</code> <p>Animate scroll.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if animate is <code>True</code>; or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and <code>speed</code> is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code>"},{"location":"api/widget/#textual.widget.Widget.scroll_to","title":"<code>scroll_to(x=None, y=None, *, animate=True, speed=None, duration=None, easing=None, force=False)</code>","text":"<p>Scroll to a given (absolute) coordinate, optionally animating.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float | None</code> <p>X coordinate (column) to scroll to, or <code>None</code> for no change.</p> <code>None</code> <code>y</code> <code>float | None</code> <p>Y coordinate (row) to scroll to, or <code>None</code> for no change.</p> <code>None</code> <code>animate</code> <code>bool</code> <p>Animate to new scroll position.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if <code>animate</code> is <code>True</code>; or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and <code>speed</code> is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code> Note <p>The call to scroll is made after the next refresh.</p>"},{"location":"api/widget/#textual.widget.Widget.scroll_to_region","title":"<code>scroll_to_region(region, *, spacing=None, animate=True, speed=None, duration=None, easing=None, top=False, force=False)</code>","text":"<p>Scrolls a given region in to view, if required.</p> <p>This method will scroll the least distance required to move <code>region</code> fully within the scrollable area.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>Region</code> <p>A region that should be visible.</p> required <code>spacing</code> <code>Spacing | None</code> <p>Optional spacing around the region.</p> <code>None</code> <code>animate</code> <code>bool</code> <p><code>True</code> to animate, or <code>False</code> to jump.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if <code>animate</code> is <code>True</code>; or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and <code>speed</code> is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>top</code> <code>bool</code> <p>Scroll <code>region</code> to top of container.</p> <code>False</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code> <p>Returns:</p> Type Description <code>Offset</code> <p>The distance that was scrolled.</p>"},{"location":"api/widget/#textual.widget.Widget.scroll_to_widget","title":"<code>scroll_to_widget(widget, *, animate=True, speed=None, duration=None, easing=None, top=False, force=False)</code>","text":"<p>Scroll scrolling to bring a widget in to view.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>A descendant widget.</p> required <code>animate</code> <code>bool</code> <p><code>True</code> to animate, or <code>False</code> to jump.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if <code>animate</code> is <code>True</code>; or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and <code>speed</code> is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>top</code> <code>bool</code> <p>Scroll widget to top of container.</p> <code>False</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if any scrolling has occurred in any descendant, otherwise <code>False</code>.</p>"},{"location":"api/widget/#textual.widget.Widget.scroll_up","title":"<code>scroll_up(*, animate=True, speed=None, duration=None, easing=None, force=False)</code>","text":"<p>Scroll one line up.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>bool</code> <p>Animate scroll.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if <code>animate</code> is <code>True</code>; or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and speed is <code>None</code>.</p> <code>None</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code>"},{"location":"api/widget/#textual.widget.Widget.scroll_visible","title":"<code>scroll_visible(animate=True, *, speed=None, duration=None, top=False, easing=None, force=False)</code>","text":"<p>Scroll the container to make this widget visible.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>bool</code> <p>Animate scroll.</p> <code>True</code> <code>speed</code> <code>float | None</code> <p>Speed of scroll if animate is <code>True</code>; or <code>None</code> to use <code>duration</code>.</p> <code>None</code> <code>duration</code> <code>float | None</code> <p>Duration of animation, if <code>animate</code> is <code>True</code> and <code>speed</code> is <code>None</code>.</p> <code>None</code> <code>top</code> <code>bool</code> <p>Scroll to top of container.</p> <code>False</code> <code>easing</code> <code>EasingFunction | str | None</code> <p>An easing method for the scrolling animation.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Force scrolling even when prohibited by overflow styling.</p> <code>False</code>"},{"location":"api/widget/#textual.widget.Widget.watch_disabled","title":"<code>watch_disabled()</code>","text":"<p>Update the styles of the widget and its children when disabled is toggled.</p>"},{"location":"api/widget/#textual.widget.Widget.watch_has_focus","title":"<code>watch_has_focus(value)</code>","text":"<p>Update from CSS if has focus state changes.</p>"},{"location":"api/widget/#textual.widget.Widget.watch_mouse_over","title":"<code>watch_mouse_over(value)</code>","text":"<p>Update from CSS if mouse over state changes.</p>"},{"location":"api/widget/#textual.widget.WidgetError","title":"<code>WidgetError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Base widget error.</p>"},{"location":"blog/","title":"Textual Blog","text":""},{"location":"blog/2022/12/08/be-the-keymaster/","title":"Be the Keymaster!","text":""},{"location":"blog/2022/12/08/be-the-keymaster/#that-didnt-go-to-plan","title":"That didn't go to plan","text":"<p>So... yeah... the blog. When I wrote my previous (and first) post I had wanted to try and do a post towards the end of each week, highlighting what I'd done on the \"dogfooding\" front. Life kinda had other plans. Not in a terrible way, but it turns out that getting both flu and Covid jabs (AKA \"jags\" as they tend to say in my adopted home) on the same day doesn't really agree with me too well.</p> <p>I have been working, but there's been some odd moments in the past week and a bit and, last week, once I got to the end, I was glad for it to end. So no blog post happened.</p> <p>Anyway...</p>"},{"location":"blog/2022/12/08/be-the-keymaster/#what-have-i-been-up-to","title":"What have I been up to?","text":"<p>While mostly sat feeling sorry for myself on my sofa, I have been coding. Rather than list all the different things here in detail, I'll quickly mention them with links to where to find them and play with them if you want:</p>"},{"location":"blog/2022/12/08/be-the-keymaster/#fivepyfive","title":"FivePyFive","text":"<p>While my Textual 5x5 puzzle is one of the examples in the Textual repo, I wanted to make it more widely available so people can download it with <code>pip</code> or <code>pipx</code>. See over on PyPi and see if you can solve it. ;-)</p>"},{"location":"blog/2022/12/08/be-the-keymaster/#textual-qrcode","title":"textual-qrcode","text":"<p>I wanted to put together a very small example of how someone may put together a third party widget library, and in doing so selected what I thought was going to be a mostly-useless example: a wrapper around a text-based QR code generator website. Weirdly I've had a couple of people express a need for QR codes in the terminal since publishing that!</p> <p></p>"},{"location":"blog/2022/12/08/be-the-keymaster/#pispy","title":"PISpy","text":"<p>PISpy is a very simple terminal-based client for the PyPi API. Mostly it provides a hypertext interface to Python package details, letting you look up a package and then follow its dependency links. It's very simple at the moment, but I think more fun things can be done with this.</p>"},{"location":"blog/2022/12/08/be-the-keymaster/#oidia","title":"OIDIA","text":"<p>I'm a big fan of the use of streak-tracking in one form or another. Personally I use a streak-tracking app for keeping tabs of all sorts of good (and bad) habits, and as a heavy user of all things Apple I make a lot of use of the Fitness rings, etc. So I got to thinking it might be fun to do a really simple, no shaming, no counting, just recording, steak app for the Terminal. OIDIA is the result.</p> <p>As of the time of writing I only finished the first version of this yesterday evening, so there are plenty of rough edges; but having got it to a point where it performed the basic tasks I wanted from it, that seemed like a good time to publish.</p> <p>Expect to see this getting more updates and polish.</p>"},{"location":"blog/2022/12/08/be-the-keymaster/#wait-what-about-this-keymaster-thing","title":"Wait, what about this Keymaster thing?","text":"<p>Ahh, yes, about that... So one of the handy things I'm finding about Textual is its key binding system. The more I build Textual apps, the more I appreciate the bindings, how they can be associated with specific widgets, the use of actions (which can be used from other places too), etc.</p> <p>But... (there's always a \"but\" right -- I mean, there'd be no blog post to be had here otherwise).</p> <p>The terminal doesn't have access to all the key combinations you may want to use, and also, because some keys can't necessarily be \"typed\", at least not easily (think about it: there's no F1 character, you have to type <code>F1</code>), many keys and key combinations need to be bound with specific names.</p> <p>So there's two problems here: how do I discover what keys even turn up in my application, and when they do, what should I call them when I pass them to <code>Binding</code>?</p> <p>That felt like a \"well Dave just build an app for it!\" problem. So I did:</p> <p>If you're building apps with Textual and you want to discover what keys turn up from your terminal and are available to your application, you can:</p> <pre><code>$ pipx install textual-keys\n</code></pre> <p>and then just run <code>textual-keys</code> and start mashing the keyboard to find out.</p> <p>There's a good chance that this app, or at least a version of it, will make it into Textual itself (very likely as one of the devtools). But for now it's just an easy install away.</p> <p>I think there's a call to be made here too: have you built anything to help speed up how you work with Textual, or just make the development experience \"just so\"? If so, do let us know, and come yell about it on the <code>#show-and-tell</code> channel in our Discord server.</p>"},{"location":"blog/2022/12/30/a-better-asyncio-sleep-for-windows-to-fix-animation/","title":"A better asyncio sleep for Windows to fix animation","text":"<p>I spent some time optimizing Textual on Windows recently, and discovered something which may be of interest to anyone working with async code on that platform.</p> <p>Animation, scrolling, and fading had always been unsatisfactory on Windows. Textual was usable, but the lag when scrolling made apps feel far less snappy that other platforms. On macOS and Linux, scrolling is fast enough that it feels close to a native app, not something running in a terminal. Yet the Windows experience never improved, even as Textual got faster with each release.</p> <p>I had chalked this up to Windows Terminal being slow to render updates. After all, the classic Windows terminal was (and still is) glacially slow. Perhaps Microsoft just weren't focusing on performance.</p> <p>In retrospect, that was highly improbable. Like all modern terminals, Windows Terminal uses the GPU to render updates. Even without focussing on performance, it should be fast.</p> <p>I figured I'd give it one last attempt to speed up Textual on Windows. If I failed, Windows would forever be a third-class platform for Textual apps.</p> <p>It turned out that it was nothing to do with performance, per se. The issue was with a single asyncio function: <code>asyncio.sleep</code>.</p> <p>Textual has a <code>Timer</code> class which creates events at regular intervals. It powers the JS-like <code>set_interval</code> and <code>set_timer</code> functions. It is also used internally to do animation (such as smooth scrolling). This Timer class calls <code>asyncio.sleep</code> to wait the time between one event and the next.</p> <p>On macOS and Linux, calling <code>asynco.sleep</code> is fairly accurate. If you call <code>sleep(3.14)</code>, it will return within 1% of 3.14 seconds. This is not the case for Windows, which for historical reasons uses a timer with a granularity of 15 milliseconds. The upshot is that sleep times will be rounded up to the nearest multiple of 15 milliseconds.</p> <p>This limit appears to hold true for all async primitives on Windows. If you wait for something with a timeout, it will return on a multiple of 15 milliseconds. Fortunately there is work in the CPython pipeline to make this more accurate. Thanks to Steve Dower for pointing this out.</p> <p>This lack of accuracy in the timer meant that timer events were created at a far slower rate than intended. Animation was slower because Textual was waiting too long between updates.</p> <p>Once I had figured that out, I needed an alternative to <code>asyncio.sleep</code> for Textual's Timer class. And I found one. The following version of <code>sleep</code> is accurate to well within 1%:</p> <pre><code>from time import sleep as time_sleep\nfrom asyncio import get_running_loop\nasync def sleep(sleep_for: float) -&gt; None:\n\"\"\"An asyncio sleep.\n    On Windows this achieves a better granularity than asyncio.sleep\n    Args:\n        sleep_for (float): Seconds to sleep for.\n    \"\"\"    \nawait get_running_loop().run_in_executor(None, time_sleep, sleep_for)\n</code></pre> <p>That is a drop-in replacement for sleep on Windows. With it, Textual runs a lot smoother. Easily on par with macOS and Linux.</p> <p>It's not quite perfect. There is a little tearing during full \"screen\" updates, but performance is decent all round. I suspect when this bug is fixed (big thanks to Paul Moore for looking in to that), and Microsoft implements this protocol then Textual on Windows will be A+.</p> <p>This Windows improvement will be in v0.9.0 of Textual, which will be released in a few days.</p>"},{"location":"blog/2023/02/11/the-heisenbug-lurking-in-your-async-code/","title":"The Heisenbug lurking in your async code","text":"<p>I'm taking a brief break from blogging about Textual to bring you this brief PSA for Python developers who work with async code. I wanted to expand a little on this tweet.</p> <p>If you have ever used <code>asyncio.create_task</code> you may have created a bug for yourself that is challenging (read almost impossible) to reproduce. If it occurs, your code will likely fail in unpredictable ways.</p> <p>The root cause of this Heisenbug is that if you don't hold a reference to the task object returned by <code>create_task</code> then the task may disappear without warning when Python runs garbage collection. In other words, the code in your task will stop running with no obvious indication why.</p> <p>This behavior is well documented, as you can see from this excerpt (emphasis mine):</p> <p></p> <p>But who reads all the docs? And who has perfect recall if they do? A search on GitHub indicates that there are a lot of projects where this bug is waiting for just the right moment to ruin somebody's day.</p> <p>I suspect the reason this mistake is so common is that tasks are a lot like threads (conceptually at least). With threads you can just launch them and forget. Unless you mark them as \"daemon\" threads they will exist for the lifetime of your app. Not so with Tasks.</p> <p>The solution recommended in the docs is to keep a reference to the task for as long as you need it to live. On modern Python you could use TaskGroups which will keep references to your tasks. As long as all the tasks you spin up are in TaskGroups, you should be fine.</p>"},{"location":"blog/2023/03/08/overhead-of-python-asyncio-tasks/","title":"Overhead of Python Asyncio tasks","text":"<p>Every widget in Textual, be it a button, tree view, or a text input, runs an asyncio task. There is even a task for scrollbar corners (the little space formed when horizontal and vertical scrollbars meet).</p> <p>Info</p> <p>It may be IO that gives AsyncIO its name, but Textual doesn't do any IO of its own. Those tasks are used to power message queues, so that widgets (UI components) can do whatever they do at their own pace.</p> <p>Its fair to say that Textual apps launch a lot of tasks. Which is why when I was trying to optimize startup (for apps with 1000s of widgets) I suspected it was task related.</p> <p>I needed to know how much of an overhead it was to launch tasks. Tasks are lighter weight than threads, but how much lighter? The only way to know for certain was to profile.</p> <p>The following code launches a load of do nothing tasks, then waits for them to shut down. This would give me an idea of how performant <code>create_task</code> is, and also a baseline for optimizations. I would know the absolute limit of any optimizations I make.</p> <pre><code>from asyncio import create_task, wait, run\nfrom time import process_time as time\nasync def time_tasks(count=100) -&gt; float:\n\"\"\"Time creating and destroying tasks.\"\"\"\nasync def nop_task() -&gt; None:\n\"\"\"Do nothing task.\"\"\"\npass\nstart = time()\ntasks = [create_task(nop_task()) for _ in range(count)]\nawait wait(tasks)\nelapsed = time() - start\nreturn elapsed\nfor count in range(100_000, 1000_000 + 1, 100_000):\ncreate_time = run(time_tasks(count))\ncreate_per_second = 1 / (create_time / count)\nprint(f\"{count:,} tasks \\t {create_per_second:0,.0f} tasks per/s\")\n</code></pre> <p>And here is the output:</p> <pre><code>100,000 tasks    280,003 tasks per/s\n200,000 tasks    255,275 tasks per/s\n300,000 tasks    248,713 tasks per/s\n400,000 tasks    248,383 tasks per/s\n500,000 tasks    241,624 tasks per/s\n600,000 tasks    260,660 tasks per/s\n700,000 tasks    244,510 tasks per/s\n800,000 tasks    247,455 tasks per/s\n900,000 tasks    242,744 tasks per/s\n1,000,000 tasks          259,715 tasks per/s\n</code></pre> <p>Info</p> <p>Running on an M1 MacBook Pro.</p> <p>This tells me I can create, run, and shutdown 260K tasks per second.</p> <p>That's fast.</p> <p>Clearly <code>create_task</code> is as close as you get to free in the Python world, and I would need to look elsewhere for optimizations. Turns out Textual spends far more time processing CSS rules than creating tasks (obvious in retrospect). I've noticed some big wins there, so the next version of Textual will be faster to start apps with a metric tonne of widgets.</p> <p>But I still need to know what to do with those scrollbar corners. A task for two characters. I don't even...</p>"},{"location":"blog/2022/12/20/a-year-of-building-for-the-terminal/","title":"A year of building for the terminal","text":"<p>I joined Textualize back in January 2022, and since then have been hard at work with the team on both Rich and Textual. Over the course of the year, I\u2019ve been able to work on a lot of really cool things. In this post, I\u2019ll review a subset of the more interesting and visual stuff I\u2019ve built. If you\u2019re into terminals and command line tooling, you\u2019ll hopefully see at least one thing of interest!</p>"},{"location":"blog/2022/12/20/a-year-of-building-for-the-terminal/#a-file-manager-powered-by-textual","title":"A file manager powered by Textual","text":"<p>I\u2019ve been slowly developing a file manager as a \u201cdogfooding\u201d project for Textual. It takes inspiration from tools such as Ranger and Midnight Commander.</p> <p></p> <p>As of December 2022, it lets you browse your file system, filtering, multi-selection, creating and deleting files/directories, opening files in your <code>$EDITOR</code> and more.</p> <p>I\u2019m happy with how far this project has come \u2014 I think it\u2019s a good example of the type of powerful application that can be built with Textual with relatively little code. I\u2019ve been able to focus on features, instead of worrying about terminal emulator implementation details.</p> <p></p> <p>The project is available on GitHub.</p>"},{"location":"blog/2022/12/20/a-year-of-building-for-the-terminal/#better-diffs-in-the-terminal","title":"Better diffs in the terminal","text":"<p>Diffs in the terminal are often difficult to read at a glance. I wanted to see how close I could get to achieving a diff display of a quality similar to that found in the GitHub UI.</p> <p>To attempt this, I built a tool called Dunk. It\u2019s a command line program which you can pipe your <code>git diff</code> output into, and it\u2019ll convert it into something which I find much more readable.</p> <p></p> <p>Although I\u2019m not particularly proud of the code - there are a lot of \u201chacks\u201d going on, but I\u2019m proud of the result. If anything, it shows what can be achieved for tools like this.</p> <p>For many diffs, the difference between running <code>git diff</code> and <code>git diff | dunk | less -R</code> is night and day.</p> <p></p> <p>It\u2019d be interesting to revisit this at some point. It has its issues, but I\u2019d love to see how it can be used alongside Textual to build a terminal-based diff/merge tool. Perhaps it could be combined with\u2026</p>"},{"location":"blog/2022/12/20/a-year-of-building-for-the-terminal/#code-editor-floating-gutter","title":"Code editor floating gutter","text":"<p>This is a common feature in text editors and IDEs: when you scroll to the right, you should still be able to see what line you\u2019re on. Out of interest, I tried to recreate the effect in the terminal using Textual.</p> <p></p> <p>Textual CSS offers a <code>dock</code> property which allows you to attach a widget to an edge of its parent. By creating a widget that contains a vertical list of numbers and setting the <code>dock</code> property to <code>left</code>, we can create a floating gutter effect. Then, we just need to keep the <code>scroll_y</code> in sync between the gutter and the content to ensure the line numbers stay aligned.</p>"},{"location":"blog/2022/12/20/a-year-of-building-for-the-terminal/#dropdown-autocompletion-menu","title":"Dropdown autocompletion menu","text":"<p>While working on Shira (a proof-of-concept, terminal-based Python object explorer), I wrote some autocompleting dropdown functionality.</p> <p></p> <p>Textual forgoes the z-index concept from browser CSS and instead uses a \u201cnamed layer\u201d system. Using the <code>layers</code> property you can defined an ordered list of named layers, and using the <code>layer</code> property, you can assign a descendant widget to one of those layers.</p> <p>By creating a new layer above all others and assigning a widget to that layer, we can ensure that widget is painted above everything else.</p> <p>In order to determine where to place the dropdown, we can track the current value in the dropdown by <code>watch</code>ing the reactive input \u201cvalue\u201d inside the Input widget. This method will be called every time the <code>value</code> of the Input changes, and we can use this hook to amend the position of our dropdown position to accommodate for the length of the input value.</p> <p></p> <p>I\u2019ve now extracted this into a separate library called textual-autocomplete.</p>"},{"location":"blog/2022/12/20/a-year-of-building-for-the-terminal/#tabs-with-animated-underline","title":"Tabs with animated underline","text":"<p>The aim here was to create a tab widget with underlines that animates smoothly as another tab is selected.</p> <p>The difficulty with implementing something like this is that we don\u2019t have pixel-perfect resolution when animating - a terminal window is just a big grid of fixed-width character cells.</p> <p> However, when animating things in a terminal, we can often achieve better granularity using Unicode related tricks. In this case, instead of shifting the bar along one whole cell, we adjust the endings of the bar to be a character which takes up half of a cell.</p> <p>The exact characters that form the bar are \"\u257a\", \"\u2501\" and \"\u2578\". When the bar sits perfectly within cell boundaries, every character is \u201c\u2501\u201d. As it travels over a cell boundary, the left and right ends of the bar are updated to \"\u257a\" and \"\u2578\" respectively.</p>"},{"location":"blog/2022/12/20/a-year-of-building-for-the-terminal/#snapshot-testing-for-terminal-apps","title":"Snapshot testing for terminal apps","text":"<p>One of the great features we added to Rich this year was the ability to export console contents to an SVG. This feature was later exposed to Textual, allowing users to capture screenshots of their running Textual apps. Ultimately, I ended up creating a tool for snapshot testing in the Textual codebase.</p> <p>Snapshot testing is used to ensure that Textual output doesn\u2019t unexpectedly change. On disk, we store what we expect the output to look like. Then, when we run our unit tests, we get immediately alerted if the output has changed.</p> <p>This essentially automates the process of manually spinning up several apps and inspecting them for unexpected visual changes. It\u2019s great for catching subtle regressions!</p> <p>In Textual, each CSS property has its own canonical example and an associated snapshot test. If we accidentally break a property in a way that affects the visual output, the chances of it sneaking into a release are greatly reduced, because the corresponding snapshot test will fail.</p> <p>As part of this work, I built a web interface for comparing snapshots with test output. There\u2019s even a little toggle which highlights the differences, since they\u2019re sometimes rather subtle.</p> <p>Since the terminal output shown in the video above is just an SVG image, I was able to add the \"Show difference\" functionality by overlaying the two images and applying a single CSS property: <code>mix-blend-mode: difference;</code>.</p> <p>The snapshot testing functionality itself is implemented as a pytest plugin, and it builds on top of a snapshot testing framework called syrupy.</p> <p></p> <p>It's quite likely that this will eventually be exposed to end-users of Textual.</p>"},{"location":"blog/2022/12/20/a-year-of-building-for-the-terminal/#demonstrating-animation","title":"Demonstrating animation","text":"<p>I built an example app to demonstrate how to animate in Textual and the available easing functions.</p> <p>The smoothness here is achieved using tricks similar to those used in the tabs I discussed earlier. In fact, the bar that animates in the video above is the same Rich renderable that is used by Textual's scrollbars.</p> <p>You can play with this app by running <code>textual easing</code>. Please use animation sparingly.</p>"},{"location":"blog/2022/12/20/a-year-of-building-for-the-terminal/#developer-console","title":"Developer console","text":"<p>When developing terminal based applications, performing simple debugging using <code>print</code> can be difficult, since the terminal is in application mode.</p> <p>A project I worked on earlier in the year to improve the situation was the Textual developer console, which you can launch with <code>textual console</code>.</p> On the right, Dave's 5x5 Textual app. On the left, the Textual console. <p>Then, by running a Textual application with the <code>--dev</code> flag, all standard output will be redirected to it. This means you can use the builtin <code>print</code> function and still immediately see the output. Textual itself also writes information to this console, giving insight into the messages that are flowing through an application.</p>"},{"location":"blog/2022/12/20/a-year-of-building-for-the-terminal/#pixel-art","title":"Pixel art","text":"<p>Cells in the terminal are roughly two times taller than they are wide. This means, that two horizontally adjacent cells form an approximate square.</p> <p>Using this fact, I wrote a simple library based on Rich and PIL which can convert an image file into terminal output. You can find the library, <code>rich-pixels</code>, on GitHub.</p> <p>It\u2019s particularly good for displaying simple pixel art images. The SVG image below is also a good example of the SVG export functionality I touched on earlier.</p> Rich <p>Since the library generates an object which is renderable using Rich, these can easily be embedded inside Textual applications.</p> <p>Here's an example of that in a scrapped \"Pok\u00e9dex\" app I threw together:</p> <p>This is a rather naive approach to the problem... but I did it for fun!</p> <p>Other methods for displaying images in the terminal include:</p> <ul> <li>A more advanced library like chafa, which uses a range of Unicode characters to achieve a more accurate representation of the image.</li> <li>One of the available terminal image protocols, such as Sixel, Kitty\u2019s Terminal Graphics Protocol, and iTerm Inline Images Protocol.</li> </ul> <p>That was a whirlwind tour of just some of the projects I tackled in 2022. If you found it interesting, be sure to follow me on Twitter. I don't post often, but when I do, it's usually about things similar to those I've discussed here.</p>"},{"location":"blog/2022/11/06/new-blog/","title":"New Blog","text":"<p>Welcome to the first post on the Textual blog.</p> <p>I plan on using this as a place to make announcements regarding new releases of Textual, and any other relevant news.</p> <p>The first piece of news is that we've reorganized this site a little. The Events, Styles, and Widgets references are now under \"Reference\", and what used to be under \"Reference\" is now \"API\" which contains API-level documentation. I hope that's a little clearer than it used to be!</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/","title":"So you're looking for a wee bit of Textual help...","text":""},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#introduction","title":"Introduction","text":"<p>Quote</p> <p>Patience, Highlander. You have done well. But it'll take time. You are generations being born and dying. You are at one with all living things. Each man's thoughts and dreams are yours to know. You have power beyond imagination. Use it well, my friend. Don't lose your head.</p> <p>Juan S\u00e1nchez Villalobos Ram\u00edrez, Chief metallurgist to King Charles V of Spain</p> <p>As of the time of writing, I'm a couple or so days off having been with Textualize for 3 months. It's been fun, and educational, and every bit as engaging as I'd hoped, and more. One thing I hadn't quite prepared for though, but which I really love, is how so many other people are learning Textual along with me.</p> <p>Even in those three months the library has changed and expanded quite a lot, and it continues to do so. Meanwhile, more people are turning up and using the framework; you can see this online in social media, blogs and of course in the ever-growing list of projects on GitHub which depend on Textual.</p> <p>This inevitably means there's a lot of people getting to grips with a new tool, and one that is still a bit of a moving target. This in turn means lots of people are coming to us to get help.</p> <p>As I've watched this happen I've noticed a few patterns emerging. Some of these good or neutral, some... let's just say not really beneficial to those seeking the help, or to those trying to provide the help. So I wanted to write a little bit about the different ways you can get help with Textual and your Textual-based projects, and to also try and encourage people to take the most helpful and positive approach to getting that help.</p> <p>Now, before I go on, I want to make something very clear: I'm writing this as an individual. This is my own personal view, and my own advice from me to anyone who wishes to take it. It's not Textual (the project) or Textualize (the company) policy, rules or guidelines. This is just some ageing hacker's take on how best to go about asking for help, informed by years of asking for and also providing help in email, on Usenet, on forums, etc.</p> <p>Or, put another way: if what you read in here seems sensible to you, I figure we'll likely have already hit it off over on GitHub or in the Discord server. ;-)</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#where-to-go-for-help","title":"Where to go for help","text":"<p>At this point this is almost a bit of an FAQ itself, so I thought I'd address it here: where's the best place to ask for help about Textual, and what's the difference between GitHub Issues, Discussions and our Discord server?</p> <p>I'd suggest thinking of them like this:</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#discord","title":"Discord","text":"<p>You have a question, or need help with something, and perhaps you could do with a reply as soon as possible. But, and this is the really important part, it doesn't matter if you don't get a response. If you're in this situation then the Discord server is possibly a good place to start. If you're lucky someone will be hanging about who can help out.</p> <p>I can't speak for anyone else, but keep this in mind: when I look in on Discord I tend not to go scrolling back much to see if anything has been missed. If something catches my eye, I'll try and reply, but if it doesn't... well, it's mostly an instant chat thing so I don't dive too deeply back in time.</p> <p>Going from Discord to a GitHub issue</p> <p>As a slight aside here: sometimes people will pop up in Discord, ask a question about something that turns out looking like a bug, and that's the last we hear of it. Please, please, please, if this happens, the most helpful thing you can do is go raise an issue for us. It'll help us to keep track of problems, it'll help get your problem fixed, it'll mean everyone benefits.</p> <p>My own advice would be to treat Discord as an ephemeral resource. It happens in the moment but fades away pretty quickly. It's like knocking on a friend's door to see if they're in. If they're not in, you might leave them a note, which is sort of like going to...</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#github","title":"GitHub","text":"<p>On the other hand, if you have a question or need some help or something where you want to stand a good chance of the Textual developers (amongst others) seeing it and responding, I'd recommend that GitHub is the place to go. Dropping something into the discussions there, or leaving an issue, ensures it'll get seen. It won't get lost.</p> <p>As for which you should use -- a discussion or an issue -- I'd suggest this: if you need help with something, or you want to check your understanding of something, or you just want to be sure something is a problem before taking it further, a discussion might be the best thing. On the other hand, if you've got a clear bug or feature request on your hands, an issue makes a lot of sense.</p> <p>Don't worry if you're not sure which camp your question or whatever falls into though; go with what you think is right. There's no harm done either way (I may move an issue to a discussion first before replying, if it's really just a request for help -- but that's mostly so everyone can benefit from finding it in the right place later on down the line).</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#the-dos-and-donts-of-getting-help","title":"The dos and don'ts of getting help","text":"<p>Now on to the fun part. This is where I get a bit preachy. Ish. Kinda. A little bit. Again, please remember, this isn't a set of rules, this isn't a set of official guidelines, this is just a bunch of \"if you want my advice, and I know you didn't ask but you've read this far so you actually sort of did don't say I didn't warn you!\" waffle.</p> <p>This isn't going to be an exhaustive collection, far from it. But I feel these are some important highlights.</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#do","title":"Do...","text":"<p>When looking for help, in any of the locations mentioned above, I'd totally encourage:</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#be-clear-and-detailed","title":"Be clear and detailed","text":"<p>Too much detail is almost always way better than not enough. \"My program didn't run\", often even with some of the code supplied, is so much harder to help than \"I ran this code I'm posting here, and I expected this particular outcome, and I expected it because I'd read this particular thing in the docs and had comprehended it to mean this, but instead the outcome was this exception here, and I'm a bit stuck -- can someone offer some pointers?\"</p> <p>The former approach means there often ends up having to be a back and forth which can last a long time, and which can sometimes be frustrating for the person asking. Manage frustration: be clear, tell us everything you can.</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#say-what-resources-youve-used-already","title":"Say what resources you've used already","text":"<p>If you've read the potions of the documentation that relate to what you're trying to do, it's going to be really helpful if you say so. If you don't, it might be assumed you haven't and you may end up being pointed at them.</p> <p>So, please, if you've checked the documentation, looked in the FAQ, done a search of past issues or discussions or perhaps even done a search on the Discord server... please say so.</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#be-polite","title":"Be polite","text":"<p>This one can go a long way when looking for help. Look, I get it, programming is bloody frustrating at times. We've all rage-quit some code at some point, I'm sure. It's likely going to be your moment of greatest frustration when you go looking for help. But if you turn up looking for help acting all grumpy and stuff it's not going to come over well. Folk are less likely to be motivated to lend a hand to someone who seems rather annoyed.</p> <p>If you throw in a please and thank-you here and there that makes it all the better.</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#fully-consider-the-replies","title":"Fully consider the replies","text":"<p>You could find yourself getting a reply that you're sure won't help at all. That's fair. But be sure to fully consider it first. Perhaps you missed the obvious along the way and this is 100% the course correction you'd unknowingly come looking for in the first place. Sure, the person replying might have totally misunderstood what was being asked, or might be giving a wrong answer (it me! I've totally done that and will again!), but even then a reply along the lines of \"I'm not sure that's what I'm looking for, because...\" gets everyone to the solution faster than \"lol nah\".</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#entertain-what-might-seem-like-odd-questions","title":"Entertain what might seem like odd questions","text":"<p>Aye, I get it, being asked questions when you're looking for an answer can be a bit frustrating. But if you find yourself on the receiving end of a small series of questions about your question, keep this in mind: Textual is still rather new and still developing and it's possible that what you're trying to do isn't the correct way to do that thing. To the person looking to help you it may seem to them you have an XY problem.</p> <p>Entertaining those questions might just get you to the real solution to your problem.</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#allow-for-language-differences","title":"Allow for language differences","text":"<p>You don't need me to tell you that a project such as Textual has a global audience. With that rather obvious fact comes the other fact that we don't all share the same first language. So, please, as much as possible, try and allow for that. If someone is trying to help you out, and they make it clear they're struggling to follow you, keep this in mind.</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#acknowledge-the-answer","title":"Acknowledge the answer","text":"<p>I suppose this is a variation on \"be polite\" (really, a thanks can go a long way), but there's more to this than a friendly acknowledgement. If someone has gone to the trouble of offering some help, it's helpful to everyone who comes after you to acknowledge if it worked or not. That way a future help-seeker will know if the answer they're reading stands a chance of being the right one.</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#accept-that-textual-is-zero-point-software-right-now","title":"Accept that Textual is zero-point software (right now)","text":"<p>Of course the aim is to have every release of Textual be stable and useful, but things will break. So, please, do keep in mind things like:</p> <ul> <li>Textual likely doesn't have your feature of choice just yet.</li> <li>We might accidentally break something (perhaps pinning Textual and testing   each release is a good plan here?).</li> <li>We might deliberately break something because we've decided to take a   particular feature or way of doing things in a better direction.</li> </ul> <p>Of course it can be a bit frustrating a times, but overall the aim is to have the best framework possible in the long run.</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#dont","title":"Don't...","text":"<p>Okay, now for a bit of old-hacker finger-wagging. Here's a few things I'd personally discourage:</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#lack-patience","title":"Lack patience","text":"<p>Sure, it can be annoying. You're in your flow, you've got a neat idea for a thing you want to build, you're stuck on one particular thing and you really need help right now! Thing is, that's unlikely to happen. Badgering individuals, or a whole resource, to reply right now, or complaining that it's been <code>$TIME_PERIOD</code> since you asked and nobody has replied... that's just going to make people less likely to reply.</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#unnecessarily-tag-individuals","title":"Unnecessarily tag individuals","text":"<p>This one often goes hand in hand with the \"lack patience\" thing: Be it asking on Discord, or in GitHub issues, discussions or even PRs, unnecessarily tagging individuals is a bit rude. Speaking for myself and only myself: I love helping folk with Textual. If I could help everyone all the time the moment they have a problem, I would. But it doesn't work like that. There's any number of reasons I might not be responding to a particular request, including but not limited to (here I'm talking personally because I don't want to speak for anyone else, but I'm sure I'm not alone here):</p> <ul> <li>I have a job. Sure, my job is (in part) Textual, but there's more to it   than that particular issue. I might be doing other stuff.</li> <li>I have my own projects to work on too. I like coding for fun as well (or   writing preaching old dude blog posts like this I guess, but you get the   idea).</li> <li>I actually have other interests outside of work hours so I might actually   be out doing a 10k in the local glen, or battling headcrabs in VR, or   something.</li> <li>Housework. :-/</li> </ul> <p>You get the idea though. So while I'm off having a well-rounded life, it's not good to get unnecessarily intrusive alerts to something that either a) doesn't actually directly involve me or b) could wait.</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#seek-personal-support","title":"Seek personal support","text":"<p>Again, I'm going to speak totally for myself here, but I also feel the general case is polite for all: there's a lot of good support resources available already; sending DMs on Discord or Twitter or in the Fediverse, looking for direct personal support, isn't really the best way to get help. Using the public/collective resources is absolutely the best way to get that help. Why's it a bad idea to dive into DMs? Here's some reasons I think it's not a good idea:</p> <ul> <li>It's a variation on \"unnecessarily tagging individuals\".</li> <li>You're short-changing yourself when it comes to getting help. If you ask   somewhere more public you're asking a much bigger audience, who   collectively have more time, more knowledge and more experience than a   single individual.</li> <li>Following on from that, any answers can be (politely) fact-checked or   enhanced by that audience, resulting in a better chance of getting the   best help possible.</li> <li>The next seeker-of-help gets to miss out on your question and the answer.   If asked and answered in public, it's a record that can help someone else   in the future.</li> </ul>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#doubt-your-ability-or-skill-level","title":"Doubt your ability or skill level","text":"<p>I suppose this should really be phrased as a do rather than a don't, as here I want to encourage something positive. A few times I've helped people out who have been very apologetic about their questions being \"noob\" questions, or about how they're fairly new to Python, or programming in general. Really, please, don't feel the need to apologise and don't be ashamed of where you're at.</p> <p>If you've asked something that's obviously answered in the documentation, that's not a problem; you'll likely get pointed at the docs and it's what happens next that's the key bit. If the attitude is \"oh, cool, that's exactly what I needed to be reading, thanks!\" that's a really positive thing. The only time it's a problem is when there's a real reluctance to use the available resources. We've all seen that person somewhere at some point, right? ;-)</p> <p>Not knowing things is totally cool.</p>"},{"location":"blog/2023/01/09/so-youre-looking-for-a-wee-bit-of-textual-help/#conclusion","title":"Conclusion","text":"<p>So, that's my waffle over. As I said at the start: this is my own personal thoughts on how to get help with Textual, both as someone whose job it is to work on Textual and help people with Textual, and also as a FOSS advocate and supporter who can normally be found helping Textual users when he's not \"on the clock\" too.</p> <p>What I've written here isn't exhaustive. Neither is it novel. Plenty has been written on the general subject in the past, and I'm sure more will be written on the subject in the future. I do, however, feel that these are the most common things I notice. I'd say those dos and don'ts cover 90% of \"can I get some help?\" interactions; perhaps closer to 99%.</p> <p>Finally, and I think this is the most important thing to remember, the next time you are battling some issue while working with Textual: don't lose your head!</p>"},{"location":"blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/","title":"On dog food, the (original) Metaverse, and (not) being bored","text":""},{"location":"blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/#introduction","title":"Introduction","text":"<p>Quote</p> <p>Cutler, armed with a schedule, was urging the team to \"eat its own dog food\". Part macho stunt and part common sense, the \"dog food diet\" was the cornerstone of Cutler\u2019s philosophy.</p> <p>G. Pascal Zachary \u2014 Show-Stopper!</p> <p>I can't remember exactly when it was -- it was likely late in 1994 or some time in 1995 -- when I first came across the concept of, or rather the name for the concept of, \"eating your own dog food\". The idea and the name played a huge part in the book Show-Stopper! by G. Pascal Zachary. The idea wasn't new to me of course; I'd been writing code for over a decade by then and plenty of times I'd built things and then used those things to do things, but it was fascinating to a mostly-self-taught 20-something me to be reading this (excellent -- go read it if you care about the history of your craft) book and to see the idea written down and named.</p> <p>While Textualize isn't (thankfully -- really, I do recommend reading the book) anything like working on the team building Windows NT, the idea of taking a little time out from working on Textual, and instead work with Textual, makes a lot of sense. It's far too easy to get focused on adding things and improving things and tweaking things while losing sight of the fact that people will want to build with your product.</p> <p>So you can imagine how pleased I was when Will announced that he wanted all of us to spend a couple or so weeks building something with Textual. I had, of course, already written one small application with the library, and had plans for another (in part it's how I ended up working here), but I'd yet to really dive in and try and build something more involved.</p> <p>Giving it some thought: I wasn't entirely sure what I wanted to build though. I do want to use Textual to build a brand new terminal-based Norton Guide reader (not my first, not by a long way) but I felt that was possibly a bit too niche, and actually could take a bit too long anyway. Maybe not, it remains to be seen.</p> <p>Eventually I decided on this approach: try and do a quick prototype of some daft idea each day or each couple of days, do that for a week or so, and then finally try and settle down on something less trivial. This approach should work well in that it'll help introduce me to more of Textual, help try out a few different parts of the library, and also hopefully discover some real pain-points with working with it and highlight a list of issues we should address -- as seen from the perspective of a developer working with the library.</p> <p>So, here I am, at the end of week one. What I want to try and do is briefly (yes yes, I know, this introduction is the antithesis of brief) talk about what I built and perhaps try and highlight some lessons learnt, highlight some patterns I think are useful, and generally do an end-of-week version of a TIL. TWIL?</p> <p>Yeah. I guess this is a TWIL.</p>"},{"location":"blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/#gridinfo","title":"gridinfo","text":"<p>I started the week by digging out a quick hack I'd done a couple of weeks earlier, with a view to cleaning it up. It started out as a fun attempt to do something with Rich Pixels while also making a terminal-based take on <code>slstats.el</code>. I'm actually pleased with the result and how quickly it came together.</p> <p>The point of the application itself is to show some general information about the current state of the Second Life grid (hello to any fellow residents of the original Metaverse!), and to also provide a simple region lookup screen that, using Rich Pixels, will display the object map (albeit in pretty low resolution -- but that's the fun of this!).</p> <p>So the opening screen looks like this:</p> <p></p> <p>and a lookup of a region looks like this:</p> <p></p> <p>Here's a wee video of the whole thing in action:</p>"},{"location":"blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/#worth-a-highlight","title":"Worth a highlight","text":"<p>Here's a couple of things from the code that I think are worth a highlight, as things to consider when building Textual apps:</p>"},{"location":"blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/#dont-use-the-default-screen","title":"Don't use the default screen","text":"<p>Use of the default <code>Screen</code> that's provided by the <code>App</code> is handy enough, but I feel any non-trivial application should really put as much code as possible in screens that relate to key \"work\". Here's the entirety of my application code:</p> <pre><code>class GridInfo( App[ None ] ):\n\"\"\"TUI app for showing information about the Second Life grid.\"\"\"\nCSS_PATH = \"gridinfo.css\"\n\"\"\"The name of the CSS file for the app.\"\"\"\nTITLE = \"Grid Information\"\n\"\"\"str: The title of the application.\"\"\"\nSCREENS = {\n\"main\": Main,\n\"region\": RegionInfo\n}\n\"\"\"The collection of application screens.\"\"\"\ndef on_mount( self ) -&gt; None:\n\"\"\"Set up the application on startup.\"\"\"\nself.push_screen( \"main\" )\n</code></pre> <p>You'll notice there's no work done in the app, other than to declare the screens, and to set the <code>main</code> screen running when the app is mounted.</p>"},{"location":"blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/#dont-work-hard-on_mount","title":"Don't work hard <code>on_mount</code>","text":"<p>My initial version of the application had it loading up the data from the Second Life and GridSurvey APIs in <code>Main.on_mount</code>. This obviously wasn't a great idea as it made the startup appear slow. That's when I realised just how handy <code>call_after_refresh</code> is. This meant I could show some placeholder information and then fire off the requests (3 of them: one to get the main grid information, one to get the grid concurrency data, and one to get the grid size data), keeping the application looking active and updating the display when the replies came in.</p>"},{"location":"blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/#pain-points","title":"Pain points","text":"<p>While building this app I think there was only really the one pain-point, and I suspect it's mostly more on me than on Textual itself: getting a good layout and playing whack-a-mole with CSS. I suspect this is going to be down to getting more and more familiar with CSS and the terminal (which is different from laying things out for the web), while also practising with various layout schemes -- which is where the revamped <code>Placeholder</code> class is going to be really useful.</p>"},{"location":"blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/#unbored","title":"unbored","text":"<p>The next application was initially going to be a very quick hack, but actually turned into a less-trivial build than I'd initially envisaged; not in a negative way though. The more I played with it the more I explored and I feel that this ended up being my first really good exploration of some useful (personal -- your kilometerage may vary) patterns and approaches when working with Textual.</p> <p>The application itself is a terminal client for the Bored-API. I had initially intended to roll my own code for working with the API, but I noticed that someone had done a nice library for it and it seemed silly to not build on that. Not needing to faff with that, I could concentrate on the application itself.</p> <p>At first I was just going to let the user click away at a button that showed a random activity, but this quickly morphed into a \"why don't I make this into a sort of TODO list builder app, where you can add things to do when you are bored, and delete things you don't care for or have done\" approach.</p> <p>Here's a view of the main screen:</p> <p></p> <p>and here's a view of the filter pop-over:</p> <p></p>"},{"location":"blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/#worth-a-highlight_1","title":"Worth a highlight","text":""},{"location":"blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/#dont-put-all-your-bindings-in-one-place","title":"Don't put all your <code>BINDINGS</code> in one place","text":"<p>This came about from me overloading the use of the <code>escape</code> key. I wanted it to work more or less like this:</p> <ul> <li>If you're inside an activity, move focus up to the activity type selection   buttons.</li> <li>If the filter pop-over is visible, close that.</li> <li>Otherwise exit the application.</li> </ul> <p>It was easy enough to do, and I had an action in the <code>Main</code> screen that <code>escape</code> was bound to (again, in the <code>Main</code> screen) that did all this logic with some <code>if</code>/<code>elif</code> work but it didn't feel elegant. Moreover, it meant that the <code>Footer</code> always displayed the same description for the key.</p> <p>That's when I realised that it made way more sense to have a <code>Binding</code> for <code>escape</code> in every widget that was the actual context for escape's use. So I went from one top-level binding to...</p> <pre><code>...\nclass Activity( Widget ):\n\"\"\"A widget that holds and displays a suggested activity.\"\"\"\nBINDINGS = [\n...\nBinding( \"escape\", \"deselect\", \"Switch to Types\" )\n]\n...\nclass Filters( Vertical ):\n\"\"\"Filtering sidebar.\"\"\"\nBINDINGS = [\nBinding( \"escape\", \"close\", \"Close Filters\" )\n]\n...\nclass Main( Screen ):\n\"\"\"The main application screen.\"\"\"\nBINDINGS = [\nBinding( \"escape\", \"quit\", \"Close\" )\n]\n\"\"\"The bindings for the main screen.\"\"\"\n</code></pre> <p>This was so much cleaner and I got better <code>Footer</code> descriptions too. I'm going to be leaning hard on this approach from now on.</p>"},{"location":"blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/#messages-are-awesome","title":"Messages are awesome","text":"<p>Until I wrote this application I hadn't really had a need to define or use my own <code>Message</code>s. During work on this I realised how handy they really are. In the code I have an <code>Activity</code> widget which takes care of the job of moving itself amongst its siblings if the user asks to move an activity up or down. When this happens I also want the <code>Main</code> screen to save the activities to the filesystem as things have changed.</p> <p>Thing is: I don't want the screen to know what an <code>Activity</code> is capable of and I don't want an <code>Activity</code> to know what the screen is capable of; especially the latter as I really don't want a child of a screen to know what the screen can do (in this case \"save stuff\").</p> <p>This is where messages come in. Using a message I could just set things up so that the <code>Activity</code> could shout out \"HEY I JUST DID A THING THAT CHANGES ME\" and not care who is listening and not care what they do with that information.</p> <p>So, thanks to this bit of code in my <code>Activity</code> widget...</p> <pre><code>    class Moved( Message ):\n\"\"\"A message to indicate that an activity has moved.\"\"\"\ndef action_move_up( self ) -&gt; None:\n\"\"\"Move this activity up one place in the list.\"\"\"\nif self.parent is not None and not self.is_first:\nparent = cast( Widget, self.parent )\nparent.move_child(\nself, before=parent.children.index( self ) - 1\n)\nself.emit_no_wait( self.Moved( self ) )\nself.scroll_visible( top=True )\n</code></pre> <p>...the <code>Main</code> screen can do this:</p> <pre><code>    def on_activity_moved( self, _: Activity.Moved ) -&gt; None:\n\"\"\"React to an activity being moved.\"\"\"\nself.save_activity_list()\n</code></pre> <p>Warning</p> <p>The code above used <code>emit_no_wait</code>. Since this blog post was first published that method has been removed from Textual. You should use <code>post_message_no_wait</code> or <code>post_message</code> instead now.</p>"},{"location":"blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/#pain-points_1","title":"Pain points","text":"<p>On top of the issues of getting to know terminal-based-CSS that I mentioned earlier:</p> <ul> <li>Textual currently lacks any sort of selection list or radio-set widget.   This meant that I couldn't quite do the activity type picking how I would   have wanted. Of course I could have rolled my own widgets for this, but I   think I'd sooner wait until such things are in Textual   itself.</li> <li>Similar to that, I could have used some validating <code>Input</code> widgets. They   too are on the roadmap but I managed to cobble together fairly good   working versions for my purposes. In doing so though I did further   highlight that the reactive attribute   facility   needs a wee bit more attention as I ran into some   (already-known) bugs.   Thankfully in my case it was a very easy   workaround.</li> <li>Scrolling in general seems a wee bit off when it comes to widgets that are   more than one line tall. While there's nothing really obvious I can point   my finger at, I'm finding that scrolling containers sometimes get confused   about what should be in view. This becomes very obvious when forcing   things to scroll from code. I feel this deserves a dedicated test   application to explore this more.</li> </ul>"},{"location":"blog/2022/11/26/on-dog-food-the-original-metaverse-and-not-being-bored/#conclusion","title":"Conclusion","text":"<p>The first week of \"dogfooding\" has been fun and I'm more convinced than ever that it's an excellent exercise for Textualize to engage in. I didn't quite manage my plan of \"one silly trivial prototype per day\", which means I've ended up with two (well technically one and a half I guess given that <code>gridinfo</code> already existed as a prototype) applications rather than four. I'm okay with that. I got a lot of utility out of this.</p> <p>Now to look at the list of ideas I have going and think about what I'll kick next week off with...</p>"},{"location":"blog/2022/11/22/what-i-learned-from-my-first-non-trivial-pr/","title":"What I learned from my first non-trivial PR","text":"PlaceholderApp Placeholder\u00a0p2\u00a0here! This\u00a0is\u00a0a\u00a0custom\u00a0label\u00a0for\u00a0p1. #p4 #p3#p5Placeholde r Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0 26\u00a0x\u00a06amet,\u00a0consectetur\u00a027\u00a0x\u00a06 adipiscing\u00a0elit.\u00a0Etiam\u00a0 feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0 Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0amet,\u00a0 consectetur\u00a0adipiscing\u00a0elit.\u00a0Etiam\u00a040\u00a0x\u00a06 feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0accumsan.\u00a0 Suspendisse\u00a0bibendum\u00a0nec\u00a0libero\u00a0quis gravida.\u00a0Phasellus\u00a0id\u00a0eleifend\u00a0 ligula.\u00a0Nullam\u00a0imperdiet\u00a0sem\u00a0tellus, sed\u00a0vehicula\u00a0nisl\u00a0faucibus\u00a0sit\u00a0amet.Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0amet,\u00a0 Praesent\u00a0iaculis\u00a0tempor\u00a0ultricies.\u00a0\u2586\u2586consectetur\u00a0adipiscing\u00a0elit.\u00a0Etiam\u00a0\u2586\u2586 Sed\u00a0lacinia,\u00a0tellus\u00a0id\u00a0rutrum\u00a0feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0accumsan.\u00a0 lacinia,\u00a0sapien\u00a0sapien\u00a0congue\u00a0Suspendisse\u00a0bibendum\u00a0nec\u00a0libero\u00a0quis <p>It's 8:59 am and, by my Portuguese standards, it is freezing cold outside: 5 or 6 degrees Celsius. It is my second day at Textualize and I just got into the office. I undress my many layers of clothing to protect me from the Scottish cold and I sit down in my improvised corner of the Textualize office. As I sit down, I turn myself in my chair to face my boss and colleagues to ask \u201cSo, what should I do today?\u201d. I was not expecting Will's answer, but the challenge excited me:</p> <p>\u201cI thought I'll just throw you in the deep end and have you write some code.\u201d</p> <p>What happened next was that I spent two days working on PR #1229 to add a new widget to the Textual code base. At the time of writing, the pull request has not been merged yet. Well, to be honest with you, it hasn't even been reviewed by anyone... But that won't stop me from blogging about some of the things I learned while creating this PR.</p>"},{"location":"blog/2022/11/22/what-i-learned-from-my-first-non-trivial-pr/#the-placeholder-widget","title":"The placeholder widget","text":"<p>This PR adds a widget called <code>Placeholder</code> to Textual. As per the documentation, this widget \u201cis meant to have no complex functionality. Use the placeholder widget when studying the layout of your app before having to develop your custom widgets.\u201d</p> <p>The point of the placeholder widget is that you can focus on building the layout of your app without having to have all of your (custom) widgets ready. The placeholder widget also displays a couple of useful pieces of information to help you work out the layout of your app, namely the ID of the widget itself (or a custom label, if you provide one) and the width and height of the widget.</p> <p>As an example of usage of the placeholder widget, you can refer to the screenshot at the top of this blog post, which I included below so you don't have to scroll up:</p>         @font-face {           font-family: \"Fira Code\";           src: local(\"FiraCode-Regular\"),                   url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                   url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");           font-style: normal;           font-weight: 400;       }       @font-face {           font-family: \"Fira Code\";           src: local(\"FiraCode-Bold\"),                   url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                   url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");           font-style: bold;           font-weight: 700;       }        .terminal-2023532609-matrix {           font-family: Fira Code, monospace;           font-size: 20px;           line-height: 24.4px;           font-variant-east-asian: full-width;       }        .terminal-2023532609-title {           font-size: 18px;           font-weight: bold;           font-family: arial;       }        .terminal-2023532609-r1 { fill: #ebe0e9 }   .terminal-2023532609-r2 { fill: #c5c8c6 }   .terminal-2023532609-r3 { fill: #eee3e6 }   .terminal-2023532609-r4 { fill: #f1e8e8 }   .terminal-2023532609-r5 { fill: #f4ece5 }   .terminal-2023532609-r6 { fill: #f4f3df }   .terminal-2023532609-r7 { fill: #ecf3e6 }   .terminal-2023532609-r8 { fill: #e5f3eb }   .terminal-2023532609-r9 { fill: #dfeff1 }   .terminal-2023532609-r10 { fill: #e2f1ef }   .terminal-2023532609-r11 { fill: #e5f3eb;font-weight: bold }   .terminal-2023532609-r12 { fill: #dfeff1;font-weight: bold }   .terminal-2023532609-r13 { fill: #e3e8ef }   .terminal-2023532609-r14 { fill: #dfecf1 }   .terminal-2023532609-r15 { fill: #e3e8ef;font-weight: bold }   .terminal-2023532609-r16 { fill: #e8e3ec }   .terminal-2023532609-r17 { fill: #14191f }        PlaceholderApp Placeholder\u00a0p2\u00a0here! This\u00a0is\u00a0a\u00a0custom\u00a0label\u00a0for\u00a0p1. #p4 #p3#p5Placeholde r Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0 26\u00a0x\u00a06amet,\u00a0consectetur\u00a027\u00a0x\u00a06 adipiscing\u00a0elit.\u00a0Etiam\u00a0 feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0 Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0amet,\u00a0 consectetur\u00a0adipiscing\u00a0elit.\u00a0Etiam\u00a040\u00a0x\u00a06 feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0accumsan.\u00a0 Suspendisse\u00a0bibendum\u00a0nec\u00a0libero\u00a0quis gravida.\u00a0Phasellus\u00a0id\u00a0eleifend\u00a0 ligula.\u00a0Nullam\u00a0imperdiet\u00a0sem\u00a0tellus, sed\u00a0vehicula\u00a0nisl\u00a0faucibus\u00a0sit\u00a0amet.Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0amet,\u00a0 Praesent\u00a0iaculis\u00a0tempor\u00a0ultricies.\u00a0\u2586\u2586consectetur\u00a0adipiscing\u00a0elit.\u00a0Etiam\u00a0\u2586\u2586 Sed\u00a0lacinia,\u00a0tellus\u00a0id\u00a0rutrum\u00a0feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0accumsan.\u00a0 lacinia,\u00a0sapien\u00a0sapien\u00a0congue\u00a0Suspendisse\u00a0bibendum\u00a0nec\u00a0libero\u00a0quis <p>The top left and top right widgets have custom labels. Immediately under the top right placeholder, you can see some placeholders identified as <code>#p3</code>, <code>#p4</code>, and <code>#p5</code>. Those are the IDs of the respective placeholders. Then, rows 2 and 3 contain some placeholders that show their respective size and some placeholders that just contain some text.</p>"},{"location":"blog/2022/11/22/what-i-learned-from-my-first-non-trivial-pr/#bootstrapping-the-code-for-the-widget","title":"Bootstrapping the code for the widget","text":"<p>So, how does a code monkey start working on a non-trivial PR within 24 hours of joining a company? The answer is simple: just copy and paste code! But instead of copying and pasting from Stack Overflow, I decided to copy and paste from the internal code base.</p> <p>My task was to create a new widget, so I thought it would be a good idea to take a look at the implementation of other Textual widgets. For some reason I cannot seem to recall, I decided to take a look at the implementation of the button widget that you can find in _button.py. By looking at how the button widget is implemented, I could immediately learn a few useful things about what I needed to do and some other things about how Textual works.</p> <p>For example, a widget can have a class attribute called <code>DEFAULT_CSS</code> that specifies the default CSS for that widget. I learned this just from staring at the code for the button widget.</p> <p>Studying the code base will also reveal the standards that are in place. For example, I learned that for a widget with variants (like the button with its \u201csuccess\u201d and \u201cerror\u201d variants), the widget gets a CSS class with the name of the variant prefixed by a dash. You can learn this by looking at the method <code>Button.watch_variant</code>:</p> <pre><code>class Button(Static, can_focus=True):\n# ...\ndef watch_variant(self, old_variant: str, variant: str):\nself.remove_class(f\"-{old_variant}\")\nself.add_class(f\"-{variant}\")\n</code></pre> <p>In short, looking at code and files that are related to the things you need to do is a great way to get information about things you didn't even know you needed.</p>"},{"location":"blog/2022/11/22/what-i-learned-from-my-first-non-trivial-pr/#handling-the-placeholder-variant","title":"Handling the placeholder variant","text":"<p>A button widget can have a different variant, which is mostly used by Textual to determine the CSS that should apply to the given button. For the placeholder widget, we want the variant to determine what information the placeholder shows. The original GitHub issue mentions 5 variants for the placeholder:</p> <ul> <li>a variant that just shows a label or the placeholder ID;</li> <li>a variant that shows the size and location of the placeholder;</li> <li>a variant that shows the state of the placeholder (does it have focus? is the mouse over it?);</li> <li>a variant that shows the CSS that is applied to the placeholder itself; and</li> <li>a variant that shows some text inside the placeholder.</li> </ul> <p>The variant can be assigned when the placeholder is first instantiated, for example, <code>Placeholder(\"css\")</code> would create a placeholder that shows its own CSS. However, we also want to have an <code>on_click</code> handler that cycles through all the possible variants. I was getting ready to reinvent the wheel when I remembered that the standard module <code>itertools</code> has a lovely tool that does exactly what I needed! Thus, all I needed to do was create a new <code>cycle</code> through the variants each time a placeholder is created and then grab the next variant whenever the placeholder is clicked:</p> <pre><code>class Placeholder(Static):\ndef __init__(\nself,\nvariant: PlaceholderVariant = \"default\",\n*,\nlabel: str | None = None,\nname: str | None = None,\nid: str | None = None,\nclasses: str | None = None,\n) -&gt; None:\n# ...\nself.variant = self.validate_variant(variant)\n# Set a cycle through the variants with the correct starting point.\nself._variants_cycle = cycle(_VALID_PLACEHOLDER_VARIANTS_ORDERED)\nwhile next(self._variants_cycle) != self.variant:\npass\ndef on_click(self) -&gt; None:\n\"\"\"Click handler to cycle through the placeholder variants.\"\"\"\nself.cycle_variant()\ndef cycle_variant(self) -&gt; None:\n\"\"\"Get the next variant in the cycle.\"\"\"\nself.variant = next(self._variants_cycle)\n</code></pre> <p>I am just happy that I had the insight to add this little <code>while</code> loop when a placeholder is instantiated:</p> <pre><code>from itertools import cycle\n# ...\nclass Placeholder(Static):\n# ...\ndef __init__(...):\n# ...\nself._variants_cycle = cycle(_VALID_PLACEHOLDER_VARIANTS_ORDERED)\nwhile next(self._variants_cycle) != self.variant:\npass\n</code></pre> <p>Can you see what would be wrong if this loop wasn't there?</p>"},{"location":"blog/2022/11/22/what-i-learned-from-my-first-non-trivial-pr/#updating-the-render-of-the-placeholder-on-variant-change","title":"Updating the render of the placeholder on variant change","text":"<p>If the variant of the placeholder is supposed to determine what information the placeholder shows, then that information must be updated every time the variant of the placeholder changes. Thankfully, Textual has reactive attributes and watcher methods, so all I needed to do was... Defer the problem to another method:</p> <pre><code>class Placeholder(Static):\n# ...\nvariant = reactive(\"default\")\n# ...\ndef watch_variant(\nself, old_variant: PlaceholderVariant, variant: PlaceholderVariant\n) -&gt; None:\nself.validate_variant(variant)\nself.remove_class(f\"-{old_variant}\")\nself.add_class(f\"-{variant}\")\nself.call_variant_update()  # &lt;-- let this method do the heavy lifting!\n</code></pre> <p>Doing this properly required some thinking. Not that the current proposed solution is the best possible, but I did think of worse alternatives while I was thinking how to tackle this. I wasn't entirely sure how I would manage the variant-dependant rendering because I am not a fan of huge conditional statements that look like switch statements:</p> <pre><code>if variant == \"default\":\n# render the default placeholder\nelif variant == \"size\":\n# render the placeholder with its size\nelif variant == \"state\":\n# render the state of the placeholder\nelif variant == \"css\":\n# render the placeholder with its CSS rules\nelif variant == \"text\":\n# render the placeholder with some text inside\n</code></pre> <p>However, I am a fan of using the built-in <code>getattr</code> and I thought of creating a rendering method for each different variant. Then, all I needed to do was make sure the variant is part of the name of the method so that I can programmatically determine the name of the method that I need to call. This means that the method <code>Placeholder.call_variant_update</code> is just this:</p> <pre><code>class Placeholder(Static):\n# ...\ndef call_variant_update(self) -&gt; None:\n\"\"\"Calls the appropriate method to update the render of the placeholder.\"\"\"\nupdate_variant_method = getattr(self, f\"_update_{self.variant}_variant\")\nupdate_variant_method()\n</code></pre> <p>If <code>self.variant</code> is, say, <code>\"size\"</code>, then <code>update_variant_method</code> refers to <code>_update_size_variant</code>:</p> <pre><code>class Placeholder(Static):\n# ...\ndef _update_size_variant(self) -&gt; None:\n\"\"\"Update the placeholder with the size of the placeholder.\"\"\"\nwidth, height = self.size\nself._placeholder_label.update(f\"[b]{width} x {height}[/b]\")\n</code></pre> <p>This variant <code>\"size\"</code> also interacts with resizing events, so we have to watch out for those:</p> <pre><code>class Placeholder(Static):\n# ...\ndef on_resize(self, event: events.Resize) -&gt; None:\n\"\"\"Update the placeholder \"size\" variant with the new placeholder size.\"\"\"\nif self.variant == \"size\":\nself._update_size_variant()\n</code></pre>"},{"location":"blog/2022/11/22/what-i-learned-from-my-first-non-trivial-pr/#deleting-code-is-a-hurtful-blessing","title":"Deleting code is a (hurtful) blessing","text":"<p>To conclude this blog post, let me muse about the fact that the original issue mentioned five placeholder variants and that my PR only includes two and a half.</p> <p>After careful consideration and after coming up with the <code>getattr</code> mechanism to update the display of the placeholder according to the active variant, I started showing the \u201cfinal\u201d product to Will and my other colleagues. Eventually, we ended up getting rid of the variant for CSS and the variant that shows the placeholder state. This means that I had to delete part of my code even before it saw the light of day.</p> <p>On the one hand, deleting those chunks of code made me a bit sad. After all, I had spent quite some time thinking about how to best implement that functionality! But then, it was time to write documentation and tests, and I verified that the best code is the code that you don't even write! The code you don't write is guaranteed to have zero bugs and it also does not need any documentation whatsoever!</p> <p>So, it was a shame that some lines of code I poured my heart and keyboard into did not get merged into the Textual code base. On the other hand, I am quite grateful that I won't have to fix the bugs that will certainly reveal themselves in a couple of weeks or months from now. Heck, the code hasn't been merged yet and just by writing this blog post I noticed a couple of tweaks that were missing!</p>"},{"location":"blog/2023/02/15/textual-0110-adds-a-beautiful-markdown-widget/","title":"Textual 0.11.0 adds a beautiful Markdown widget","text":"<p>We released Textual 0.10.0 25 days ago, which is a little longer than our usual release cycle. What have we been up to?</p> <p>The headline feature of this release is the enhanced Markdown support. Here's a screenshot of an example:</p> MarkdownApp \u258bHeader\u00a0level\u00a06\u00a0content. \u25bc\u00a0\u2160\u00a0Textual\u00a0Markdown\u00a0Browser\u00a0-\u00a0Demo\u258b \u251c\u2500\u2500\u00a0\u25bc\u00a0\u2161\u00a0Headers\u258b\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2502\u00a0\u00a0\u00a0\u2514\u2500\u2500\u00a0\u25bc\u00a0\u2162\u00a0This\u00a0is\u00a0H3\u258b\u258e\u258b \u2502\u00a0\u00a0\u00a0\u2514\u2500\u2500\u00a0\u25bc\u00a0\u2163\u00a0This\u00a0is\u00a0H4\u258b\u258eTypography\u258b \u2502\u00a0\u00a0\u00a0\u2514\u2500\u2500\u00a0\u25bc\u00a0\u2164\u00a0This\u00a0is\u00a0H5\u258b\u258e\u258b \u2502\u00a0\u00a0\u00a0\u2514\u2500\u2500\u00a0\u2165\u00a0This\u00a0is\u00a0H6\u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u251c\u2500\u2500\u00a0\u25bc\u00a0\u2161\u00a0Typography\u258bThe\u00a0usual\u00a0Markdown\u00a0typography\u00a0is\u00a0supported.\u00a0The\u00a0exact\u00a0output\u00a0depends\u00a0on\u00a0 \u2502\u00a0\u00a0\u00a0\u2523\u2501\u2501\u00a0\u2162\u00a0Emphasis\u258byour\u00a0terminal,\u00a0although\u00a0most\u00a0are\u00a0fairly\u00a0consistent.\u2581\u2581 \u2502\u00a0\u00a0\u00a0\u2523\u2501\u2501\u00a0\u2162\u00a0Strong\u258b \u2502\u00a0\u00a0\u00a0\u2523\u2501\u2501\u00a0\u2162\u00a0Strikethrough\u258bEmphasis \u2502\u00a0\u00a0\u00a0\u2517\u2501\u2501\u00a0\u2162\u00a0Inline\u00a0code\u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u251c\u2500\u2500\u00a0\u2161\u00a0Fences\u258bEmphasis\u00a0is\u00a0rendered\u00a0with\u00a0*asterisks*,\u00a0and\u00a0looks\u00a0like\u00a0this; \u251c\u2500\u2500\u00a0\u2161\u00a0Quote\u258b \u2514\u2500\u2500\u00a0\u2161\u00a0Tables\u258bStrong \u258b\u2594\u2594\u2594\u2594\u2594\u2594 \u258bUse\u00a0two\u00a0asterisks\u00a0to\u00a0indicate\u00a0strong\u00a0which\u00a0renders\u00a0in\u00a0bold,\u00a0e.g.\u00a0 \u258b**strong**\u00a0render\u00a0strong. \u258b \u258bStrikethrough \u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u258bTwo\u00a0tildes\u00a0indicates\u00a0strikethrough,\u00a0e.g.\u00a0~~cross\u00a0out~~\u00a0render\u00a0cross\u00a0out. \u258b\u2582\u2582 \u258bInline\u00a0code \u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u258bInline\u00a0code\u00a0is\u00a0indicated\u00a0by\u00a0backticks.\u00a0e.g.\u00a0import\u00a0this. \u258b \u258b\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258b\u258e\u258b \u258b\u258eFences\u258b \u258b\u258e\u258b \u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u258bFenced\u00a0code\u00a0blocks\u00a0are\u00a0introduced\u00a0with\u00a0three\u00a0back-ticks\u00a0and\u00a0the\u00a0optional\u00a0 \u258bparser.\u00a0Here\u00a0we\u00a0are\u00a0rendering\u00a0the\u00a0code\u00a0in\u00a0a\u00a0sub-widget\u00a0with\u00a0syntax\u00a0 \u258bhighlighting\u00a0and\u00a0indent\u00a0guides. \u258b \u258bIn\u00a0the\u00a0future\u00a0I\u00a0think\u00a0we\u00a0could\u00a0add\u00a0controls\u00a0to\u00a0export\u00a0the\u00a0code,\u00a0copy\u00a0to\u00a0 \u258bthe\u00a0clipboard.\u00a0Heck,\u00a0even\u00a0run\u00a0it\u00a0and\u00a0show\u00a0the\u00a0output? \u258b \u258b \u258b@lru_cache(maxsize=1024) \u258bdefsplit(self,cut_x:int,cut_y:int)-&gt;tuple[Region,Region,Regi \u258b\u2502\u00a0\u00a0\u00a0\"\"\"Split\u00a0a\u00a0region\u00a0in\u00a0to\u00a04\u00a0from\u00a0given\u00a0x\u00a0and\u00a0y\u00a0offsets\u00a0(cuts). \u00a0T\u00a0\u00a0TOC\u00a0\u00a0B\u00a0\u00a0Back\u00a0\u00a0F\u00a0\u00a0Forward\u00a0 <p>Tip</p> <p>You can generate these SVG screenshots for your app with <code>textual run my_app.py --screenshot 5</code> which will export a screenshot after 5 seconds.</p> <p>There are actually 2 new widgets: Markdown for a simple Markdown document, and MarkdownViewer which adds browser-like navigation and a table of contents.</p> <p>Textual has had support for Markdown since day one by embedding a Rich Markdown object -- which still gives decent results! This new widget adds dynamic controls such as scrollable code fences and tables, in addition to working links.</p> <p>In future releases we plan on adding more Markdown extensions, and the ability to easily embed custom widgets within the document. I'm sure there are plenty of interesting applications that could be powered by dynamically generated Markdown documents.</p>"},{"location":"blog/2023/02/15/textual-0110-adds-a-beautiful-markdown-widget/#datatable-improvements","title":"DataTable improvements","text":"<p>There has been a lot of work on the DataTable API. We've added the ability to sort the data, which required that we introduce the concept of row and column keys. You can now reference rows / columns / cells by their coordinate or by row / column key.</p> <p>Additionally there are new update_cell and update_cell_at methods to update cells after the data has been populated. Future releases will have more methods to manipulate table data, which will make it a very general purpose (and powerful) widget.</p>"},{"location":"blog/2023/02/15/textual-0110-adds-a-beautiful-markdown-widget/#tree-control","title":"Tree control","text":"<p>The Tree widget has grown a few methods to programmatically expand, collapse and toggle tree nodes.</p>"},{"location":"blog/2023/02/15/textual-0110-adds-a-beautiful-markdown-widget/#breaking-changes","title":"Breaking changes","text":"<p>There are a few breaking changes in this release. These are mostly naming and import related, which should be easy to fix if you are affected. Here's a few notable examples:</p> <ul> <li><code>Checkbox</code> has been renamed to <code>Switch</code>. This is because we plan to introduce complimentary <code>Checkbox</code> and <code>RadioButton</code> widgets in a future release, but we loved the look of Switches too much to drop them.</li> <li>We've dropped the <code>emit</code> and <code>emit_no_wait</code> methods. These methods posted message to the parent widget, but we found that made it problematic to subclass widgets. In almost all situations you want to replace these with <code>self.post_message</code> (or <code>self.post_message_no_wait</code>).</li> </ul> <p>Be sure to check the CHANGELOG for the full details on potential breaking changes.</p>"},{"location":"blog/2023/02/15/textual-0110-adds-a-beautiful-markdown-widget/#join-us","title":"Join us!","text":"<p>We're having fun on our Discord server. Join us there to talk to Textualize developers and share ideas.</p>"},{"location":"blog/2023/02/24/textual-0120-adds-syntactical-sugar-and-batch-updates/","title":"Textual 0.12.0 adds syntactical sugar and batch updates","text":"<p>It's been just 9 days since the previous release, but we have a few interesting enhancements to the Textual API to talk about.</p>"},{"location":"blog/2023/02/24/textual-0120-adds-syntactical-sugar-and-batch-updates/#better-compose","title":"Better compose","text":"<p>We've added a little syntactical sugar to Textual's <code>compose</code> methods, which aids both readability and editability (that might not be a word).</p> <p>First, let's look at the old way of building compose methods. This snippet is taken from the <code>textual colors</code> command.</p> <pre><code>for color_name in ColorSystem.COLOR_NAMES:\nitems: list[Widget] = [ColorLabel(f'\"{color_name}\"')]\nfor level in LEVELS:\ncolor = f\"{color_name}-{level}\" if level else color_name\nitem = ColorItem(\nColorBar(f\"${color}\", classes=\"text label\"),\nColorBar(\"$text-muted\", classes=\"muted\"),\nColorBar(\"$text-disabled\", classes=\"disabled\"),\nclasses=color,\n)\nitems.append(item)\nyield ColorGroup(*items, id=f\"group-{color_name}\")\n</code></pre> <p>This code composes the following color swatches:</p> ColorsApp \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 primary \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258b\u2581\u2581 secondary\u258e\"primary\"\u258b \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258b background\u258e$primary-darken-3$text-muted$text-disabled\u258b \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258b primary-background\u258e$primary-darken-2$text-muted$text-disabled\u258b \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258b secondary-background\u258e$primary-darken-1$text-muted$text-disabled\u258b \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258b surface\u258e$primary$text-muted$text-disabled\u258b \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258b panel\u258e$primary-lighten-1$text-muted$text-disabled\u258b \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258b boost\u258e$primary-lighten-2$text-muted$text-disabled\u258b \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258b warning\u258e$primary-lighten-3$text-muted$text-disabled\u258b \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258b error\u258e\u258b \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 success \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258b accent\u258e\"secondary\"\u258b \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258b \u258e\u258b \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0 <p>Tip</p> <p>You can see this by running <code>textual colors</code> from the command line.</p> <p>The old way was not all that bad, but it did make it hard to see the structure of your app at-a-glance, and editing compose methods always felt a little laborious.</p> <p>Here's the new syntax, which uses context managers to add children to containers:</p> <pre><code>for color_name in ColorSystem.COLOR_NAMES:\nwith ColorGroup(id=f\"group-{color_name}\"):\nyield Label(f'\"{color_name}\"')\nfor level in LEVELS:\ncolor = f\"{color_name}-{level}\" if level else color_name\nwith ColorItem(classes=color):\nyield ColorBar(f\"${color}\", classes=\"text label\")\nyield ColorBar(\"$text-muted\", classes=\"muted\")\nyield ColorBar(\"$text-disabled\", classes=\"disabled\")\n</code></pre> <p>The context manager approach generally results in fewer lines of code, and presents attributes on the same line as containers themselves. Additionally, adding widgets to a container can be as simple is indenting them.</p> <p>You can still construct widgets and containers with positional arguments, but this new syntax is preferred. It's not documented yet, but you can start using it now. We will be updating our examples in the next few weeks.</p>"},{"location":"blog/2023/02/24/textual-0120-adds-syntactical-sugar-and-batch-updates/#batch-updates","title":"Batch updates","text":"<p>Textual is smart about performing updates to the screen. When you make a change that might repaint the screen, those changes don't happen immediately. Textual makes a note of them, and repaints the screen a short time later (around a 1/60th of a second). Multiple updates are combined so that Textual does less work overall, and there is none of the flicker you might get with multiple repaints.</p> <p>Although this works very well, it is possible to introduce a little flicker if you make changes across multiple widgets. And especially if you add or remove many widgets at once. To combat this we have added a batch_update context manager which tells Textual to disable screen updates until the end of the with block.</p> <p>The new Markdown widget uses this context manager when it updates its content. Here's the code:</p> <pre><code>with self.app.batch_update():\nawait self.query(\"MarkdownBlock\").remove()\nawait self.mount_all(output)\n</code></pre> <p>Without the batch update there are a few frames where the old markdown blocks are removed and the new blocks are added (which would be perceived as a brief flicker). With the update, the update appears instant.</p>"},{"location":"blog/2023/02/24/textual-0120-adds-syntactical-sugar-and-batch-updates/#disabled-widgets","title":"Disabled widgets","text":"<p>A few widgets (such as Button) had a <code>disabled</code> attribute which would fade the widget a little and make it unselectable. We've extended this to all widgets. Although it is particularly applicable to input controls, anything may be disabled. Disabling a container makes its children disabled, so you could use this for disabling a form, for example.</p> <p>Tip</p> <p>Disabled widgets may be styled with the <code>:disabled</code> CSS pseudo-selector.</p>"},{"location":"blog/2023/02/24/textual-0120-adds-syntactical-sugar-and-batch-updates/#preventing-messages","title":"Preventing messages","text":"<p>Also in this release is another context manager, which will disable specified Message types. This doesn't come up as a requirement very often, but it can be very useful when it does. This one is documented, see Preventing events for details.</p>"},{"location":"blog/2023/02/24/textual-0120-adds-syntactical-sugar-and-batch-updates/#full-changelog","title":"Full changelog","text":"<p>As always see the release page for additional changes and bug fixes.</p>"},{"location":"blog/2023/02/24/textual-0120-adds-syntactical-sugar-and-batch-updates/#join-us","title":"Join us!","text":"<p>We're having fun on our Discord server. Join us there to talk to Textualize developers and share ideas.</p>"},{"location":"blog/2023/03/09/textual-0140-shakes-up-posting-messages/","title":"Textual 0.14.0 shakes up posting messages","text":"<p>Textual version 0.14.0 has landed just a week after 0.13.0.</p> <p>Note</p> <p>We like fast releases for Textual. Fast releases means quicker feedback, which means better code.</p> <p>What's new?</p> <p>We did a little shake-up of posting messages which will simplify building widgets. But this does mean a few breaking changes.</p> <p>There are two methods in Textual to post messages: <code>post_message</code> and <code>post_message_no_wait</code>. The former was asynchronous (you needed to <code>await</code> it), and the latter was a regular method call. These two methods have been replaced with a single <code>post_message</code> method.</p> <p>To upgrade your project to Textual 0.14.0, you will need to do the following:</p> <ul> <li>Remove <code>await</code> keywords from any calls to <code>post_message</code>.</li> <li>Replace any calls to <code>post_message_no_wait</code> with <code>post_message</code>.</li> </ul> <p>Additionally, we've simplified constructing messages classes. Previously all messages required a <code>sender</code> argument, which had to be manually set. This was a clear violation of our \"no boilerplate\" policy, and has been dropped. There is still a <code>sender</code> property on messages / events, but it is set automatically.</p> <p>So prior to 0.14.0 you might have posted messages like the following:</p> <pre><code>await self.post_message(self.Changed(self, item=self.item))\n</code></pre> <p>You can now replace it with this simpler function call:</p> <pre><code>self.post_message(self.Change(item=self.item))\n</code></pre> <p>This also means that you will need to drop the sender from any custom messages you have created.</p> <p>If this was code pre-0.14.0:</p> <pre><code>class MyWidget(Widget):\nclass Changed(Message):\n\"\"\"My widget change event.\"\"\"\ndef __init__(self, sender:MessageTarget, item_index:int) -&gt; None:\nself.item_index = item_index\nsuper().__init__(sender)\n</code></pre> <p>You would need to make the following change (dropping <code>sender</code>).</p> <pre><code>class MyWidget(Widget):\nclass Changed(Message):\n\"\"\"My widget change event.\"\"\"\ndef __init__(self, item_index:int) -&gt; None:\nself.item_index = item_index\nsuper().__init__()\n</code></pre> <p>If you have any problems upgrading, join our Discord server, we would be happy to help.</p> <p>See the release notes for the full details on this update.</p>"},{"location":"blog/2023/03/13/textual-0150-adds-a-tabs-widget/","title":"Textual 0.15.0 adds a tabs widget","text":"<p>We've just pushed Textual 0.15.0, only 4 days after the previous version. That's a little faster than our typical release cadence of 1 to 2 weeks.</p> <p>What's new in this release?</p> <p>The highlight of this release is a new Tabs widget to display tabs which can be navigated much like tabs in a browser. Here's a screenshot:</p> TabsApp Paul\u00a0AtreidiesDuke\u00a0Leto\u00a0AtreidesLady\u00a0JessicaGurney\u00a0Halleck \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u257a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258aLady\u00a0Jessica\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u00a0A\u00a0\u00a0Add\u00a0tab\u00a0\u00a0R\u00a0\u00a0Remove\u00a0active\u00a0tab\u00a0\u00a0C\u00a0\u00a0Clear\u00a0tabs\u00a0 <p>In a future release, this will be combined with the ContentSwitcher widget to create a traditional tabbed dialog. Although Tabs is still useful as a standalone widgets.</p> <p>Tip</p> <p>I like to tweet progress with widgets on Twitter. See the #textualtabs hashtag which documents progress on this widget.</p> <p>Also in this release is a new LoadingIndicator widget to display a simple animation while waiting for data. Here's a screenshot:</p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2562693105-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2562693105-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2562693105-r1 { fill: #c5c8c6 } .terminal-2562693105-r2 { fill: #0d5083 } .terminal-2562693105-r3 { fill: #0763aa } .terminal-2562693105-r4 { fill: #0579d5 } .terminal-2562693105-r5 { fill: #348ceb } .terminal-2562693105-r6 { fill: #1a2832 }      LoadingApp \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0\u25cf\u00a0\u25cf <p>As always, see the release notes for the full details on this update.</p> <p>If you want to talk about these widgets, or anything else Textual related, join us on our Discord server.</p>"},{"location":"blog/2022/11/08/version-040/","title":"Version 0.4.0","text":"<p>We've released version 0.4.0 of Textual.</p> <p>As this is the first post tagged with <code>release</code> let me first explain where the blog fits in with releases. We plan on doing a post for every note-worthy release. Which likely means all but the most trivial updates (typos just aren't that interesting). Blog posts will be supplementary to release notes which you will find on the Textual repository.</p> <p>Blog posts will give a little more background for the highlights in a release, and a rationale for changes and new additions. We embrace building in public, which means that we would like you to be as up-to-date with new developments as if you were sitting in our office. It's a small office, and you might not be a fan of the Scottish weather (it's dreich), but you can at least be here virtually.</p> <p>Release 0.4.0 follows 0.3.0, released on October 31st. Here are the highlights of the update.</p>"},{"location":"blog/2022/11/08/version-040/#updated-mount-method","title":"Updated Mount Method","text":"<p>The mount method has seen some work. We've dropped the ability to assign an <code>id</code> via keyword attributes, which wasn't terribly useful. Now, an <code>id</code> must be assigned via the constructor. </p> <p>The mount method has also grown <code>before</code> and <code>after</code> parameters which tell Textual where to add a new Widget (the default was to add it to the end). Here are a few examples:</p> <pre><code># Mount at the start\nself.mount(Button(id=\"Buy Coffee\"), before=0)\n# Mount after a selector\nself.mount(Static(\"Password is incorrect\"), after=\"Dialog Input.-error\")\n# Mount after a specific widget\ntweet = self.query_one(\"Tweet\")\nself.mount(Static(\"Consider switching to Mastodon\"), after=tweet)\n</code></pre> <p>Textual needs much of the same kind of operations as the JS API exposed by the browser. But we are determined to make this way more intuitive. The new mount method is a step towards that. </p>"},{"location":"blog/2022/11/08/version-040/#faster-updates","title":"Faster Updates","text":"<p>Textual now writes to stdout in a thread. The upshot of this is that Textual can work on the next update before the terminal has displayed the previous frame.</p> <p>This means smoother updates all round! You may notice this when scrolling and animating, but even if you don't, you will have more CPU cycles to play with in your Textual app.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nN2ca3Oa3Fx1MDAxNsff91NkPG8r3fdLZ86cybW5t401SXPmmVx1MDAwZUFUXCKK4WIunX73Z0FsXHUwMDAwI2pcdTAwMTKDTPLCKlx1MDAxYvZebNaP/1prQ39/WFurhXdDu/Z5rWbfWqbrtHzzpvYx3j6y/cDxXHUwMDA20ESS34FcdTAwMTf5VrJnN1xmh8HnT5/6pt+zw6FrWrYxcoLIdIMwajmeYXn9T05o94P/xZ/HZt/+79Drt0LfSFx1MDAwN6nbLSf0/IexbNfu24MwgN7/XHUwMDBmv9fWfiefXHUwMDE563zbXG7NQce1k1x1MDAwM5Km1ECK1eTWY2+QXHUwMDE4SzDDVFx1MDAxMk7Q41x1MDAxZU6wXHUwMDA144V2XHUwMDBimttgs522xJtq55fW8dVgOzo971xuWd857UaDzct02Lbjuo3wzn2YXG7T6kZ+xqgg9L2efea0wi6044ntj8dcdTAwMDVcdTAwMWXMQnqU70Wd7sBcdTAwMGWC3DHe0LSc8C7ehlLzXHUwMDFmZuHzWrrlXHUwMDE2filuKClcdTAwMTVcdTAwMTVCYc6kXHUwMDE0j63J8ZxcdTAwMWGEU41cdTAwMDThXGL+Ju3a9FxcuFx1MDAxNGDXf6hgbUumll2aVq9cdTAwMDPmXHJa6T6EqEtbKJXudfP3fJkyiJSUUclcdTAwMWZcdTAwMWK7ttPphtDKkKGlXCJgI5KYXHUwMDExRVMr7ORqxC2USMZcdTAwMWVcdTAwMWLioYd7rcQx/pmczK7pXHUwMDBmx5NWXHUwMDBi4lx1MDAxZlx1MDAxObNji7cnvSrrWZlcdTAwMGJ+2T5qXHUwMDFjOMdcciFcdTAwMWPinp9uXHUwMDFmXHUwMDA218HPx75yblx1MDAxONq3Ye2x4c/H6d3m9v646IBpt+Nv6Vx0R8OW+eCwWFxiqWGKJaY09Vx1MDAwMNdcdTAwMTn0oHFcdTAwMTC5brrNs3qpj3/I2PtMuDQthotKXHUwMDA03pa5YPPgut9ccr5aR0PyvVlf92+PLbp/9l1UXHUwMDFkrjp4q0GRXHUwMDE2XHUwMDA0cy01opzk8FwiXGJcdTAwMWKEUnBuJqTChFx1MDAxN+LF27Rlsdl42YJphabhRVxiM4RmkjMmgFx1MDAxZq5ewFx1MDAxONxcdTAwMGaVwHBcdTAwMDaqXFzIml/I/p55MrpAw9b1tT/sbl37J29cdNn0XHUwMDAxn1x1MDAwM1x1MDAxOUwkUrxcdTAwMTTIXHUwMDE4xkWQYSm4RIhxsTBkw1x1MDAxZt++7l1cdTAwMWW1aGRcdTAwMWTgId9wej/vulWHjFx0XHUwMDBljGFcdTAwMDJcdTAwMTOviKSgXCJcdTAwMTNcdTAwMTImXGbMlVx1MDAxNFx1MDAxOCeuzYohW6mGYaQg2lx1MDAxMFx1MDAxNJNy+dq17qXd22t2b2lvyLqX9uHoXHUwMDFifku+plx1MDAwZlhRXHUwMDExY1pcdTAwMTbxJZhcIkhgtLiG3e2qKPq1dVx1MDAxZlx1MDAxYzXNkfn91t05cdpVx4tQaVx1MDAwMFVcdTAwMTju/pJzzSfo0spA0FwiXHUwMDE555RLnLnZVE/CXGLinCnKsChcdTAwMTexg63v6Ng+6nxcdTAwMGbCbvO62d7mqH/2lohNXHUwMDFmcHWI5ezMJoikXGIuTFx1MDAxOIeQnujFxWt2oFBRuupCXHUwMDE4TIBzM1xuai2QyONFkDZcYokjyPiCKKqXXHUwMDExIT6FKyOZjzRlg9ExPlx1MDAwMJVcdTAwMTBYv4VCLTOaSi+5N1xiXHUwMDFizn2ScaDc1lx1MDAxZLPvuHe5q5b4aOxGyfjZeVxmbFx1MDAxODNxSpXbe911OrFcdTAwMTfXLDhcdTAwMGLbzzl46Fim+7hD32m1svpigVx0JvTp7y2S23i+03FcdTAwMDam+yNv4YuIK6x3MKmpQGRxMZud/FZcdTAwMTQ3TJmBsODgUFxcQFx1MDAwMqry+Vx1MDAxOFx1MDAxNpCPMVxu07BENXuKWyZcdTAwMGKcgVx1MDAxYqaEXHUwMDBirbF8XHUwMDAztVrmnf91uJ35Tsm0zSnTTdL2YOCLYCvOzTjHXHUwMDFhJluphXGbXHUwMDFkQ1RcdTAwMTQ3iqnBXHUwMDE1Y5prXHUwMDA0mZGarH5cYlx1MDAwM0muYFx1MDAxZYA1ls18ViFuXHUwMDEwNCrMdbniVjJtK1x1MDAxMLc5SU8p4iYgZ6BU4cWDydlZcUVx44BcdTAwMWKjWsPpclx1MDAxOVdCJsSNXHUwMDE5XHUwMDE4JE/qh1xmSqo3wW1BcVx1MDAwMyvB0pJDyXevbXNcbngv0LbZ1ZHMZE4gJ1x0QpqpZ1x1MDAwNJT7I3SAdjZa/kE/XHUwMDFhnUdHfp1wXXXkMKKGXHUwMDAy5WJcYkI1hjjOIcewNFx1MDAwNChcdTAwMWZCY5ErJG7FpUfQZ1x1MDAwMVx1MDAwMW/JdVx1MDAxMeF87TaO2DpB9+bJSe8wwvhm9Jq6yFx1MDAxYnU7r9wyfcC02/G3alQ0OS1cXJbjRGhCsmvAc2Wy8+XQPJDfnOZF65c2zZsrc++u6szWMUlcdTAwMTa9OTi8oFwiXHUwMDBlTfPUXG6QUak4pH/JqncxtasvaWKCQEhFdpGnXHUwMDE0dCN2u3s9ijbcXHUwMDAzT9zwweHVcc/uvVx1MDAxZd2ldztcdTAwMGbd6Vx1MDAwM1ZcdTAwMTVdrYvQJZpoXHIh7uJye9A7adCGa91ftK9+7Gy2T5v3vdOqo0spMTAnXHUwMDAwLlx1MDAxMVxmXCJZzfLkYmFcYlx1MDAxZcdcdTAwMWRcdTAwMGbAZG51lVx1MDAxMlxcolC85l82tPvWyW5k4u0uP6xcdTAwMWaMblx1MDAwNlx1MDAwM1Cr6PXQLr3bedBOXHUwMDFmsKLQSsSLoMVcdTAwMWHFSal+XHUwMDA2tdH2VXR4tyt/ycPG9lx1MDAxNW9IsnfxperUYsRcZsqFwpJSXHUwMDExL2boPLWgt5CfYyrwPGorILiSY1x1MDAxNa9Olczu1sXXy0NN7ky457Gj4O6871xmL1/P7tK7ncfu9Fx1MDAwMVfHbmHtVlx1MDAxND9YoyA4XHUwMDA0aJ+R286OayqKbZ0jXHUwMDAzUYRcdTAwMTVcdTAwMDI448WSiYdDmcRcdTAwMDZcdTAwMTNSUPqQ3L7Rasli9du4sqWIxO+7orSC+u2cXHUwMDE0b5n1W4xcdTAwMGLjWy21ZOCKiyM3u1xuUFHkMMeGjlx1MDAxN/0gxGVxOWmCOEhcXLlcdTAwMDYh1VgnXG62yvXJeMVcdTAwMDRcdKrouyau/Fx1MDAxYe6cOuhcdTAwMTLXJ8lcZt5cdTAwMTSDm756xuM3syOJqvKmkEFcdTAwMTDDXHUwMDFh4jnIx8hEOlx0XHUwMDAyJyghT+PF8vVNQ85cdTAwMGKRqX7XXHUwMDBmXHUwMDAzrEDe5iRUS5U3XZxcdFIpiFr8VaPZKXdFYaMxbCBtTGGqp1x1MDAxNG/i7IwhJMRY2+Sb4Lbg+iRcdTAwMDfkJc247jvErXxtm1N0XFyitlx1MDAxNT5cdTAwMGKAXHUwMDA1XCKCaJEpy8yj7eJLdK+Q02tcXHX3XHUwMDFhO1dnW0PvdLfqtGFFXGZcdTAwMTRnZVx1MDAwNCdcdTAwMGZcdTAwMDPofCippVx1MDAwMUmdYip+qlx1MDAxM9LZV7FWXFwoXHUwMDE1U2osT2mjXHUwMDA0bn/wUX4kSXRptG3Ybc9/XHUwMDFlbq7dXHUwMDBlZ8BcdTAwMTZ6w1wi0nJnMYnV2JJcdTAwMTdxVfg6XHUwMDA0ZkzHIUqmejePK9usb1x1MDAwNH3xrd+MzlG9j++3tjevK8+VIIZcdTAwMDBqXG64ojxeoVx1MDAxMFxuKVx1MDAxND9BOut1o9eRlcn9ZpAlKKVSKVa+jpVI1no7J0qrXHUwMDAz68GQmVxcmb7v3UxNxlDhujxcdTAwMDQjSHKK9OJoscb53k7n+HJ9py72/P3dU7y19cKHaSafynzDV424QWAvTjWjkIzhiXSMXCJlcFx1MDAwMOLvXHUwMDAzbK9Lx4rJgsFccqD872NymE5J0LChMFx1MDAwNKtiSuSIOFFcdTAwMWGJXHUwMDE3vIueWFg2cUFo+uGGM2g5g87kIfagVdDimkG46fX7TlxiZnzznEE4uUfS73rs7V3bfEJcdTAwMGX0nG2rhb4zsYI2jDvNL4uk39ZSz0l+PH7/5+PUvVx0llx1MDAwNlI4juhxPreI/+rI0EhcdTAwMDGAmPB5PVx1MDAxNTtH0lPqXHUwMDE3aUdcdTAwMWay/z5Xb0XxS/SIKU3gfNLLPrdGc/Szuf+r88VcdTAwMTXO6c9r+/asqe2rqt9cdTAwMTXqXFxcdTAwMTlcdTAwMTBcdTAwMWRcblx1MDAxZf+PXHUwMDFjQiOevytAKG9gzcZcdTAwMDXRV69CzLgtLCS4mFx0grR8529t/HD6lYhkXHUwMDEzO1x1MDAxZbj6MEa2Zlx1MDAwZYeNMC7SfFx1MDAxZVNcdTAwMDZcdTAwMTfAaY1PMe2tNnLsm40pXHUwMDFl0E7+4l5cdTAwMTNWYyrsePp///nw51+TJY25In0= UpdateWriteUpdateWriteUpdateWriteUpdateWriteBeforeAfterTime"},{"location":"blog/2022/11/08/version-040/#multiple-css-paths","title":"Multiple CSS Paths","text":"<p>Up to version 0.3.0, Textual would only read a single CSS file set in the <code>CSS_PATH</code> class variable. You can now supply a list of paths if you have more than one CSS file.</p> <p>This change was prompted by tuilwindcss which brings a TailwindCSS like approach to building Textual Widgets. Also check out calmcode.io by the same author, which is an amazing resource.</p>"},{"location":"blog/2022/12/11/version-060/","title":"Textual 0.6.0 adds a treemendous new widget","text":"<p>A new release of Textual lands 3 weeks after the previous release -- and it's a big one.</p> <p>Information</p> <p>If you're new here, Textual is TUI framework for Python.</p>"},{"location":"blog/2022/12/11/version-060/#tree-control","title":"Tree Control","text":"<p>The headline feature of version 0.6.0 is a new tree control built from the ground-up. The previous Tree control suffered from an overly complex API and wasn't scalable (scrolling slowed down with 1000s of nodes).</p> <p>This new version has a simpler API and is highly scalable (no slowdown with larger trees). There are also a number of visual enhancements in this version.</p> <p>Here's a very simple example:</p> Outputtree.py <p> TreeApp \u25bc\u00a0Dune \u2514\u2500\u2500\u00a0\u25bc\u00a0Characters \u251c\u2500\u2500\u00a0Paul \u251c\u2500\u2500\u00a0Jessica \u2514\u2500\u2500\u00a0Chani </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Tree\nclass TreeApp(App):\ndef compose(self) -&gt; ComposeResult:\ntree: Tree[dict] = Tree(\"Dune\")\ntree.root.expand()\ncharacters = tree.root.add(\"Characters\", expand=True)\ncharacters.add_leaf(\"Paul\")\ncharacters.add_leaf(\"Jessica\")\ncharacters.add_leaf(\"Chani\")\nyield tree\nif __name__ == \"__main__\":\napp = TreeApp()\napp.run()\n</code></pre> <p>Here's the tree control being used to navigate some JSON (json_tree.py in the examples directory).</p> <p>I'm biased of course, but I think this terminal based tree control is more usable (and even prettier) than just about anything I've seen on the web or desktop. So much of computing tends to organize itself in to a tree that I think this widget will find a lot of uses. </p> <p>The Tree control forms the foundation of the DirectoryTree widget, which has also been updated. Here it is used in the code_browser.py example:</p>"},{"location":"blog/2022/12/11/version-060/#list-view","title":"List View","text":"<p>We have a new ListView control to navigate and select items in a list. Items can be widgets themselves, which makes this a great platform for building more sophisticated controls.</p> Outputlist_view.pylist_view.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1585045600-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1585045600-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1585045600-r1 { fill: #e1e1e1 } .terminal-1585045600-r2 { fill: #c5c8c6 } .terminal-1585045600-r3 { fill: #dfe7ed } .terminal-1585045600-r4 { fill: #e4e5e6 } .terminal-1585045600-r5 { fill: #ddedf9 }      ListViewExample One Two Three </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import ListView, ListItem, Label, Footer\nclass ListViewExample(App):\nCSS_PATH = \"list_view.css\"\ndef compose(self) -&gt; ComposeResult:\nyield ListView(\nListItem(Label(\"One\")),\nListItem(Label(\"Two\")),\nListItem(Label(\"Three\")),\n)\nyield Footer()\nif __name__ == \"__main__\":\napp = ListViewExample()\napp.run()\n</code></pre> <pre><code>Screen {\nalign: center middle;\n}\nListView {\nwidth: 30;\nheight: auto;\nmargin: 2 2;\n}\nLabel {\npadding: 1 2;\n}\n</code></pre>"},{"location":"blog/2022/12/11/version-060/#placeholder","title":"Placeholder","text":"<p>The Placeholder widget was broken since the big CSS update. We've brought it back and given it a bit of a polish.</p> <p>Use this widget in place of custom widgets you have yet to build when designing your UI. The colors are automatically cycled to differentiate one placeholder from the next. You can click a placeholder to cycle between its ID, size, and lorem ipsum text.</p> Outputplaceholder.pyplaceholder.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3295552634-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3295552634-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3295552634-r1 { fill: #c5c8c6 } .terminal-3295552634-r2 { fill: #eae3e5 } .terminal-3295552634-r3 { fill: #e8e0e7 } .terminal-3295552634-r4 { fill: #efe9e4 } .terminal-3295552634-r5 { fill: #ede6e6 } .terminal-3295552634-r6 { fill: #efeedf } .terminal-3295552634-r7 { fill: #e9eee5 } .terminal-3295552634-r8 { fill: #e2edeb } .terminal-3295552634-r9 { fill: #e4eee8;font-weight: bold } .terminal-3295552634-r10 { fill: #dfebed;font-weight: bold } .terminal-3295552634-r11 { fill: #dfe9ed } .terminal-3295552634-r12 { fill: #e3e6eb;font-weight: bold } .terminal-3295552634-r13 { fill: #e6e3e9 }      PlaceholderApp Placeholder\u00a0p2\u00a0here! This\u00a0is\u00a0a\u00a0custom\u00a0label\u00a0for\u00a0p1. #p4 #p3 #p5Placeholder Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0amet,\u00a0 consectetur\u00a0adipiscing\u00a0elit.\u00a0 Etiam\u00a0feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0 accumsan.\u00a0Suspendisse\u00a0bibendum\u00a0 33\u00a0x\u00a011nec\u00a0libero\u00a0quis\u00a0gravida.\u00a034\u00a0x\u00a011 Phasellus\u00a0id\u00a0eleifend\u00a0ligula.\u00a0 Nullam\u00a0imperdiet\u00a0sem\u00a0tellus,\u00a0 sed\u00a0vehicula\u00a0nisl\u00a0faucibus\u00a0sit\u00a0 amet.\u00a0Praesent\u00a0iaculis\u00a0tempor\u00a0 Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0amet,\u00a0consectetur\u00a0 adipiscing\u00a0elit.\u00a0Etiam\u00a0feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0 accumsan.\u00a0Suspendisse\u00a0bibendum\u00a0nec\u00a0libero\u00a0quis\u00a0 gravida.\u00a0Phasellus\u00a0id\u00a0eleifend\u00a0ligula.\u00a0Nullam\u00a0 imperdiet\u00a0sem\u00a0tellus,\u00a0sed\u00a0vehicula\u00a0nisl\u00a0faucibus50\u00a0x\u00a011 sit\u00a0amet.\u00a0Praesent\u00a0iaculis\u00a0tempor\u00a0ultricies.\u00a0Sed lacinia,\u00a0tellus\u00a0id\u00a0rutrum\u00a0lacinia,\u00a0sapien\u00a0sapien congue\u00a0mauris,\u00a0sit\u00a0amet\u00a0pellentesque\u00a0quam\u00a0quam\u00a0 vel\u00a0nisl.\u00a0Curabitur\u00a0vulputate\u00a0erat\u00a0pellentesque\u00a0 mauris\u00a0posuere,\u00a0non\u00a0dictum\u00a0risus\u00a0mattis. Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0amet,\u00a0consectetur\u00a0Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0amet,\u00a0consectetur\u00a0 adipiscing\u00a0elit.\u00a0Etiam\u00a0feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0adipiscing\u00a0elit.\u00a0Etiam\u00a0feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0 accumsan.\u00a0Suspendisse\u00a0bibendum\u00a0nec\u00a0libero\u00a0quis\u00a0accumsan.\u00a0Suspendisse\u00a0bibendum\u00a0nec\u00a0libero\u00a0quis\u00a0 gravida.\u00a0Phasellus\u00a0id\u00a0eleifend\u00a0ligula.\u00a0Nullam\u00a0gravida.\u00a0Phasellus\u00a0id\u00a0eleifend\u00a0ligula.\u00a0Nullam\u00a0 imperdiet\u00a0sem\u00a0tellus,\u00a0sed\u00a0vehicula\u00a0nisl\u00a0faucibusimperdiet\u00a0sem\u00a0tellus,\u00a0sed\u00a0vehicula\u00a0nisl\u00a0faucibus sit\u00a0amet.\u00a0Praesent\u00a0iaculis\u00a0tempor\u00a0ultricies.\u00a0Sedsit\u00a0amet.\u00a0Praesent\u00a0iaculis\u00a0tempor\u00a0ultricies.\u00a0Sed lacinia,\u00a0tellus\u00a0id\u00a0rutrum\u00a0lacinia,\u00a0sapien\u00a0sapienlacinia,\u00a0tellus\u00a0id\u00a0rutrum\u00a0lacinia,\u00a0sapien\u00a0sapien congue\u00a0mauris,\u00a0sit\u00a0amet\u00a0pellentesque\u00a0quam\u00a0quam\u00a0congue\u00a0mauris,\u00a0sit\u00a0amet\u00a0pellentesque\u00a0quam\u00a0quam\u00a0 vel\u00a0nisl.\u00a0Curabitur\u00a0vulputate\u00a0erat\u00a0pellentesque\u00a0vel\u00a0nisl.\u00a0Curabitur\u00a0vulputate\u00a0erat\u00a0pellentesque\u00a0 mauris\u00a0posuere,\u00a0non\u00a0dictum\u00a0risus\u00a0mattis.mauris\u00a0posuere,\u00a0non\u00a0dictum\u00a0risus\u00a0mattis. </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Container, Horizontal, VerticalScroll\nfrom textual.widgets import Placeholder\nclass PlaceholderApp(App):\nCSS_PATH = \"placeholder.css\"\ndef compose(self) -&gt; ComposeResult:\nyield VerticalScroll(\nContainer(\nPlaceholder(\"This is a custom label for p1.\", id=\"p1\"),\nPlaceholder(\"Placeholder p2 here!\", id=\"p2\"),\nPlaceholder(id=\"p3\"),\nPlaceholder(id=\"p4\"),\nPlaceholder(id=\"p5\"),\nPlaceholder(),\nHorizontal(\nPlaceholder(variant=\"size\", id=\"col1\"),\nPlaceholder(variant=\"text\", id=\"col2\"),\nPlaceholder(variant=\"size\", id=\"col3\"),\nid=\"c1\",\n),\nid=\"bot\",\n),\nContainer(\nPlaceholder(variant=\"text\", id=\"left\"),\nPlaceholder(variant=\"size\", id=\"topright\"),\nPlaceholder(variant=\"text\", id=\"botright\"),\nid=\"top\",\n),\nid=\"content\",\n)\nif __name__ == \"__main__\":\napp = PlaceholderApp()\napp.run()\n</code></pre> <pre><code>Placeholder {\nheight: 100%;\n}\n#top {\nheight: 50%;\nwidth: 100%;\nlayout: grid;\ngrid-size: 2 2;\n}\n#left {\nrow-span: 2;\n}\n#bot {\nheight: 50%;\nwidth: 100%;\nlayout: grid;\ngrid-size: 8 8;\n}\n#c1 {\nrow-span: 4;\ncolumn-span: 8;\nheight: 100%;\n}\n#col1, #col2, #col3 {\nwidth: 1fr;\n}\n#p1 {\nrow-span: 4;\ncolumn-span: 4;\n}\n#p2 {\nrow-span: 2;\ncolumn-span: 4;\n}\n#p3 {\nrow-span: 2;\ncolumn-span: 2;\n}\n#p4 {\nrow-span: 1;\ncolumn-span: 2;\n}\n</code></pre>"},{"location":"blog/2022/12/11/version-060/#fixes","title":"Fixes","text":"<p>As always, there are a number of fixes in this release. Mostly related to layout. See CHANGELOG.md for the details.</p>"},{"location":"blog/2022/12/11/version-060/#whats-next","title":"What's next?","text":"<p>The next release will focus on pain points we discovered while in a dog-fooding phase (see the DevLog for details on what Textual devs have been building).</p>"},{"location":"blog/2022/12/07/letting-your-cook-multitask-while-bringing-water-to-a-boil/","title":"Letting your cook multitask while bringing water to a boil","text":"<p>Whenever you are cooking a time-consuming meal, you want to multitask as much as possible. For example, you do not want to stand still while you wait for a pot of water to start boiling. Similarly, you want your applications to remain responsive (i.e., you want the cook to \u201cmultitask\u201d) while they do some time-consuming operations in the background (e.g., while the water heats up).</p> <p>The animation below shows an example of an application that remains responsive (colours on the left still change on click) even while doing a bunch of time-consuming operations (shown on the right).</p> <p></p> <p>In this blog post, I will teach you how to multitask like a good cook.</p>"},{"location":"blog/2022/12/07/letting-your-cook-multitask-while-bringing-water-to-a-boil/#wasting-time-staring-at-pots","title":"Wasting time staring at pots","text":"<p>There is no point in me presenting a solution to a problem if you don't understand the problem I am trying to solve. Suppose we have an application that needs to display a huge amount of data that needs to be read and parsed from a file. The first time I had to do something like this, I ended up writing an application that \u201cblocked\u201d. This means that while the application was reading and parsing the data, nothing else worked.</p> <p>To exemplify this type of scenario, I created a simple application that spends five seconds preparing some data. After the data is ready, we display a <code>Label</code> on the right that says that the data has been loaded. On the left, the app has a big rectangle (a custom widget called <code>ColourChanger</code>) that you can click and that changes background colours randomly.</p> <p>When you start the application, you can click the rectangle on the left to change the background colour of the <code>ColourChanger</code>, as the animation below shows:</p> <p></p> <p>However, as soon as you press <code>l</code> to trigger the data loading process, clicking the <code>ColourChanger</code> widget doesn't do anything. The app doesn't respond because it is busy working on the data. This is the code of the app so you can try it yourself:</p> <pre><code>import time\nfrom random import randint\nfrom textual.app import App, ComposeResult\nfrom textual.color import Color\nfrom textual.containers import Grid, VerticalScroll\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Label\nclass ColourChanger(Widget):  # (1)!\ndef on_click(self) -&gt; None:\nself.styles.background = Color(\nrandint(1, 255),\nrandint(1, 255),\nrandint(1, 255),\n)\nclass MyApp(App[None]):\nBINDINGS = [(\"l\", \"load\", \"Load data\")]  # (2)!\nCSS = \"\"\"\n    Grid {\n        grid-size: 2;\n    }\n    \"\"\"\ndef compose(self) -&gt; ComposeResult:\nyield Grid(\nColourChanger(),\nVerticalScroll(id=\"log\"),\n)\nyield Footer()\ndef action_load(self) -&gt; None:  # (3)!\ntime.sleep(5)  # (4)!\nself.query_one(\"#log\").mount(Label(\"Data loaded \u2705\"))\nMyApp().run()\n</code></pre> <ol> <li>The widget <code>ColourChanger</code> changes colours, randomly, when clicked.</li> <li>We create a binding to the key <code>l</code> that runs an action that we know will take some time (for example, reading and parsing a huge file).</li> <li>The method <code>action_load</code> is responsible for starting our time-consuming task and then reporting back.</li> <li>To simplify things a bit, our \u201ctime-consuming task\u201d is just standing still for 5 seconds.</li> </ol> <p>I think it is easy to understand why the widget <code>ColourChanger</code> stops working when we hit the <code>time.sleep</code> call if we consider the cooking analogy I have written about before in my blog. In short, Python behaves like a lone cook in a kitchen:</p> <ul> <li>the cook can be clever and multitask. For example, while water is heating up and being brought to a boil, the cook can go ahead and chop some vegetables.</li> <li>however, there is only one cook in the kitchen, so if the cook is chopping up vegetables, they can't be seasoning a salad.</li> </ul> <p>Things like \u201cchopping up vegetables\u201d and \u201cseasoning a salad\u201d are blocking, i.e., they need the cook's time and attention. In the app that I showed above, the call to <code>time.sleep</code> is blocking, so the cook can't go and do anything else until the time interval elapses.</p>"},{"location":"blog/2022/12/07/letting-your-cook-multitask-while-bringing-water-to-a-boil/#how-can-a-cook-multitask","title":"How can a cook multitask?","text":"<p>It makes a lot of sense to think that a cook would multitask in their kitchen, but Python isn't like a smart cook. Python is like a very dumb cook who only ever does one thing at a time and waits until each thing is completely done before doing the next thing. So, by default, Python would act like a cook who fills up a pan with water, starts heating the water, and then stands there staring at the water until it starts boiling instead of doing something else. It is by using the module <code>asyncio</code> from the standard library that our cook learns to do other tasks while awaiting the completion of the things they already started doing.</p> <p>Textual is an async framework, which means it knows how to interoperate with the module <code>asyncio</code> and this will be the solution to our problem. By using <code>asyncio</code> with the tasks we want to run in the background, we will let the application remain responsive while we load and parse the data we need, or while we crunch the numbers we need to crunch, or while we connect to some slow API over the Internet, or whatever it is you want to do.</p> <p>The module <code>asyncio</code> uses the keyword <code>async</code> to know which functions can be run asynchronously. In other words, you use the keyword <code>async</code> to identify functions that contain tasks that would otherwise force the cook to waste time. (Functions with the keyword <code>async</code> are called coroutines.)</p> <p>The module <code>asyncio</code> also introduces a function <code>asyncio.create_task</code> that you can use to run coroutines concurrently. So, if we create a coroutine that is in charge of doing the time-consuming operation and then run it with <code>asyncio.create_task</code>, we are well on our way to fix our issues.</p> <p>However, the keyword <code>async</code> and <code>asyncio.create_task</code> alone aren't enough. Consider this modification of the previous app, where the method <code>action_load</code> now uses <code>asyncio.create_task</code> to run a coroutine who does the sleeping:</p> <pre><code>import asyncio\nimport time\nfrom random import randint\nfrom textual.app import App, ComposeResult\nfrom textual.color import Color\nfrom textual.containers import Grid, VerticalScroll\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Label\nclass ColourChanger(Widget):\ndef on_click(self) -&gt; None:\nself.styles.background = Color(\nrandint(1, 255),\nrandint(1, 255),\nrandint(1, 255),\n)\nclass MyApp(App[None]):\nBINDINGS = [(\"l\", \"load\", \"Load data\")]\nCSS = \"\"\"\n    Grid {\n        grid-size: 2;\n    }\n    \"\"\"\ndef compose(self) -&gt; ComposeResult:\nyield Grid(\nColourChanger(),\nVerticalScroll(id=\"log\"),\n)\nyield Footer()\ndef action_load(self) -&gt; None:  # (1)!\nasyncio.create_task(self._do_long_operation())  # (2)!\nasync def _do_long_operation(self) -&gt; None:  # (3)!\ntime.sleep(5)\nself.query_one(\"#log\").mount(Label(\"Data loaded \u2705\"))\nMyApp().run()\n</code></pre> <ol> <li>The action method <code>action_load</code> now defers the heavy lifting to another method we created.</li> <li>The time-consuming operation can be run concurrently with <code>asyncio.create_task</code> because it is a coroutine.</li> <li>The method <code>_do_long_operation</code> has the keyword <code>async</code>, so it is a coroutine.</li> </ol> <p>This modified app also works but it suffers from the same issue as the one before! The keyword <code>async</code> tells Python that there will be things inside that function that can be awaited by the cook. That is, the function will do some time-consuming operation that doesn't require the cook's attention. However, we need to tell Python which time-consuming operation doesn't require the cook's attention, i.e., which time-consuming operation can be awaited, with the keyword <code>await</code>.</p> <p>Whenever we want to use the keyword <code>await</code>, we need to do it with objects that are compatible with it. For many things, that means using specialised libraries:</p> <ul> <li>instead of <code>time.sleep</code>, one can use <code>await asyncio.sleep</code>;</li> <li>instead of the module <code>requests</code> to make Internet requests, use <code>aiohttp</code>; or</li> <li>instead of using the built-in tools to read files, use <code>aiofiles</code>.</li> </ul>"},{"location":"blog/2022/12/07/letting-your-cook-multitask-while-bringing-water-to-a-boil/#achieving-good-multitasking","title":"Achieving good multitasking","text":"<p>To fix the last example application, all we need to do is replace the call to <code>time.sleep</code> with a call to <code>asyncio.sleep</code> and then use the keyword <code>await</code> to signal Python that we can be doing something else while we sleep. The animation below shows that we can still change colours while the application is completing the time-consuming operation.</p> CodeAnimation <pre><code>import asyncio\nimport time\nfrom random import randint\nfrom textual.app import App, ComposeResult\nfrom textual.color import Color\nfrom textual.containers import Grid, VerticalScroll\nfrom textual.widget import Widget\nfrom textual.widgets import Footer, Label\nclass ColourChanger(Widget):\ndef on_click(self) -&gt; None:\nself.styles.background = Color(\nrandint(1, 255),\nrandint(1, 255),\nrandint(1, 255),\n)\nclass MyApp(App[None]):\nBINDINGS = [(\"l\", \"load\", \"Load data\")]\nCSS = \"\"\"\n    Grid {\n        grid-size: 2;\n    }\n    \"\"\"\ndef compose(self) -&gt; ComposeResult:\nyield Grid(\nColourChanger(),\nVerticalScroll(id=\"log\"),\n)\nyield Footer()\ndef action_load(self) -&gt; None:\nasyncio.create_task(self._do_long_operation())\nasync def _do_long_operation(self) -&gt; None:\nself.query_one(\"#log\").mount(Label(\"Starting \u23f3\"))  # (1)!\nawait asyncio.sleep(5)  # (2)!\nself.query_one(\"#log\").mount(Label(\"Data loaded \u2705\"))  # (3)!\nMyApp().run()\n</code></pre> <ol> <li>We create a label that tells the user that we are starting our time-consuming operation.</li> <li>We <code>await</code> the time-consuming operation so that the application remains responsive.</li> <li>We create a label that tells the user that the time-consuming operation has been concluded.</li> </ol> <p></p> <p>Because our time-consuming operation runs concurrently, everything else in the application still works while we await for the time-consuming operation to finish. In particular, we can keep changing colours (like the animation above showed) but we can also keep activating the binding with the key <code>l</code> to start multiple instances of the same time-consuming operation! The animation below shows just this:</p> <p></p> <p>Warning</p> <p>The animation GIFs in this blog post show low-quality colours in an attempt to reduce the size of the media files you have to download to be able to read this blog post. If you run Textual locally you will see beautiful colours \u2728</p>"},{"location":"blog/2022/11/24/spinners-and-progress-bars-in-textual/","title":"Spinners and progress bars in Textual","text":"<p>One of the things I love about mathematics is that you can solve a problem just by guessing the correct answer. That is a perfectly valid strategy for solving a problem. The only thing you need to do after guessing the answer is to prove that your guess is correct.</p> <p>I used this strategy, to some success, to display spinners and indeterminate progress bars from Rich in Textual.</p>"},{"location":"blog/2022/11/24/spinners-and-progress-bars-in-textual/#display-an-indeterminate-progress-bar-in-textual","title":"Display an indeterminate progress bar in Textual","text":"<p>I have been playing around with Textual and recently I decided I needed an indeterminate progress bar to show that some data was loading. Textual is likely to get progress bars in the future, but I don't want to wait for the future! I want my progress bars now! Textual builds on top of Rich, so if Rich has progress bars, I reckoned I could use them in my Textual apps.</p>"},{"location":"blog/2022/11/24/spinners-and-progress-bars-in-textual/#progress-bars-in-rich","title":"Progress bars in Rich","text":"<p>Creating a progress bar in Rich is as easy as opening up the documentation for <code>Progress</code> and copying &amp; pasting the code.</p> CodeOutput <pre><code>import time\nfrom rich.progress import track\nfor _ in track(range(20), description=\"Processing...\"):\ntime.sleep(0.5)  # Simulate work being done\n</code></pre> <p></p> <p>The function <code>track</code> provides a very convenient interface for creating progress bars that keep track of a well-specified number of steps. In the example above, we were keeping track of some task that was going to take 20 steps to complete. (For example, if we had to process a list with 20 elements.) However, I am looking for indeterminate progress bars.</p> <p>Scrolling further down the documentation for <code>rich.progress</code> I found what I was looking for:</p> CodeOutput <pre><code>import time\nfrom rich.progress import Progress\nwith Progress() as progress:\n_ = progress.add_task(\"Loading...\", total=None)  # (1)!\nwhile True:\ntime.sleep(0.01)\n</code></pre> <ol> <li>Setting <code>total=None</code> is what makes it an indeterminate progress bar.</li> </ol> <p></p> <p>So, putting an indeterminate progress bar on the screen is easy. Now, I only needed to glue that together with the little I know about Textual to put an indeterminate progress bar in a Textual app.</p>"},{"location":"blog/2022/11/24/spinners-and-progress-bars-in-textual/#guessing-what-is-what-and-what-goes-where","title":"Guessing what is what and what goes where","text":"<p>What I want is to have an indeterminate progress bar inside my Textual app. Something that looks like this:</p> <p></p> <p>The GIF above shows just the progress bar. Obviously, the end goal is to have the progress bar be part of a Textual app that does something.</p> <p>So, when I set out to do this, my first thought went to the stopwatch app in the Textual tutorial because it has a widget that updates automatically, the <code>TimeDisplay</code>. Below you can find the essential part of the code for the <code>TimeDisplay</code> widget and a small animation of it updating when the stopwatch is started.</p> <code>TimeDisplay</code> widgetOutput <pre><code>from time import monotonic\nfrom textual.reactive import reactive\nfrom textual.widgets import Static\nclass TimeDisplay(Static):\n\"\"\"A widget to display elapsed time.\"\"\"\nstart_time = reactive(monotonic)\ntime = reactive(0.0)\ntotal = reactive(0.0)\ndef on_mount(self) -&gt; None:\n\"\"\"Event handler called when widget is added to the app.\"\"\"\nself.update_timer = self.set_interval(1 / 60, self.update_time, pause=True)\ndef update_time(self) -&gt; None:\n\"\"\"Method to update time to current.\"\"\"\nself.time = self.total + (monotonic() - self.start_time)\ndef watch_time(self, time: float) -&gt; None:\n\"\"\"Called when the time attribute changes.\"\"\"\nminutes, seconds = divmod(time, 60)\nhours, minutes = divmod(minutes, 60)\nself.update(f\"{hours:02,.0f}:{minutes:02.0f}:{seconds:05.2f}\")\n</code></pre> <p></p> <p>The reason the time display updates magically is due to the three methods that I highlighted in the code above:</p> <ol> <li>The method <code>on_mount</code> is called when the <code>TimeDisplay</code> widget is mounted on the app and, in it, we use the method <code>set_interval</code> to let Textual know that every <code>1 / 60</code> seconds we would like to call the method <code>update_time</code>. (In other words, we would like <code>update_time</code> to be called 60 times per second.)</li> <li>In turn, the method <code>update_time</code> (which is called automatically a bunch of times per second) will update the reactive attribute <code>time</code>. When this attribute update happens, the method <code>watch_time</code> kicks in.</li> <li>The method <code>watch_time</code> is a watcher method and gets called whenever the attribute <code>self.time</code> is assigned to.  So, if the method <code>update_time</code> is called a bunch of times per second, the watcher method <code>watch_time</code> is also called a bunch of times per second. In it, we create a nice representation of the time that has elapsed and we use the method <code>update</code> to update the time that is being displayed.</li> </ol> <p>I thought it would be reasonable if a similar mechanism needed to be in place for my progress bar, but then I realised that the progress bar seems to update itself... Looking at the indeterminate progress bar example from before, the only thing going on was that we used <code>time.sleep</code> to stop our program for a bit. We didn't do anything to update the progress bar... Look:</p> <pre><code>with Progress() as progress:\n_ = progress.add_task(\"Loading...\", total=None)  # (1)!\nwhile True:\ntime.sleep(0.01)\n</code></pre> <p>After pondering about this for a bit, I realised I would not need a watcher method for anything. The watcher method would only make sense if I needed to update an attribute related to some sort of artificial progress, but that clearly isn't needed to get the bar going...</p> <p>At some point, I realised that the object <code>progress</code> is the object of interest. At first, I thought <code>progress.add_task</code> would return the progress bar, but it actually returns the integer ID of the task added, so the object of interest is <code>progress</code>. Because I am doing nothing to update the bar explicitly, the object <code>progress</code> must be updating itself.</p> <p>The Textual documentation also says that we can build widgets from Rich renderables, so I concluded that if <code>Progress</code> were a renderable, then I could inherit from <code>Static</code> and use the method <code>update</code> to update the widget with my instance of <code>Progress</code> directly. I gave it a try and I put together this code:</p> <pre><code>from rich.progress import Progress, BarColumn\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass IndeterminateProgress(Static):\ndef __init__(self):\nsuper().__init__(\"\")\nself._bar = Progress(BarColumn())  # (1)!\nself._bar.add_task(\"\", total=None)  # (2)!\ndef on_mount(self) -&gt; None:\n# When the widget is mounted start updating the display regularly.\nself.update_render = self.set_interval(\n1 / 60, self.update_progress_bar\n)  # (3)!\ndef update_progress_bar(self) -&gt; None:\nself.update(self._bar)  # (4)!\nclass MyApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield IndeterminateProgress()\nif __name__ == \"__main__\":\napp = MyApp()\napp.run()\n</code></pre> <ol> <li>Create an instance of <code>Progress</code> that just cares about the bar itself (Rich progress bars can have a label, an indicator for the time left, etc).</li> <li>We add the indeterminate task with <code>total=None</code> for the indeterminate progress bar.</li> <li>When the widget is mounted on the app, we want to start calling <code>update_progress_bar</code> 60 times per second.</li> <li>To update the widget of the progress bar we just call the method <code>Static.update</code> with the <code>Progress</code> object because <code>self._bar</code> is a Rich renderable.</li> </ol> <p>And lo and behold, it worked:</p> <p></p>"},{"location":"blog/2022/11/24/spinners-and-progress-bars-in-textual/#proving-it-works","title":"Proving it works","text":"<p>I finished writing this piece of code and I was ecstatic because it was working! After all, my Textual app starts and renders the progress bar. And so, I shared this simple app with someone who wanted to do a similar thing, but I was left with a bad taste in my mouth because I couldn't really connect all the dots and explain exactly why it worked.</p> <p>Plot twist</p> <p>By the end of the blog post, I will be much closer to a full explanation!</p>"},{"location":"blog/2022/11/24/spinners-and-progress-bars-in-textual/#display-a-rich-spinner-in-a-textual-app","title":"Display a Rich spinner in a Textual app","text":"<p>A day after creating my basic <code>IndeterminateProgress</code> widget, I found someone that was trying to display a Rich spinner in a Textual app. Actually, it was someone that had filed an issue against Rich. They didn't ask \u201chow can I display a Rich spinner in a Textual app?\u201d, but they filed an alleged bug that crept up on them when they tried displaying a spinner in a Textual app.</p> <p>When reading the issue I realised that displaying a Rich spinner looked very similar to displaying a Rich progress bar, so I made a tiny change to my code and tried to run it:</p> CodeSpinner running <pre><code>from rich.spinner import Spinner\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass SpinnerWidget(Static):\ndef __init__(self):\nsuper().__init__(\"\")\nself._spinner = Spinner(\"moon\")  # (1)!\ndef on_mount(self) -&gt; None:\nself.update_render = self.set_interval(1 / 60, self.update_spinner)\ndef update_spinner(self) -&gt; None:\nself.update(self._spinner)\nclass MyApp(App[None]):\ndef compose(self) -&gt; ComposeResult:\nyield SpinnerWidget()\nMyApp().run()\n</code></pre> <ol> <li>Instead of creating an instance of <code>Progress</code>, we create an instance of <code>Spinner</code> and save it so we can call <code>self.update(self._spinner)</code> later on.</li> </ol> <p></p>"},{"location":"blog/2022/11/24/spinners-and-progress-bars-in-textual/#losing-the-battle-against-pausing-the-animations","title":"Losing the battle against pausing the animations","text":"<p>After creating the progress bar and spinner widgets I thought of creating the little display that was shown at the beginning of the blog post:</p> <p></p> <p>When writing the code for this app, I realised both widgets had a lot of shared code and logic and I tried abstracting away their common functionality. That led to the code shown below (more or less) where I implemented the updating functionality in <code>IntervalUpdater</code> and then let the <code>IndeterminateProgressBar</code> and <code>SpinnerWidget</code> instantiate the correct Rich renderable.</p> <pre><code>from rich.progress import Progress, BarColumn\nfrom rich.spinner import Spinner\nfrom textual.app import RenderableType\nfrom textual.widgets import Button, Static\nclass IntervalUpdater(Static):\n_renderable_object: RenderableType  # (1)!\ndef update_rendering(self) -&gt; None:  # (2)!\nself.update(self._renderable_object)\ndef on_mount(self) -&gt; None:  # (3)!\nself.interval_update = self.set_interval(1 / 60, self.update_rendering)\nclass IndeterminateProgressBar(IntervalUpdater):\n\"\"\"Basic indeterminate progress bar widget based on rich.progress.Progress.\"\"\"\ndef __init__(self) -&gt; None:\nsuper().__init__(\"\")\nself._renderable_object = Progress(BarColumn())  # (4)!\nself._renderable_object.add_task(\"\", total=None)\nclass SpinnerWidget(IntervalUpdater):\n\"\"\"Basic spinner widget based on rich.spinner.Spinner.\"\"\"\ndef __init__(self, style: str) -&gt; None:\nsuper().__init__(\"\")\nself._renderable_object = Spinner(style)  # (5)!\n</code></pre> <ol> <li>Instances of <code>IntervalUpdate</code> should set the attribute <code>_renderable_object</code> to the instance of the Rich renderable that we want to animate.</li> <li>The methods <code>update_rendering</code> and <code>on_mount</code> are exactly the same as what we had before, both in the progress bar widget and in the spinner widget.</li> <li>The methods <code>update_rendering</code> and <code>on_mount</code> are exactly the same as what we had before, both in the progress bar widget and in the spinner widget.</li> <li>For an indeterminate progress bar we set the attribute <code>_renderable_object</code> to an instance of <code>Progress</code>.</li> <li>For a spinner we set the attribute <code>_renderable_object</code> to an instance of <code>Spinner</code>.</li> </ol> <p>But I wanted something more! I wanted to make my app similar to the stopwatch app from the terminal and thus wanted to add a \u201cPause\u201d and a \u201cResume\u201d button. These buttons should, respectively, stop the progress bar and the spinner animations and resume them.</p> <p>Below you can see the code I wrote and a short animation of the app working.</p> App codeCSSOutput <pre><code>from rich.progress import Progress, BarColumn\nfrom rich.spinner import Spinner\nfrom textual.app import App, ComposeResult, RenderableType\nfrom textual.containers import Grid, Horizontal, Vertical\nfrom textual.widgets import Button, Static\nclass IntervalUpdater(Static):\n_renderable_object: RenderableType\ndef update_rendering(self) -&gt; None:\nself.update(self._renderable_object)\ndef on_mount(self) -&gt; None:\nself.interval_update = self.set_interval(1 / 60, self.update_rendering)\ndef pause(self) -&gt; None:  # (1)!\nself.interval_update.pause()\ndef resume(self) -&gt; None:  # (2)!\nself.interval_update.resume()\nclass IndeterminateProgressBar(IntervalUpdater):\n\"\"\"Basic indeterminate progress bar widget based on rich.progress.Progress.\"\"\"\ndef __init__(self) -&gt; None:\nsuper().__init__(\"\")\nself._renderable_object = Progress(BarColumn())\nself._renderable_object.add_task(\"\", total=None)\nclass SpinnerWidget(IntervalUpdater):\n\"\"\"Basic spinner widget based on rich.spinner.Spinner.\"\"\"\ndef __init__(self, style: str) -&gt; None:\nsuper().__init__(\"\")\nself._renderable_object = Spinner(style)\nclass LiveDisplayApp(App[None]):\n\"\"\"App showcasing some widgets that update regularly.\"\"\"\nCSS_PATH = \"myapp.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Vertical(\nGrid(\nSpinnerWidget(\"moon\"),\nIndeterminateProgressBar(),\nSpinnerWidget(\"aesthetic\"),\nSpinnerWidget(\"bouncingBar\"),\nSpinnerWidget(\"earth\"),\nSpinnerWidget(\"dots8Bit\"),\n),\nHorizontal(\nButton(\"Pause\", id=\"pause\"),  # (3)!\nButton(\"Resume\", id=\"resume\", disabled=True),\n),\n)\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:  # (4)!\npressed_id = event.button.id\nassert pressed_id is not None\nfor widget in self.query(IntervalUpdater):\ngetattr(widget, pressed_id)()  # (5)!\nfor button in self.query(Button):  # (6)!\nif button.id == pressed_id:\nbutton.disabled = True\nelse:\nbutton.disabled = False\nLiveDisplayApp().run()\n</code></pre> <ol> <li>The method <code>pause</code> looks at the attribute <code>interval_update</code> (returned by the method <code>set_interval</code>) and tells it to stop calling the method <code>update_rendering</code> 60 times per second.</li> <li>The method <code>resume</code> looks at the attribute <code>interval_update</code> (returned by the method <code>set_interval</code>) and tells it to resume calling the method <code>update_rendering</code> 60 times per second.</li> <li>We set two distinct IDs for the two buttons so we can easily tell which button was pressed and what the press of that button means.</li> <li>The event handler <code>on_button_pressed</code> will wait for button presses and will take care of pausing or resuming the animations.</li> <li>We look for all of the instances of <code>IntervalUpdater</code> in our app and use a little bit of introspection to call the correct method (<code>pause</code> or <code>resume</code>) in our widgets. Notice this was only possible because the buttons were assigned IDs that matched the names of the methods. (I love Python !)</li> <li>We go through our two buttons to disable the one that was just pressed and to enable the other one.</li> </ol> <pre><code>Screen {\nalign: center middle;\n}\nHorizontal {\nheight: 1fr;\nalign-horizontal: center;\n}\nButton {\nmargin: 0 3 0 3;\n}\nGrid {\nheight: 4fr;\nalign: center middle;\ngrid-size: 3 2;\ngrid-columns: 8;\ngrid-rows: 1;\ngrid-gutter: 1;\nborder: gray double;\n}\nIntervalUpdater {\ncontent-align: center middle;\n}\n</code></pre> <p></p> <p>If you think this was a lot, take a couple of deep breaths before moving on.</p> <p>The only issue with my app is that... it does not work! If you press the button to pause the animations, it looks like the widgets are paused. However, you can see that if I move my mouse over the paused widgets, they update:</p> <p></p> <p>Obviously, that caught me by surprise, in the sense that I expected it work. On the other hand, this isn't surprising. After all, I thought I had guessed how I could solve the problem of displaying these Rich renderables that update live and I thought I knew how to pause and resume their animations, but I hadn't convinced myself I knew exactly why it worked.</p> <p>Warning</p> <p>This goes to show that sometimes it is not the best idea to commit code that you wrote and that works if you don't know why it works. The code might seem to work and yet have deficiencies that will hurt you further down the road.</p> <p>As it turns out, the reason why pausing is not working is that I did not grok why the rendering worked in the first place... So I had to go down that rabbit hole first.</p>"},{"location":"blog/2022/11/24/spinners-and-progress-bars-in-textual/#understanding-the-rich-rendering-magic","title":"Understanding the Rich rendering magic","text":""},{"location":"blog/2022/11/24/spinners-and-progress-bars-in-textual/#how-staticupdate-works","title":"How <code>Static.update</code> works","text":"<p>The most basic way of creating a Textual widget is to inherit from <code>Widget</code> and implement the method <code>render</code> that just returns the thing that must be printed on the screen. Then, the widget <code>Static</code> provides some functionality on top of that: the method <code>update</code>.</p> <p>The method <code>Static.update(renderable)</code> is used to tell the widget in question that its method <code>render</code> (called when the widget needs to be drawn) should just return <code>renderable</code>. So, if the implementation of the method <code>IntervalUpdater.update_rendering</code> (the method that gets called 60 times per second) is this:</p> <pre><code>class IntervalUpdater(Static):\n# ...\ndef update_rendering(self) -&gt; None:\nself.update(self._renderable_object)\n</code></pre> <p>Then, we are essentially saying \u201chey, the thing in <code>self._renderable_object</code> is what must be returned whenever Textual asks you to render yourself. So, this really proves that both <code>Progress</code> and <code>Spinner</code> from Rich are renderables. But what is more, this shows that my implementation of <code>IntervalUpdater</code> can be simplified greatly! In fact, we can boil it down to just this:</p> <pre><code>class IntervalUpdater(Static):\n_renderable_object: RenderableType\ndef __init__(self, renderable_object: RenderableType) -&gt; None:  # (1)!\nsuper().__init__(renderable_object)  # (2)!\ndef on_mount(self) -&gt; None:\nself.interval_update = self.set_interval(1 / 60, self.refresh)  # (3)!\n</code></pre> <ol> <li>To create an instance of <code>IntervalUpdater</code>, now we give it the Rich renderable that we want displayed. If this Rich renderable is something that updates over time, then those changes will be reflected in the rendering.</li> <li>We initialise <code>Static</code> with the renderable object itself, instead of initialising with the empty string <code>\"\"</code> and then updating repeatedly.</li> <li>We call <code>self.refresh</code> 60 times per second. We don't need the auxiliary method <code>update_rendering</code> because this widget (an instance of <code>Static</code>) already knows what its renderable is.</li> </ol> <p>Once you understand the code above you will realise that the previous implementation of <code>update_rendering</code> was actually doing superfluous work because the repeated calls to <code>self.update</code> always had the exact same object. Again, we see strong evidence that the Rich progress bars and the spinners have the inherent ability to display a different representation of themselves as time goes by.</p>"},{"location":"blog/2022/11/24/spinners-and-progress-bars-in-textual/#how-rich-spinners-get-updated","title":"How Rich spinners get updated","text":"<p>I kept seeing strong evidence that Rich spinners and Rich progress bars updated their own rendering but I still did not have actual proof. So, I went digging around to see how <code>Spinner</code> was implemented and I found this code (from the file <code>spinner.py</code> at the time of writing):</p> <pre><code>class Spinner:\n# ...\ndef __rich_console__(\nself, console: \"Console\", options: \"ConsoleOptions\"\n) -&gt; \"RenderResult\":\nyield self.render(console.get_time())  # (1)!\n# ...\ndef render(self, time: float) -&gt; \"RenderableType\":  # (2)!\n# ...\nframe_no = ((time - self.start_time) * self.speed) / (  # (3)!\nself.interval / 1000.0\n) + self.frame_no_offset\n# ...\n# ...\n</code></pre> <ol> <li>The Rich spinner implements the function <code>__rich_console__</code> that is supposed to return the result of rendering the spinner. Instead, it defers its work to the method <code>render</code>... However, to call the method <code>render</code>, we need to pass the argument <code>console.get_time()</code>, which the spinner uses to know in which state it is!</li> <li>The method <code>render</code> takes a <code>time</code> and returns a renderable!</li> <li>To determine the frame number (the current look of the spinner) we do some calculations with the \u201ccurrent time\u201d, given by the parameter <code>time</code>, and the time when the spinner started!</li> </ol> <p>The snippet of code shown above, from the implementation of <code>Spinner</code>, explains why moving the mouse over a spinner (or a progress bar) that supposedly was paused makes it move. We no longer get repeated updates (60 times per second) because we told our app that we wanted to pause the result of <code>set_interval</code>, so we no longer get automatic updates. However, moving the mouse over the spinners and the progress bar makes Textual want to re-render them and, when it does, it figures out that time was not frozen (obviously!) and so the spinners and the progress bar have a different frame to show.</p> <p>To get a better feeling for this, do the following experiment:</p> <ol> <li>Run the command <code>textual console</code> in a terminal to open the Textual devtools console.</li> <li>Add a print statement like <code>print(\"Rendering from within spinner\")</code> to the beginning of the method <code>Spinner.render</code> (from Rich).</li> <li>Add a print statement like <code>print(\"Rendering static\")</code> to the beginning of the method <code>Static.render</code> (from Textual).</li> <li>Put a blank terminal and the devtools console side by side.</li> <li>Run the app: notice that you get a lot of both print statements.</li> <li>Hit the Pause button: the print statements stop.</li> <li>Move your mouse over a widget or two: you get a couple of print statements, one from the <code>Static.render</code> and another from the <code>Spinner.render</code>.</li> </ol> <p>The result of steps 6 and 7 are shown below. Notice that, in the beginning of the animation, the screen on the right shows some prints but is quiet because no more prints are coming in. When the mouse enters the screen and starts going over widgets, the screen on the right gets new prints in pairs, first from <code>Static.render</code> (which Textual calls to render the widget) and then from <code>Spinner.render</code> because ultimately we need to know how the Spinner looks.</p> <p></p> <p>Now, at this point, I made another educated guess and deduced that progress bars work in the same way! I still have to prove it, and I guess I will do so in another blog post, coming soon, where our spinner and progress bar widgets can be properly paused!</p> <p>I will see you soon </p>"},{"location":"blog/2022/11/20/stealing-open-source-code-from-textual/","title":"Stealing Open Source code from Textual","text":"<p>I would like to talk about a serious issue in the Free and Open Source software world. Stealing code. You wouldn't steal a car would you?</p> <p>But you should steal code from Open Source projects. Respect the license (you may need to give attribution) but stealing code is not like stealing a car. If I steal your car, I have deprived you of a car. If you steal my open source code, I haven't lost anything.</p> <p>Warning</p> <p>I'm not advocating for piracy. Open source code gives you explicit permission to use it.</p> <p>From my point of view, I feel like code has greater value when it has been copied / modified in another project.</p> <p>There are a number of files and modules in Textual that could either be lifted as is, or wouldn't require much work to extract. I'd like to cover a few here. You might find them useful in your next project.</p>"},{"location":"blog/2022/11/20/stealing-open-source-code-from-textual/#loop-first-last","title":"Loop first / last","text":"<p>How often do you find yourself looping over an iterable and needing to know if an element is the first and/or last in the sequence? It's a simple thing, but I find myself nedding this a lot, so I wrote some helpers in _loop.py. </p> <p>I'm sure there is an equivalent implementation on PyPI, but steal this if you need it.</p> <p>Here's an example of use:</p> <pre><code>for last, (y, line) in loop_last(enumerate(self.lines, self.region.y)):\nyield move_to(x, y)\nyield from line\nif not last:\nyield new_line\n</code></pre>"},{"location":"blog/2022/11/20/stealing-open-source-code-from-textual/#lru-cache","title":"LRU Cache","text":"<p>Python's lru_cache can be the one-liner that makes your code orders of magnitude faster. But it has a few gotchas.</p> <p>The main issue is managing the lifetime of these caches. The decorator keeps a single global cache, which will keep a reference to every object in the function call. On an instance method that means you keep references to <code>self</code> for the lifetime of your app.</p> <p>For a more flexibility you can use the LRUCache implementation from Textual. This uses essentially the same algorithm as the stdlib decorator, but it is implemented as a container.</p> <p>Here's a quick example of its use. It works like a dictionary until you reach a maximum size. After that, new elements will kick out the element that was used least recently.</p> <pre><code>&gt;&gt;&gt; from textual._cache import LRUCache\n&gt;&gt;&gt; cache = LRUCache(maxsize=3)\n&gt;&gt;&gt; cache[\"foo\"] = 1\n&gt;&gt;&gt; cache[\"bar\"] = 2\n&gt;&gt;&gt; cache[\"baz\"] = 3\n&gt;&gt;&gt; dict(cache)\n{'foo': 1, 'bar': 2, 'baz': 3}\n&gt;&gt;&gt; cache[\"egg\"] = 4\n&gt;&gt;&gt; dict(cache)\n{'bar': 2, 'baz': 3, 'egg': 4}\n</code></pre> <p>In Textual, we use a LRUCache to store the results of rendering content to the terminal. For example, in a datatable it is too costly to render everything up front. So Textual renders only the lines that are currently visible on the \"screen\". The cache ensures that scrolling only needs to render the newly exposed lines, and lines that haven't been displayed in a while are discarded to save memory.</p>"},{"location":"blog/2022/11/20/stealing-open-source-code-from-textual/#color","title":"Color","text":"<p>Textual has a Color class which could be extracted in to a module of its own. </p> <p>The Color class can parse colors encoded in a variety of HTML and CSS formats. Color object support a variety of methods and operators you can use to manipulate colors, in a fairly natural way.</p> <p>Here's some examples in the REPL.</p> <pre><code>&gt;&gt;&gt; from textual.color import Color\n&gt;&gt;&gt; color = Color.parse(\"lime\")\n&gt;&gt;&gt; color\nColor(0, 255, 0, a=1.0)\n&gt;&gt;&gt; color.darken(0.8)\nColor(0, 45, 0, a=1.0)\n&gt;&gt;&gt; color + Color.parse(\"red\").with_alpha(0.1)\nColor(25, 229, 0, a=1.0)\n&gt;&gt;&gt; color = Color.parse(\"#12a30a\")\n&gt;&gt;&gt; color\nColor(18, 163, 10, a=1.0)\n&gt;&gt;&gt; color.css\n'rgb(18,163,10)'\n&gt;&gt;&gt; color.hex\n'#12A30A'\n&gt;&gt;&gt; color.monochrome\nColor(121, 121, 121, a=1.0)\n&gt;&gt;&gt; color.monochrome.hex\n'#797979'\n&gt;&gt;&gt; color.hsl\nHSL(h=0.3246187363834423, s=0.8843930635838151, l=0.33921568627450976)\n&gt;&gt;&gt;\n</code></pre> <p>There are some very good color libraries in PyPI, which you should also consider using. But Textual's Color class is lean and performant, with no C dependencies.</p>"},{"location":"blog/2022/11/20/stealing-open-source-code-from-textual/#geometry","title":"Geometry","text":"<p>This may be my favorite module in Textual: geometry.py.</p> <p>The geometry module contains a number of classes responsible for storing and manipulating 2D geometry. There is an <code>Offset</code> class which is a two dimensional point. A <code>Region</code> class which is a rectangular region defined by a coordinate and dimensions. There is a <code>Spacing</code> class which defines additional space around a region. And there is a <code>Size</code> class which defines the dimensions of an area by its width and height.</p> <p>These objects are used by Textual's layout engine and compositor, which makes them the oldest and most thoroughly tested part of the project.</p> <p>There's a lot going on in this module, but the docstrings are quite detailed and have unicode art like this to help explain things.</p> <pre><code>              cut_x \u2193\n          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2510\n          \u2502        \u2502 \u2502   \u2502\n          \u2502    0   \u2502 \u2502 1 \u2502\n          \u2502        \u2502 \u2502   \u2502\n  cut_y \u2192 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518\n          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2510\n          \u2502    2   \u2502 \u2502 3 \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"blog/2022/11/20/stealing-open-source-code-from-textual/#you-should-steal-our-code","title":"You should steal our code","text":"<p>There is a lot going on in the Textual Repository. Including a CSS parser, renderer, layout and compositing engine. All written in pure Python. Steal it with my blessing.</p>"},{"location":"css_types/","title":"CSS Types","text":"<p>CSS types define the values that Textual CSS styles accept.</p> <p>CSS types will be linked from within the styles reference in the \"Formal Syntax\" section of each style. The CSS types will be denoted by a keyword enclosed by angle brackets <code>&lt;</code> and <code>&gt;</code>.</p> <p>For example, the style <code>align-horizontal</code> references the CSS type <code>&lt;horizontal&gt;</code>:</p> <pre>\nalign-horizontal: &lt;horizontal&gt;;\n</pre>"},{"location":"css_types/border/","title":"&lt;border&gt;","text":"<p>The <code>&lt;border&gt;</code> CSS type represents a border style.</p>"},{"location":"css_types/border/#syntax","title":"Syntax","text":"<p>The <code>&lt;border&gt;</code> type can take any of the following values:</p> Border type Description <code>ascii</code> A border with plus, hyphen, and vertical bar characters. <code>blank</code> A blank border (reserves space for a border). <code>dashed</code> Dashed line border. <code>double</code> Double lined border. <code>heavy</code> Heavy border. <code>hidden</code> Alias for \"none\". <code>hkey</code> Horizontal key-line border. <code>inner</code> Thick solid border. <code>none</code> Disabled border. <code>outer</code> Solid border with additional space around content. <code>round</code> Rounded corners. <code>solid</code> Solid border. <code>tall</code> Solid border with additional space top and bottom. <code>vkey</code> Vertical key-line border. <code>wide</code> Solid border with additional space left and right."},{"location":"css_types/border/#border-command","title":"Border command","text":"<p>The <code>textual</code> CLI has a subcommand which will let you explore the various border types interactively, when applied to the CSS rule <code>border</code>:</p> <pre><code>textual borders\n</code></pre>"},{"location":"css_types/border/#examples","title":"Examples","text":""},{"location":"css_types/border/#css","title":"CSS","text":"<pre><code>#container {\nborder: heavy red;\n}\n#heading {\nborder-bottom: solid blue;\n}\n</code></pre>"},{"location":"css_types/border/#python","title":"Python","text":"<pre><code>widget.styles.border = (\"heavy\", \"red\")\nwidget.styles.border_bottom = (\"solid\", \"blue\")\n</code></pre>"},{"location":"css_types/color/","title":"&lt;color&gt;","text":"<p>The <code>&lt;color&gt;</code> CSS type represents a color.</p> <p>Warning</p> <p>Not to be confused with the <code>color</code> CSS rule to set text color.</p>"},{"location":"css_types/color/#syntax","title":"Syntax","text":"<p>A <code>&lt;color&gt;</code> should be in one of the formats explained in this section. A bullet point summary of the formats available follows:</p> <ul> <li>a recognised named color (e.g., <code>red</code>);</li> <li>a 3 or 6 hexadecimal digit number representing the RGB values of the color (e.g., <code>#F35573</code>);</li> <li>a 4 or 8 hexadecimal digit number representing the RGBA values of the color (e.g., <code>#F35573A0</code>);</li> <li>a color description in the RGB system, with or without transparency (e.g., <code>rgb(23, 78, 200)</code>);</li> <li>a color description in the HSL system, with or without transparency (e.g., <code>hsl(290, 70%, 80%)</code>);</li> </ul> <p>Textual's default themes also provide many CSS variables with colors that can be used out of the box.</p>"},{"location":"css_types/color/#named-colors","title":"Named colors","text":"<p>A named color is a <code>&lt;name&gt;</code> that Textual recognises. Below, you can find a (collapsed) list of all of the named colors that Textual recognises, along with their hexadecimal values, their RGB values, and a visual sample.</p> All named colors available. colors \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503hex\u00a0\u00a0\u00a0\u00a0\u2503RGB\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503Color\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502\"aliceblue\"\u2502#F0F8FF\u2502rgb(240,\u00a0248,\u00a0255)\u2502\u2502 \u2502\"ansi_black\"\u2502#000000\u2502rgb(0,\u00a00,\u00a00)\u2502\u2502 \u2502\"ansi_blue\"\u2502#000080\u2502rgb(0,\u00a00,\u00a0128)\u2502\u2502 \u2502\"ansi_bright_black\"\u2502#808080\u2502rgb(128,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"ansi_bright_blue\"\u2502#0000FF\u2502rgb(0,\u00a00,\u00a0255)\u2502\u2502 \u2502\"ansi_bright_cyan\"\u2502#00FFFF\u2502rgb(0,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"ansi_bright_green\"\u2502#00FF00\u2502rgb(0,\u00a0255,\u00a00)\u2502\u2502 \u2502\"ansi_bright_magenta\"\u2502#FF00FF\u2502rgb(255,\u00a00,\u00a0255)\u2502\u2502 \u2502\"ansi_bright_red\"\u2502#FF0000\u2502rgb(255,\u00a00,\u00a00)\u2502\u2502 \u2502\"ansi_bright_white\"\u2502#FFFFFF\u2502rgb(255,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"ansi_bright_yellow\"\u2502#FFFF00\u2502rgb(255,\u00a0255,\u00a00)\u2502\u2502 \u2502\"ansi_cyan\"\u2502#008080\u2502rgb(0,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"ansi_green\"\u2502#008000\u2502rgb(0,\u00a0128,\u00a00)\u2502\u2502 \u2502\"ansi_magenta\"\u2502#800080\u2502rgb(128,\u00a00,\u00a0128)\u2502\u2502 \u2502\"ansi_red\"\u2502#800000\u2502rgb(128,\u00a00,\u00a00)\u2502\u2502 \u2502\"ansi_white\"\u2502#C0C0C0\u2502rgb(192,\u00a0192,\u00a0192)\u2502\u2502 \u2502\"ansi_yellow\"\u2502#808000\u2502rgb(128,\u00a0128,\u00a00)\u2502\u2502 \u2502\"antiquewhite\"\u2502#FAEBD7\u2502rgb(250,\u00a0235,\u00a0215)\u2502\u2502 \u2502\"aqua\"\u2502#00FFFF\u2502rgb(0,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"aquamarine\"\u2502#7FFFD4\u2502rgb(127,\u00a0255,\u00a0212)\u2502\u2502 \u2502\"azure\"\u2502#F0FFFF\u2502rgb(240,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"beige\"\u2502#F5F5DC\u2502rgb(245,\u00a0245,\u00a0220)\u2502\u2502 \u2502\"bisque\"\u2502#FFE4C4\u2502rgb(255,\u00a0228,\u00a0196)\u2502\u2502 \u2502\"black\"\u2502#000000\u2502rgb(0,\u00a00,\u00a00)\u2502\u2502 \u2502\"blanchedalmond\"\u2502#FFEBCD\u2502rgb(255,\u00a0235,\u00a0205)\u2502\u2502 \u2502\"blue\"\u2502#0000FF\u2502rgb(0,\u00a00,\u00a0255)\u2502\u2502 \u2502\"blueviolet\"\u2502#8A2BE2\u2502rgb(138,\u00a043,\u00a0226)\u2502\u2502 \u2502\"brown\"\u2502#A52A2A\u2502rgb(165,\u00a042,\u00a042)\u2502\u2502 \u2502\"burlywood\"\u2502#DEB887\u2502rgb(222,\u00a0184,\u00a0135)\u2502\u2502 \u2502\"cadetblue\"\u2502#5F9EA0\u2502rgb(95,\u00a0158,\u00a0160)\u2502\u2502 \u2502\"chartreuse\"\u2502#7FFF00\u2502rgb(127,\u00a0255,\u00a00)\u2502\u2502 \u2502\"chocolate\"\u2502#D2691E\u2502rgb(210,\u00a0105,\u00a030)\u2502\u2502 \u2502\"coral\"\u2502#FF7F50\u2502rgb(255,\u00a0127,\u00a080)\u2502\u2502 \u2502\"cornflowerblue\"\u2502#6495ED\u2502rgb(100,\u00a0149,\u00a0237)\u2502\u2502 \u2502\"cornsilk\"\u2502#FFF8DC\u2502rgb(255,\u00a0248,\u00a0220)\u2502\u2502 \u2502\"crimson\"\u2502#DC143C\u2502rgb(220,\u00a020,\u00a060)\u2502\u2502 \u2502\"cyan\"\u2502#00FFFF\u2502rgb(0,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"darkblue\"\u2502#00008B\u2502rgb(0,\u00a00,\u00a0139)\u2502\u2502 \u2502\"darkcyan\"\u2502#008B8B\u2502rgb(0,\u00a0139,\u00a0139)\u2502\u2502 \u2502\"darkgoldenrod\"\u2502#B8860B\u2502rgb(184,\u00a0134,\u00a011)\u2502\u2502 \u2502\"darkgray\"\u2502#A9A9A9\u2502rgb(169,\u00a0169,\u00a0169)\u2502\u2502 \u2502\"darkgreen\"\u2502#006400\u2502rgb(0,\u00a0100,\u00a00)\u2502\u2502 \u2502\"darkgrey\"\u2502#A9A9A9\u2502rgb(169,\u00a0169,\u00a0169)\u2502\u2502 \u2502\"darkkhaki\"\u2502#BDB76B\u2502rgb(189,\u00a0183,\u00a0107)\u2502\u2502 \u2502\"darkmagenta\"\u2502#8B008B\u2502rgb(139,\u00a00,\u00a0139)\u2502\u2502 \u2502\"darkolivegreen\"\u2502#556B2F\u2502rgb(85,\u00a0107,\u00a047)\u2502\u2502 \u2502\"darkorange\"\u2502#FF8C00\u2502rgb(255,\u00a0140,\u00a00)\u2502\u2502 \u2502\"darkorchid\"\u2502#9932CC\u2502rgb(153,\u00a050,\u00a0204)\u2502\u2502 \u2502\"darkred\"\u2502#8B0000\u2502rgb(139,\u00a00,\u00a00)\u2502\u2502 \u2502\"darksalmon\"\u2502#E9967A\u2502rgb(233,\u00a0150,\u00a0122)\u2502\u2502 \u2502\"darkseagreen\"\u2502#8FBC8F\u2502rgb(143,\u00a0188,\u00a0143)\u2502\u2502 \u2502\"darkslateblue\"\u2502#483D8B\u2502rgb(72,\u00a061,\u00a0139)\u2502\u2502 \u2502\"darkslategray\"\u2502#2F4F4F\u2502rgb(47,\u00a079,\u00a079)\u2502\u2502 \u2502\"darkslategrey\"\u2502#2F4F4F\u2502rgb(47,\u00a079,\u00a079)\u2502\u2502 \u2502\"darkturquoise\"\u2502#00CED1\u2502rgb(0,\u00a0206,\u00a0209)\u2502\u2502 \u2502\"darkviolet\"\u2502#9400D3\u2502rgb(148,\u00a00,\u00a0211)\u2502\u2502 \u2502\"deeppink\"\u2502#FF1493\u2502rgb(255,\u00a020,\u00a0147)\u2502\u2502 \u2502\"deepskyblue\"\u2502#00BFFF\u2502rgb(0,\u00a0191,\u00a0255)\u2502\u2502 \u2502\"dimgray\"\u2502#696969\u2502rgb(105,\u00a0105,\u00a0105)\u2502\u2502 \u2502\"dimgrey\"\u2502#696969\u2502rgb(105,\u00a0105,\u00a0105)\u2502\u2502 \u2502\"dodgerblue\"\u2502#1E90FF\u2502rgb(30,\u00a0144,\u00a0255)\u2502\u2502 \u2502\"firebrick\"\u2502#B22222\u2502rgb(178,\u00a034,\u00a034)\u2502\u2502 \u2502\"floralwhite\"\u2502#FFFAF0\u2502rgb(255,\u00a0250,\u00a0240)\u2502\u2502 \u2502\"forestgreen\"\u2502#228B22\u2502rgb(34,\u00a0139,\u00a034)\u2502\u2502 \u2502\"fuchsia\"\u2502#FF00FF\u2502rgb(255,\u00a00,\u00a0255)\u2502\u2502 \u2502\"gainsboro\"\u2502#DCDCDC\u2502rgb(220,\u00a0220,\u00a0220)\u2502\u2502 \u2502\"ghostwhite\"\u2502#F8F8FF\u2502rgb(248,\u00a0248,\u00a0255)\u2502\u2502 \u2502\"gold\"\u2502#FFD700\u2502rgb(255,\u00a0215,\u00a00)\u2502\u2502 \u2502\"goldenrod\"\u2502#DAA520\u2502rgb(218,\u00a0165,\u00a032)\u2502\u2502 \u2502\"gray\"\u2502#808080\u2502rgb(128,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"green\"\u2502#008000\u2502rgb(0,\u00a0128,\u00a00)\u2502\u2502 \u2502\"greenyellow\"\u2502#ADFF2F\u2502rgb(173,\u00a0255,\u00a047)\u2502\u2502 \u2502\"grey\"\u2502#808080\u2502rgb(128,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"honeydew\"\u2502#F0FFF0\u2502rgb(240,\u00a0255,\u00a0240)\u2502\u2502 \u2502\"hotpink\"\u2502#FF69B4\u2502rgb(255,\u00a0105,\u00a0180)\u2502\u2502 \u2502\"indianred\"\u2502#CD5C5C\u2502rgb(205,\u00a092,\u00a092)\u2502\u2502 \u2502\"indigo\"\u2502#4B0082\u2502rgb(75,\u00a00,\u00a0130)\u2502\u2502 \u2502\"ivory\"\u2502#FFFFF0\u2502rgb(255,\u00a0255,\u00a0240)\u2502\u2502 \u2502\"khaki\"\u2502#F0E68C\u2502rgb(240,\u00a0230,\u00a0140)\u2502\u2502 \u2502\"lavender\"\u2502#E6E6FA\u2502rgb(230,\u00a0230,\u00a0250)\u2502\u2502 \u2502\"lavenderblush\"\u2502#FFF0F5\u2502rgb(255,\u00a0240,\u00a0245)\u2502\u2502 \u2502\"lawngreen\"\u2502#7CFC00\u2502rgb(124,\u00a0252,\u00a00)\u2502\u2502 \u2502\"lemonchiffon\"\u2502#FFFACD\u2502rgb(255,\u00a0250,\u00a0205)\u2502\u2502 \u2502\"lightblue\"\u2502#ADD8E6\u2502rgb(173,\u00a0216,\u00a0230)\u2502\u2502 \u2502\"lightcoral\"\u2502#F08080\u2502rgb(240,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"lightcyan\"\u2502#E0FFFF\u2502rgb(224,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"lightgoldenrodyellow\"\u2502#FAFAD2\u2502rgb(250,\u00a0250,\u00a0210)\u2502\u2502 \u2502\"lightgray\"\u2502#D3D3D3\u2502rgb(211,\u00a0211,\u00a0211)\u2502\u2502 \u2502\"lightgreen\"\u2502#90EE90\u2502rgb(144,\u00a0238,\u00a0144)\u2502\u2502 \u2502\"lightgrey\"\u2502#D3D3D3\u2502rgb(211,\u00a0211,\u00a0211)\u2502\u2502 \u2502\"lightpink\"\u2502#FFB6C1\u2502rgb(255,\u00a0182,\u00a0193)\u2502\u2502 \u2502\"lightsalmon\"\u2502#FFA07A\u2502rgb(255,\u00a0160,\u00a0122)\u2502\u2502 \u2502\"lightseagreen\"\u2502#20B2AA\u2502rgb(32,\u00a0178,\u00a0170)\u2502\u2502 \u2502\"lightskyblue\"\u2502#87CEFA\u2502rgb(135,\u00a0206,\u00a0250)\u2502\u2502 \u2502\"lightslategray\"\u2502#778899\u2502rgb(119,\u00a0136,\u00a0153)\u2502\u2502 \u2502\"lightslategrey\"\u2502#778899\u2502rgb(119,\u00a0136,\u00a0153)\u2502\u2502 \u2502\"lightsteelblue\"\u2502#B0C4DE\u2502rgb(176,\u00a0196,\u00a0222)\u2502\u2502 \u2502\"lightyellow\"\u2502#FFFFE0\u2502rgb(255,\u00a0255,\u00a0224)\u2502\u2502 \u2502\"lime\"\u2502#00FF00\u2502rgb(0,\u00a0255,\u00a00)\u2502\u2502 \u2502\"limegreen\"\u2502#32CD32\u2502rgb(50,\u00a0205,\u00a050)\u2502\u2502 \u2502\"linen\"\u2502#FAF0E6\u2502rgb(250,\u00a0240,\u00a0230)\u2502\u2502 \u2502\"magenta\"\u2502#FF00FF\u2502rgb(255,\u00a00,\u00a0255)\u2502\u2502 \u2502\"maroon\"\u2502#800000\u2502rgb(128,\u00a00,\u00a00)\u2502\u2502 \u2502\"mediumaquamarine\"\u2502#66CDAA\u2502rgb(102,\u00a0205,\u00a0170)\u2502\u2502 \u2502\"mediumblue\"\u2502#0000CD\u2502rgb(0,\u00a00,\u00a0205)\u2502\u2502 \u2502\"mediumorchid\"\u2502#BA55D3\u2502rgb(186,\u00a085,\u00a0211)\u2502\u2502 \u2502\"mediumpurple\"\u2502#9370DB\u2502rgb(147,\u00a0112,\u00a0219)\u2502\u2502 \u2502\"mediumseagreen\"\u2502#3CB371\u2502rgb(60,\u00a0179,\u00a0113)\u2502\u2502 \u2502\"mediumslateblue\"\u2502#7B68EE\u2502rgb(123,\u00a0104,\u00a0238)\u2502\u2502 \u2502\"mediumspringgreen\"\u2502#00FA9A\u2502rgb(0,\u00a0250,\u00a0154)\u2502\u2502 \u2502\"mediumturquoise\"\u2502#48D1CC\u2502rgb(72,\u00a0209,\u00a0204)\u2502\u2502 \u2502\"mediumvioletred\"\u2502#C71585\u2502rgb(199,\u00a021,\u00a0133)\u2502\u2502 \u2502\"midnightblue\"\u2502#191970\u2502rgb(25,\u00a025,\u00a0112)\u2502\u2502 \u2502\"mintcream\"\u2502#F5FFFA\u2502rgb(245,\u00a0255,\u00a0250)\u2502\u2502 \u2502\"mistyrose\"\u2502#FFE4E1\u2502rgb(255,\u00a0228,\u00a0225)\u2502\u2502 \u2502\"moccasin\"\u2502#FFE4B5\u2502rgb(255,\u00a0228,\u00a0181)\u2502\u2502 \u2502\"navajowhite\"\u2502#FFDEAD\u2502rgb(255,\u00a0222,\u00a0173)\u2502\u2502 \u2502\"navy\"\u2502#000080\u2502rgb(0,\u00a00,\u00a0128)\u2502\u2502 \u2502\"oldlace\"\u2502#FDF5E6\u2502rgb(253,\u00a0245,\u00a0230)\u2502\u2502 \u2502\"olive\"\u2502#808000\u2502rgb(128,\u00a0128,\u00a00)\u2502\u2502 \u2502\"olivedrab\"\u2502#6B8E23\u2502rgb(107,\u00a0142,\u00a035)\u2502\u2502 \u2502\"orange\"\u2502#FFA500\u2502rgb(255,\u00a0165,\u00a00)\u2502\u2502 \u2502\"orangered\"\u2502#FF4500\u2502rgb(255,\u00a069,\u00a00)\u2502\u2502 \u2502\"orchid\"\u2502#DA70D6\u2502rgb(218,\u00a0112,\u00a0214)\u2502\u2502 \u2502\"palegoldenrod\"\u2502#EEE8AA\u2502rgb(238,\u00a0232,\u00a0170)\u2502\u2502 \u2502\"palegreen\"\u2502#98FB98\u2502rgb(152,\u00a0251,\u00a0152)\u2502\u2502 \u2502\"paleturquoise\"\u2502#AFEEEE\u2502rgb(175,\u00a0238,\u00a0238)\u2502\u2502 \u2502\"palevioletred\"\u2502#DB7093\u2502rgb(219,\u00a0112,\u00a0147)\u2502\u2502 \u2502\"papayawhip\"\u2502#FFEFD5\u2502rgb(255,\u00a0239,\u00a0213)\u2502\u2502 \u2502\"peachpuff\"\u2502#FFDAB9\u2502rgb(255,\u00a0218,\u00a0185)\u2502\u2502 \u2502\"peru\"\u2502#CD853F\u2502rgb(205,\u00a0133,\u00a063)\u2502\u2502 \u2502\"pink\"\u2502#FFC0CB\u2502rgb(255,\u00a0192,\u00a0203)\u2502\u2502 \u2502\"plum\"\u2502#DDA0DD\u2502rgb(221,\u00a0160,\u00a0221)\u2502\u2502 \u2502\"powderblue\"\u2502#B0E0E6\u2502rgb(176,\u00a0224,\u00a0230)\u2502\u2502 \u2502\"purple\"\u2502#800080\u2502rgb(128,\u00a00,\u00a0128)\u2502\u2502 \u2502\"rebeccapurple\"\u2502#663399\u2502rgb(102,\u00a051,\u00a0153)\u2502\u2502 \u2502\"red\"\u2502#FF0000\u2502rgb(255,\u00a00,\u00a00)\u2502\u2502 \u2502\"rosybrown\"\u2502#BC8F8F\u2502rgb(188,\u00a0143,\u00a0143)\u2502\u2502 \u2502\"royalblue\"\u2502#4169E1\u2502rgb(65,\u00a0105,\u00a0225)\u2502\u2502 \u2502\"saddlebrown\"\u2502#8B4513\u2502rgb(139,\u00a069,\u00a019)\u2502\u2502 \u2502\"salmon\"\u2502#FA8072\u2502rgb(250,\u00a0128,\u00a0114)\u2502\u2502 \u2502\"sandybrown\"\u2502#F4A460\u2502rgb(244,\u00a0164,\u00a096)\u2502\u2502 \u2502\"seagreen\"\u2502#2E8B57\u2502rgb(46,\u00a0139,\u00a087)\u2502\u2502 \u2502\"seashell\"\u2502#FFF5EE\u2502rgb(255,\u00a0245,\u00a0238)\u2502\u2502 \u2502\"sienna\"\u2502#A0522D\u2502rgb(160,\u00a082,\u00a045)\u2502\u2502 \u2502\"silver\"\u2502#C0C0C0\u2502rgb(192,\u00a0192,\u00a0192)\u2502\u2502 \u2502\"skyblue\"\u2502#87CEEB\u2502rgb(135,\u00a0206,\u00a0235)\u2502\u2502 \u2502\"slateblue\"\u2502#6A5ACD\u2502rgb(106,\u00a090,\u00a0205)\u2502\u2502 \u2502\"slategray\"\u2502#708090\u2502rgb(112,\u00a0128,\u00a0144)\u2502\u2502 \u2502\"slategrey\"\u2502#708090\u2502rgb(112,\u00a0128,\u00a0144)\u2502\u2502 \u2502\"snow\"\u2502#FFFAFA\u2502rgb(255,\u00a0250,\u00a0250)\u2502\u2502 \u2502\"springgreen\"\u2502#00FF7F\u2502rgb(0,\u00a0255,\u00a0127)\u2502\u2502 \u2502\"steelblue\"\u2502#4682B4\u2502rgb(70,\u00a0130,\u00a0180)\u2502\u2502 \u2502\"tan\"\u2502#D2B48C\u2502rgb(210,\u00a0180,\u00a0140)\u2502\u2502 \u2502\"teal\"\u2502#008080\u2502rgb(0,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"thistle\"\u2502#D8BFD8\u2502rgb(216,\u00a0191,\u00a0216)\u2502\u2502 \u2502\"tomato\"\u2502#FF6347\u2502rgb(255,\u00a099,\u00a071)\u2502\u2502 \u2502\"turquoise\"\u2502#40E0D0\u2502rgb(64,\u00a0224,\u00a0208)\u2502\u2502 \u2502\"violet\"\u2502#EE82EE\u2502rgb(238,\u00a0130,\u00a0238)\u2502\u2502 \u2502\"wheat\"\u2502#F5DEB3\u2502rgb(245,\u00a0222,\u00a0179)\u2502\u2502 \u2502\"white\"\u2502#FFFFFF\u2502rgb(255,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"whitesmoke\"\u2502#F5F5F5\u2502rgb(245,\u00a0245,\u00a0245)\u2502\u2502 \u2502\"yellow\"\u2502#FFFF00\u2502rgb(255,\u00a0255,\u00a00)\u2502\u2502 \u2502\"yellowgreen\"\u2502#9ACD32\u2502rgb(154,\u00a0205,\u00a050)\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"},{"location":"css_types/color/#hex-rgb-value","title":"Hex RGB value","text":"<p>The hexadecimal RGB format starts with an octothorpe <code>#</code> and is then followed by 3 or 6 hexadecimal digits: <code>0123456789ABCDEF</code>. Casing is ignored.</p> <ul> <li>If 6 digits are used, the format is <code>#RRGGBB</code>:</li> <li><code>RR</code> represents the red channel;</li> <li><code>GG</code> represents the green channel; and</li> <li><code>BB</code> represents the blue channel.</li> <li>If 3 digits are used, the format is <code>#RGB</code>.</li> </ul> <p>In a 3 digit color, each channel is represented by a single digit which is duplicated when converting to the 6 digit format. For example, the color <code>#A2F</code> is the same as <code>#AA22FF</code>.</p>"},{"location":"css_types/color/#hex-rgba-value","title":"Hex RGBA value","text":"<p>This is the same as the hex RGB value, but with an extra channel for the alpha component (that sets transparency).</p> <ul> <li>If 8 digits are used, the format is <code>#RRGGBBAA</code>, equivalent to the format <code>#RRGGBB</code> with two extra digits for transparency.</li> <li>If 4 digits are used, the format is <code>#RGBA</code>, equivalent to the format <code>#RGB</code> with an extra digit for transparency.</li> </ul>"},{"location":"css_types/color/#rgb-description","title":"<code>rgb</code> description","text":"<p>The <code>rgb</code> format description is a functional description of a color in the RGB color space. This description follows the format <code>rgb(red, green, blue)</code>, where <code>red</code>, <code>green</code>, and <code>blue</code> are decimal integers between 0 and 255. They represent the value of the channel with the same name.</p> <p>For example, <code>rgb(0, 255, 32)</code> is equivalent to <code>#00FF20</code>.</p>"},{"location":"css_types/color/#rgba-description","title":"<code>rgba</code> description","text":"<p>The <code>rgba</code> format description is the same as the <code>rgb</code> with an extra parameter for transparency, which should be a value between <code>0</code> and <code>1</code>.</p> <p>For example, <code>rgba(0, 255, 32, 0.5)</code> is the color <code>rgb(0, 255, 32)</code> with 50% transparency.</p>"},{"location":"css_types/color/#hsl-description","title":"<code>hsl</code> description","text":"<p>The <code>hsl</code> format description is a functional description of a color in the HSL color space. This description follows the format <code>hsl(hue, saturation, lightness)</code>, where</p> <ul> <li><code>hue</code> is a float between 0 and 360;</li> <li><code>saturation</code> is a percentage between <code>0%</code> and <code>100%</code>; and</li> <li><code>lightness</code> is a percentage between <code>0%</code> and <code>100%</code>.</li> </ul> <p>For example, the color <code>#00FF20</code> would be represented as <code>hsl(128, 100%, 50%)</code> in the HSL color space.</p>"},{"location":"css_types/color/#hsla-description","title":"<code>hsla</code> description","text":"<p>The <code>hsla</code> format description is the same as the <code>hsl</code> with an extra parameter for transparency, which should be a value between <code>0</code> and <code>1</code>.</p> <p>For example, <code>hsla(128, 100%, 50%, 0.5)</code> is the color <code>hsl(128, 100%, 50%)</code> with 50% transparency.</p>"},{"location":"css_types/color/#examples","title":"Examples","text":""},{"location":"css_types/color/#css","title":"CSS","text":"<pre><code>Header {\nbackground: red;           /* Color name */\n}\n.accent {\ncolor: $accent;            /* Textual variable */\n}\n#footer {\ntint: hsl(300, 20%, 70%);  /* HSL description */\n}\n</code></pre>"},{"location":"css_types/color/#python","title":"Python","text":"<p>In Python, rules that expect a <code>&lt;color&gt;</code> can also accept an instance of the type <code>Color</code>.</p> <pre><code># Mimicking the CSS syntax\nwidget.styles.background = \"red\"           # Color name\nwidget.styles.color = \"$accent\"            # Textual variable\nwidget.styles.tint = \"hsl(300, 20%, 70%)\"  # HSL description\nfrom textual.color import Color\n# Using a Color object directly...\ncolor = Color(16, 200, 45)\n# ... which can also parse the CSS syntax\ncolor = Color.parse(\"#A8F\")\n</code></pre>"},{"location":"css_types/horizontal/","title":"&lt;horizontal&gt;","text":"<p>The <code>&lt;horizontal&gt;</code> CSS type represents a position along the horizontal axis.</p>"},{"location":"css_types/horizontal/#syntax","title":"Syntax","text":"<p>The <code>&lt;horizontal&gt;</code> type can take any of the following values:</p> Value Description <code>center</code> Aligns in the center of the horizontal axis. <code>left</code> (default) Aligns on the left of the horizontal axis. <code>right</code> Aligns on the right of the horizontal axis."},{"location":"css_types/horizontal/#examples","title":"Examples","text":""},{"location":"css_types/horizontal/#css","title":"CSS","text":"<pre><code>.container {\nalign-horizontal: right;\n}\n</code></pre>"},{"location":"css_types/horizontal/#python","title":"Python","text":"<pre><code>widget.styles.align_horizontal = \"right\"\n</code></pre>"},{"location":"css_types/integer/","title":"&lt;integer&gt;","text":"<p>The <code>&lt;integer&gt;</code> CSS type represents an integer number.</p>"},{"location":"css_types/integer/#syntax","title":"Syntax","text":"<p>An <code>&lt;integer&gt;</code> is any valid integer number like <code>-10</code> or <code>42</code>.</p> <p>Note</p> <p>Some CSS rules may expect an <code>&lt;integer&gt;</code> within certain bounds. If that is the case, it will be noted in that rule.</p>"},{"location":"css_types/integer/#examples","title":"Examples","text":""},{"location":"css_types/integer/#css","title":"CSS","text":"<pre><code>.classname {\noffset: 10 -20\n}\n</code></pre>"},{"location":"css_types/integer/#python","title":"Python","text":"<p>In Python, a rule that expects a CSS type <code>&lt;integer&gt;</code> will expect a value of the type <code>int</code>:</p> <pre><code>widget.styles.offset = (10, -20)\n</code></pre>"},{"location":"css_types/name/","title":"&lt;name&gt;","text":"<p>The <code>&lt;name&gt;</code> type represents a sequence of characters that identifies something.</p>"},{"location":"css_types/name/#syntax","title":"Syntax","text":"<p>A <code>&lt;name&gt;</code> is any non-empty sequence of characters:</p> <ul> <li>starting with a letter <code>a-z</code>, <code>A-Z</code>, or underscore <code>_</code>; and</li> <li>followed by zero or more letters <code>a-zA-Z</code>, digits <code>0-9</code>, underscores <code>_</code>, and hiphens <code>-</code>.</li> </ul>"},{"location":"css_types/name/#examples","title":"Examples","text":""},{"location":"css_types/name/#css","title":"CSS","text":"<pre><code>Screen {\nlayers: onlyLetters Letters-and-hiphens _lead-under letters-1-digit;\n}\n</code></pre>"},{"location":"css_types/name/#python","title":"Python","text":"<pre><code>widget.styles.layers = \"onlyLetters Letters-and-hiphens _lead-under letters-1-digit\"\n</code></pre>"},{"location":"css_types/number/","title":"&lt;number&gt;","text":"<p>The <code>&lt;number&gt;</code> CSS type represents a real number, which can be an integer or a number with a decimal part (akin to a <code>float</code> in Python).</p>"},{"location":"css_types/number/#syntax","title":"Syntax","text":"<p>A <code>&lt;number&gt;</code> is an <code>&lt;integer&gt;</code>, optionally followed by the decimal point <code>.</code> and a decimal part composed of one or more digits.</p>"},{"location":"css_types/number/#examples","title":"Examples","text":""},{"location":"css_types/number/#css","title":"CSS","text":"<pre><code>Grid {\ngrid-size: 3 6  /* Integers are numbers */\n}\n.translucid {\nopacity: 0.5    /* Numbers can have a decimal part */\n}\n</code></pre>"},{"location":"css_types/number/#python","title":"Python","text":"<p>In Python, a rule that expects a CSS type <code>&lt;number&gt;</code> will accept an <code>int</code> or a <code>float</code>:</p> <pre><code>widget.styles.grid_size = (3, 6)  # Integers are numbers\nwidget.styles.opacity = 0.5       # Numbers can have a decimal part\n</code></pre>"},{"location":"css_types/overflow/","title":"&lt;overflow&gt;","text":"<p>The <code>&lt;overflow&gt;</code> CSS type represents overflow modes.</p>"},{"location":"css_types/overflow/#syntax","title":"Syntax","text":"<p>The <code>&lt;overflow&gt;</code> type can take any of the following values:</p> Value Description <code>auto</code> Determine overflow mode automatically. <code>hidden</code> Don't overflow. <code>scroll</code> Allow overflowing."},{"location":"css_types/overflow/#examples","title":"Examples","text":""},{"location":"css_types/overflow/#css","title":"CSS","text":"<pre><code>#container {\noverflow-y: hidden;  /* Don't overflow */\n}\n</code></pre>"},{"location":"css_types/overflow/#python","title":"Python","text":"<pre><code>widget.styles.overflow_y = \"hidden\"  # Don't overflow\n</code></pre>"},{"location":"css_types/percentage/","title":"&lt;percentage&gt;","text":"<p>The <code>&lt;percentage&gt;</code> CSS type represents a percentage value. It is often used to represent values that are relative to the parent's values.</p> <p>Warning</p> <p>Not to be confused with the <code>&lt;scalar&gt;</code> type.</p>"},{"location":"css_types/percentage/#syntax","title":"Syntax","text":"<p>A <code>&lt;percentage&gt;</code> is a <code>&lt;number&gt;</code> followed by the percent sign <code>%</code> (without spaces). Some rules may clamp the values between <code>0%</code> and <code>100%</code>.</p>"},{"location":"css_types/percentage/#examples","title":"Examples","text":""},{"location":"css_types/percentage/#css","title":"CSS","text":"<pre><code>#footer {\n/* Integer followed by % */\ncolor: red 70%;\n/* The number can be negative/decimal, although that may not make sense */\noffset: -30% 12.5%;\n}\n</code></pre>"},{"location":"css_types/percentage/#python","title":"Python","text":"<pre><code># Integer followed by %\nwidget.styles.color = \"red 70%\"\n# The number can be negative/decimal, althought that may not make sense\nwidget.styles.offset = (\"-30%\", \"12.5%\")\n</code></pre>"},{"location":"css_types/scalar/","title":"&lt;scalar&gt;","text":"<p>The <code>&lt;scalar&gt;</code> CSS type represents a length. It can be a <code>&lt;number&gt;</code> and a unit, or the special value <code>auto</code>. It is used to represent lengths, for example in the <code>width</code> and <code>height</code> rules.</p> <p>Warning</p> <p>Not to be confused with the <code>&lt;number&gt;</code> or <code>&lt;percentage&gt;</code> types.</p>"},{"location":"css_types/scalar/#syntax","title":"Syntax","text":"<p>A <code>&lt;scalar&gt;</code> can be any of the following:</p> <ul> <li>a fixed number of cells (e.g., <code>10</code>);</li> <li>a fractional proportion relative to the sizes of the other widgets (e.g., <code>1fr</code>);</li> <li>a percentage relative to the container widget (e.g., <code>50%</code>);</li> <li>a percentage relative to the container width/height (e.g., <code>25w</code>/<code>75h</code>);</li> <li>a percentage relative to the viewport width/height (e.g., <code>25vw</code>/<code>75vh</code>); or</li> <li>the special value <code>auto</code> to compute the optimal size to fit without scrolling.</li> </ul> <p>A complete reference table and detailed explanations follow. You can skip to the examples.</p> Unit symbol Unit Example Description <code>\"\"</code> Cell <code>10</code> Number of cells (rows or columns). <code>\"fr\"</code> Fraction <code>1fr</code> Specifies the proportion of space the widget should occupy. <code>\"%\"</code> Percent <code>75%</code> Length relative to the container widget. <code>\"w\"</code> Width <code>25w</code> Percentage relative to the width of the container widget. <code>\"h\"</code> Height <code>75h</code> Percentage relative to the height of the container widget. <code>\"vw\"</code> Viewport width <code>25vw</code> Percentage relative to the viewport width. <code>\"vh\"</code> Viewport height <code>75vh</code> Percentage relative to the viewport height. - Auto <code>auto</code> Tries to compute the optimal size to fit without scrolling."},{"location":"css_types/scalar/#cell","title":"Cell","text":"<p>The number of cells is the only unit for a scalar that is absolute. This can be an integer or a float but floats are truncated to integers.</p> <p>If used to specify a horizontal length, it corresponds to the number of columns. For example, in <code>width: 15</code>, this sets the width of a widget to be equal to 15 cells, which translates to 15 columns.</p> <p>If used to specify a vertical length, it corresponds to the number of lines. For example, in <code>height: 10</code>, this sets the height of a widget to be equal to 10 cells, which translates to 10 lines.</p>"},{"location":"css_types/scalar/#fraction","title":"Fraction","text":"<p>The unit fraction is used to represent proportional sizes.</p> <p>For example, if two widgets are side by side and one has <code>width: 1fr</code> and the other has <code>width: 3fr</code>, the second one will be three times as wide as the first one.</p>"},{"location":"css_types/scalar/#percent","title":"Percent","text":"<p>The percent unit matches a <code>&lt;percentage&gt;</code> and is used to specify a total length relative to the space made available by the container widget.</p> <p>If used to specify a horizontal length, it will be relative to the width of the container. For example, <code>width: 50%</code> sets the width of a widget to 50% of the width of its container.</p> <p>If used to specify a vertical length, it will be relative to the height of the container. For example, <code>height: 50%</code> sets the height of a widget to 50% of the height of its container.</p>"},{"location":"css_types/scalar/#width","title":"Width","text":"<p>The width unit is similar to the percent unit, except it sets the percentage to be relative to the width of the container.</p> <p>For example, <code>width: 25w</code> sets the width of a widget to 25% of the width of its container and <code>height: 25w</code> sets the height of a widget to 25% of the width of its container. So, if the container has a width of 100 cells, the width and the height of the child widget will be of 25 cells.</p>"},{"location":"css_types/scalar/#height","title":"Height","text":"<p>The height unit is similar to the percent unit, except it sets the percentage to be relative to the height of the container.</p> <p>For example, <code>height: 75h</code> sets the height of a widget to 75% of the height of its container and <code>width: 75h</code> sets the width of a widget to 75% of the height of its container. So, if the container has a height of 100 cells, the width and the height of the child widget will be of 75 cells.</p>"},{"location":"css_types/scalar/#viewport-width","title":"Viewport width","text":"<p>This is the same as the width unit, except that it is relative to the width of the viewport instead of the width of the immediate container. The width of the viewport is the width of the terminal minus the widths of widgets that are docked left or right.</p> <p>For example, <code>width: 25vw</code> will try to set the width of a widget to be 25% of the viewport width, regardless of the widths of its containers.</p>"},{"location":"css_types/scalar/#viewport-height","title":"Viewport height","text":"<p>This is the same as the height unit, except that it is relative to the height of the viewport instead of the height of the immediate container. The height of the viewport is the height of the terminal minus the heights of widgets that are docked top or bottom.</p> <p>For example, <code>height: 75vh</code> will try to set the height of a widget to be 75% of the viewport height, regardless of the height of its containers.</p>"},{"location":"css_types/scalar/#auto","title":"Auto","text":"<p>This special value will try to calculate the optimal size to fit the contents of the widget without scrolling.</p> <p>For example, if its container is big enough, a label with <code>width: auto</code> will be just as wide as its text.</p>"},{"location":"css_types/scalar/#examples","title":"Examples","text":""},{"location":"css_types/scalar/#css","title":"CSS","text":"<pre><code>Horizontal {\nwidth: 60;     /* 60 cells */\nheight: 1fr;   /* proportional size of 1 */\n}\n</code></pre>"},{"location":"css_types/scalar/#python","title":"Python","text":"<pre><code>widget.styles.width = 16       # Cell unit can be specified with an int/float\nwidget.styles.height = \"1fr\"   # proportional size of 1\n</code></pre>"},{"location":"css_types/text_align/","title":"&lt;text-align&gt;","text":"<p>The <code>&lt;text-align&gt;</code> CSS type represents alignments that can be applied to text.</p> <p>Warning</p> <p>Not to be confused with the <code>text-align</code> CSS rule that sets the alignment of text in a widget.</p>"},{"location":"css_types/text_align/#syntax","title":"Syntax","text":"<p>A <code>&lt;text-align&gt;</code> can be any of the following values:</p> Value Alignment type <code>center</code> Center alignment. <code>end</code> Alias for <code>right</code>. <code>justify</code> Text is justified inside the widget. <code>left</code> Left alignment. <code>right</code> Right alignment. <code>start</code> Alias for <code>left</code>. <p>Tip</p> <p>The meanings of <code>start</code> and <code>end</code> will likely change when RTL languages become supported by Textual.</p>"},{"location":"css_types/text_align/#examples","title":"Examples","text":""},{"location":"css_types/text_align/#css","title":"CSS","text":"<pre><code>Label {\nrule: justify;\n}\n</code></pre>"},{"location":"css_types/text_align/#python","title":"Python","text":"<pre><code>widget.styles.text_align = \"justify\"\n</code></pre>"},{"location":"css_types/text_style/","title":"&lt;text-style&gt;","text":"<p>The <code>&lt;text-style&gt;</code> CSS type represents styles that can be applied to text.</p> <p>Warning</p> <p>Not to be confused with the <code>text-style</code> CSS rule that sets the style of text in a widget.</p>"},{"location":"css_types/text_style/#syntax","title":"Syntax","text":"<p>A <code>&lt;text-style&gt;</code> can be the value <code>none</code> for plain text with no styling, or any space-separated combination of the following values:</p> Value Description <code>bold</code> Bold text. <code>italic</code> Italic text. <code>reverse</code> Reverse video text (foreground and background colors reversed). <code>strike</code> Strikethrough text. <code>underline</code> Underline text."},{"location":"css_types/text_style/#examples","title":"Examples","text":""},{"location":"css_types/text_style/#css","title":"CSS","text":"<pre><code>#label1 {\n/* You can specify any value by itself. */\nrule: strike;\n}\n#label2 {\n/* You can also combine multiple values. */\nrule: strike bold italic reverse;\n}\n</code></pre>"},{"location":"css_types/text_style/#python","title":"Python","text":"<pre><code># You can specify any value by itself\nwidget.styles.text_style = \"strike\"\n# You can also combine multiple values\nwidget.styles.text_style = \"strike bold italic reverse\n</code></pre>"},{"location":"css_types/vertical/","title":"&lt;vertical&gt;","text":"<p>The <code>&lt;vertical&gt;</code> CSS type represents a position along the vertical axis.</p>"},{"location":"css_types/vertical/#syntax","title":"Syntax","text":"<p>The <code>&lt;vertical&gt;</code> type can take any of the following values:</p> Value Description <code>bottom</code> Aligns at the bottom of the vertical axis. <code>middle</code> Aligns in the middle of the vertical axis. <code>top</code> (default) Aligns at the top of the vertical axis."},{"location":"css_types/vertical/#examples","title":"Examples","text":""},{"location":"css_types/vertical/#css","title":"CSS","text":"<pre><code>.container {\nalign-vertical: top;\n}\n</code></pre>"},{"location":"css_types/vertical/#python","title":"Python","text":"<pre><code>widget.styles.align_vertical = \"top\"\n</code></pre>"},{"location":"events/","title":"Events","text":"<p>A reference to Textual events.</p> <p>See the links to the left of the page, or in the hamburger menu (three horizontal bars, top left).</p>"},{"location":"events/blur/","title":"Blur","text":"<p>The <code>Blur</code> event is sent to a widget when it loses focus.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/blur/#attributes","title":"Attributes","text":"<p>No other attributes</p>"},{"location":"events/blur/#code","title":"Code","text":""},{"location":"events/blur/#textual.events.Blur","title":"<code>Blur</code>","text":"<p>         Bases: <code>Event</code></p>"},{"location":"events/click/","title":"Click","text":"<p>The <code>Click</code> event is sent to a widget when the user clicks a mouse button.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/click/#attributes","title":"Attributes","text":"attribute type purpose <code>x</code> int Mouse x coordinate, relative to Widget <code>y</code> int Mouse y coordinate, relative to Widget <code>delta_x</code> int Change in x since last mouse event <code>delta_y</code> int Change in y since last mouse event <code>button</code> int Index of mouse button <code>shift</code> bool Shift key pressed if True <code>meta</code> bool Meta key pressed if True <code>ctrl</code> bool Ctrl key pressed if True <code>screen_x</code> int Mouse x coordinate relative to the screen <code>screen_y</code> int Mouse y coordinate relative to the screen"},{"location":"events/click/#code","title":"Code","text":""},{"location":"events/click/#textual.events.Click","title":"<code>Click</code>","text":"<p>         Bases: <code>MouseEvent</code></p>"},{"location":"events/descendant_blur/","title":"DescendantBlur","text":"<p>The <code>DescendantBlur</code> event is sent to a widget when one of its children loses focus.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/descendant_blur/#attributes","title":"Attributes","text":"<p>No other attributes</p>"},{"location":"events/descendant_blur/#code","title":"Code","text":""},{"location":"events/descendant_blur/#textual.events.DescendantBlur","title":"<code>DescendantBlur</code>","text":"<p>         Bases: <code>Event</code></p>"},{"location":"events/descendant_focus/","title":"DescendantFocus","text":"<p>The <code>DescendantFocus</code> event is sent to a widget when one of its descendants receives focus.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/descendant_focus/#attributes","title":"Attributes","text":"<p>No other attributes</p>"},{"location":"events/descendant_focus/#code","title":"Code","text":""},{"location":"events/descendant_focus/#textual.events.DescendantFocus","title":"<code>DescendantFocus</code>","text":"<p>         Bases: <code>Event</code></p>"},{"location":"events/enter/","title":"Enter","text":"<p>The <code>Enter</code> event is sent to a widget when the mouse pointer first moves over a widget.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/enter/#attributes","title":"Attributes","text":"<p>No other attributes</p>"},{"location":"events/enter/#code","title":"Code","text":""},{"location":"events/enter/#textual.events.Enter","title":"<code>Enter</code>","text":"<p>         Bases: <code>Event</code></p>"},{"location":"events/focus/","title":"Focus","text":"<p>The <code>Focus</code> event is sent to a widget when it receives input focus.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/focus/#attributes","title":"Attributes","text":"<p>No other attributes</p>"},{"location":"events/focus/#code","title":"Code","text":""},{"location":"events/focus/#textual.events.Focus","title":"<code>Focus</code>","text":"<p>         Bases: <code>Event</code></p>"},{"location":"events/hide/","title":"Hide","text":"<p>The <code>Hide</code> event is sent to a widget when it is hidden from view.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/hide/#attributes","title":"Attributes","text":"<p>No additional attributes</p>"},{"location":"events/hide/#code","title":"Code","text":""},{"location":"events/hide/#textual.events.Hide","title":"<code>Hide</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent when a widget has been hidden.</p> <p>A widget may be hidden by setting its <code>visible</code> flag to <code>False</code>, if it is no longer in a layout, or if it has been offset beyond the edges of the terminal.</p>"},{"location":"events/key/","title":"Key","text":"<p>The <code>Key</code> event is sent to a widget when the user presses a key on the keyboard.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/key/#attributes","title":"Attributes","text":"attribute type purpose <code>key</code> str Name of the key that was pressed. <code>char</code> str or None The character that was pressed, or None it isn't printable."},{"location":"events/key/#code","title":"Code","text":""},{"location":"events/key/#textual.events.Key","title":"<code>Key</code>","text":"<p>         Bases: <code>InputEvent</code></p> <p>Sent when the user hits a key on the keyboard.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key that was pressed.</p> required <code>character</code> <code>str | None</code> <p>A printable character or <code>None</code> if it is not printable.</p> required <p>Attributes:</p> Name Type Description <code>aliases</code> <code>list[str]</code> <p>The aliases for the key, including the key itself.</p>"},{"location":"events/key/#textual.events.Key.is_printable","title":"<code>is_printable: bool</code>  <code>property</code>","text":"<p>Check if the key is printable (produces a unicode character).</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the key is printable.</p>"},{"location":"events/key/#textual.events.Key.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Name of a key suitable for use as a Python identifier.</p>"},{"location":"events/key/#textual.events.Key.name_aliases","title":"<code>name_aliases: list[str]</code>  <code>property</code>","text":"<p>The corresponding name for every alias in <code>aliases</code> list.</p>"},{"location":"events/leave/","title":"Leave","text":"<p>The <code>Leave</code> event is sent to a widget when the mouse pointer moves off a widget.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/leave/#attributes","title":"Attributes","text":"<p>No other attributes</p>"},{"location":"events/leave/#code","title":"Code","text":""},{"location":"events/leave/#textual.events.Leave","title":"<code>Leave</code>","text":"<p>         Bases: <code>Event</code></p>"},{"location":"events/load/","title":"Load","text":"<p>The <code>Load</code> event is sent to the app prior to switching the terminal to application mode.</p> <p>The load event is typically used to do any setup actions required by the app that don't change the display.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/load/#attributes","title":"Attributes","text":"<p>No additional attributes</p>"},{"location":"events/load/#code","title":"Code","text":""},{"location":"events/load/#textual.events.Load","title":"<code>Load</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent when the App is running but before the terminal is in application mode.</p> <p>Use this event to run any set up that doesn't require any visuals such as loading configuration and binding keys.</p>"},{"location":"events/mount/","title":"Mount","text":"<p>The <code>Mount</code> event is sent to a widget and Application when it is first mounted.</p> <p>The mount event is typically used to set the initial state of a widget or to add new children widgets.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/mount/#attributes","title":"Attributes","text":"<p>No additional attributes</p>"},{"location":"events/mount/#code","title":"Code","text":""},{"location":"events/mount/#textual.events.Mount","title":"<code>Mount</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent when a widget is mounted and may receive messages.</p>"},{"location":"events/mouse_capture/","title":"MouseCapture","text":"<p>The <code>MouseCapture</code> event is sent to a widget when it is capturing mouse events from outside of its borders on the screen.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/mouse_capture/#attributes","title":"Attributes","text":"attribute type purpose <code>mouse_position</code> Offset Mouse coordinates when the mouse was captured"},{"location":"events/mouse_capture/#code","title":"Code","text":""},{"location":"events/mouse_capture/#textual.events.MouseCapture","title":"<code>MouseCapture</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent when the mouse has been captured.</p> <p>When a mouse has been captured, all further mouse events will be sent to the capturing widget.</p> <p>Parameters:</p> Name Type Description Default <code>mouse_position</code> <code>Offset</code> <p>The position of the mouse when captured.</p> required"},{"location":"events/mouse_down/","title":"MouseDown","text":"<p>The <code>MouseDown</code> event is sent to a widget when a mouse button is pressed.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/mouse_down/#attributes","title":"Attributes","text":"attribute type purpose <code>x</code> int Mouse x coordinate, relative to Widget <code>y</code> int Mouse y coordinate, relative to Widget <code>delta_x</code> int Change in x since last mouse event <code>delta_y</code> int Change in y since last mouse event <code>button</code> int Index of mouse button <code>shift</code> bool Shift key pressed if True <code>meta</code> bool Meta key pressed if True <code>ctrl</code> bool Ctrl key pressed if True <code>screen_x</code> int Mouse x coordinate relative to the screen <code>screen_y</code> int Mouse y coordinate relative to the screen"},{"location":"events/mouse_down/#code","title":"Code","text":""},{"location":"events/mouse_down/#textual.events.MouseDown","title":"<code>MouseDown</code>","text":"<p>         Bases: <code>MouseEvent</code></p>"},{"location":"events/mouse_move/","title":"MouseMove","text":"<p>The <code>MouseMove</code> event is sent to a widget when the mouse pointer is moved over a widget.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/mouse_move/#attributes","title":"Attributes","text":"attribute type purpose <code>x</code> int Mouse x coordinate, relative to Widget <code>y</code> int Mouse y coordinate, relative to Widget <code>delta_x</code> int Change in x since last mouse event <code>delta_y</code> int Change in y since last mouse event <code>button</code> int Index of mouse button <code>shift</code> bool Shift key pressed if True <code>meta</code> bool Meta key pressed if True <code>ctrl</code> bool Ctrl key pressed if True <code>screen_x</code> int Mouse x coordinate relative to the screen <code>screen_y</code> int Mouse y coordinate relative to the screen"},{"location":"events/mouse_move/#code","title":"Code","text":""},{"location":"events/mouse_move/#textual.events.MouseMove","title":"<code>MouseMove</code>","text":"<p>         Bases: <code>MouseEvent</code></p> <p>Sent when the mouse cursor moves.</p>"},{"location":"events/mouse_release/","title":"MouseRelease","text":"<p>The <code>MouseRelease</code> event is sent to a widget when it is no longer receiving mouse events outside of its borders.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/mouse_release/#attributes","title":"Attributes","text":"attribute type purpose <code>mouse_position</code> Offset Mouse coordinates when the mouse was released"},{"location":"events/mouse_release/#code","title":"Code","text":""},{"location":"events/mouse_release/#textual.events.MouseRelease","title":"<code>MouseRelease</code>","text":"<p>         Bases: <code>Event</code></p> <p>Mouse has been released.</p> <p>Parameters:</p> Name Type Description Default <code>mouse_position</code> <code>Offset</code> <p>The position of the mouse when released.</p> required"},{"location":"events/mouse_scroll_down/","title":"MouseScrollDown","text":"<p>The <code>MouseScrollDown</code> event is sent to a widget when the scroll wheel (or trackpad equivalent) is moved down.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/mouse_scroll_down/#attributes","title":"Attributes","text":"attribute type purpose <code>x</code> int Mouse x coordinate, relative to Widget <code>y</code> int Mouse y coordinate, relative to Widget"},{"location":"events/mouse_scroll_down/#code","title":"Code","text":""},{"location":"events/mouse_scroll_down/#textual.events.MouseScrollDown","title":"<code>MouseScrollDown</code>","text":"<p>         Bases: <code>MouseEvent</code></p>"},{"location":"events/mouse_scroll_up/","title":"MouseScrollUp","text":"<p>The <code>MouseScrollUp</code> event is sent to a widget when the scroll wheel (or trackpad equivalent) is moved up.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/mouse_scroll_up/#attributes","title":"Attributes","text":"attribute type purpose <code>x</code> int Mouse x coordinate, relative to Widget <code>y</code> int Mouse y coordinate, relative to Widget"},{"location":"events/mouse_scroll_up/#code","title":"Code","text":""},{"location":"events/mouse_scroll_up/#textual.events.MouseScrollUp","title":"<code>MouseScrollUp</code>","text":"<p>         Bases: <code>MouseEvent</code></p>"},{"location":"events/mouse_up/","title":"MouseUp","text":"<p>The <code>MouseUp</code> event is sent to a widget when the user releases a mouse button.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/mouse_up/#attributes","title":"Attributes","text":"attribute type purpose <code>x</code> int Mouse x coordinate, relative to Widget <code>y</code> int Mouse y coordinate, relative to Widget <code>delta_x</code> int Change in x since last mouse event <code>delta_y</code> int Change in y since last mouse event <code>button</code> int Index of mouse button <code>shift</code> bool Shift key pressed if True <code>meta</code> bool Meta key pressed if True <code>ctrl</code> bool Ctrl key pressed if True <code>screen_x</code> int Mouse x coordinate relative to the screen <code>screen_y</code> int Mouse y coordinate relative to the screen"},{"location":"events/mouse_up/#code","title":"Code","text":""},{"location":"events/mouse_up/#textual.events.MouseUp","title":"<code>MouseUp</code>","text":"<p>         Bases: <code>MouseEvent</code></p>"},{"location":"events/paste/","title":"Paste","text":"<p>The <code>Paste</code> event is sent to a widget when the user pastes text.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/paste/#attributes","title":"Attributes","text":"attribute type purpose <code>text</code> str The text that was pasted"},{"location":"events/paste/#code","title":"Code","text":""},{"location":"events/paste/#textual.events.Paste","title":"<code>Paste</code>","text":"<p>         Bases: <code>Event</code></p> <p>Event containing text that was pasted into the Textual application. This event will only appear when running in a terminal emulator that supports bracketed paste mode. Textual will enable bracketed pastes when an app starts, and disable it when the app shuts down.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text that has been pasted.</p> required"},{"location":"events/resize/","title":"Resize","text":"<p>The <code>Resize</code> event is sent to a widget when its size changes and when it is first made visible.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/resize/#attributes","title":"Attributes","text":"attribute type purpose <code>size</code> Size The new size of the Widget <code>virtual_size</code> Size The virtual size (scrollable area) of the Widget <code>container_size</code> Size The size of the container (parent widget)"},{"location":"events/resize/#code","title":"Code","text":""},{"location":"events/resize/#textual.events.Resize","title":"<code>Resize</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent when the app or widget has been resized.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>Size</code> <p>The new size of the Widget.</p> required <code>virtual_size</code> <code>Size</code> <p>The virtual size (scrollable size) of the Widget.</p> required <code>container_size</code> <code>Size | None</code> <p>The size of the Widget's container widget. Defaults to None.</p> <code>None</code>"},{"location":"events/screen_resume/","title":"ScreenResume","text":"<p>The <code>ScreenResume</code> event is sent to a Screen when it becomes current.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/screen_resume/#attributes","title":"Attributes","text":"<p>No other attributes</p>"},{"location":"events/screen_resume/#code","title":"Code","text":""},{"location":"events/screen_resume/#textual.events.ScreenResume","title":"<code>ScreenResume</code>","text":"<p>         Bases: <code>Event</code></p>"},{"location":"events/screen_suspend/","title":"ScreenSuspend","text":"<p>The <code>ScreenSuspend</code> event is sent to a Screen when it is replaced by another screen.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/screen_suspend/#attributes","title":"Attributes","text":"<p>No other attributes</p>"},{"location":"events/screen_suspend/#code","title":"Code","text":""},{"location":"events/screen_suspend/#textual.events.ScreenSuspend","title":"<code>ScreenSuspend</code>","text":"<p>         Bases: <code>Event</code></p>"},{"location":"events/show/","title":"Show","text":"<p>The <code>Show</code> event is sent to a widget when it becomes visible.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>"},{"location":"events/show/#attributes","title":"Attributes","text":"<p>No additional attributes</p>"},{"location":"events/show/#code","title":"Code","text":""},{"location":"events/show/#textual.events.Show","title":"<code>Show</code>","text":"<p>         Bases: <code>Event</code></p> <p>Sent when a widget has become visible.</p>"},{"location":"examples/styles/","title":"Index","text":"<p>These are the examples from the documentation, used to generate screenshots.</p> <p>You can run them with the textual CLI.</p> <p>For example:</p> <pre><code>textual run text_style.py\n</code></pre>"},{"location":"guide/","title":"Guide","text":"<p>Welcome to the Textual Guide! An in-depth reference on how to build apps with Textual.</p>"},{"location":"guide/#example-code","title":"Example code","text":"<p>Most of the code in this guide is fully working\u2014you could cut and paste it if you wanted to.</p> <p>Although it is probably easier to check out the Textual repository and navigate to the <code>docs/examples/guide</code> directory and run the examples from there.</p>"},{"location":"guide/CSS/","title":"Textual CSS","text":"<p>Textual uses CSS to apply style to widgets. If you have any exposure to web development you will have encountered CSS, but don't worry if you haven't: this chapter will get you up to speed.</p>"},{"location":"guide/CSS/#stylesheets","title":"Stylesheets","text":"<p>CSS stands for Cascading Stylesheets. A stylesheet is a list of styles and rules about how those styles should be applied to a web page. In the case of Textual, the stylesheet applies styles to widgets, but otherwise it is the same idea.</p> <p>When Textual loads CSS it sets attributes on your widgets' <code>style</code> object. The effect is the same as if you had set attributes in Python.</p> <p>CSS is typically stored in an external file with the extension <code>.css</code> alongside your Python code.</p> <p>Let's look at some Textual CSS.</p> <pre><code>Header {\ndock: top;\nheight: 3;\ncontent-align: center middle;\nbackground: blue;\ncolor: white;\n}\n</code></pre> <p>This is an example of a CSS rule set. There may be many such sections in any given CSS file.</p> <p>Let's break this CSS code down a bit.</p> <pre><code>Header {\ndock: top;\nheight: 3;\ncontent-align: center middle;\nbackground: blue;\ncolor: white;\n}\n</code></pre> <p>The first line is a selector which tells Textual which widget(s) to modify. In the above example, the styles will be applied to a widget defined by the Python class <code>Header</code>.</p> <pre><code>Header {\ndock: top;\nheight: 3;\ncontent-align: center middle;\nbackground: blue;\ncolor: white;\n}\n</code></pre> <p>The lines inside the curly braces contains CSS rules, which consist of a rule name and rule value separated by a colon and ending in a semicolon. Such rules are typically written one per line, but you could add additional rules as long as they are separated by semicolons.</p> <p>The first rule in the above example reads <code>\"dock: top;\"</code>. The rule name is <code>dock</code> which tells Textual to place the widget on an edge of the screen. The text after the colon is <code>top</code> which tells Textual to dock to the top of the screen. Other valid values for <code>dock</code> are \"right\", \"bottom\", or \"left\"; but \"top\" is most appropriate for a header.</p>"},{"location":"guide/CSS/#the-dom","title":"The DOM","text":"<p>The DOM, or Document Object Model, is a term borrowed from the web world. Textual doesn't use documents but the term has stuck. In Textual CSS, the DOM is an arrangement of widgets you can visualize as a tree-like structure.</p> <p>Some widgets contain other widgets: for instance, a list control widget will likely also have item widgets, or a dialog widget may contain button widgets. These child widgets form the branches of the tree.</p> <p>Let's look at a trivial Textual app.</p> dom1.pyOutput <pre><code>from textual.app import App\nclass ExampleApp(App):\npass\nif __name__ == \"__main__\":\napp = ExampleApp()\napp.run()\n</code></pre> <p> ExampleApp </p> <p>This example creates an instance of <code>ExampleApp</code>, which will implicitly create a <code>Screen</code> object. In DOM terms, the <code>Screen</code> is a child of <code>ExampleApp</code>.</p> <p>With the above example, the DOM will look like the following:</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nM1Ya0/jOFx1MDAxNP3Or6i6X3YlXGKOY8fxSKtcdTAwMTXPpSywo1x1MDAwMVxyj9VcYrmJaT3Na1x1MDAxMpfHIP77XqdMXHUwMDFlbVxiZVx1MDAxN0ZEUZv4OtfX1+fc4+R+pdfr67tU9j/0+vLWXHUwMDE3oVxuMnHTXzXt1zLLVVx1MDAxMoNcdFx1MDAxN/d5Ms38oudY6zT/sL5cdTAwMWWJbFwidVx1MDAxYVxuX1rXKp+KMNfTQCWWn0TrSsso/8P8XHUwMDFliUj+niZRoDOrXHUwMDFhZE1cdTAwMDZKJ9lsLFx1MDAxOcpIxjpcdTAwMDfv/8B9r3df/NaiXHUwMDBilIiSOCi6XHUwMDE3hlp4njvfepTERaiUIVx1MDAwN3PqkbKDyrdhMC1cdTAwMDOwXkHAsrKYpn56sbN1pD45eiNcdTAwMWKyfNP5Nvy6d1WNeqXC8FjfhbM8XGJ/PM1kZc11lkzkqVxu9Fx1MDAxOOz2XFx7+VxcnkBcbqqnsmQ6XHUwMDFhxzLPXHUwMDFizySp8JW+M21cYpWtXCJcdTAwMWVcdTAwMTU+qpZbk1x1MDAwMeJamHmO5zpcdTAwMGV1XHUwMDEwqc23cECY5VLsXHUwMDEwh9G5mLaSXHUwMDEw1lx1MDAwMGL6XHUwMDA1XHUwMDE1R1x1MDAxNdVQ+JNcdTAwMTGEXHUwMDE2XHUwMDA3VVx1MDAxZlx1MDAwZvvcrs335sdMa1x1MDAwM46lXHUwMDFhjbVpxNjyXHUwMDEwcT1GZ75r+ZBF/m3P5pRcdTAwMTKMcWkxI6aDoFx1MDAwMMKX+fyNRZY+5qmfm5tatCbQnXlcdTAwMTTVkVRbY+dcIkv5vlx1MDAxYVxmvk7GfyX88CxcdTAwMWRcdTAwMGZcdTAwMGVLX1xy2Gl5q/ul4WG1y+2Ze1x1MDAxMm1cdTAwMGUv7evp9v6BPls7+8jRfrtbkWXJzfN+XHUwMDFiUawuO5HK7eNVlchpXHUwMDFhiFx1MDAxOfZt10XE5sjjXHUwMDBl4aU9VPFcdTAwMDSM8TRcZqu2xJ9UdFmpxbtA0kacdYba5CmG2thQXHUwMDE0XHUwMDEw4i1N0e7le69cdTAwMTSldidFObeAXG6GLP+HoTpcdTAwMTNxnopcZljQwlLWxlK+wErmeraDXFxcdTAwMWK9Piu7kMihOr1cdTAwMDSJ1YInsT5W31x1MDAwYjS5XHUwMDE2hWKEsIsw41x1MDAxY1HW6LUrXCJcdTAwMTXeNdawgCxEvnMrojSUXHUwMDFiafrrb/VcdTAwMTTnXHUwMDEyXCIpXFyTxjNcdTAwMWKhXHUwMDFhXHUwMDE5aPd9mJvMXHUwMDFhqNdcbkSu7Fx1MDAxMKkgXGJrXGL0IVx1MDAxMFx1MDAwMT6zwTKCk2RqpGJcdTAwMTGetMXZScZM+nqGxVx1MDAxNkZS+qRmYlx1MDAwNCDkUJXdpVx1MDAxOXn+PdGXXyfDk+PRwblzQsefkvPLd89IXHUwMDE3W8hlhHheXHUwMDFiI1x1MDAxZNuxXHUwMDEwI9h+U0pSukhJj0GlmFx1MDAxM+tHalx1MDAwMqRcdTAwMTHFXHUwMDFlcV+fml3KXHUwMDE27MfnQ0rOXHUwMDBmtlx1MDAwMrw33tldu9zDn9+jYM78nu5/vr45INuHXHUwMDA3XHUwMDE5XHL+vMNTTLbdV/CLT4PB3u7EP/Q2iH1cdTAwMTKFf+/EXHUwMDE3ozdcdTAwMTX49sS/QOCZkVZe7a/eSOBcdPXmW3+UXHUwMDEzwinUYUKX34J3o+3dVlx1MDAxM9ZZTVxisZhdaNzbXHUwMDE1XHUwMDEz0lJMsDNfREBcdTAwMWFhXHUwMDE3wp2fKu8vx2GbvGPUaO2Q82M/kzJ+SspZo/+rSfkzMjgv5WWMnZSbVZJcdTAwMTbOMfxcdTAwMTTlQCZAv+FcXF7Bu0vxO+Wc43BcdTAwMGJe7lx1MDAxMXNaOYdcdTAwMTm1XFzOjYJcdTAwMTNujjdjXHUwMDFlslxid5vkLlx06Fx1MDAxMIsz7FJcdTAwMTcvyLlcdTAwMDebXuDGf9loXHUwMDE3wf1sJuZaZHpTxYGKR2CslFxm2OhPzbhryEKO7VLCoVx1MDAxNlKOXHTyylmb6YnU7D0tXHUwMDAyckBcdTAwMWPYg1x1MDAxYYxWr5+98kNQ19b4sXMpqX1cdTAwMTlcdTAwMDfPXHUwMDA2hThUX8Tg1Vx1MDAwME7KmLdcdTAwMTBcdTAwMTW24LWh2HVcdTAwMTXfKmyHPVx1MDAxNVY7zVx1MDAxN8JcbkWut5IoUlx1MDAxYdL/MVGxnk9zkc9ccsPvsVx1MDAxNMG8XHUwMDE1plW3zVx1MDAxN4LUeGzu3KqrXsWU4qa8/rLa2nttXHUwMDExweaoYbfysFL/NzuQwmdfpOmxXHUwMDA2pJVrXHUwMDAwYFbBY+GuJta/VvJms+Xb0lVxmDRcdTAwMTYpNCVHmundP6w8/Fx1MDAwYlxiYlx1MDAxObwifQ==        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Cascadia.woff2\");       }      ExampleApp()Screen() <p>This doesn't look much like a tree yet. Let's add a header and a footer to this application, which will create more branches of the tree:</p> dom2.pyOutput <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Header, Footer\nclass ExampleApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield Header()\nyield Footer()\nif __name__ == \"__main__\":\napp = ExampleApp()\napp.run()\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2777504373-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2777504373-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2777504373-r1 { fill: #c5c8c6 } .terminal-2777504373-r2 { fill: #e3e3e3 } .terminal-2777504373-r3 { fill: #e1e1e1 } .terminal-2777504373-r4 { fill: #ddedf9 }      ExampleApp \u2b58ExampleApp </p> <p>With a header and a footer widget the DOM looks like this:</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1aa0/bSFx1MDAxNP3Or0DZL7tS4877UWm1glx1MDAxNpZ3aWFcdTAwMDNlVVWuPSReP2s7QKj633dsgu28XHUwMDFjXHUwMDEzXHUwMDEyNpXWQiGZmdy5nrnnzLk3/r6xudlKXHUwMDA3kWq92WypO8v0XHUwMDFjOzZvW6+y9lx1MDAxYlx1MDAxNSdOXHUwMDE46C6Uf07CfmzlI3tpXHUwMDFhJW9ev/bN2FVp5JmWMm6cpG96Sdq3ndCwQv+1kyo/+SN7PTF99XtcdTAwMTT6dlx1MDAxYVx1MDAxYuUkbWU7aVx1MDAxOD/MpTzlqyBNtPW/9efNze/5a8U72zH9MLDz4XlHxT0hx1tPwiB3XHUwMDE1Ulx1MDAwNLEkklx1MDAxNFx1MDAwM5zknZ4sVbbuvdZcdTAwMGWrsidralxyTi//7Jn/qItLwY5Odq7hh17nvJz12vG8s3TgPayDafX6sSp7kzRcdTAwMGVddeHYaS+bfKy9+F5cdTAwMTLqJSi/XHUwMDE1h/1uL1BJMvKdMDItJ1x1MDAxZOg2XG6KRjPo5ibKlrtsXHUwMDAxIDVcdTAwMTBcdTAwMTdYMIwpXHUwMDA2RJS3m31fSINRhFx05nTMo7ehp3dAe/RcdTAwMGLIr9Knr6bldrVjgV2OXHUwMDExyJKwcre3j/dZma+nnG4vzVx1MDAxYVx1MDAxMTJcdTAwMDQgTHD6YLuyXHUwMDFhKl99yCDjknAhip5sxmjfzsPg8/jq9cw4XHUwMDFhrlIryT5UvM1cdTAwMWPdXHUwMDE5j6FqXHUwMDFjVXbY/bgtrlx1MDAwZTBoR9euc9x7f+6eqm+FrZGgS9Vd2io6fryqM1x1MDAwYjto76vf+3JLOsHX+Pro+vh+f3u6WTOOw9umdpfu7sjoV00nLM1cdTAwMGXflfvTj2wzXHUwMDFkbilcdTAwMDNcdTAwMDTpXHUwMDAwpITgot9zXHUwMDAyV3dcdTAwMDZ9zyvbQsstMbhR8XdcdTAwMDL5I35WYVx1MDAwZsFM2DMuJEKYoca4r1/mNcU9XHUwMDAydbiHXHUwMDA0XHUwMDFhlOZcdTAwMTB8XHUwMDBl7tPYXGaSyIw1tqZgn0/Dvlx1MDAxY8c6oYBwKjFaPtSXXHUwMDE5h+V2h0F65tw/xJJBNcNcdTAwMDHEXHUwMDAw4lJcdTAwMDLKR0btmr7jXHJGdjBcdTAwMGZY7fnOnelHntqKol9/q65worQnuWky8p0tz+lmgd2y9L2peCTmU0efm8VcdTAwMDDfsW2vXHUwMDEyf5Z2xNQ24/0mZ1hcdTAwMTg7XScwvfNpftZCMVZW+lx1MDAxMIpT8EhcdTAwMTmcjcd87Vx1MDAwNGON8eh9ROdcdTAwMDcn51dXXHUwMDFjfGA+3btcbkkvXXc8YmhcdTAwMDDGXHRcdTAwMTFiXHUwMDFhXHUwMDFlXHUwMDExpVx1MDAwNuBcdTAwMDTBlVx1MDAwMpLSSUBcbq55YkxcdTAwMDA8XHUwMDFlwlx1MDAxNHLOKV9cdTAwMDEy6061I6ftfzlcdTAwMWFcdTAwMWO+9c47g0/3XHUwMDFkeb69dbK+h/DFQefm9oi8Oz6Kqf3nXHUwMDAw9Vx1MDAxMXnHlmBcdTAwMTdd2Pt7u651LLZcYjz3vfc7wVV3XHR2l76880TD9Fx0XHUwMDFiekturtt+6rZcdTAwMDdcdTAwMWbIXHUwMDE3c0dYd+q47y9hXHUwMDE1tlx1MDAwZb+ddtPww5dTR4pcdTAwMDO307uEnzrN7DZcdTAwMTE5XHUwMDE4gVx1MDAxMjUrXHUwMDEyOYTNXHUwMDE2OZhcbkkolOWIeaRaXHUwMDFmXHUwMDE260qqrJZUXHUwMDA1MzhcdTAwMDTymclNPaeSKZyKSmHxyKVQICQpYCtIaJZcdTAwMTmI01RcdTAwMGVcdTAwMDIjrTWq5syKlVxuZilcdTAwMWE+Mn5pimaOXHUwMDFhXHUwMDE4VzSFj7WYe8D8XHUwMDE00HExXHUwMDEzc1x1MDAxMFx1MDAxMEq0lm1eUKg/ktZcdTAwMTNzXHUwMDE4XGJDUlx1MDAwMTiejjnIXHImZSZkiMyulSFcdTAwMGZcdTAwMThEslFwXHUwMDE3XHUwMDAwxMSQXHUwMDFjMcrQpKrRniGh4bhcdTAwMDBcdTAwMTJz71x1MDAxNkWiwIwvgsQkNeN021x0bCfo6s7yLNNotPrZvG1gXHUwMDAwrNVcdTAwMWGRmlxmqURcdTAwMDSI4raz2zOjbGNcckKylIdSJlx0YkRWRlxmS2x1XHUwMDE5wnBwcai2VGDPdVxuSE2/gOtcZkn/UV5ip/Bcblx1MDAxOTp7ytVnXlx1MDAwN4KYz3JrOswn3PLMJH1cdTAwMWL6vpPq5T9ccp0gXHUwMDFkX+Z8PbcyfPeUaY/36tuq9o1cdTAwMTNBlFlcdTAwMWNVsOW7zVx1MDAxMir5h+L951dTR7cnQzi7KsFbWtio/l8oXHUwMDA3g1x1MDAwMM1OwpD2g2KEmlx1MDAxN0VOXHUwMDBmXHUwMDA3b4OrvnQv/Y8n9uG9+5f7z81/y1061uaQXHUwMDE31OSFMIJcdTAwMDRcdMr1a4XNM1x1MDAwM4RcdTAwMTBDY4Q9dldy0v84XHUwMDE304QlKIa0dOhFUjHn6F03OtlNXHUwMDBmLv0t92T70N/12zPU9/+p2NPtrmh5l252XoY3fcKG3j4jw3skxdnHblx1MDAwNqfKT0ArysQkJuOtXHUwMDE1ZoX64GWoeXmrfvvWlVkhrmVWzlxmJiBmkIFVM2uzjFxmccZYRqsvmpA9OVx1MDAxZZ+XkO1pXHUwMDE1o+JcdTAwMTdOyOYog/GErPDxXHUwMDE50oaBurSMIy2NafNSiJfsXHUwMDFlmGfx9o06oJ3j+z3w7XhcdTAwMWKsO1x1MDAwMDFhXHUwMDA2gZzAXHUwMDFjX9mvXHUwMDFiY9KGXHUwMDFiWId8MWBdlI3kOkmQ1VrWiyib40+nZF/sWIdcdTAwMDNcdTAwMTd+ci/aN1F/XHUwMDAw/1c2y1I2K1ren8XsPME0fcKG3q60dI04rXLNilx1MDAwNFx1MDAxM6SYjTdcdTAwMTeEzTHQvoAnKKb6/VtXwqawlrC5NCjEWFx1MDAwZVx1MDAwNdVcblx0u2FcdDvLPzlcdTAwMDGlmy8jmJ5cdTAwMTiPz1x1MDAxM0y7YZi+uGCaozfGXHUwMDA1U+FjLfRmVrBcdTAwMTma/UicoEBcdTAwMTJcZnDzXHUwMDEydn32tq7QXHUwMDAzwFx1MDAxMFRcYplVQ1x1MDAwNVx1MDAxNmhcdTAwMDR5WEslwXV+wIfIw6uDXHUwMDFlXHUwMDAyhqSMS0klg1JCMYlEgVxyqZNIJFx1MDAxONY+M4nGgUmAhFx1MDAxNEm0XHUwMDAwMJ9R0F48k5ld0G5Q8C2PuWqlmVBcdTAwMDBcdTAwMDGlXHUwMDAy6pVgXGLDyqjH6jdFXHUwMDE0wmH2KTBcdTAwMWVcdTAwMGWYX89cdTAwMWXxqT61XHUwMDE59YkhoONcZnFJXHUwMDAw1uGEJnyCyOA6USZMZ8Ukq1x1MDAxM6BcdKd+qmr27GDOrokwLu1tVP8/mc8gwLNcdI3RXGbmXFw011x1MDAxMvXqal1cdFxyXHUwMDBiXHUwMDAzScFcdTAwMDVikmnJUFx1MDAxZVRcdTAwMGaEpqVcdTAwMDTCNPuVnFxiQenqXGJNYoNBiHQ8M4xw5cHeks6kgVx1MDAwNOeSUo6ZoHLy2V/B9Z2QhTLCZ/HZokJj2XxcdTAwMDZcZk1j2lx1MDAxYlx1MDAwMfR2MSRk+ZxiwVx1MDAxZNyA+TOTXHUwMDEwPGzognxWrzxGfKJASL1OTGtcdTAwMDRcbinhXHUwMDEzLlx0gzJ9XGZcdTAwMDGYXHUwMDFmm1iIn5rNZlx1MDAwNXJ2TYTwLCrbXHUwMDE4mm+ZUXSW6ngrtkKHtGNcdTAwMGbVaXmPrVx1MDAxYkfdbk95vP46vzLBl69mxkIqu9PvPzZ+/Fx1MDAwYlx0sVx1MDAwYuIifQ==        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Cascadia.woff2\");       }      ExampleApp()Screen()Header()Footer() <p>Note</p> <p>We've simplified the above example somewhat. Both the Header and Footer widgets contain children of their own. When building an app with pre-built widgets you rarely need to know how they are constructed unless you plan on changing the styles of individual components.</p> <p>Both Header and Footer are children of the Screen object.</p> <p>To further explore the DOM, we're going to build a simple dialog with a question and two buttons. To do this we're going to import and use a few more builtin widgets:</p> <ul> <li><code>textual.layout.Container</code> For our top-level dialog.</li> <li><code>textual.layout.Horizontal</code> To arrange widgets left to right.</li> <li><code>textual.widgets.Static</code> For simple content.</li> <li><code>textual.widgets.Button</code> For a clickable button.</li> </ul> dom3.py <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Container, Horizontal\nfrom textual.widgets import Button, Footer, Header, Static\nQUESTION = \"Do you want to learn about Textual CSS?\"\nclass ExampleApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield Header()\nyield Footer()\nyield Container(\nStatic(QUESTION, classes=\"question\"),\nHorizontal(\nButton(\"Yes\", variant=\"success\"),\nButton(\"No\", variant=\"error\"),\nclasses=\"buttons\",\n),\nid=\"dialog\",\n)\nif __name__ == \"__main__\":\napp = ExampleApp()\napp.run()\n</code></pre> <p>We've added a Container to our DOM which (as the name suggests) is a container for other widgets. The container has a number of other widgets passed as positional arguments which will be added as the children of the container. Not all widgets accept child widgets in this way. A Button widget doesn't require any children, for example.</p> <p>Here's the DOM created by the above code:</p>         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Cascadia.woff2\");       }      App()Screen()Header()Footer()Container(    id=\"dialog\")Horizontal(        classes=\"buttons\")Button(        \"Yes\",    variant=\"success\")Button(        \"No\",    variant=\"error\")Static(    QUESTION,        classes=\"questions\") <p>Here's the output from this example:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-579848599-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-579848599-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-579848599-r1 { fill: #c5c8c6 } .terminal-579848599-r2 { fill: #e3e3e3 } .terminal-579848599-r3 { fill: #e1e1e1 } .terminal-579848599-r4 { fill: #7ae998 } .terminal-579848599-r5 { fill: #e76580 } .terminal-579848599-r6 { fill: #0a180e;font-weight: bold } .terminal-579848599-r7 { fill: #f5e5e9;font-weight: bold } .terminal-579848599-r8 { fill: #008139 } .terminal-579848599-r9 { fill: #780028 } .terminal-579848599-r10 { fill: #ddedf9 }      ExampleApp \u2b58ExampleApp Do\u00a0you\u00a0want\u00a0to\u00a0learn\u00a0about\u00a0Textual\u00a0CSS? \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 YesNo \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p> <p>You may recognize some elements in the above screenshot, but it doesn't quite look like a dialog. This is because we haven't added a stylesheet.</p>"},{"location":"guide/CSS/#css-files","title":"CSS files","text":"<p>To add a stylesheet set the <code>CSS_PATH</code> classvar to a relative path:</p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Container, Horizontal\nfrom textual.widgets import Header, Footer, Static, Button\nQUESTION = \"Do you want to learn about Textual CSS?\"\nclass ExampleApp(App):\nCSS_PATH = \"dom4.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Header()\nyield Footer()\nyield Container(\nStatic(QUESTION, classes=\"question\"),\nHorizontal(\nButton(\"Yes\", variant=\"success\"),\nButton(\"No\", variant=\"error\"),\nclasses=\"buttons\",\n),\nid=\"dialog\",\n)\nif __name__ == \"__main__\":\napp = ExampleApp()\napp.run()\n</code></pre> <p>You may have noticed that some constructors have additional keyword arguments: <code>id</code> and <code>classes</code>. These are used by the CSS to identify parts of the DOM. We will cover these in the next section.</p> <p>Here's the CSS file we are applying:</p> <pre><code>/* The top level dialog (a Container) */\n#dialog {\nheight: 100%;\nmargin: 4 8;\nbackground: $panel;\ncolor: $text;\nborder: tall $background;\npadding: 1 2;\n}\n/* The button class */\nButton {\nwidth: 1fr;\n}\n/* Matches the question text */\n.question {\ntext-style: bold;\nheight: 100%;\ncontent-align: center middle;\n}\n/* Matches the button container */\n.buttons {\nwidth: 100%;\nheight: auto;\ndock: bottom;\n}\n</code></pre> <p>The CSS contains a number of rule sets with a selector and a list of rules. You can also add comments with text between <code>/*</code> and <code>*/</code> which will be ignored by Textual. Add comments to leave yourself reminders or to temporarily disable selectors.</p> <p>With the CSS in place, the output looks very different:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1055897990-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1055897990-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1055897990-r1 { fill: #c5c8c6 } .terminal-1055897990-r2 { fill: #e3e3e3 } .terminal-1055897990-r3 { fill: #e1e1e1 } .terminal-1055897990-r4 { fill: #1e1e1e } .terminal-1055897990-r5 { fill: #121212 } .terminal-1055897990-r6 { fill: #e2e3e3;font-weight: bold } .terminal-1055897990-r7 { fill: #7ae998 } .terminal-1055897990-r8 { fill: #e76580 } .terminal-1055897990-r9 { fill: #0a180e;font-weight: bold } .terminal-1055897990-r10 { fill: #f5e5e9;font-weight: bold } .terminal-1055897990-r11 { fill: #008139 } .terminal-1055897990-r12 { fill: #780028 } .terminal-1055897990-r13 { fill: #ddedf9 }      ExampleApp \u2b58ExampleApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258aDo\u00a0you\u00a0want\u00a0to\u00a0learn\u00a0about\u00a0Textual\u00a0CSS?\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258aYesNo\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p>"},{"location":"guide/CSS/#using-multiple-css-files","title":"Using multiple CSS files","text":"<p>You can also set the <code>CSS_PATH</code> class variable to a list of paths. Textual will combine the rules from all of the supplied paths.</p>"},{"location":"guide/CSS/#why-css","title":"Why CSS?","text":"<p>It is reasonable to ask why use CSS at all? Python is a powerful and expressive language. Wouldn't it be easier to set styles in your <code>.py</code> files?</p> <p>A major advantage of CSS is that it separates how your app looks from how it works. Setting styles in Python can generate a lot of spaghetti code which can make it hard to see the important logic in your application.</p> <p>A second advantage of CSS is that you can customize builtin and third-party widgets just as easily as you can your own app or widgets.</p> <p>Finally, Textual CSS allows you to live edit the styles in your app. If you run your application with the following command, any changes you make to the CSS file will be instantly updated in the terminal:</p> <pre><code>textual run my_app.py --dev\n</code></pre> <p>Being able to iterate on the design without restarting the application makes it easier and faster to design beautiful interfaces.</p>"},{"location":"guide/CSS/#selectors","title":"Selectors","text":"<p>A selector is the text which precedes the curly braces in a set of rules. It tells Textual which widgets it should apply the rules to.</p> <p>Selectors can target a kind of widget or a very specific widget. For instance, you could have a selector that modifies all buttons, or you could target an individual button used in one dialog. This gives you a lot of flexibility in customizing your user interface.</p> <p>Let's look at the selectors supported by Textual CSS.</p>"},{"location":"guide/CSS/#type-selector","title":"Type selector","text":"<p>The type selector matches the name of the (Python) class. For example, the following widget can be matched with a <code>Button</code> selector:</p> <pre><code>from textual.widgets import Static\nclass Button(Static):\npass\n</code></pre> <p>The following rule applies a border to this widget:</p> <pre><code>Button {\nborder: solid blue;\n}\n</code></pre> <p>The type selector will also match a widget's base classes. Consequently, a <code>Static</code> selector will also style the button because the <code>Button</code> Python class extends <code>Static</code>.</p> <pre><code>Static {\nbackground: blue;\nborder: rounded white;\n}\n</code></pre> <p>Note</p> <p>The fact that the type selector matches base classes is a departure from browser CSS which doesn't have the same concept.</p> <p>You may have noticed that the <code>border</code> rule exists in both Static and Button. When this happens, Textual will use the most recently defined sub-class within a list of bases. So Button wins over Static, and Static wins over Widget (the base class of all widgets). Hence if both rules were in a stylesheet, the buttons would be \"solid blue\" and not \"rounded white\".</p>"},{"location":"guide/CSS/#id-selector","title":"ID selector","text":"<p>Every Widget can have a single <code>id</code> attribute, which is set via the constructor. The ID should be unique to its container.</p> <p>Here's an example of a widget with an ID:</p> <pre><code>yield Button(id=\"next\")\n</code></pre> <p>You can match an ID with a selector starting with a hash (<code>#</code>). Here is how you might draw a red outline around the above button:</p> <pre><code>#next {\noutline: red;\n}\n</code></pre> <p>A Widget's <code>id</code> attribute can not be changed after the Widget has been constructed.</p>"},{"location":"guide/CSS/#class-name-selector","title":"Class-name selector","text":"<p>Every widget can have a number of class names applied. The term \"class\" here is borrowed from web CSS, and has a different meaning to a Python class. You can think of a CSS class as a tag of sorts. Widgets with the same tag will share styles.</p> <p>CSS classes are set via the widget's <code>classes</code> parameter in the constructor. Here's an example:</p> <pre><code>yield Button(classes=\"success\")\n</code></pre> <p>This button will have a single class called <code>\"success\"</code> which we could target via CSS to make the button a particular color.</p> <p>You may also set multiple classes separated by spaces. For instance, here is a button with both an <code>error</code> class and a <code>disabled</code> class:</p> <pre><code>yield Button(classes=\"error disabled\")\n</code></pre> <p>To match a Widget with a given class in CSS you can precede the class name with a dot (<code>.</code>). Here's a rule with a class selector to match the <code>\"success\"</code> class name:</p> <pre><code>.success {\nbackground: green;\ncolor: white;\n}\n</code></pre> <p>Note</p> <p>You can apply a class name to any widget, which means that widgets of different types could share classes.</p> <p>Class name selectors may be chained together by appending another full stop and class name. The selector will match a widget that has all of the class names set. For instance, the following sets a red background on widgets that have both <code>error</code> and <code>disabled</code> class names.</p> <pre><code>.error.disabled {\nbackground: darkred;\n}\n</code></pre> <p>Unlike the <code>id</code> attribute, a widget's classes can be changed after the widget was created. Adding and removing CSS classes is the recommended way of changing the display while your app is running. There are a few methods you can use to manage CSS classes.</p> <ul> <li>add_class() Adds one or more classes to a widget.</li> <li>remove_class() Removes class name(s) from a widget.</li> <li>toggle_class() Removes a class name if it is present, or adds the name if it's not already present.</li> <li>has_class() Checks if one or more classes are set on a widget.</li> <li>classes Is a frozen set of the class(es) set on a widget.</li> </ul>"},{"location":"guide/CSS/#universal-selector","title":"Universal selector","text":"<p>The universal selector is denoted by an asterisk and will match all widgets.</p> <p>For example, the following will draw a red outline around all widgets:</p> <pre><code>* {\noutline: solid red;\n}\n</code></pre>"},{"location":"guide/CSS/#pseudo-classes","title":"Pseudo classes","text":"<p>Pseudo classes can be used to match widgets in a particular state. Pseudo classes are set automatically by Textual. For instance, you might want a button to have a green background when the mouse cursor moves over it. We can do this with the <code>:hover</code> pseudo selector.</p> <pre><code>Button:hover {\nbackground: green;\n}\n</code></pre> <p>The <code>background: green</code> is only applied to the Button underneath the mouse cursor. When you move the cursor away from the button it will return to its previous background color.</p> <p>Here are some other pseudo classes:</p> <ul> <li><code>:disabled</code> Matches widgets which are in a disabled state.</li> <li><code>:enabled</code> Matches widgets which are in an enabled state.</li> <li><code>:focus</code> Matches widgets which have input focus.</li> <li><code>:focus-within</code> Matches widgets with a focused a child widget.</li> </ul>"},{"location":"guide/CSS/#combinators","title":"Combinators","text":"<p>More sophisticated selectors can be created by combining simple selectors. The logic used to combine selectors is know as a combinator.</p>"},{"location":"guide/CSS/#descendant-combinator","title":"Descendant combinator","text":"<p>If you separate two selectors with a space it will match widgets with the second selector that have an ancestor that matches the first selector.</p> <p>Here's a section of DOM to illustrate this combinator:</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1dWXPiSFx1MDAxMn7vX+HwPOzsRKOp+5iIiVxyfODbbjdu293bXHUwMDEzXHUwMDBljGSQXHUwMDExXHUwMDEylmSwPTH/favARlx1MDAwMiRZXHUwMDFjYmCnefAhQSmVyuP7KiuLPz9sbGyGz1x1MDAxZGvzt41N66lec2zTr/U2P+rjXctcdTAwMGZsz1WnUP//wHv06/13NsOwXHUwMDEz/Pbrr+2a37LCjlOrW0bXXHUwMDBlXHUwMDFla05cdTAwMTA+mrZn1L32r3ZotYP/6J+ntbb1e8drm6FvRFx1MDAxNylZplx1MDAxZHr+4FqWY7UtN1xm1Oj/Vf9vbPzZ/1x1MDAxOZPOt+phzW04Vv9cdTAwMDP9UzFcdTAwMDFcdTAwMTEg44dPPbcvLVx1MDAxNFx1MDAxY1x1MDAwYimAkMN32MGOumBomer0nVx1MDAxMtqKzpj9a1x1MDAwNVx1MDAwN7x5b1Pil1x1MDAxOWx/2nX2v5Ur0XXvbMephs/OQFx1MDAxN7V689GPSVx1MDAxNYS+17KubDNs6quPXHUwMDFkXHUwMDFmfi7wlFx1MDAxYaJP+d5jo+laQTDyXHUwMDE5r1Or2+GzPlx1MDAwNsDw6EBccr9tREee1H+UY4MxTlx1MDAwNGFcdTAwMDBxQfDwrP48ZtJcdTAwMDBEQCoxoOokXHUwMDE5k2vbc9SzUHL9ZDHOXHUwMDAxiCS7rdVbXHIlnmtcdTAwMGXfXHUwMDEz+jU36NR89cSi9/Xe7pix4bGmZTeaoTooRHQ9q693iFx1MDAwMFaCMFx1MDAxYd2FvkrnwOxcdTAwMWLBXHUwMDFm43pr1vzOq342XHUwMDAz/U9MQi3c7rhcdTAwMDXFrSj2bKl7V7rCsve1aVx1MDAxZcKb26dcdTAwMTPGYDBcdTAwMWNrxORC6yncXHUwMDFjnvjrY9aw7W9fji727ra64ZfLw9557+Wk0blNXHUwMDFltub7Xi/vuFeHl93eMdk5OfapufeMXHUwMDFlXHUwMDEx2WFcdTAwMGJcdTAwMThcdTAwMTddmVx1MDAwN/uVVv1ElFx0vGg7Z7vut8ZcdTAwMDLGLUi96zXs8ePOPpDXXHUwMDA3L0934qhSMZ9uat3eXHUwMDBm5S5m2H1rXHUwMDBmXHUwMDA33bpdvtm+XHUwMDBi7ytcdTAwMDe75fOr47mUO1wixce8N5JT3Obxdlx1MDAwZmBcdTAwMGK07zudg6Pj7svN+U6YT9zXv6JQ+Ngxa4OspYIsJJBcIiZcdTAwMDSPwq1juy110n10nOiYV29Fie5DTOCJXHUwMDE0O3L/I9lcdTAwMTWK8cNv2ZVzKiHjMMpZ7yXXbLNY2eQqspKrIFx1MDAwNl1OcqVcdMmV8vHkilR2RVx1MDAxY9LosS0sty7SXHUwMDFho4fuuWHVfunDNTZytFJr287zyHPrm6mSdFudrtmu5f/83dUnbPP375umXXO8xvfN7+6/41pcdTAwMGUsJY1cdTAwMWWeopFxyo7d0Ca+6Vh3o7ZcdTAwMWbaXG6oXHUwMDBlT7dt04xDz/rbtVx1MDAwZvJcdTAwMDBGz7dcdTAwMWK2W3Mu8kqe6abZSJhClOarkCtcdTAwMTAsOVx1MDAxMjy3s55fPDjWS3nr8XHr5MA5Obt2ryv3f6+z0nd9lVx1MDAwMYNCXHRcYodcdL5KMTOkgJwqV9W+SlN9XHUwMDE19F9z+KpcdTAwMDSTvirYhK9cdTAwMDKAMYNAXHUwMDE24KxZiem+etjYvfDc7Va9xfyn1sG31kNKYvpcdTAwMDGEp1x1MDAxZrcg9a7XsEVcdTAwMDHh9dLChd/c6d12rYtcdTAwMTBcdTAwMWY6XHUwMDEwiZfWeWc+xLqOWlg8blx1MDAxZoyLn1x1MDAxZkpfkajUQ9JcdKrW887Z9lx1MDAwM1/AuGZcdTAwMWJcXG57h597leujbafb8XdvXHUwMDFiuFCekaz4aNjXvzJcdTAwMTFcdTAwMThmJMr/RfFcdTAwMDGKU/lcdTAwMDCkilx1MDAwYlxiRkGUV9/DXHUwMDE42fa2qlx1MDAxOINmYVxmXG5ccrJcdTAwMWOMIVx1MDAxMjDGJFx1MDAxZpCAXHUwMDEzIFxiL2CubZHWOFx1MDAxZlx1MDAxZthXMPtFI2vnZ318XHUwMDAwretOLVxirEDh69vHMPTcYNnU4Fx1MDAxZFx1MDAwND1OXHKmuYlM581mXHRcXKbOlzPMXHUwMDA1Izj/bPmX8PzCe3q+2eptnZ1+uXj5/PKpzFL8d8xcdTAwMGb/LjpPODGApFxiXG7JuXJfQkb8lyNqKCpcdTAwMGJcdFx1MDAxM8rJXHRcdTAwMTfz+O9PXHUwMDEw3VxuoajxzFxmXHUwMDAxXHUwMDEyrKRcdTAwMDScocW7b1ZcdTAwMDZkrOneyy77elolnYY8wkfHj5X5gcBcdTAwMGaGUKh612vYolx1MDAxOMJ6aaEohrBeWnDk1ra43dsm24xZ1Yujp0alssK2sHyCkHwjOcWtXHUwMDFmnV6QzrF/+tXfvjWt44483vuyuELEUoiHiNWWx4lcdTAwMDeTXHUwMDEwXCKJRX7ikW1cdTAwMTcrWokgXFxmQlx1MDAxNypccrwo6DI99YBcdTAwMTFsfJvepLpARPCyS1x1MDAxMUulXHUwMDFlW31Y/vP3za+WwubJ9Fx1MDAwMpKRj1xy+UNd3Y7lz04w3oHf41x1MDAwNGNcXNRMR8wmXHUwMDExXCK2pGbMXHUwMDFiXHUwMDExXHUwMDA0XGZDOUVZkMPKWYvsud3mXvUlaODnXHUwMDEz379ebVx1MDAxNsEkMqBSXHUwMDAye3XF0UlcdTAwMDBNXCKo1GW41SBcdTAwMTFAeyElYMkk4iGQlaP2WZVcdTAwMWOet2jFNe/RzqfLXHUwMDFmJGJRJKIg9a7XsEWRiPXSQlEkYr20UFx1MDAxNIlYLy0svijyXHUwMDFlN0m+kWjY17/+flx1MDAwZSFlOodAurTBXHUwMDEwyT/5mf38VpRDMMmzgFx1MDAwYtVcZmNBwGVcdTAwMTFcdTAwMTSCS0VcdTAwMWZcYohhmv9nXG5x6i2bQbxcdTAwMDO9U1x1MDAxOcRA0kwvXHUwMDFjXHUwMDA0l1x1MDAwNDdkIL2EXGIh1oYp83thdm15NUuITFx1MDAxN1x0XHRjXHUwMDE0YFwigEQjPkhcdTAwMThVJ1x1MDAxMZVcdTAwMTJDKinjhfkgMDBcdTAwMDZUcixcdTAwMTCmXGIozdNJn2TSgMopKIVCxVx1MDAwZS7wuItcIlx1MDAwMDliKFZVyu2ifVlndVHC4UxcdTAwMGJcdTAwMGWDsOaHW7Zr2m5DnYwy3VsnSp51fX2nrj9cdTAwMDZ9LVx1MDAwMkY5xVxcqVx1MDAxMFx0XHUwMDE5X1x1MDAwM6p1UetoTmZgSVxiXHUwMDAxQFExiFV4fX3DMONuWq75vkzZXHUwMDA1xZhMJSVcdTAwMTTmXHUwMDAwqStcIlxuoZIv8rmhUMjAnDMpKEVcdTAwMTLolDAhlFNcdTAwMGLCba/dtkOl+0+e7YbjOu4rs6w9vWnVzPGz6qbi58ZDQkePOMpcIqO/Nlwin+n/M/z7j4/J7043Zv2aMONovFx1MDAwZvHfU0czXGJcdTAwMDFcdTAwMWU/PKynXHUwMDAySFx1MDAwNIQyesN70SxcdTAwMWK8rSqmYMTgXHUwMDAyMimFJJLEVozrzzNMXGYqMUOIUPVcdTAwMDY2LtdcdTAwMDIxXHUwMDA1xFx1MDAwNkZQXHUwMDFiPEbKolGk92h2XHUwMDA0XHUwMDE4XGZzhFx0xFx1MDAwNKugXHUwMDE1W58xXGJnXHUwMDAyS6DcgswwVzJXOJtcdTAwMTVx5FxmZ7lDXHUwMDA3MFxiplx1MDAxOCCgMCDAkkNcdTAwMWPzo9fIXHUwMDAxocH0Ulx1MDAxZklcdTAwMDBcdTAwMDE6XHUwMDE0z1x1MDAxNs6ywceoTFxiS8l1L1x1MDAxZmBcdTAwMDKDJJlUXHUwMDAwoFKrknKOXHUwMDEw4utcdTAwMWTO0m1ZvyaseFHRLD5tO4HNJCfKmfNcdTAwMDez7CrZqlx1MDAwNjMsXGaKXHUwMDEwg0JiXHUwMDE1zMZjXHUwMDE5M1x1MDAwMMVcdTAwMWF8MJX1i1x1MDAwYmVSKmvGkimszFWWTmr9XHUwMDEwKuhcIqFbXFxcdTAwMTGEKn5MrPyCXG6VIKpS/z81lJU0JiCSqidJmYLZQrCYXHUwMDE3vcVccmyoUKf8jFx1MDAwM4XFlabfkMGUwSy7XHUwMDE2MyqVTodSuVx1MDAxM0QqpElcdTAwMDQnhKJcdTAwMDZcdTAwMDRUhVfOgZZrUqR1XG5lpVRj1q9cdDOeMpRl1qlcdTAwMTQySVxyZyq39d08f9HYadbA2XFnL7Shf0rK7Z3wyjxdcapJdEfMSFxmQ0hcdTAwMThQQlx1MDAwMlx1MDAxOCpwcSpNoJKCXHUwMDFiiKtcdTAwMDTCJ0BcdTAwMTfGkGDFhJfcXHUwMDEw7jlP1XLrwobynpZcdTAwMWN0ePxcdTAwMTLUq/PPwJ6cXHUwMDFmvHytPF2H/o5ValaDa47I3T+wQFWQelx1MDAwYlx1MDAxYZZ37f3Kwy5s+7s35k7YRd0zZ1x1MDAxMVogwO9At1s/vapcdTAwMWOdiqudK+8kPFpd7d7et8ufnC6DNCxtmbJxdKqyWqHlg+RcdTAwMWLJKe5cdTAwMWM91pnjfjmzzmXpwWqJ3a8v95/cs8vSXU5reEtb70CkXGJHXHUwMDE3VO6gNH2elWFFXHUwMDFmXHUwMDE0ssjfXHUwMDBlmm1uq5r86Hjyo9JcdTAwMTBcbm5cdTAwMTSZ+khC6kNcdTAwMTPTpopaKFx1MDAxNlFExluk4UXPNypsIDByNKOwUa37luX+nFLS4CPvX1hJ41x1MDAxZJQ2XtJcdTAwMTjKmOljqYSZp1ZcdTAwMTSFXHUwMDAy+EDPUud2sexYtpouRlx0MahmWFx1MDAxYzLEYUxcdTAwMWT93Vx1MDAxMaA0KKSFXCJNXGJcciggZlSRKSooTZj0IypcZqQgT6hcdTAwMWVRX+5cdTAwMTkqjPOWL/gsjpiTJGd7wUZ8bo1KrtNcdTAwMDElkjCMXHUwMDEyKDIxXHUwMDAwXHUwMDA1XFxcdTAwMDfN1zNTUuMpSilMPVx1MDAwZu04XHUwMDA0ci6jRqS4KEA339F+c1x1MDAxZJZyQqJ1YsbptqtfMauNXHUwMDA2+lx1MDAxMP8929pNlE6KXHTlXGIjPsVcdTAwMWPf+YV74MnHo93OTfPo7vzm0uJcdTAwMGbWiscsjJShgdGwNNgoTShwQFx1MDAxMFx1MDAxNJz2o1x1MDAxMlx1MDAxYpNogVEr305pSGFcdTAwMDTlnXyG2upcXFx1MDAxYqV99tF1q/n5oXlwWeru032zu3OfXGZ+fyzcnH7cgtS7XsNcdTAwMTa2UdpaaaGgYYvacKEgcVx1MDAxN0/i393XLfFGcor7cIvLVVRmdyc7XHUwMDE31WvvM7l7MlvrNTeAkEhdtVx1MDAwMLFUp5mg+SdcdTAwMDey7WJVUVx1MDAwME1GXHUwMDAxglx1MDAxOHhJKCDflm5QXGJcdTAwMDSgXHUwMDEyqID+jaInXHUwMDBi5tzTLbBN67bmL3/nhkxUm2tTt1x1MDAxMdHngOtZJXmqWFx1MDAxOVx1MDAwNGCKXd26veolsvDR4fVpq1x0fdn4dmydpHhq3feCoNSshfXm3++tXHUwMDEwXHUwMDE5irlob1x1MDAwNWNe2f88YobgXHUwMDA1zjJwPumpXHSdVlxiXCLMgIRL3tCtVVx1MDAwNtf7N4dP5llcdTAwMGaf7l1cdTAwMTDzmJXdXHUwMDFmgH1RgL0g9a7XsEVcdTAwMDH29dJCUZ1W66WFojqtXG5cdTAwMTJ38ds1XHUwMDE0JO57tCX5gjmlnYO2ZI5bpdVnSlx1MDAwZt2DXHUwMDFitoPuXHUwMDFliLtXPkwhhStLh6RM7WdXUiBAOEf5XHUwMDBiOdl2saJ0XGLyTIBFoIGLXHUwMDA0WCxcdTAwMDFgTVIhLplUkFx1MDAxN69h2XTqfjB9bMAnvm9cdTAwMWW4QVhznGXzoHfYQkp7WKrgmb6Z3i+W3rQpOVx1MDAwMphROMWOdZnrOlbTNSlcdTAwMTaGXHUwMDE4W7XwVl3tN1x1MDAxY1x1MDAxNemXRK/PXHUwMDFjxIVJXHUwMDA3JdKgjI0tJVx1MDAxY+5Dj1VUXHUwMDE1s1CheVdcdTAwMWbP5KqLLqyWgMGERIxJXHUwMDE1WpmEOKr3bkTlTIIxlVGFL6WyOir/XHUwMDFhVThLSfajXzHLicb4XHUwMDEw/z11nIgtZlx1MDAxYe/DYlxcb6RI85c1s7HSaoZcdFx1MDAwMqhBqMBcdTAwMTKqZIpZbHnBoK2UXHUwMDE4sexe5LQm0F83JaTuXHUwMDFml0xFZ0FcdTAwMTJyO4OGnmIl8vVcdTAwMTX74ozXuVx1MDAxNEgp5ZLPsjn+Klx1MDAwN5DsucXRXHUwMDAwotuwXHUwMDAwJZjplUSQxL4oYFx1MDAxOEK4IbBKglx1MDAxMFxyNJnQK5BrjUZ2pt9cdTAwMThpd1VcdTAwMDJJSlx0XHUwMDEyglx1MDAwYoZcdTAwMTPaXSfbW9cpZmWYr35NXHUwMDE47pTxK70kk1qRwSp5UEbzdypcdTAwMWP4n+Wlc/FcYus9XHUwMDFmXHUwMDA1l1x1MDAwN95J2fs8+ywvXHUwMDFh97VcdTAwMWMhLIpN03RfIVx1MDAwMlxmoWyLxSdz+ztTXGJmXGIwWIU0T+D66a5GXHUwMDExRYm7aaHoPqOFm5MrxpBe76ZcdTAwMDRZ8qKM4jdxXFzewtC2traNsGlcdTAwMDVWXCKbiYHGadhM6HXSqMzIrYzzlrg4s2FcdTAwMGYq0796R1LdcVx1MDAxZW98fs99s1x1MDAxZvVS3He25knMXHUwMDEzvLTvvlx1MDAxMlx1MDAxOFhcbiwwXHUwMDAzXHUwMDFjXHUwMDAzmr6pRY6vycrwYa5cdTAwMThcdTAwMTFcdTAwMWWjRNH2MsRQaVx1MDAxMlx1MDAwMVxyyrnKp5N7WWi6XCJcdTAwMTBe9lZcdTAwMTZcdTAwMDUjjuxsMJLbXHUwMDExXHUwMDAwXHUwMDEyXHUwMDEzhiBVhEVSjmLvXHUwMDFh9ktKQvHMi0Fz90lqYaR6XoLrfnxAJUlo3uRcbvFcdTAwMTJFoF43ROVcdTAwMTMyrVx1MDAxM/BIMF79Kk3a7YIgXHUwMDA3lOlcdTAwMWRcIpwjpU+FP3NHLeubXHUwMDBm7ZOtW8e8XHUwMDExqGe13Fx1MDAxNv+yv1x1MDAxNqBcdTAwMDNcdTAwMTNcdTAwMTW1JjGHOmAw2bf1oiCHiEJNXHUwMDA25GBSXHUwMDExOimW/SVcdTAwMDCrNbE/XHUwMDFm4vjF9Nx/hb9svKV6O1hcdTAwMDXgkSDVbPhcdTAwMDPFZsTH9+NcdTAwMDVUXHUwMDA1T8R5fk/OfvCrjD9cdTAwMTAxMMaC6u2zIIjvXHUwMDEw1XdoXHUwMDE1YYnsr+wqXGJ/MGlwyoWKXHUwMDE5XHUwMDEyYUXdo4npqKjBjMGU31x1MDAwNLFcdTAwMTCMU5XIwLJbUVxuhlx1MDAxZtl5YWNkwlx1MDAwMynlYaQ3RVx1MDAxMIIgNDndIYz+ZMeM4CP3LIdcdTAwMTJF51lcYlx1MDAwMVwiXGbr73lcdTAwMTJsQlx1MDAxNjiQN0madYJcdTAwMWSpNqtfpaG5pmGOXHUwMDBmr1x1MDAwM2/WOp1qqGxrqH9lvrb5XHUwMDFhqaO72+zaVm8ryav6L1x1MDAxZFx1MDAwMPt61GHG0vf4519cdTAwMWb++lx1MDAxZow/wb0ifQ==        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      Container(    id=\"dialog\")Horizontal(        classes=\"buttons\")Button(\"Yes\")Button(\"No\")Screen()Container(    id=\"sidebar\")Button(        \"Install\")match these*don't* match this <p>Let's say we want to make the text of the buttons in the dialog bold, but we don't want to change the Button in the sidebar. We can do this with the following rule:</p> <pre><code>#dialog Button {\ntext-style: bold;\n}\n</code></pre> <p>The <code>#dialog Button</code> selector matches all buttons that are below the widget with an ID of \"dialog\". No other buttons will be matched.</p> <p>As with all selectors, you can combine as many as you wish. The following will match a <code>Button</code> that is under a <code>Horizontal</code> widget and under a widget with an id of <code>\"dialog\"</code>:</p> <pre><code>#dialog Horizontal Button {\ntext-style: bold;\n}\n</code></pre>"},{"location":"guide/CSS/#child-combinator","title":"Child combinator","text":"<p>The child combinator is similar to the descendant combinator but will only match an immediate child. To create a child combinator, separate two selectors with a greater than symbol (<code>&gt;</code>). Any whitespace around the <code>&gt;</code> will be ignored.</p> <p>Let's use this to match the Button in the sidebar given the following DOM:</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1daXPayFx1MDAxNv2eX+HyfMmrXHUwMDFhNL0vUzX1ylx1MDAxYl6It1x1MDAxOMdxXqamXHUwMDA0yFi2QFjIYDw1//3dxlx1MDAxOFx0kFx1MDAwNDiIQCaaqlx1MDAxOCTRurp9l3P6dvf8/W5jYzPstZzN3zc2naeq7bm1wO5u/mrOd5yg7fpNuET639v+Y1Dt33lcdTAwMWKGrfbvv/3WsIN7J2x5dtWxOm770fba4WPN9a2q3/jNXHKdRvu/5t9cdTAwMTO74fzR8lx1MDAxYrUwsKKHXHUwMDE0nJpcdTAwMWL6wcuzXHUwMDFjz2k4zbBccq3/XHUwMDBmvm9s/N3/NyZd4FRDu1n3nP5cdTAwMGb6l2JcdTAwMDJcdTAwMTLKx0+f+M2+tJgxxKhiWFx1MDAwZe9w27vwwNCpweVcdTAwMWJcdTAwMTDaia6YU5unT1x1MDAwZr3CcfehXFyq1iv+x6B81Ph4XHUwMDE1PffG9byLsOe96MKu3j5cdTAwMDYxqdph4N87V24tvDVPXHUwMDFmOz/8XdtcdTAwMDc1RL9cbvzH+m3TabdHfuO37KpcdTAwMWL24Fx1MDAxY0fDky9a+H0jOvNkblDIYkQxoZSgSpPhRfNrirhFJOiAIcSU0HxMqlx1MDAxZN+Dnlx1MDAwMKl+Qf0jkqtiV+/rIFxcsza8J1xm7Ga7ZVx1MDAwN9Bf0X3d1/dcdTAwMTVieO7Wceu3IZxUKnqe09e6VlJcdTAwMTKCWNQn5iGtw1rfXHUwMDAy/lx1MDAxY1farVx1MDAxZLRcdTAwMDbK2WybLzFcdTAwMDGNbHvj5lx1MDAxMzehWMdcdTAwMWU3gkcquttb+1x1MDAwNz1153/aqYf+zrCtXHUwMDExe1x1MDAwYp2ncHN44Z9fs5ptfLkslfdvtjvh5aej7nn3+bjeqiQ3a1x1MDAwN4HfnbXdq6NPne5cdTAwMDe2e/wh4LX9XHUwMDFleSRsVyygXXJVOzwo3leP1Vx1MDAxNsPlhne61/xSX0C7Oal3vZr98Lh7gPTnw+enXHUwMDFiVSpcdTAwMTZrT3/Zne5P5S6m2eYneVx1MDAxM1xcf9zzd0J9dl1raX5Fb1ZXucGjLu70xNlflza9Pqtf1vjV0dk3iTtcIsWvs75I1OzgU1x1MDAxNGFcdTAwMWZbNfslXHUwMDEzQuiG5KBcdTAwMDX8p/Twuuc27+Fi89HzonN+9T5Knu9i8k6k7Vx1MDAxMTlHMjZT46eHXHUwMDE5XHUwMDFicoMkSNCZXHUwMDEzdnb3rWrC5lx1MDAxOVx0myBLLidh84SEzaO8PEjYkKtcdTAwMDVcdTAwMTOYxSxjYVx1MDAxOXuRxlx1MDAxOPW531xmL9znvj2JkbNFu+F6vZFu61spSLpcdTAwMDOXbbfpXHUwMDA07782zVx1MDAwNbf2x9fNmmt7fv3r5tfmf+JqbjsgjWmek5F2tjy3bix803NuRk0/dFx1MDAwMftcdTAwMGUvN9xaLY5mq6/PPpxcdTAwMDWD+oFbd5u2V55V8kwvzVx1MDAwNtec41RX5eDHWjOGZ/bVx+1tzfZ6qHhyt9XcVzLsnlx1MDAwNEer7qtCWkQhRDGd9FUmqUVcdTAwMTlTXHUwMDA0XHUwMDEx3vfVXHUwMDFjnVWjSWdVYtxZmWZcdTAwMTBBOc7BV7Oy3e5D8S44Oz54OC/uljpN++7y41x1MDAxN/cnul5cdTAwMTS6zkm969VsXuh6vbRQXHUwMDBlbne7lY5TXHUwMDBl6ZGHiXq+P299+NdpIS8ycNCz5e1e62z3ktxXXHUwMDFmcIufXHUwMDFmXHUwMDFl11x1MDAxNtBuVVx1MDAxY5/xc9ooXHUwMDFl1IJS4aSwfVK8JavYa9NIRvJcdTAwMDOjZlx1MDAwN5++P8ngUoyfXHUwMDFlXCJcdTAwMTdcIjHVUszBMrL1vKLIRZJcZuSipKWWhFxcVFx1MDAwMnKZpFx1MDAxOVpSjaj6sVnGXHUwMDAxgPdng9e99+b8XHUwMDBiYK96drvttFx1MDAwMbVXXHUwMDFlw9BvtpdNOKbg8nHCMc9LZDpvNvdQKHVgXzGwXHUwMDEzhYme2YErXb3fKNRDXSn0XHUwMDBlnXapt394WllxXHUwMDA3ZmZcXJ9LKbg0fkFGPVhcYmJhLFx1MDAxOcKcI+M835t6SI6QknHGuFx1MDAxNOqx5fTY/vmhf1cv71x1MDAxNLYudz63y92Ugbaf1GP+dnNS73o1m1x1MDAxN/VYLy3kRT3WS1x1MDAwYp7e3lGV/Vx1MDAxZLYjhHNRLj3Vi8VcdTAwMTW2hbyYx8LFncY8klx1MDAxZlx1MDAxODU7+PT9mYfSLJV5IFwiIFczOfuYabaeV1x1MDAxNbjwLOCiuSWWXHUwMDAzXFySmEdsaPSVeSBcZlxmXGKxXHUwMDFjgMtcdTAwMTRrjFx1MDAwMau8mcd2XHUwMDFmlb//unntXHUwMDAwNE9mXHUwMDE3mI38bEhcdTAwMWaq8DpO8HZ+MVx1MDAwNXyP84txUTPdMJtDQNem+lwiVlxuXHUwMDBijsXsJOLx+aDTPH1+vmS03PN4VTS/PFx1MDAxN1fcXHUwMDE3wcgspFx1MDAxNXDrXHUwMDE3X1x1MDAxY+NcdTAwMTDYklpcIqXRanBcYkqxXHUwMDE2XFzFRiOWwiGuXHUwMDBlXHUwMDBmzz5cXD8/bFx1MDAxZlx1MDAxNC78QtdcdTAwMGWfPznHPznEojhETupdr2bz4lx1MDAxMOulhbw4xHppIS9cdTAwMGWxXlrIq9iycHGnUZPkXHUwMDA3Rs1cdTAwMGU+LVx1MDAxMlxmZmKiNGpCXHUwMDExkuOnI2pcIjlSfJ6iSLaeV1x1MDAxM1x1MDAwZUnEMuBcdTAwMTAwXHUwMDEzslx1MDAxYzg0XHUwMDFiM8GaKVx1MDAwMmLKXHUwMDFjJkuvIDU58ZfNTKYg+lRm8lwiaaZcdTAwMTO+hKxcdTAwMDQvlFx1MDAwNKU6IcdSKCb57E6YXVx0X00nXHUwMDA0hG9cdTAwMTFwQLAyjlx1MDAxMJd8xFx1MDAwYlx1MDAxOcKWkERx+MC0XCKxQu6i3Vx1MDAxMFlAOFx1MDAxMMZcXEumheI0NnQzdEuhISgwXCKgZ1x1MDAwNHiimvRSjLjCwHDo/F7aXHUwMDE3dtle2lx1MDAwZe0g3HabNbdZh4tRrntdjDPLPMS+X1dcdTAwMWbbfTVcIlx1MDAwMb1IJSeIKOgyLWN31e2W4XpcdTAwMTYolzGEjL4pkXhwwzDnbjrN2nSZskuVMZlcbiBcdTAwMTSViMBcdTAwMTNcdMdA9LlSfEIqYlEphVx1MDAwNsJJNIJAKyak8ux2uOM3XHUwMDFhblxiyj/z3WY4ruS+NreMt986dm38KrxV/Np4WGiZXHUwMDE2R/lp9Gkj8pv+l+HnP39NvjvdnM0xYchRe+/if+eOaJjg1MlcdTAwMTbgXHUwMDE1nDGsZ1x1MDAxZvHMhoUrXHUwMDFh0SS2OIGghSRYN4uiSP/XXHUwMDEyWVx1MDAxYZCVMkNcdTAwMWKaxIZDXHUwMDE3XHUwMDBlKzC1qFCKQWDlbGTSRzTogiymXHUwMDAwXHUwMDAyMZCTgj3EJn5cZuq4mijMwWt+rGg2c+RcdTAwMDD9UI6FMj5EXHUwMDA0pFx1MDAxZlx1MDAxNvOiQdzAkKKwXHUwMDE5NWaIIU5cdTAwMDR7YzTLhFx1MDAxZqMyXHUwMDExqjX4rEJIKFxuXHUwMDFkPSlcdTAwMTO4P9dcZnPCzVxuO1x1MDAxMHytg1m6LZtjwopcdTAwMTdcdTAwMTbLIGWkwjOALIRcbj7HvJPs8tuKXHUwMDA2M8aBIyHMTWKkMjZA/lx1MDAxMs2IxbAwI7VcXFx1MDAwYinHxVpcXDTTXHUwMDFh+phA0NRcdTAwMWNDOoutXHUwMDFhioJcdTAwMTmz4CqVcFx1MDAxZsZE0IlZZVx1MDAxOEJcdTAwMTlcdTAwMDNcdTAwMGbG/9ZoVjCggHFMXHUwMDAwalx1MDAxM1xiaYyihHBGLUhcXFx1MDAwMJOAXHUwMDFlQ1xu44K+LZ5lXHUwMDE3ekal4lx1MDAxYfA/1lx1MDAxMlx1MDAxM4hqmuBcdKG4XHUwMDA1uFx1MDAxYVwirJTIyDUp0jpFs0KqMZtjwoznjGaZRTBcdTAwMTnjJWNcdTAwMDGNaCyQmme1nfZKl6Wb+6fS9dVFrfaJ2Fx1MDAxN1x1MDAxZj6ueDhjZlx1MDAwNY8wuYJAzkYyXG4j/eFcYlx1MDAwMbpcdTAwMDeEKlx1MDAwMbVpXHUwMDA0d+RcdTAwMDfOYlWtKICBbPBoKidgXHUwMDE4QGZcdLQknmyWUlx1MDAwYrvrlu9cXO+ycdTuak4qXi0sep++fbD3+Pzw+br49DlcZnadwu1F+7MkbFx1MDAxMTP2161cdTAwMTaWk3pzalZ23IPiw1x1MDAxZW5cdTAwMDR7f9V2w1x1MDAwZemceovQXHUwMDAyQ0FcdTAwMGI3O9WTq2LpRF3tXvnHYWl1tVu5a2ydeVx1MDAxZIF5WNiu6XrpxH/qra64i197PlDD58NcdTAwMTLx2lx1MDAxN6p1etxmndZt6ZBfflO70yoryVxuipp9zY5cdTAwMGJEYpmJNq2yXHUwMDAySDiVNCDgYkQxOnuWzTaLXHUwMDE1zbJmtUl6ltXCgoSGXHUwMDAx5+mcsyxLyLIk0v1rdqVUamqw1uKza96VlVj9YEpl5aJcdTAwMWE4TvN9Sk1Fjty/sJrKXHUwMDE0jDheU1x1MDAxOcqY6XjpfF2lbyZBgD4gTdjs2z9lR87V9DzOsVx1MDAwNWRcdTAwMWNcXItcdTAwMTGqXGJcdTAwMWatpsB3S0klluB5XHUwMDE4XHUwMDAzi1SUaOCZSopYrXnoiIybMlx1MDAwMFx1MDAwN8ebwLtcdTAwMDQhRpjW4lxyeHeVmXq2O2zEx/i4llx1MDAwMuJcdTAwMTJcdTAwMDeWLijhMYo4oMTMQlx1MDAxY1RcZtpcdTAwMWJcXJmTn89R0Vx1MDAxMVx1MDAxOFx0XHUwMDA19JxhXHSBMqGgXHUwMDAzsiCgsohzbpKb1lx1MDAxM1wirVx1MDAxMz9PN15zxMw2auhd/O/bpqfSdGpcdTAwMGVsUYE7izm217huPV2497RyfcnK4fn+XHUwMDE26dyffl7x4EWJtKggXHUwMDFjSHpcdTAwMDJsMJvXYWVqwfqFnH/33eugQ1x1MDAxOFn+XCK34z1WPFdq9+amVun2yrf+VlhOISA/J6jO325O6l2vZnPbvW6ttJBTs7ntXpePuHmNIOQk7nn9oX7uXFw9XHUwMDEwLb94lyeNtt1yUsZRXHUwMDE2tdle4otEzb6Cg+89MEEoSV1cdTAwMDFDMCFCKI5nh1x1MDAxONn9t6JcdTAwMTCDkiyIQVx1MDAwMOsuXHRizLbfXHUwMDFlxpIjSlx1MDAwMX2v39DEN+6313ZrTsVcdTAwMGWWvf/FXHUwMDE04DzThnsjome66pRcdTAwMTVr6ZtjMsaAiDE++3DG9lHTx1xi6JdDjypP5Vx1MDAxMr7URSfFXcfcbtRZx6csvdVZMZrqrVhbXGZpRvCLt45OPmCCWIJcbo6Y+PbRjF8wqSgllEpwVZkweJGw5Vx1MDAwNSZcdTAwMTKx+Fx1MDAwNNalsIHzvaND9CRLN6dXLr66PdNfetf7P9nAothATupdr2bzYlx1MDAwM+ulhbyWq62XXHUwMDE28lqulpO4eW15sV6dtnxOlPxcIjOKe1rd3T65bqn60Ze7Y7vje0/bjM0m7uDTd+daXHUwMDE00dTldUT3t9mLIYVp2C3bLL5cdTAwMGLVmlx1MDAwMb1cdTAwMTGWhd6ktPCi0NuU0dxcdTAwMDT8lrC1uWRMXHUwMDAzXHUwMDA0zFx1MDAwMb+tXHUwMDBl01x1MDAxYSxaM+de+MrXzcNmO7Q9b9k8a1xuXHUwMDFkSVltlyp4ppOmXHUwMDE3jFx1MDAxOUl1Ulx1MDAwNCleUDVcdTAwMDfDyp5cdTAwMTKzmlx1MDAwM1winHFLMCp14oBcYuHCMsMgS3BSxixJiOCCJMzZYNriQjAkJkvFVCBwJPKWXUJ+iEpxwVxmWWlcIoSmXHUwMDEwZzWmOKk8yyjlmsoppeJR+deoYltIMlx1MDAxZnPEXGYnauNd/O/8MYOn1mk55cpUjGfP65m4bDUjXHUwMDA2w8Si4OuvQ6hcdCt2XHUwMDExNsaY91x1MDAxY1x1MDAxM2RcdTAwMTFuZvQogYmAXGJcdTAwMTCb2Fx1MDAxNa3XNZNcdTAwMTckVlx0U6qppGZcdTAwMDe2t+T7VVx1MDAwZVx1MDAxY9njl6OBXHUwMDAzXHUwMDExJFx1MDAxMWdUSCRcdTAwMTiOZlx1MDAxN1xmXHUwMDAzh7RcdTAwMTQliGIzXHUwMDE3XHUwMDA3joR1XHUwMDE3M001yc71XHUwMDFiI4uHQVx1MDAxY7PGiygzUYlINLlOd3K18DqFqnSrNUdkr3OGq3RcdTAwMWWSselcdTAwMTnHRFx1MDAxMqlm5yFS2yd35O7sYLdXrX/0xd72WUWkxKtcdTAwMTVcdTAwMTlDJlx1MDAxNFx1MDAwMI7Go9jhZb8z9mrd31TmyVx1MDAxODkmSdPeJiFcZlx1MDAwNtJcdTAwMDH2IN8y2+1bho5Xi2YnXHUwMDExm9lnt142a05gXGLLRnjrtjde9lx1MDAxZE+e6qpGfjz7VNfQb6WxmZHXXHUwMDFhpy7Jor1ccnxA0EhcdTAwMDVcdTAwMWbIJGQ5x+L67P5fSW+mWFlcdTAwMTC2zNbiXHUwMDE0Y6FGx1x1MDAxNFx1MDAwNMA9zNToXG6qMY92hJRv92hNLU0pXHUwMDE1ZjNcdTAwMWUmaGxCXnxcdTAwMTVX4lx1MDAxYS6zmo/QkZLdXHUwMDBmXHUwMDAxOLJzwijggNxcdTAwMGXAXHUwMDExXHUwMDExXGKMWkNATli4XHUwMDBl0VrNwlW+XHUwMDE5a1x1MDAxOHGkJmbSqlZcdTAwMDSeiVTiYliwMqzM/zvDbFx1MDAwMrXe2CPVes1ReDXcNOTxbtDupt1qXYRgZcNeXHUwMDAwQ3Zrg5BcdTAwMWS93GbHdbrbXHTuddM/TFx1MDAwNOyr0Vx1MDAwNFx1MDAxYce84t//vPvn/yxzRNUifQ==        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Cascadia.woff2\");       }      Container(    id=\"dialog\")Horizontal(        classes=\"buttons\")Button(\"Yes\")Button(\"No\")Screen()Container(    id=\"sidebar\")Button(        \"Install\")Underline this button <p>We can use the following CSS to style all buttons which have a parent with an ID of <code>sidebar</code>:</p> <pre><code>#sidebar &gt; Button {\ntext-style: underline;\n}\n</code></pre>"},{"location":"guide/CSS/#specificity","title":"Specificity","text":"<p>It is possible that several selectors match a given widget. If the same style is applied by more than one selector then Textual needs a way to decide which rule wins. It does this by following these rules:</p> <ul> <li> <p>The selector with the most IDs wins. For instance <code>#next</code> beats <code>.button</code> and <code>#dialog #next</code> beats <code>#next</code>. If the selectors have the same number of IDs then move to the next rule.</p> </li> <li> <p>The selector with the most class names wins. For instance <code>.button.success</code> beats <code>.success</code>. For the purposes of specificity, pseudo classes are treated the same as regular class names, so <code>.button:hover</code> counts as 2 class names. If the selectors have the same number of class names then move to the next rule.</p> </li> <li> <p>The selector with the most types wins. For instance <code>Container Button</code> beats <code>Button</code>.</p> </li> </ul>"},{"location":"guide/CSS/#important-rules","title":"Important rules","text":"<p>The specificity rules are usually enough to fix any conflicts in your stylesheets. There is one last way of resolving conflicting selectors which applies to individual rules. If you add the text <code>!important</code> to the end of a rule then it will \"win\" regardless of the specificity.</p> <p>Warning</p> <p>Use <code>!important</code> sparingly (if at all) as it can make it difficult to modify your CSS in the future.</p> <p>Here's an example that makes buttons blue when hovered over with the mouse, regardless of any other selectors that match Buttons:</p> <pre><code>Button:hover {\nbackground: blue !important;\n}\n</code></pre>"},{"location":"guide/CSS/#css-variables","title":"CSS Variables","text":"<p>You can define variables to reduce repetition and encourage consistency in your CSS. Variables in Textual CSS are prefixed with <code>$</code>. Here's an example of how you might define a variable called <code>$border</code>:</p> <pre><code>$border: wide green;\n</code></pre> <p>With our variable assigned, we can write <code>$border</code> and it will be substituted with <code>wide green</code>. Consider the following snippet:</p> <pre><code>#foo {\nborder: $border;\n}\n</code></pre> <p>This will be translated into:</p> <pre><code>#foo {\nborder: wide green;\n}\n</code></pre> <p>Variables allow us to define reusable styling in a single place. If we decide we want to change some aspect of our design in the future, we only have to update a single variable.</p> <p>Note</p> <p>Variables can only be used in the values of a CSS declaration. You cannot, for example, refer to a variable inside a selector.</p> <p>Variables can refer to other variables. Let's say we define a variable <code>$success: lime;</code>. Our <code>$border</code> variable could then be updated to <code>$border: wide $success;</code>, which will be translated to <code>$border: wide lime;</code>.</p>"},{"location":"guide/actions/","title":"Actions","text":"<p>Actions are allow-listed functions with a string syntax you can embed in links and bind to keys. In this chapter we will discuss how to create actions and how to run them.</p>"},{"location":"guide/actions/#action-methods","title":"Action methods","text":"<p>Action methods are methods on your app or widgets prefixed with <code>action_</code>. Aside from the prefix these are regular methods which you could call directly if you wished.</p> <p>Information</p> <p>Action methods may be coroutines (defined with the <code>async</code> keyword).</p> <p>Let's write an app with a simple action.</p> actions01.py<pre><code>from textual.app import App\nfrom textual import events\nclass ActionsApp(App):\ndef action_set_background(self, color: str) -&gt; None:\nself.screen.styles.background = color\ndef on_key(self, event: events.Key) -&gt; None:\nif event.key == \"r\":\nself.action_set_background(\"red\")\nif __name__ == \"__main__\":\napp = ActionsApp()\napp.run()\n</code></pre> <p>The <code>action_set_background</code> method is an action which sets the background of the screen. The key handler above will call this action if you press the R key.</p> <p>Although it is possible (and occasionally useful) to call action methods in this way, they are intended to be parsed from an action string. For instance, the string <code>\"set_background('red')\"</code> is an action string which would call <code>self.action_set_background('red')</code>.</p> <p>The following example replaces the immediate call with a call to run_action() which parses an action string and dispatches it to the appropriate method.</p> actions02.py<pre><code>from textual import events\nfrom textual.app import App\nclass ActionsApp(App):\ndef action_set_background(self, color: str) -&gt; None:\nself.screen.styles.background = color\nasync def on_key(self, event: events.Key) -&gt; None:\nif event.key == \"r\":\nawait self.run_action(\"set_background('red')\")\nif __name__ == \"__main__\":\napp = ActionsApp()\napp.run()\n</code></pre> <p>Note that the <code>run_action()</code> method is a coroutine so <code>on_key</code> needs to be prefixed with the <code>async</code> keyword.</p> <p>You will not typically need this in a real app as Textual will run actions in links or key bindings. Before we discuss these, let's have a closer look at the syntax for action strings.</p>"},{"location":"guide/actions/#syntax","title":"Syntax","text":"<p>Action strings have a simple syntax, which for the most part replicates Python's function call syntax.</p> <p>Important</p> <p>As much as they look like Python code, Textual does not call Python's <code>eval</code> function to compile action strings.</p> <p>Action strings have the following format:</p> <ul> <li>The name of an action on is own will call the action method with no parameters. For example, an action string of <code>\"bell\"</code> will call <code>action_bell()</code>.</li> <li>Actions may be followed by braces containing Python objects. For example, the action string <code>set_background(\"red\")</code> will call <code>action_set_background(\"red\")</code>.</li> <li>Actions may be prefixed with a namespace (see below) followed by a dot.</li> </ul> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nNVaW2/bNlx1MDAxNH7vr1xivIduQK3y8M5cdTAwMDLDkNuKtFl6SdJ0XHUwMDFkhkGV6Fi1LGmScluR/75DJbFkxXZsx8kyIXAsklx1MDAxMlx1MDAwZlx1MDAwZs/3nVx1MDAwYv392dpap7zIbOfVWseeXHUwMDA3flx1MDAxY4W5f9Z54dpPbV5EaYJdtLov0pM8qEb2yzIrXr18OfTzgS2z2Fx1MDAwZqx3XHUwMDFhXHUwMDE1J35cXJQnYZR6QTp8XHUwMDE5lXZY/OI+9/yh/TlLh2GZe/UkXVx1MDAxYkZlml/NZWM7tElZ4Nv/wPu1te/VZ0O63Fx1MDAwNqWfXHUwMDFjx7Z6oOqqXHUwMDA1VES0W/fSpFx1MDAxMlx1MDAxNoQm1ChQajRcIiq2cL7ShtjdQ5lt3eOaOlx1MDAxZr6c9T92//HXeSo/fzvc3Oz725/qaXtRXHUwMDFj75dcdTAwMTdxJVaR4mrqvqLM04E9isKy7+ZutY+eXG79om9cdTAwMWKP5enJcT+xhVs/XHUwMDE5taaZXHUwMDFmROWFe1x1MDAxMalbr5TQXHUwMDFjd+62iHBPUy5cdTAwMDSVhlx1MDAxOcpGne5xajyptDJGa8XAXGLgLcE201x1MDAxOHdcdTAwMDJcdTAwMDX7gVRXLdlXP1x1MDAxOFx1MDAxY6N4SViP6fmC4jyyXHUwMDFldXa9YGk80CC4oVxcSqJlPU/fRsf9XHUwMDEyh3DuXHRmiKT1jlx1MDAxNbbaXG5DgSlupFx1MDAxOXW4ibOdsLKKP9u67Pt5dq2yTiVgQ2h3u902qaZZNXY7se+2j3bPw3LvaHt3a7d7MVx1MDAxNFx1MDAwN2b0rjFcdTAwMWL08zw964x6Lq+/1aKdZKF/ZVcgJeeodC6YqC0vjpJcdTAwMDF2JidxXFy3pcGgNsWq9fLFXHUwMDEyXHUwMDE4XHUwMDAwwshUXHUwMDEwXHUwMDE4YJQoQ+dcdTAwMDfBodj66O++zz92L96dXHL6XyCM5ZenXHUwMDBlXHUwMDAypT3FXHRcdTAwMTdcdTAwMWGhQCVt2FhcdTAwMDVcdTAwMDPtYVx1MDAxYpVMXHUwMDEypcBokPeCXHUwMDAx0K9ay0kwoFxiOM6N4kpcYqNcdTAwMTUsglx1MDAwMmCEK6VcdTAwMDU8Mlxm9lx1MDAwNjD4evr69MPml/M9+lv5XHUwMDFl5M5fK4OBxMU+XHUwMDEyXGaAT4dcdTAwMDE3XHUwMDA0jVx1MDAwMlx1MDAwMOaGXHUwMDAx/7xcdTAwMGXs8+DtRry1l4b7mdVvksMnXHUwMDBlXHUwMDAzXFygp5HrNdHGLVaNo0ChM+CK4ntcdTAwMTRChZt7gYBcdTAwMDfS9sQkXHUwMDEwXHUwMDAwUE9cdTAwMDNjaOSaKYq+aSFcdTAwMThcYsm4RCHF48KgSzdcdTAwMDb7hkT5/plMdXFA5MHu69XBQKNXXFxcdTAwMTVcZkp7Xk5EXHUwMDAwct9UXHUwMDA0XHUwMDEwyVx1MDAxOFx1MDAxN1x1MDAwNOZ3XHUwMDA04dveutjaevO7POSDzUMt4r9cdTAwMGbTlVwioPVUXHUwMDEzXHUwMDAwsFx1MDAxNFx1MDAwMFDdnpTCXHUwMDAwRdNcdTAwMTOKyjFcdTAwMDCAXHUwMDE2XHUwMDFlQ3rmoFxiekUj7+dcdTAwMDZmIMBMYP7bpq4lcIrRXHUwMDE5LG7phbt5knFcdTAwMGYzyixC+LU9pUm5XHUwMDFm/WOrmHas9Vd/XHUwMDE4xVx1MDAxN2NGUUFcdTAwMDBcdTAwMDV8l5Vo5H68lmCqUaCl2OaeXHUwMDE1XHUwMDE256+sX489uVx1MDAxZUfHXHUwMDBlMJ3Y9saRVEaYpYy6y7Sh41x1MDAwMCXx8XX5TtheUZpHx1x1MDAxMUpxMF2qpVx1MDAwMI1x+3Q8XHUwMDBizkBqMT+eTVx1MDAxMoP/Nt/RKflwXlx1MDAxY+yGcL71+mnjmVx04UmmXGIlwNBXqPHsXHUwMDA2uPKAMkFcZsewj90zqpvl0Golz4AzQ1JBbmH14EeB88PGb4rrhlN5aDivXHUwMDA3XHUwMDBlOFx1MDAxNWxcdTAwMTbCcYCKsvlcdTAwMDMguSnQUlx1MDAxMNbCtFtHXHUwMDEwXHUwMDA2iVlcdTAwMDJIPn9QSvzuMP37nLPy2+5OfiZcdTAwMDby8Nvm04Ywl8Zj2lx1MDAwNXVcdTAwMWHjTpef3fLJklx1MDAxOFx1MDAwNDFaXHUwMDFjqGZcdTAwMDSzWlx1MDAxMCOFzFx1MDAwM2JcdTAwMDOCXG7M3Fx1MDAxZdknP2z0+Vx1MDAxZvnkzM9cdTAwMTE3XGLM4mmAeZJgM0F9pepJkTafXHUwMDFlaWP2olx1MDAxNFVcctzfherZXHUwMDAx2Vx1MDAwMqhuY2dZVKs76y1cZlFcdTAwMGKMYqLJpFa6sZWVTSjmgeKCSiUx4aQzXHUwMDAy7Vx1MDAxMH036S1cdTAwMGJq5lx0TlxmwYlcYlx1MDAwN8x4xVx1MDAwNEetjUdccnZLKVx0XHUwMDEx0IghriFPMSXmmKku4bfvSjhXWSBsyOHn5UaUhFFyjJ01m9xcdTAwMTTTd+ZI39wq/axKXHUwMDFhcatQPdwwzbVq9PfS4MStoks86spdUlx1MDAxMalQlVxmdXk96nIklE3Cu0WaXV9cdTAwMWaJZDCHk5QrhZsloHaP4zJcdTAwMTFqXHUwMDE44J/AUNhVttktmWK/KDfT4TAqUfPv0ygp21x1MDAxYa5Uue5Q3rf+Lf7ANTX72nSQuTeOM3v9ba1GTHUz+v7ni4mjp1uyu7q3jLh+37Pm/8WZzGjWbr5hMlxumJ1yVPP8OcbsYPQpUlx1MDAxOTPGXHUwMDAzV1x1MDAxYmGaUIG23YpPmPKEQtunklx1MDAxM4lmJlqC1TQlXHUwMDAyw0m4dHziUUE4ZnWSMCMwXHUwMDAwmVA1XHUwMDEzzNNcdTAwMThHoaTKXGKuTENJV1SmMCNkgKB5XFwqWzpJmJPKZmeuXHLeQO05h8RBacxcdTAwMTh5Y0STzKRcdTAwMTGoYoJcdTAwMDRCXHUwMDE1Q+e0XHUwMDFjmc0+J6n5lXhCXHUwMDEzQVx1MDAxY98z9DL1vrboXGZcdTAwMDdhmFx1MDAwNoxJVCdy3/+azqZbs7u6t1xmeVV0hvQp280jOmNcZlWMucjcbDY7Kv9cdTAwMGbYTN95XHUwMDAy4Fx1MDAwZWJcdEZeLrdslz+V9ihSXHUwMDE51UZcdTAwMDOlzeJSm8qY5L1ALUtlxFx1MDAwM4NuTDrPjJmf1mzCcbBhXHUwMDFlikmFoe40gjeLN9dcdTAwMDdcdTAwMDGG4FuU4Fx1MDAwZnBcdTAwMTCwylL9omQ2O4dcdTAwMWbxhvJcdTAwMThzkSlobjjlnDVGNGmDaIyQjNCIMkOlXHUwMDA2s1x1MDAxY5vNPu5qRovS7arE0Fx1MDAxZThhdIpUKFx1MDAxMVx1MDAwM7fxXHUwMDFhjVFh9v+/ZrNcdTAwMTlcdTAwMDbtru4tW16QzqZcdTAwMTWP2PRcdTAwMTNNzShcdTAwMTdEwvxkZuS23GbBh4NPnzc+XHUwMDFkvTmKN/OMTCGzvlx1MDAxZvRPcjuNzlZVPTJ35pmAcbGghGFcdTAwMTiKITEh4+f6XGY8XHUwMDA21J1rOVx1MDAwZqu0udfPW8rcT4rMz1x1MDAxMVx1MDAxM7c5jcOE8lGD125Ii1OqMVA0S5DW0z3TXHUwMDExtFlcXF+yfqTHWkf1ozr7uKlcdTAwMWb5WeZcdTAwMTW2/Kveolx1MDAxZp/nNnz+08QqUuOXLY9xtDNduGc32qw06Vx1MDAwNu6XqMdcdTAwMTHnoiFE4bUy6ik6p5E925j0W6vqcm+tWMPh0zoz+H757PJfPFx1MDAxMrdyIn0= Optional namespaceAction nameOptional parametersapp.set_background('red')"},{"location":"guide/actions/#parameters","title":"Parameters","text":"<p>If the action string contains parameters, these must be valid Python literals. Which means you can include numbers, strings, dicts, lists etc. but you can't include variables or references to any other Python symbols.</p> <p>Consequently <code>\"set_background('blue')\"</code> is a valid action string, but <code>\"set_background(new_color)\"</code> is not \u2014 because <code>new_color</code> is a variable and not a literal.</p>"},{"location":"guide/actions/#links","title":"Links","text":"<p>Actions may be embedded as links within console markup. You can create such links with a  <code>@click</code> tag.</p> <p>The following example mounts simple static text with embedded action links.</p> actions03.pyOutput actions03.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"\n[b]Set your background[/b]\n[@click=set_background('red')]Red[/]\n[@click=set_background('green')]Green[/]\n[@click=set_background('blue')]Blue[/]\n\"\"\"\nclass ActionsApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield Static(TEXT)\ndef action_set_background(self, color: str) -&gt; None:\nself.screen.styles.background = color\nif __name__ == \"__main__\":\napp = ActionsApp()\napp.run()\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-4225060362-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-4225060362-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-4225060362-r1 { fill: #c5c8c6 } .terminal-4225060362-r2 { fill: #e1e1e1;font-weight: bold } .terminal-4225060362-r3 { fill: #e1e1e1;text-decoration: underline; } .terminal-4225060362-r4 { fill: #e1e1e1 }      ActionsApp Set\u00a0your\u00a0background Red Green Blue </p> <p>When you click any of the links, Textual runs the <code>\"set_background\"</code> action to change the background to the given color.</p>"},{"location":"guide/actions/#bindings","title":"Bindings","text":"<p>Textual will run actions bound to keys. The following example adds key bindings for the R, G, and B keys which call the <code>\"set_background\"</code> action.</p> actions04.pyOutput actions04.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"\n[b]Set your background[/b]\n[@click=set_background('red')]Red[/]\n[@click=set_background('green')]Green[/]\n[@click=set_background('blue')]Blue[/]\n\"\"\"\nclass ActionsApp(App):\nBINDINGS = [\n(\"r\", \"set_background('red')\", \"Red\"),\n(\"g\", \"set_background('green')\", \"Green\"),\n(\"b\", \"set_background('blue')\", \"Blue\"),\n]\ndef compose(self) -&gt; ComposeResult:\nyield Static(TEXT)\ndef action_set_background(self, color: str) -&gt; None:\nself.screen.styles.background = color\nif __name__ == \"__main__\":\napp = ActionsApp()\napp.run()\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-656229602-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-656229602-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-656229602-r1 { fill: #c5c8c6 } .terminal-656229602-r2 { fill: #ddeedd;font-weight: bold } .terminal-656229602-r3 { fill: #ddeedd;text-decoration: underline; } .terminal-656229602-r4 { fill: #ddeedd }      ActionsApp Set\u00a0your\u00a0background Red Green Blue </p> <p>If you run this example, you can change the background by pressing keys in addition to clicking links.</p> <p>See the previous section on input for more information on bindings.</p>"},{"location":"guide/actions/#namespaces","title":"Namespaces","text":"<p>Textual will look for action methods in the class where they are defined (App, Screen, or Widget). If we were to create a custom widget it can have its own set of actions.</p> <p>The following example defines a custom widget with its own <code>set_background</code> action.</p> actions05.pyactions05.css actions05.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"\n[b]Set your background[/b]\n[@click=set_background('cyan')]Cyan[/]\n[@click=set_background('magenta')]Magenta[/]\n[@click=set_background('yellow')]Yellow[/]\n\"\"\"\nclass ColorSwitcher(Static):\ndef action_set_background(self, color: str) -&gt; None:\nself.styles.background = color\nclass ActionsApp(App):\nCSS_PATH = \"actions05.css\"\nBINDINGS = [\n(\"r\", \"set_background('red')\", \"Red\"),\n(\"g\", \"set_background('green')\", \"Green\"),\n(\"b\", \"set_background('blue')\", \"Blue\"),\n]\ndef compose(self) -&gt; ComposeResult:\nyield ColorSwitcher(TEXT)\nyield ColorSwitcher(TEXT)\ndef action_set_background(self, color: str) -&gt; None:\nself.screen.styles.background = color\nif __name__ == \"__main__\":\napp = ActionsApp()\napp.run()\n</code></pre> actions05.css<pre><code>Screen {\nlayout: grid;\ngrid-size: 1;\ngrid-gutter: 2 4;\ngrid-rows: 1fr;\n}\nColorSwitcher {\nheight: 100%;\nmargin: 2 4;\n}\n</code></pre> <p>There are two instances of the custom widget mounted. If you click the links in either of them it will changed the background for that widget only. The R, G, and B key bindings are set on the App so will set the background for the screen.</p> <p>You can optionally prefix an action with a namespace, which tells Textual to run actions for a different object.</p> <p>Textual supports the following action namespaces:</p> <ul> <li><code>app</code> invokes actions on the App.</li> <li><code>screen</code> invokes actions on the screen.</li> </ul> <p>In the previous example if you wanted a link to set the background on the app rather than the widget, we could set a link to <code>app.set_background('red')</code>.</p>"},{"location":"guide/actions/#builtin-actions","title":"Builtin actions","text":"<p>Textual supports the following builtin actions which are defined on the app.</p> <ul> <li>action_bell</li> <li>action_push_screen</li> <li>action_pop_screen</li> <li>action_switch_screen</li> <li>action_screenshot</li> <li>action_toggle_dark</li> </ul>"},{"location":"guide/animation/","title":"Animation","text":"<p>Ths chapter discusses how to use Textual's animation system to create visual effects such as movement, blending, and fading.</p>"},{"location":"guide/animation/#animating-styles","title":"Animating styles","text":"<p>Textual's animator can change an attribute from one value to another in fixed increments over a period of time. You can apply animations to styles such as <code>offset</code> to move widgets around the screen, and <code>opacity</code> to create fading effects.</p> <p>Apps and widgets both have an animate method which will animate properties on those objects. Additionally, <code>styles</code> objects have an identical <code>animate</code> method which will animate styles.</p> <p>Let's look at an example of how we can animate the opacity of a widget to make it fade out. The following example app contains a single <code>Static</code> widget which is immediately animated to an opacity of <code>0.0</code> (making it invisible) over a duration of two seconds.</p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass AnimationApp(App):\ndef compose(self) -&gt; ComposeResult:\nself.box = Static(\"Hello, World!\")\nself.box.styles.background = \"red\"\nself.box.styles.color = \"black\"\nself.box.styles.padding = (1, 2)\nyield self.box\ndef on_mount(self):\nself.box.styles.animate(\"opacity\", value=0.0, duration=2.0)\nif __name__ == \"__main__\":\napp = AnimationApp()\napp.run()\n</code></pre> <p>The animator updates the value of the <code>opacity</code> attribute on the <code>styles</code> object in small increments over two seconds. Here's what the output will look like after each half a second.</p> After 0sAfter 0.5sAfter 1sAfter 1.5sAfter 2s <p> AnimationApp Hello,\u00a0World! </p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1157422357-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1157422357-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1157422357-r1 { fill: #c5c8c6 } .terminal-1157422357-r2 { fill: #141414 } .terminal-1157422357-r3 { fill: #e1e1e1 }      AnimationApp Hello,\u00a0World! </p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2078007326-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2078007326-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2078007326-r1 { fill: #c5c8c6 } .terminal-2078007326-r2 { fill: #1c1c1c } .terminal-2078007326-r3 { fill: #e1e1e1 }      AnimationApp Hello,\u00a0World! </p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-273919447-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-273919447-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-273919447-r1 { fill: #e1e1e1 } .terminal-273919447-r2 { fill: #c5c8c6 }      AnimationApp </p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-273919447-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-273919447-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-273919447-r1 { fill: #e1e1e1 } .terminal-273919447-r2 { fill: #c5c8c6 }      AnimationApp </p>"},{"location":"guide/animation/#duration-and-speed","title":"Duration and Speed","text":"<p>When requesting an animation you can specify a duration or speed. The duration is how long the animation should take in seconds. The speed is how many units a value should change in one second. For instance, if you animate a value at 0 to 10 with a speed of 2, it will complete in 5 seconds.</p>"},{"location":"guide/animation/#easing-functions","title":"Easing functions","text":"<p>The easing function determines the journey a value takes on its way to the target value. It could move at a constant pace, or it might start off slow then accelerate towards its final value. Textual supports a number of easing functions.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1XWVPjRlx1MDAxMH7nV1DeVyzmPrYqlYJcdTAwMDVcdTAwMTJcdTAwMDJLXHUwMDBlczib2ofBXHUwMDFh21x1MDAxM8uSkMZcdTAwMDaW4r+nJVx1MDAxM48vwrnUblX0YGumZ3q+6e6vu3Wztr7e8Ne5bbxfb9irjklcXFxcmMvGRjU/tkXpslx1MDAxNESkXHUwMDFll9mo6NQr+97n5fvNzaEpXHUwMDA21ueJ6dho7MqRSUo/il1cdTAwMTZ1suGm83ZY/lj9XHUwMDFlmaH9Ic+GsS+icEjTxs5nxeQsm9ihTX1cdNr/gvH6+k39O4POXHUwMDE0RTZcdTAwMDFWT1x1MDAwN3BKL05cdTAwMWVlaY1cdTAwMTMjrjSjWuDpXG5X7sBR3sYg7lx1MDAwMlxcXHUwMDFiJNVU42Tvl7TZ/nX76rh1fDDO+4j+dNVcdKd2XZK0/HUysYLp9EeFXHLS0lx1MDAxN9nAnrnY9/812sz8dF9syj5cdTAwMDCYiots1OuntqwuXHUwMDFmkGa56Th/XV9cdTAwMDNNZ03aq5WEmStcdTAwMThRwSMqXHUwMDE0XHUwMDE3XGZRQZhUU2m1n2lcdTAwMWNxXHUwMDAxcsyRRIxcdTAwMTK5gOxDloBcdTAwMWZcdTAwMDDZO1Q/XHUwMDAx2rnpXGZ6gC+Np2t8YdIyN1x1MDAwNXgrrLu8uzOONGZIXHUwMDEwPpX0rev1fWVcdTAwMGXCXCIlg6C0tVx1MDAxM7DCmiuhUZBUXHUwMDA35vtxXHUwMDFkXHUwMDBin1x1MDAxN43YN0V+Z6tGXHJsXHUwMDA2bDXcnVx0pLB5lMdm4nQsXHUwMDA0x1xcXHUwMDEzWtlqKk9cXDpcdTAwMDBhOkqSMJd1XHUwMDA2K+Kk9Kbw2y6NXdpb3GLT+Fx1MDAxZUliSv8hXHUwMDFiXHUwMDBlnVx1MDAwN1x1MDAxOL9lLvWLK2q9W1WQ962JV2ielS2yIa80XHUwMDA28lRPeFtcdTAwMGbRUlx1MDAwZqbvnzdWrm4uebGevXNg2L02+3+78UTa4pkwXFzkraCaIaxkYPZDvKUnh1x1MDAwN7y9d/7n3uFheaJHgra3+t9cdTAwMDFvRUQgXHUwMDE2pdRaXHUwMDAwbdlcdTAwMTJvMaFIYES1XHUwMDE0mi9cdTAwMDB7PdpShFwiKSmjclx1MDAwNXFxJCFtUEyWuEs5Ykpr9sbUhdAgwY7/U3dmwVxuR1ZPM/jwifRcdTAwMDXr2pXsRfL+skuYpkpjXHUwMDFj8utD9G3r38nu2cfty7//6F1cZoa7R1x1MDAwM3aQvDJ9y1xm+o7Xr7pUXHUwMDAwNSWjeJagNX2VjJCQXFxTRojmSC9cdTAwMDBcdTAwMGL0VYJY3XlcdH1pJKSCUsqpRFqH8lx1MDAxZqovXHUwMDAyMFx1MDAwNHMhJWGKXHUwMDEyvURmgpnAXHUwMDAyIf6mbFZcbmCrXHUwMDAw+Htj85zsVamMMYso4lpqSoRcdTAwMTYqNLHV06QogsZcdTAwMTZxJjWD5lx0yVx1MDAwN/VpXHUwMDEyKVwiJHTDoJJzzOb0YYVcIkisWFIou1x1MDAxMlx1MDAwYvVwqrkn6Gp1y/H2xMTj7ZVflXjEfVmnSjpcdTAwMDRcbkPoKlx1MDAxZUo6O+3Wyadd0vz482D3tDX+1L44z/Hzklx1MDAwZV5kx1dLOuDsiDBcdTAwMDZdPuJcdTAwMDRcbvB8q89cdHiRay5cdTAwMTTl0PD/R855acvAXHUwMDAyrJBklrt7wYggirFw2UcnlbJcdTAwMWE8M6lQKlmIlCcklW6W+pb7Ulx1MDAwN1x1MDAxNJqb3TNDl1xcz/mtjtHKUG5oZy1Z2rpsVlx1MDAxZjdza7dcdTAwMTLXS+uqarvzwe1cdTAwMWR8XHUwMDE1T8U+m7l3XHUwMDA3zjagrthfyjdZ4XouNcnxLI5nsYrcW8zhq1x1MDAxMVPIXG6Pp9Vps9y/lGdcdTAwMTe90+ukvfOlO+52bfNbp1x1MDAxNYH0x1x1MDAxNaZcXCqFkObznTiQKVx1MDAxMlxcK2jEXHUwMDE5NFLQkn81XnHyKF5BktaKMvyMYv1cdTAwMTJesSrLvlx1MDAxOa/GJlx1MDAxOX1cdTAwMTPEmlx1MDAwMJkwa+2uXCI2TJ63PNhcdTAwMDdcdTAwMTZMeFx1MDAwNi5w8d0lg7rG2NnL7eUoeNetn0przdaKXHUwMDE4tnLAze3a7T8uXFzYXHUwMDFjIn0=        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      timevalue <p>Run the following from the command prompt to preview them.</p> <pre><code>textual easing\n</code></pre> <p>You can specify which easing method to use via the <code>easing</code> parameter on the <code>animate</code> method. The default easing method is <code>\"in_out_cubic\"</code> which accelerates and then decelerates to produce a pleasing organic motion.</p> <p>Note</p> <p>The <code>textual easing</code> preview requires the <code>dev</code> extras to be installed (using <code>pip install textual[dev]</code>).</p>"},{"location":"guide/animation/#completion-callbacks","title":"Completion callbacks","text":"<p>You can pass a callable to the animator via the <code>on_complete</code> parameter. Textual will run the callable when the animation has completed.</p>"},{"location":"guide/animation/#delaying-animations","title":"Delaying animations","text":"<p>You can delay the start of an animation with the <code>delay</code> parameter of the <code>animate</code> method. This parameter accepts a <code>float</code> value representing the number of seconds to delay the animation by. For example, <code>self.box.styles.animate(\"opacity\", value=0.0, duration=2.0, delay=5.0)</code> delays the start of the animation by five seconds, meaning the animation will start after 5 seconds and complete 2 seconds after that.</p>"},{"location":"guide/app/","title":"App Basics","text":"<p>In this chapter we will cover how to use Textual's App class to create an application. Just enough to get you up to speed. We will go in to more detail in the following chapters.</p>"},{"location":"guide/app/#the-app-class","title":"The App class","text":"<p>The first step in building a Textual app is to import the App class and create a subclass. Let's look at the simplest app class:</p> <pre><code>from textual.app import App\nclass MyApp(App):\npass\n</code></pre>"},{"location":"guide/app/#the-run-method","title":"The run method","text":"<p>To run an app we create an instance and call run().</p> simple02.py<pre><code>from textual.app import App\nclass MyApp(App):\npass\nif __name__ == \"__main__\":\napp = MyApp()\napp.run()\n</code></pre> <p>Apps don't get much simpler than this\u2014don't expect it to do much.</p> <p>Tip</p> <p>The <code>__name__ == \"__main__\":</code> condition is true only if you run the file with <code>python</code> command. This allows us to import <code>app</code> without running the app immediately. It also allows the devtools run command to run the app in development mode. See the Python docs for more information.</p> <p>If we run this app with <code>python simple02.py</code> you will see a blank terminal, something like the following:</p> <p> MyApp </p> <p>When you call App.run() Textual puts the terminal in to a special state called application mode. When in application mode the terminal will no longer echo what you type. Textual will take over responding to user input (keyboard and mouse) and will update the visible portion of the terminal (i.e. the screen).</p> <p>If you hit Ctrl+C Textual will exit application mode and return you to the command prompt. Any content you had in the terminal prior to application mode will be restored.</p> <p>Tip</p> <p>A side effect of application mode is that you may no longer be able to select and copy text in the usual way. Terminals typically offer a way to bypass this limit with a key modifier. On iTerm you can select text if you hold the Option key. See the documentation for your terminal software for how to select text in application mode.</p>"},{"location":"guide/app/#events","title":"Events","text":"<p>Textual has an event system you can use to respond to key presses, mouse actions, and internal state changes. Event handlers are methods prefixed with <code>on_</code> followed by the name of the event.</p> <p>One such event is the mount event which is sent to an application after it enters application mode. You can respond to this event by defining a method called <code>on_mount</code>.</p> <p>Info</p> <p>You may have noticed we use the term \"send\" and \"sent\" in relation to event handler methods in preference to \"calling\". This is because Textual uses a message passing system where events are passed (or sent) between components. See events for details.</p> <p>Another such event is the key event which is sent when the user presses a key. The following example contains handlers for both those events:</p> event01.py<pre><code>from textual.app import App\nfrom textual import events\nclass EventApp(App):\nCOLORS = [\n\"white\",\n\"maroon\",\n\"red\",\n\"purple\",\n\"fuchsia\",\n\"olive\",\n\"yellow\",\n\"navy\",\n\"teal\",\n\"aqua\",\n]\ndef on_mount(self) -&gt; None:\nself.screen.styles.background = \"darkblue\"\ndef on_key(self, event: events.Key) -&gt; None:\nif event.key.isdecimal():\nself.screen.styles.background = self.COLORS[int(event.key)]\nif __name__ == \"__main__\":\napp = EventApp()\napp.run()\n</code></pre> <p>The <code>on_mount</code> handler sets the <code>self.screen.styles.background</code> attribute to <code>\"darkblue\"</code> which (as you can probably guess) turns the background blue. Since the mount event is sent immediately after entering application mode, you will see a blue screen when you run this code.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1276423273-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1276423273-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1276423273-r1 { fill: #ddddef } .terminal-1276423273-r2 { fill: #c5c8c6 }      EventApp </p> <p>The key event handler (<code>on_key</code>) has an <code>event</code> parameter which will receive a Key instance. Every event has an associated event object which will be passed to the handler method if it is present in the method's parameter list.</p> <p>Note</p> <p>It is unusual (but not unprecedented) for a method's parameters to affect how it is called. Textual accomplishes this by inspecting the method prior to calling it.</p> <p>Some events contain additional information you can inspect in the handler. The Key event has a <code>key</code> attribute which is the name of the key that was pressed. The <code>on_key</code> method above uses this attribute to change the background color if any of the keys from 0 to 9 are pressed.</p>"},{"location":"guide/app/#async-events","title":"Async events","text":"<p>Textual is powered by Python's asyncio framework which uses the <code>async</code> and <code>await</code> keywords.</p> <p>Textual knows to await your event handlers if they are coroutines (i.e. prefixed with the <code>async</code> keyword). Regular functions are generally fine unless you plan on integrating other async libraries (such as httpx for reading data from the internet).</p> <p>Tip</p> <p>For a friendly introduction to async programming in Python, see FastAPI's concurrent burgers article.</p>"},{"location":"guide/app/#widgets","title":"Widgets","text":"<p>Widgets are self-contained components responsible for generating the output for a portion of the screen. Widgets respond to events in much the same way as the App. Most apps that do anything interesting will contain at least one (and probably many) widgets which together form a User Interface.</p> <p>Widgets can be as simple as a piece of text, a button, or a fully-fledged component like a text editor or file browser (which may contain widgets of their own).</p>"},{"location":"guide/app/#composing","title":"Composing","text":"<p>To add widgets to your app implement a <code>compose()</code> method which should return an iterable of <code>Widget</code> instances. A list would work, but it is convenient to yield widgets, making the method a generator.</p> <p>The following example imports a builtin <code>Welcome</code> widget and yields it from <code>App.compose()</code>.</p> widgets01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Welcome\nclass WelcomeApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield Welcome()\ndef on_button_pressed(self) -&gt; None:\nself.exit()\nif __name__ == \"__main__\":\napp = WelcomeApp()\napp.run()\n</code></pre> <p>When you run this code, Textual will mount the <code>Welcome</code> widget which contains Markdown content and a button:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3718827072-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3718827072-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3718827072-r1 { fill: #c5c8c6 } .terminal-3718827072-r2 { fill: #e2e3e3 } .terminal-3718827072-r3 { fill: #e2e3e3;font-weight: bold } .terminal-3718827072-r4 { fill: #e2e3e3;font-style: italic; } .terminal-3718827072-r5 { fill: #e2e3e3;font-weight: bold;text-decoration: underline; } .terminal-3718827072-r6 { fill: #98729f } .terminal-3718827072-r7 { fill: #7ae998 } .terminal-3718827072-r8 { fill: #0a180e;font-weight: bold } .terminal-3718827072-r9 { fill: #008139 }      WelcomeApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Welcome!\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b Textual\u00a0is\u00a0a\u00a0TUI,\u00a0or\u00a0Text\u00a0User\u00a0Interface,\u00a0framework\u00a0for\u00a0Python\u00a0inspired\u00a0by\u00a0 modern\u00a0web\u00a0development.\u00a0We\u00a0hope\u00a0you\u00a0enjoy\u00a0using\u00a0Textual! Dune\u00a0quote \u258c\u00a0\"I\u00a0must\u00a0not\u00a0fear.Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0little-death\u00a0that \u258c\u00a0brings\u00a0total\u00a0obliteration.I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass \u258c\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner \u258c\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only \u258c\u00a0I\u00a0will\u00a0remain.\" \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 OK \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p> <p>Notice the <code>on_button_pressed</code> method which handles the Button.Pressed event sent by a button contained in the <code>Welcome</code> widget. The handler calls App.exit() to exit the app.</p>"},{"location":"guide/app/#mounting","title":"Mounting","text":"<p>While composing is the preferred way of adding widgets when your app starts it is sometimes necessary to add new widget(s) in response to events. You can do this by calling mount() which will add a new widget to the UI.</p> <p>Here's an app which adds a welcome widget in response to any key press:</p> widgets02.py<pre><code>from textual.app import App\nfrom textual.widgets import Welcome\nclass WelcomeApp(App):\ndef on_key(self) -&gt; None:\nself.mount(Welcome())\ndef on_button_pressed(self) -&gt; None:\nself.exit()\nif __name__ == \"__main__\":\napp = WelcomeApp()\napp.run()\n</code></pre> <p>When you first run this you will get a blank screen. Press any key to add the welcome widget. You can even press a key multiple times to add several widgets.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2286975090-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2286975090-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2286975090-r1 { fill: #c5c8c6 } .terminal-2286975090-r2 { fill: #e2e3e3 } .terminal-2286975090-r3 { fill: #e2e3e3;font-weight: bold } .terminal-2286975090-r4 { fill: #23568b } .terminal-2286975090-r5 { fill: #e1e1e1 } .terminal-2286975090-r6 { fill: #e2e3e3;font-weight: bold;text-decoration: underline; } .terminal-2286975090-r7 { fill: #14191f } .terminal-2286975090-r8 { fill: #98729f } .terminal-2286975090-r9 { fill: #7ae998 } .terminal-2286975090-r10 { fill: #0a180e;font-weight: bold } .terminal-2286975090-r11 { fill: #008139 } .terminal-2286975090-r12 { fill: #e2e3e3;font-style: italic; }      WelcomeApp modern\u00a0web\u00a0development.\u00a0We\u00a0hope\u00a0you\u00a0enjoy\u00a0using\u00a0Textual!\u2583\u2583 Dune\u00a0quote\u2585\u2585 \u258c\u00a0\"I\u00a0must\u00a0not\u00a0fear.Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0little-death\u00a0 \u258c\u00a0that\u00a0brings\u00a0total\u00a0obliteration.I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0permit\u00a0it\u00a0 \u258c\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn \u258c\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0 \u258c\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\" \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 OK \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Welcome!\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b Textual\u00a0is\u00a0a\u00a0TUI,\u00a0or\u00a0Text\u00a0User\u00a0Interface,\u00a0framework\u00a0for\u00a0Python\u00a0inspired\u00a0by </p>"},{"location":"guide/app/#exiting","title":"Exiting","text":"<p>An app will run until you call App.exit() which will exit application mode and the run method will return. If this is the last line in your code you will return to the command prompt.</p> <p>The exit method will also accept an optional positional value to be returned by <code>run()</code>. The following example uses this to return the <code>id</code> (identifier) of a clicked button.</p> question01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Label, Button\nclass QuestionApp(App[str]):\ndef compose(self) -&gt; ComposeResult:\nyield Label(\"Do you love Textual?\")\nyield Button(\"Yes\", id=\"yes\", variant=\"primary\")\nyield Button(\"No\", id=\"no\", variant=\"error\")\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\nself.exit(event.button.id)\nif __name__ == \"__main__\":\napp = QuestionApp()\nreply = app.run()\nprint(reply)\n</code></pre> <p>Running this app will give you the following:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-458799918-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-458799918-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-458799918-r1 { fill: #e1e1e1 } .terminal-458799918-r2 { fill: #c5c8c6 } .terminal-458799918-r3 { fill: #507bb3 } .terminal-458799918-r4 { fill: #dde6ed;font-weight: bold } .terminal-458799918-r5 { fill: #001541 } .terminal-458799918-r6 { fill: #e76580 } .terminal-458799918-r7 { fill: #f5e5e9;font-weight: bold } .terminal-458799918-r8 { fill: #780028 }      QuestionApp Do\u00a0you\u00a0love\u00a0Textual? \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Yes \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 No \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p> <p>Clicking either of those buttons will exit the app, and the <code>run()</code> method will return either <code>\"yes\"</code> or <code>\"no\"</code> depending on button clicked.</p>"},{"location":"guide/app/#return-type","title":"Return type","text":"<p>You may have noticed that we subclassed <code>App[str]</code> rather than the usual <code>App</code>.</p> question01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Label, Button\nclass QuestionApp(App[str]):\ndef compose(self) -&gt; ComposeResult:\nyield Label(\"Do you love Textual?\")\nyield Button(\"Yes\", id=\"yes\", variant=\"primary\")\nyield Button(\"No\", id=\"no\", variant=\"error\")\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\nself.exit(event.button.id)\nif __name__ == \"__main__\":\napp = QuestionApp()\nreply = app.run()\nprint(reply)\n</code></pre> <p>The addition of <code>[str]</code> tells mypy that <code>run()</code> is expected to return a string. It may also return <code>None</code> if App.exit() is called without a return value, so the return type of <code>run</code> will be <code>str | None</code>. Replace the <code>str</code> in <code>[str]</code> with the type of the value you intend to call the exit method with.</p> <p>Note</p> <p>Type annotations are entirely optional (but recommended) with Textual.</p>"},{"location":"guide/app/#css","title":"CSS","text":"<p>Textual apps can reference CSS files which define how your app and widgets will look, while keeping your Python code free of display related code (which tends to be messy).</p> <p>The chapter on Textual CSS describes how to use CSS in detail. For now let's look at how your app references external CSS files.</p> <p>The following example enables loading of CSS by adding a <code>CSS_PATH</code> class variable:</p> question02.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Label, Button\nclass QuestionApp(App[str]):\nCSS_PATH = \"question02.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Label(\"Do you love Textual?\", id=\"question\")\nyield Button(\"Yes\", id=\"yes\", variant=\"primary\")\nyield Button(\"No\", id=\"no\", variant=\"error\")\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\nself.exit(event.button.id)\nif __name__ == \"__main__\":\napp = QuestionApp()\nreply = app.run()\nprint(reply)\n</code></pre> <p>Note</p> <p>We also added an <code>id</code> to the <code>Label</code>, because we want to style it in the CSS.</p> <p>If the path is relative (as it is above) then it is taken as relative to where the app is defined. Hence this example references <code>\"question01.css\"</code> in the same directory as the Python code. Here is that CSS file:</p> question02.css<pre><code>Screen {\nlayout: grid;\ngrid-size: 2;\ngrid-gutter: 2; padding: 2;   }\n#question {\nwidth: 100%;\nheight: 100%;\ncolumn-span: 2;\ncontent-align: center bottom;\ntext-style: bold;\n} Button {\nwidth: 100%;\n}\n</code></pre> <p>When <code>\"question02.py\"</code> runs it will load <code>\"question02.css\"</code> and update the app and widgets accordingly. Even though the code is almost identical to the previous sample, the app now looks quite different:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2872488440-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2872488440-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2872488440-r1 { fill: #c5c8c6 } .terminal-2872488440-r2 { fill: #e1e1e1;font-weight: bold } .terminal-2872488440-r3 { fill: #e1e1e1 } .terminal-2872488440-r4 { fill: #507bb3 } .terminal-2872488440-r5 { fill: #e76580 } .terminal-2872488440-r6 { fill: #dde6ed;font-weight: bold } .terminal-2872488440-r7 { fill: #f5e5e9;font-weight: bold } .terminal-2872488440-r8 { fill: #001541 } .terminal-2872488440-r9 { fill: #780028 }      QuestionApp Do\u00a0you\u00a0love\u00a0Textual? \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 YesNo \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p>"},{"location":"guide/app/#classvar-css","title":"Classvar CSS","text":"<p>While external CSS files are recommended for most applications, and enable some cool features like live editing, you can also specify the CSS directly within the Python code.</p> <p>To do this set a <code>CSS</code> class variable on the app to a string containing your CSS.</p> <p>Here's the question app with classvar CSS:</p> question03.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Label, Button\nclass QuestionApp(App[str]):\nCSS = \"\"\"\n    Screen {\n        layout: grid;\n        grid-size: 2;\n        grid-gutter: 2;\n        padding: 2;\n    }\n    #question {\n        width: 100%;\n        height: 100%;\n        column-span: 2;\n        content-align: center bottom;\n        text-style: bold;\n    }\n    Button {\n        width: 100%;\n    }\n    \"\"\"\ndef compose(self) -&gt; ComposeResult:\nyield Label(\"Do you love Textual?\", id=\"question\")\nyield Button(\"Yes\", id=\"yes\", variant=\"primary\")\nyield Button(\"No\", id=\"no\", variant=\"error\")\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\nself.exit(event.button.id)\nif __name__ == \"__main__\":\napp = QuestionApp()\nreply = app.run()\nprint(reply)\n</code></pre>"},{"location":"guide/app/#title-and-subtitle","title":"Title and subtitle","text":"<p>Textual apps have a <code>title</code> attribute which is typically the name of your application, and an optional <code>sub_title</code> attribute which adds additional context (such as the file your are working on). By default, <code>title</code> will be set to the name of your App class, and <code>sub_title</code> is empty. You can change these defaults by defining <code>TITLE</code> and <code>SUB_TITLE</code> class variables. Here's an example of that:</p> question_title01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Button, Header, Label\nclass MyApp(App[str]):\nCSS_PATH = \"question02.css\"\nTITLE = \"A Question App\"\nSUB_TITLE = \"The most important question\"\ndef compose(self) -&gt; ComposeResult:\nyield Header()\nyield Label(\"Do you love Textual?\", id=\"question\")\nyield Button(\"Yes\", id=\"yes\", variant=\"primary\")\nyield Button(\"No\", id=\"no\", variant=\"error\")\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\nself.exit(event.button.id)\nif __name__ == \"__main__\":\napp = MyApp()\nreply = app.run()\nprint(reply)\n</code></pre> <p>Note that the title and subtitle are displayed by the builtin Header widget at the top of the screen:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-569560740-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-569560740-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-569560740-r1 { fill: #c5c8c6 } .terminal-569560740-r2 { fill: #e3e3e3 } .terminal-569560740-r3 { fill: #989898 } .terminal-569560740-r4 { fill: #e1e1e1;font-weight: bold } .terminal-569560740-r5 { fill: #e1e1e1 } .terminal-569560740-r6 { fill: #507bb3 } .terminal-569560740-r7 { fill: #e76580 } .terminal-569560740-r8 { fill: #dde6ed;font-weight: bold } .terminal-569560740-r9 { fill: #f5e5e9;font-weight: bold } .terminal-569560740-r10 { fill: #001541 } .terminal-569560740-r11 { fill: #780028 }      A\u00a0Question\u00a0App \u2b58A\u00a0Question\u00a0App\u00a0\u2014\u00a0The\u00a0most\u00a0important\u00a0question Do\u00a0you\u00a0love\u00a0Textual? \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 YesNo \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p> <p>You can also set the title attributes dynamically within a method of your app. The following example sets the title and subtitle in response to a key press:</p> question_title02.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.events import Key\nfrom textual.widgets import Button, Header, Label\nclass MyApp(App[str]):\nCSS_PATH = \"question02.css\"\nTITLE = \"A Question App\"\nSUB_TITLE = \"The most important question\"\ndef compose(self) -&gt; ComposeResult:\nyield Header()\nyield Label(\"Do you love Textual?\", id=\"question\")\nyield Button(\"Yes\", id=\"yes\", variant=\"primary\")\nyield Button(\"No\", id=\"no\", variant=\"error\")\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\nself.exit(event.button.id)\ndef on_key(self, event: Key):\nself.title = event.key\nself.sub_title = f\"You just pressed {event.key}!\"\nif __name__ == \"__main__\":\napp = MyApp()\nreply = app.run()\nprint(reply)\n</code></pre> <p>If you run this app and press the T key, you should see the header update accordingly:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1408026898-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1408026898-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1408026898-r1 { fill: #c5c8c6 } .terminal-1408026898-r2 { fill: #e3e3e3 } .terminal-1408026898-r3 { fill: #989898 } .terminal-1408026898-r4 { fill: #e1e1e1;font-weight: bold } .terminal-1408026898-r5 { fill: #e1e1e1 } .terminal-1408026898-r6 { fill: #507bb3 } .terminal-1408026898-r7 { fill: #e76580 } .terminal-1408026898-r8 { fill: #dde6ed;font-weight: bold } .terminal-1408026898-r9 { fill: #f5e5e9;font-weight: bold } .terminal-1408026898-r10 { fill: #001541 } .terminal-1408026898-r11 { fill: #780028 }      A\u00a0Question\u00a0App \u2b58t\u00a0\u2014\u00a0You\u00a0just\u00a0pressed\u00a0t! Do\u00a0you\u00a0love\u00a0Textual? \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 YesNo \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p> <p>Info</p> <p>Note that there is no need to explicitly refresh the screen when setting the title attributes. This is an example of reactivity, which we will cover later in the guide.</p>"},{"location":"guide/app/#whats-next","title":"What's next","text":"<p>In the following chapter we will learn more about how to apply styles to your widgets and app.</p>"},{"location":"guide/design/","title":"Design System","text":"<p>Textual's design system consists of a number of predefined colors and guidelines for how to use them in your app.</p> <p>You don't have to follow these guidelines, but if you do, you will be able to mix builtin widgets with third party widgets and your own creations, without worrying about clashing colors.</p> <p>Information</p> <p>Textual's color system is based on Google's Material design system, modified to suit the terminal.</p>"},{"location":"guide/design/#designing-with-colors","title":"Designing with Colors","text":"<p>Textual pre-defines a number of colors as CSS variables. For instance, the CSS variable <code>$primary</code> is set to <code>#004578</code> (the blue used in headers). You can use <code>$primary</code> in place of the color in the background and color rules, or other any other rule that accepts a color.</p> <p>Here's an example of CSS that uses color variables:</p> <pre><code>MyWidget {\nbackground: $primary;\ncolor: $text;\n}\n</code></pre> <p>Using variables rather than explicit colors allows Textual to apply color themes. Textual supplies a default light and dark theme, but in the future many more themes will be available.</p>"},{"location":"guide/design/#base-colors","title":"Base Colors","text":"<p>There are 12 base colors defined in the color scheme. The following table lists each of the color names (as used in CSS) and a description of where to use them.</p> Color Description <code>$primary</code> The primary color, can be considered the branding color. Typically used for titles, and backgrounds for strong emphasis. <code>$secondary</code> An alternative branding color, used for similar purposes as <code>$primary</code>, where an app needs to differentiate something from the primary color. <code>$primary-background</code> The primary color applied to a background. On light mode this is the same as <code>$primary</code>. In dark mode this is a dimmed version of <code>$primary</code>. <code>$secondary-background</code> The secondary color applied to a background. On light mode this is the same as <code>$secondary</code>. In dark mode this is a dimmed version of <code>$secondary</code>. <code>$background</code> A color used for the background, where there is no content. <code>$surface</code> The color underneath text. <code>$panel</code> A color used to differentiate a part of the UI form the main content. Typically used for dialogs or sidebars. <code>$boost</code> A color with alpha that can be used to create layers on a background. <code>$warning</code> Indicates a warning. Text or background. <code>$error</code> Indicates an error.  Text or background. <code>$success</code> Used to indicate success.  Text or background. <code>$accent</code> Used sparingly to draw attention to a part of the UI (typically borders around focused widgets)."},{"location":"guide/design/#shades","title":"Shades","text":"<p>For every color, Textual generates 3 dark shades and 3 light shades.</p> <ul> <li>Add <code>-lighten-1</code>, <code>-lighten-2</code>, or <code>-lighten-3</code> to the color's variable name to get lighter shades (3 is the lightest).</li> <li>Add <code>-darken-1</code>, <code>-darken-2</code>, and <code>-darken-3</code> to a color to get the darker shades (3 is the darkest).</li> </ul> <p>For example, <code>$secondary-darken-1</code> is a slightly darkened <code>$secondary</code>, and <code>$error-lighten-3</code> is a very light version of the <code>$error</code> color.</p>"},{"location":"guide/design/#dark-mode","title":"Dark mode","text":"<p>There are two color themes in Textual, a light mode and dark mode. You can switch between them by toggling the <code>dark</code> attribute on the App class.</p> <p>In dark mode <code>$background</code> and <code>$surface</code> are off-black. Dark mode also set <code>$primary-background</code> and <code>$secondary-background</code> to dark versions of <code>$primary</code> and <code>$secondary</code>.</p>"},{"location":"guide/design/#text-color","title":"Text color","text":"<p>The design system defines three CSS variables you should use for text color.</p> <ul> <li><code>$text</code> sets the color of text in your app. Most text in your app should have this color.</li> <li><code>$text-muted</code> sets a slightly faded text color. Use this for text which has lower importance. For instance a sub-title or supplementary information.</li> <li><code>$text-disabled</code> sets faded out text which indicates it has been disabled. For instance, menu items which are not applicable and can't be clicked.</li> </ul> <p>You can set these colors via the color property. The design system uses <code>auto</code> colors for text, which means that Textual will pick either white or black (whichever has better contrast).</p> <p>Information</p> <p>These text colors all have some alpha applied, so that even <code>$text</code> isn't pure white or pure black. This is done because blending in a little of the background color produces text that is not so harsh on the eyes.</p>"},{"location":"guide/design/#theming","title":"Theming","text":"<p>In a future version of Textual you will be able to modify theme colors directly, and allow users to configure preferred themes.</p>"},{"location":"guide/design/#color-preview","title":"Color Preview","text":"<p>Run the following from the command line to preview the colors defined in the color system:</p> <pre><code>textual colors\n</code></pre>"},{"location":"guide/design/#theme-reference","title":"Theme Reference","text":"<p>Here's a list of the colors defined in the default light and dark themes.</p> <p> Textual\u00a0Theme\u00a0Colors \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Light\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Dark\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$background-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0$primary-background-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-background-darken-3\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0$primary-background-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-background-darken-2\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0$primary-background-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-background-darken-1\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-background\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-background\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$primary-background-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-background-lighten-1\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$primary-background-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-background-lighten-2\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$primary-background-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$primary-background-lighten-3\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$secondary-background-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-background-darken-3\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$secondary-background-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-background-darken-2\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0$secondary-background-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-background-darken-1\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-background\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-background\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0$secondary-background-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-background-lighten-1\u00a0\u00a0\u00a0 \u00a0\u00a0$secondary-background-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-background-lighten-2\u00a0\u00a0\u00a0 \u00a0\u00a0$secondary-background-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0$secondary-background-lighten-3\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$surface-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$panel-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$boost-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$warning-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$error-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$success-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent-darken-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent-darken-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent-darken-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent-lighten-1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent-lighten-2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$accent-lighten-3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 </p>"},{"location":"guide/devtools/","title":"Devtools","text":"<p>Note</p> <p>If you don't have the <code>textual</code> command on your path, you may have forgotten to install with the <code>dev</code> switch.</p> <p>See getting started for details.</p> <p>Textual comes with a command line application of the same name. The <code>textual</code> command is a super useful tool that will help you to build apps.</p> <p>Take a moment to look through the available sub-commands. There will be even more helpful tools here in the future.</p> <pre><code>textual --help\n</code></pre>"},{"location":"guide/devtools/#run","title":"Run","text":"<p>You can run Textual apps with the <code>run</code> subcommand. If you supply a path to a Python file it will load and run the application.</p> <pre><code>textual run my_app.py\n</code></pre> <p>The <code>run</code> sub-command will first look for a <code>App</code> instance called <code>app</code> in the global scope of your Python file. If there is no <code>app</code>, it will create an instance of the first <code>App</code> class it finds and run that.</p> <p>Alternatively, you can add the name of an <code>App</code> instance or class after a colon to run a specific app in the Python file. Here's an example:</p> <pre><code>textual run my_app.py:alternative_app\n</code></pre> <p>Note</p> <p>If the Python file contains a call to app.run() then you can launch the file as you normally would any other Python program. Running your app via <code>textual run</code> will give you access to a few Textual features such as live editing of CSS files.</p>"},{"location":"guide/devtools/#live-editing","title":"Live editing","text":"<p>If you combine the <code>run</code> command with the <code>--dev</code> switch your app will run in development mode.</p> <pre><code>textual run --dev my_app.py\n</code></pre> <p>One of the features of dev mode is live editing of CSS files: any changes to your CSS will be reflected in the terminal a few milliseconds later.</p> <p>This is a great feature for iterating on your app's look and feel. Open the CSS in your editor and have your app running in a terminal. Edits to your CSS will appear almost immediately after you save.</p>"},{"location":"guide/devtools/#console","title":"Console","text":"<p>When building a typical terminal application you are generally unable to use <code>print</code> when debugging (or log to the console). This is because anything you write to standard output will overwrite application content. Textual has a solution to this in the form of a debug console which restores <code>print</code> and adds a few additional features to help you debug.</p> <p>To use the console, open up two terminal emulators. Run the following in one of the terminals:</p> <pre><code>textual console\n</code></pre> <p>You should see the Textual devtools welcome message:</p> <p> textual\u00a0console \u258cTextual\u00a0Development\u00a0Console\u00a0v0.12.1 \u258cRun\u00a0a\u00a0Textual\u00a0app\u00a0with\u00a0textual\u00a0run\u00a0--dev\u00a0my_app.py\u00a0to\u00a0connect. \u258cPress\u00a0Ctrl+C\u00a0to\u00a0quit. </p> <p>In the other console, run your application with <code>textual run</code> and the <code>--dev</code> switch:</p> <pre><code>textual run --dev my_app.py\n</code></pre> <p>Anything you <code>print</code> from your application will be displayed in the console window. Textual will also write log messages to this window which may be helpful when debugging your application.</p>"},{"location":"guide/devtools/#verbosity","title":"Verbosity","text":"<p>Textual writes log messages to inform you about certain events, such as when the user presses a key or clicks on the terminal. To avoid swamping you with too much information, some events are marked as \"verbose\" and will be excluded from the logs. If you want to see these log messages, you can add the <code>-v</code> switch.</p> <pre><code>textual console -v\n</code></pre>"},{"location":"guide/devtools/#textual-log","title":"Textual log","text":"<p>In addition to simple strings, Textual console supports Rich formatting. To write rich logs, import <code>log</code> as follows:</p> <pre><code>from textual import log\n</code></pre> <p>This method will pretty print data structures (like lists and dicts) as well as Rich renderables. Here are some examples:</p> <pre><code>log(\"Hello, World\")  # simple string\nlog(locals())  # Log local variables\nlog(children=self.children, pi=3.141592)  # key/values\nlog(self.tree)  # Rich renderables\n</code></pre> <p>Textual log messages may contain console Markup:</p> <pre><code>log(\"[bold red]DANGER![/] We're having too much fun\")\n</code></pre>"},{"location":"guide/devtools/#log-method","title":"Log method","text":"<p>There's a convenient shortcut to <code>log</code> available on the <code>App</code> and <code>Widget</code> objects. This is useful in event handlers. Here's an example:</p> <pre><code>from textual.app import App\nclass LogApp(App):\ndef on_load(self):\nself.log(\"In the log handler!\", pi=3.141529)\ndef on_mount(self):\nself.log(self.tree)\nif __name__ == \"__main__\":\nLogApp().run()\n</code></pre>"},{"location":"guide/events/","title":"Events and Messages","text":"<p>We've used event handler methods in many of the examples in this guide. This chapter explores events and messages (see below) in more detail.</p>"},{"location":"guide/events/#messages","title":"Messages","text":"<p>Events are a particular kind of message sent by Textual in response to input and other state changes. Events are reserved for use by Textual, but you can also create custom messages for the purpose of coordinating between widgets in your app.</p> <p>More on that later, but for now keep in mind that events are also messages, and anything that is true of messages is true of events.</p>"},{"location":"guide/events/#message-queue","title":"Message Queue","text":"<p>Every App and Widget object contains a message queue. You can think of a message queue as orders at a restaurant. The chef takes an order and makes the dish. Orders that arrive while the chef is cooking are placed in a line. When the chef has finished a dish they pick up the next order in the line.</p> <p>Textual processes messages in the same way. Messages are picked off a queue and processed (cooked) by a handler method. This guarantees messages and events are processed even if your code can not handle them right away.</p> <p>This processing of messages is done within an asyncio Task which is started when you mount the widget. The task monitors a queue for new messages and dispatches them to the appropriate handler when they arrive.</p> <p>Tip</p> <p>The FastAPI docs have an excellent introduction to Python async programming.</p> <p>By way of an example, let's consider what happens if you were to type \"Text\" in to a <code>Input</code> widget. When you hit the T key, Textual creates a key event and sends it to the widget's message queue. Ditto for E, X, and T.</p> <p>The widget's task will pick the first message from the queue (a key event for the T key) and call the <code>on_key</code> method with the event as the first argument. In other words it will call <code>Input.on_key(event)</code>, which updates the display to show the new letter.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1cXGtT28hcdTAwMTL9zq+g2C97q4Iyj57XVm3dXG6Eh8NcdTAwMWJCSPbuXHUwMDE2JWzZViw/sGRcZknlv99cdTAwMWVcdTAwMDGWLEu2McaYutdcdFx1MDAxOEujUVvTp/ucnpF+rqyurkV3XHUwMDFkb+2P1TXvtuxcdTAwMDZ+pev2197Z7TdeN/TbLdzF4s9hu9ctxy3rUdRcdP94/77pdlx1MDAxYl7UXHTcsufc+GHPXHLCqFfx20653XzvR14z/Lf9feg2vT877WYl6jrJSda9ilx1MDAxZrW79+fyXHUwMDAyr+m1olx1MDAxMHv/XHUwMDBmfl5d/Vx1MDAxOf9OWVx1MDAxN/gtL25cdTAwMWJvTWzjhGW3XHUwMDFltluxnYxpJYFcbjlo4IdcdTAwMWbxTJFXwb1VtNZL9thNa3ew7a9v1GuNw6P92uXn453d/r5Mzlr1g+Asulx1MDAwYu4vgluu97opm8Ko2254XHUwMDE3fiWqP16z1PbBcVx1MDAxNTeso1x1MDAwMYPd3XavVm95of3udLC13XHLfnRnt1x1MDAxMTLY6rZqcSfJllv8XHUwMDA0TDlcXFFiuFx1MDAxMoNcdTAwMWT2UC7AoZRRZncxo1x1MDAxNM9cdTAwMTi12Vx1MDAwZXBcdTAwMDTQqN9I/EqsunLLjVx1MDAxYZrWqlxm2kRdt1x1MDAxNXbcLo5T0q7/+HVcdTAwMWRJQSpcbmBwREApXHUwMDE4NKl7fq1cdTAwMWVZczRzXHUwMDE4lZRcbs2pXHUwMDAyloxL6MVDXCK0XHUwMDA2LiE51FrQKVVit/gne0HrbrfzcN3WYktT1tuPWymfSlx1MDAwZe51Ku69XHUwMDAzUCk5XHUwMDEzaCmXLLmg6GdcctzZ6lx1MDAwNUGyrV1u5PhMXHUwMDE4ud1ow29V/FYte4jXqlx1MDAxNOxcdNww2mw3m36EZlx1MDAxY7f9VpRtXHUwMDEx9/uh2233655byem5cF/HdpeAyL6Sv1ZcdTAwMTO3iT9cZv7+511u6+Ihta+RwUy6W0m//3r3RDxLkt36iGdcdTAwMDVUXHUwMDEyTVJccibhueyT7cMvnXWz8dm/8b5cdTAwMDU7p+ftT0uPZ0Ul4llcdTAwMWJcIllcdTAwMTbP3MGQxlx0XHUwMDA3/Mf0y8HZOIRxjfiQglBcbjRcdTAwMGbNyjhMMcE5XHUwMDA1wVjyVVx1MDAxZsBMNTWMS6lcdTAwMTKY/1x1MDAxZs6vXGLnwiG1r+xgPlx1MDAxMcxdr1x1MDAxY937clx1MDAwZaKFVEWIplxuXHUwMDA3jFx1MDAwYlx1MDAwNXpqSJ9/b1xis8v5XHUwMDA1bFx1MDAxZVx1MDAxZV1Hd5dHSjZngzTNuuDjcWFcdTAwMWIpylxcMzRwR2mBVCSDaClExognYfg3KEuvKlx1MDAwMHJcdTAwMTKyTK7pXHUwMDAwszpcdTAwMTXFXHUwMDFlUMqBMMFcdTAwMDQkXHUwMDA2z1xypVx1MDAwMyf6mfK0gc9E3m1cdTAwMTJ4Ulx1MDAwM1xcPWq4ncjb0Xe1T0dbknxcdTAwMDH6w19cdTAwMWK0+/Uuv9v7gzfV0Y3r9Xav3fN+dHHEXHUwMDBmw8Nob/gsj+d3LepS/T46+lx1MDAxY0PLWMxcZn3/NFxcaCFcXDDVcmGQ1k6NlvyLufRo0Vx1MDAwNWjR4DxcdTAwMGIv4ymsyEFcZuNZxFx1MDAwMKXKMMlnSGuh/bDotFZtt6Iz/0csiMjQ1m236Vx1MDAwNzGvXHUwMDE4bI6d0mrBXHUwMDFia5Oz59393vDu/vx77fPfa/9KX9rQi1x0XHUwMDFj2meGXHUwMDBl/lx1MDAxMPi1Vky9sFx1MDAwM6875OCRj9pv0KDpVyrphFFGi1xc7LNbmibOt7t+zW+5weexXHUwMDA2z560kPNcdTAwMTYmLcGUXCKYJNnUMCTVjdb2xkWTXHUwMDFk7PbPvm9dnVx1MDAxZJWbfPlhSFx1MDAxZKo5Q6bJjaaSXHUwMDBmYVFcYuEg61dcdTAwMDb5qFx1MDAwNinUc3A5hzymKCVcblxy0U+H5Wx57H5kw89cdTAwMDcnXHUwMDFmLjpy0z24U7J1XHUwMDFhfe3fVvNcdTAwMTNOjK2JeWxSesw/4fKlMfSeQlx1MDAwMCHTXHUwMDA0LZWeXsiNv8xLXHUwMDBiIDlcdTAwMGVAmMzMvFx1MDAwMDSPxEa1llx1MDAwNNW+nIFcbr7hzOYtOrNNSFx1MDAwNlx1MDAxMzObNzGz3VPbXHUwMDFjUFwiqSpcdTAwMDIlXHUwMDAwXHUwMDAzxSVMXHLJ8VR7SSEpNHU4IZwrKrVG2TNcdTAwMDRJhTnN4GZNWTHNxGtULavx6azqoqRiUo5iXHUwMDExUypcdTAwMDDmKq2I1Pa/XHUwMDE4hSaAY00kWnMlXHUwMDA1g5HSikBcdTAwMWLwXHUwMDFi0DdaWUny3WPdf1x1MDAxYcpcdTAwMTdDu9yzVq5cdTAwMTNcdTAwMDdcdTAwMDNcdTAwMTWOlK3uXHUwMDBiW1xiXHUwMDAzwVPtam4njmeDwXzYNci5w/WcXCJ7dvrkR61xcvDtU/PM6NBcdTAwMWNdnlx1MDAxZbM8e9BcdTAwMWPCLP1AUqRMbFx1MDAxNchcdTAwMTF7XHUwMDE4sVU9Jlx1MDAwNGZcdTAwMDKQXHUwMDFj4/6IWXMuJmVcdTAwMDPBXFzrScWebF8jPpx0t5J+n4mcayOzW1x1MDAxM26BmVRSdIqpXHUwMDAz2aHZuNBcdTAwMDY2TrpcdTAwMDem8uV6//r6Q+922Vx1MDAwM1x1MDAxOVx1MDAwMHFQgiB70KhGbVx1MDAxMW0okiFcdTAwMWVcdTAwMWNFiFx1MDAxMdxcdTAwMDBcdTAwMGVcdTAwMDFJz7W8XHUwMDBlPVx1MDAxN1x1MDAxOHpcdTAwMTFcdTAwMWJcdTAwMGIrM92Prdzp175931xc3708//bps/6q6mqDPYeev1C3k1h//lx0p7T2W2f/ekdvVIOvXHUwMDE3f7ntvV23tHnWfltFMVxyxTVkQe0sr2HTU5fxw7e0iFx1MDAxN2NcdTAwMTGvucPmhvh56Fx0rVx1MDAwNDpH+ov9L8iJ20XLiVx06WuinLidKCdcbivVKchlQGlcYqXUwPRcdTAwMDJfbrPaycc72DpcdTAwMTW9nql978nLzt2yQ1JcdTAwMTnioGRcdTAwMWWpU1x1MDAwYtxupFYvNbeD3DdcdTAwMDeAXCJcdTAwMGJANEzb4MhcdTAwMTZcXFx1MDAxM1uufPNcdTAwMTR80yGIWlx1MDAwM1x1MDAwZvB6uDVv9brn9bx8XFzroYNcdTAwMDawXHK8ajRcdTAwMDbVUbtTXHUwMDA06aEvk8XvsEFjcVtYXHUwMDA2oHRMOqXcIJtcdTAwMTdPwO748V5S7GqgXHUwMDBlXHUwMDAwXHUwMDE4SbmmXFyZXGaCNThcZlx1MDAxOH1BXGZT7lCFSoZcYsZcdTAwMDQjyYBcZlx1MDAxMG2UwzhcdTAwMDGJTYhSSo+sl1x1MDAwMkzzgmj2XHUwMDAypPo161x1MDAwMONzwWq2XHUwMDBlgNFXgWGUaaF5stZg9VF3S0ehKJSzVlx1MDAwMcbn12FrcDhccjNKcCEwL+SWXHUwMDAwXGJcdTAwMDAj2MagXHUwMDFlXHUwMDAypkdsekslgPVCJ473jvhv0t9K+r0oflV8t9lOe2lqdkFcdTAwMTSuXHUwMDEyY4Rb5snp9Ms+x1x1MDAxN3qWNIBh8HK0XHUwMDE0dnEnXHUwMDE1SpiMXHUwMDFlwKjgMGUwglx1MDAwMTJcdTAwMTHgJmPY0+LYfUEzt1x1MDAwMKByuFxiZcaRoCG9IPUhZiFOXHUwMDE5oF2zyILnkJJnrFxmeZff7yTNLi5PXCLYgNOrvd3u7dFx+aJeOjmeVrP/pc7Pt672zlx1MDAwZvC6d3+cd8PN2+rB/DiUVjzh7i+k2XnxQlx1MDAxNiaBaOtPU0M0/2IuPUTNWIgqjvKBXHUwMDAzkZZoPFx1MDAxN6LjanR5cmF0/lx1MDAwZrRWXHUwMDEyg/lbWX89k2Bvty5R9/5cdTAwMWXL4MVcbvVcdFkmS/SHXHKdXHSBjFx1MDAxNM/BI/9QWpjpk+TJlemTm6PNXHUwMDEyLdPti7vatquDcNlcdTAwMTGokIMgK2RcXFKquExcdTAwMTWm4/k+TVx1MDAxZGOsXG5cdTAwMDDQ3OiXypGU58zyjep1ZVxiVUy/XHUwMDAw/F4x0yxUrW9ZsKzW3Vx1MDAxNuKwm1x1MDAwZu7FqvVhg8aCuFCtKz6O6zKM2IRNL9bHXHUwMDBm97LCWHNcdTAwMDcpP1hcdTAwMWOPwlhcdTAwMTPqXGKhha1+XHUwMDEzolPMZr4wNlxmo1x1MDAwNWpNlN2a4agksXNcdTAwMDBqQVx1MDAxZFwiXHUwMDA0xWCj8Vx1MDAwN1LceLDIRtgpU/1cdTAwMDIludeU7OOTw2p6qlxcoTI2wOyEoFxyeCzV6GHeXHUwMDFlXHUwMDFjylx1MDAxNzNtz/GyKM5cdGpx1KlKiFFjhMM1XHUwMDAwupZUWinJzYhRb0qxXHUwMDE3+rB9jXhv0t1K+n2mSXtKivVcdTAwMDBcdTAwMDVcdTAwMTTtXHUwMDA0zZk+jqldz5elXm1cdTAwMDM2LkNZ+Ytz9/Ro2eNcdTAwMThyfMdII6XAK0+0XHUwMDFjjmNcXChcdTAwMDe4jitIhEry2ktqhTBcdTAwMDQlXHUwMDAxWfD0Qalx2bioXHUwMDA2/CvtnqhcdTAwMGa3lZ0621x1MDAwZZ4/Z/9Wup1UVsg/4YuSsrGgL1x1MDAxMlx1MDAxZkZcdTAwMTXSXHUwMDE2VJqc2rtKp7+RZfxlXla4XHUwMDAzjIO7lo6ZXHUwMDE33OcxYc+IXHUwMDE0KJhmwftcdTAwMWKesI9cdTAwMTY9YT8hc02csI+ed2eLLr6zhVx1MDAxOUzDVlx1MDAwZk9ccstcdTAwMDNSql5cdTAwMWNdRKWQ7ZQvvG+eOP9SKoBludtcdTAwMGXD9bpcdTAwMWKV669cdTAwMGZNpHNcdTAwMGUyPs24Xb+YWmJcdTAwMWJ7XHJoh1x1MDAxMW0pIVx1MDAxNUSl65TzhqZQXGbZruFcdTAwMDaZJSbr1PrsoVx1MDAxYq1cdMdcdTAwMTbI2URcXLdcdTAwMTlcdTAwMDUuoFx1MDAwZeTmXHUwMDE1bkmjT1x1MDAwMO7sPitk4UM+7O3wXHUwMDFhuez0qaTSb7tl3W5tXHUwMDA3VyGr1Fp998dOUSrJ+N2Uj1x1MDAwNHhcdTAwMTFvxcG3t0pcdTAwMWJOhcy6q33+XHUwMDA3XHUwMDExhkrQRKpcdTAwMTdcXPolXHUwMDE0cVx1MDAwMKhRQJhGRZ6TVzhx7FJoSbhBXHUwMDExh/pqhFcqXHUwMDAzXHUwMDAyMM+8wsKwubmrXHUwMDE3XHUwMDA0fifMd1ZerHNcYlx1MDAxN1ZdmelXJ1+VTndcci25n8pcdTAwMDErl1x1MDAwM6M/qkZvXHUwMDE2b11gbMWAhY5cbkQwpDU8VVa9VzlcdTAwMWElNXqytM8jXHUwMDAwMY9qTd5cdTAwMTIphyiD0TteXHUwMDFmQSCnVkPtgklbXHUwMDE2tus8XHUwMDE4KtBRXHUwMDA1JCVSXCLD2VxmJdk34ammcH5AKo5xRD1hXHUwMDEyvXlrbrauv3/8us+jq1x1MDAxYrfqXHUwMDFk7+1cdTAwMTXd47okjootlIP5X2AsI4qAyD5uRWEoI1xc2ck5JVKqeTZPvVwiRLyQp1x1MDAwMrpcdTAwMGXG2te4dW9cdTAwMTGOKkFcdTAwMTQ5KqPx04fQW6f21HOXlEo/tpplJk5O9XW9XFzz5e6yeyrHXHUwMDFjT1x1MDAxOUFMYlx1MDAwZeFcIsNcdTAwMDCEdOzDkYjUklx1MDAxMmDPm8ii7ErrvHvX5lx1MDAxMlNcdTAwMDHiqDpLXHUwMDA1fGlcXHX8o1x1MDAwM3Rx4UNrJGmM8enDqiq3dvfDm1x1MDAxZF1vymr3MvhQqvpmtsLH4vgqRUnlUKGZNMo+XHUwMDA3avg2S8GIozVFSYNcdTAwMTRcdTAwMDFkXHUwMDE2RfNjq9xcdTAwMTBHWSdcdTAwMTSA0VvTvFx0XHUwMDFi7iBcdTAwMTNcdTAwMDVqn+oh7TrQrL9yaiTmhtd43Fx1MDAwN1+Iu45Zxc9cdTAwMDE4t3Cd2lt31zuNnb1bV1x1MDAxZl/pfr9zXHUwMDFjnFx1MDAxZpr9ZVx1MDAwZq2KO0rZKVx1MDAxMeuvOlWHi52VY9RcdTAwMDP0JFx1MDAwZZpcdTAwMTIqnuWtXHUwMDBmRfmc0KpcdTAwMWNcdTAwMTR3qGONQHVl1ySPuirTjp2HQkuJoExcdTAwMTgyqqwk2FuDXHUwMDA0vEJsfbqzrjxcdTAwMTSp19xO5yzCLtdcdTAwMWXn9NBqv/JQ2Uu6Wbvxvf5GXHUwMDFls4pftiRcdTAwMTZcdTAwMDPAeplnbf75a+XXf1x1MDAwMfpa2G0ifQ== events.Key(key=\"T\")events.Key(key=\"e\")events.Key(key=\"x\")Message queueon_key(event)Event handlerevents.Key(key=\"t\") <p>When the <code>on_key</code> method returns, Textual will get the next event from the queue and repeat the process for the remaining keys. At some point the queue will be empty and the widget is said to be in an idle state.</p> <p>Note</p> <p>This example illustrates a point, but a typical app will be fast enough to have processed a key before the next event arrives. So it is unlikely you will have so many key events in the message queue.</p>         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      events.Key(key=\"e\")events.Key(key=\"x\")events.Key(key=\"t\")Tevents.Key(key=\"x\")events.Key(key=\"t\")Teevents.Key(key=\"t\")TexText"},{"location":"guide/events/#default-behaviors","title":"Default behaviors","text":"<p>You may be familiar with Python's super function to call a function defined in a base class. You will not have to use this in event handlers as Textual will automatically call handler methods defined in a widget's base class(es).</p> <p>For instance, let's say we are building the classic game of Pong and we have written a <code>Paddle</code> widget which extends Static. When a Key event arrives, Textual calls <code>Paddle.on_key</code> (to respond to Left and Right keys), then <code>Static.on_key</code>, and finally <code>Widget.on_key</code>.</p>"},{"location":"guide/events/#preventing-default-behaviors","title":"Preventing default behaviors","text":"<p>If you don't want this behavior you can call prevent_default() on the event object. This tells Textual not to call any more handlers on base classes.</p> <p>Warning</p> <p>You won't need <code>prevent_default</code> very often. Be sure to know what your base classes do before calling it, or you risk disabling some core features builtin to Textual.</p>"},{"location":"guide/events/#bubbling","title":"Bubbling","text":"<p>Messages have a <code>bubble</code> attribute. If this is set to <code>True</code> then events will be sent to a widget's parent after processing. Input events typically bubble so that a widget will have the opportunity to respond to input events if they aren't handled by their children.</p> <p>The following diagram shows an (abbreviated) DOM for a UI with a container and two buttons. With the \"No\" button focused, it will receive the key event first.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1bbVPa2lx1MDAxNv7ur3C4X3pnarrfX85M54yioFSxVk+tPZ5xYlx1MDAxMiElJDRcdCDt9L/fXHUwMDE1UFx1MDAxMt5cdTAwMDIqcHBu80Eh2eysvfZ6nv2slZ2fW9vbhbjXclxuf2xcdTAwMTece8v0XFw7NLuFt8n5jlx1MDAxM0Zu4MMl0v9cdTAwMWVcdTAwMDXt0Oq3rMdxK/rj3bumXHUwMDE5Npy45ZmWY3TcqG16Udy23cCwguY7N3aa0Z/J36rZdN63gqZcdTAwMWSHRnqTXHUwMDFkx3bjIFx1MDAxY9zL8Zym48dcdTAwMTH0/jd8397+2f+bsc52zWbg2/3m/Vx1MDAwYql5nODxs9XA75uKOUKcMCT1sIVcdTAwMWLtw91ix4bLd2Cxk15JTlx1MDAxNXrRt6vuXHUwMDE34pu8yI/l/snt58reSXrbO9fzzuOeN3CEadXboZNejeIwaDiXrlx1MDAxZNeTu4+dXHUwMDFm/i5cbsBcdTAwMDfpr8KgXav7Tlx1MDAxNI38JmiZllx1MDAxYveSc1xiXHLPmn6t30d65j6ZIcVcciQ0JZprLDVVw6vJ77UhMeJcdTAwMTQrjSTmmo3bVVxmPJhcYrDrP6h/pJbdmlajXHUwMDA25vl22kZcdTAwMTFL48yYu4+jVdRgjFx1MDAxMlwiwVxmqlx1MDAxMeHDJnXHrdXjpFxyIYZCTCjJXHUwMDA3t8qY4vSnhGtFqVx1MDAxNul8JbdvXHUwMDFk2f3Q+GfcoXUzbD04rlx1MDAxMCVfMqYnVlx1MDAxZozHVTa2MpNOxFWl7Fx1MDAxZlQ+fyzvX1rfj3ul8/tw2NdIIMbOfVxcXHUwMDE4Xvj19ne3M7tcdTAwMWRp/XbRXHUwMDFiLmituL+6b1x1MDAxZvPDkPpnJdwrnXlfet3p1pphXHUwMDE4dDP9PnxKo6ndss1cdTAwMDEjYCEoSyiDS8SG1z3Xb8BFv+156bnAaqQkspUxeIK7RsafIS5G0fjZR+JcIohSXHUwMDA0WOApiOZcdTAwMTFX/vRtKnFplENcXFx1MDAwMlx1MDAxOVx1MDAwMlx1MDAxMyBcdTAwMGLBXHUwMDA2zPVcdTAwMTLiikPTj1pmXGJ8MIW85HzyXCJcdTAwMTNkRVx1MDAxMJFMJ3S2fLrKj05O5Vx1MDAxM6IzXHKCwI/P3Vx1MDAxZv2lUVx1MDAxOFx1MDAxYyuGiIBBaI24XHUwMDFjaVUym67XXHUwMDFimdd+XHUwMDE4g+W7rdab/2ZdXHUwMDFkOWDCYLlcdTAwMWRpvOu5tSTOXHUwMDBiXHUwMDE2XGbKXHRHIFx1MDAxMLsgXHUwMDA0hlxymq5te5lwtMBcdTAwMDJcdTAwMTP6XGaPXHUwMDE2WZOD0K25vuldjFx1MDAxOJhcdTAwMGLJXHUwMDAxJUzBpFwiszGJwfGYscyiNVx1MDAwZpP5JLWhmKRSXHUwMDFhhDIsZKJcdTAwMTVENjL6XHUwMDFkMGJwwCsgUilBJScrQyU1XHUwMDE0cCSTQlxugShXelxuKqk2XHUwMDE0xVopLjSGcJ5cdTAwMDAp5lxcwigofjpG+6Y+XHUwMDFio09bQTJ2mGG85/q269fgYrr0ParkRTDRR7HVTqzcXHUwMDAxhlx1MDAwNYBzjlxiU8BcdTAwMWNEZFx1MDAxYdXMVlx1MDAxMvRcdTAwMDZcdTAwMTeKSFx1MDAwNbHNlCZYPDRcdTAwMTiuwFx1MDAwNce355tUvPlcdTAwMDbS8NI8s8t2T/rt3a87++VZJjGsMdZIYyqJXHUwMDEyRLFcdKswg+mHmcNEXHUwMDEzglx1MDAwNPydMMszo7hcdTAwMTg0m25cZs7/XHUwMDE4uH487uS+N3dcdTAwMTO011x1MDAxZNNcdTAwMWW/XG7Dyl5cdTAwMWKnhVbS46h4TD9tp7Dpf1x1MDAxOX7+5+3U1juzozk5JuI47W8r+39cdTAwMTajhY5cdTAwMTVcdTAwMGbwPIXVXGK4eFx1MDAxNq1cdTAwMDGSXHRcdTAwMDaxsbjSyJ/nXHJlNaKUQSVcdTAwMTJIJ1x1MDAwYp5iZIzVNJBcdTAwMWWiSFx1MDAwM2q1TtbF1WlccpHOxZDGVKp8XHUwMDFleFx1MDAwYphVipHVZi2pkGp8iM5kpV5FOLBkLL+dWl9PXp5cXHjNXHUwMDFmn2/+wlx1MDAxZr2DYlxye3Xkur1ytJhcXM/t97LyudM9ZvsnxyG3yz3SJmxfLKFfcmlcdTAwMWZcdTAwMWSWXHUwMDFh1onaZfii6Z1cdTAwMWX4X2tL6HdF7n1d3TbE5VGn1PqEb9pRvdHhJXRXtf/vnPuCXGZ2vebOy+On33BBa0vlxoUon3+7u6yfdSp+3Tv+XHUwMDE27CzBXHUwMDBi91fki/zavjmpoHL5XHUwMDE2k2bN6Z0tqT7AJFx1MDAxMZCOrro+QIhW46dcdTAwMWZXbYq51ELRxXOR/LDY1FVb07xVXHUwMDFiUjJDrmnV5lNW7Uxq9LBqKyk4XHUwMDE4K+g6K1x1MDAwMkxohTR6QjxOr1xiLFpcdTAwMDEoPqbnb6795IJrv79OKvReULsuXFz704tcdTAwMDOZPHGkOOA5d6PR/6TSwFx1MDAxYy06Xlx1MDAxYZhr+fM1NkWKzkIrRlxcI0GzYTFcdTAwMGaunVx1MDAxYoJlLf7c2bPo0W3ZP2qflXv/Llxc+Ty0YkFcZqIxpDmSUsGoXHUwMDFhRSucMrhmSlx1MDAwMVx1MDAxMFx1MDAwNWFMrlx1MDAwZaxcdTAwMTkwpFx1MDAxMluMg5VgjDBkY5lq31o09sVheFOMnfaN3K1Wrq7qny5+XHUwMDFjfvitsZelsVfk3tfV7ao09uvywqo09uvygqf3iuq2XFxkRSGc84tcdTAwMGb3tVJpg72w/JRgXlx1MDAwNjN9IGm3XHUwMDBmn3JcdTAwMTSYwpqwpyiwXFyhMSsjoCSjcMc1XHUwMDA2wVRRgejiXHUwMDFhI3/+NlVjyHyNodelMdRcdTAwMTSNISc0htKYScroXG52NMxcdTAwMGJH/IRwfFlCsNeO48B/k5xcdTAwMWLo6uvClVx1MDAxM11cdTAwMTfeXHUwMDBlvnXM0DX9XHUwMDE4pHbUtixcdTAwMTjd7CxBjna+pCxhjphcdTAwMWXPXHUwMDEynjecXFxE56dcdTAwMGV49lNHjFx1MDAwNYQ8hPvimf7ljYjrxdZt1W+ffqrY9ztcdTAwMDeXZ/VNz/SpVlx1MDAwNoaoXHUwMDE1QkHSz4SczFx1MDAxZJCAbjjTjJOV7lx1MDAwNVgsecCISkQ5ZWtOXHUwMDFl0MfK4Un7qnL48axcdTAwMTL39lx1MDAwZXo8OPF/J1x1MDAwZstKXHUwMDFlVuTe19XtqpKH1+WFVSVcdTAwMGavy1x1MDAwYqtKXHUwMDFlXpdcdTAwMTde8DjhmTnJ9IGk3T58yntKwUEkp09cdTAwMTBWlpPgmTlcdFGCXHUwMDEzQcjie1x1MDAwYvKnb0O1XHUwMDBiQzRfu+i1aZdcdTAwMDWTXHUwMDEypSmiXHUwMDAyr0C6LDNcdTAwMWWXnpRUgylcIt5cdTAwMDG8huvOSOZo9Fx1MDAwNTKSeWPJXHUwMDA188z9j1jJmc9cdTAwMWMx0kJLxjPhPVx1MDAwZs75tLmhcKaKXHUwMDE5QiCtklx1MDAwMoLi2YpK/6Gjklx1MDAwNlx1MDAxNZJizYHeOFErrDFgXGaWXGJGXHUwMDE4p5RQwtkkulx1MDAwNTe45lopRGjyglx1MDAwN1x1MDAxZFx1MDAwNztnyXNi8ZyNRM/fXHUwMDAw+Vx1MDAwMrAvuFx1MDAwMXLh3YbIYJgqrFx1MDAwNeVIJvOVaTPYaUhcZlxmPoZlilxuLlx1MDAxNOTakztcclx1MDAxN9pcdTAwMDCZXHUwMDBm6lx1MDAxMZO4XHUwMDEwyVx1MDAwZUBcdTAwMDSrXHUwMDA1pJFcbk/YXHUwMDA0M4+0XHUwMDA0vIE9SMBcZuNcdJte0+7H2ZGcXHUwMDFjXHUwMDEzMZx2t5X9/1xmOpstTmBcdTAwMDKoktn8fVx1MDAxZZvlXHUwMDE3pjeVzSQxINDAXHUwMDEzXGYpxHXqj1x1MDAwMZkpQzCMOaeKXHUwMDBi/qJXw+ZQXHUwMDE5NVx1MDAxOMijxFx1MDAwNM4kKKUpVEZcZlx1MDAwMcJcdTAwMDR0iVJcdTAwMTIxltnv/Vh0oUpcYs1AvKyXzJgmXHUwMDE5sfQvktlcdTAwMGVQXHUwMDA3lVx1MDAwMCTMQEpKJsgkdYCjKbhZUVxuLCM0aM7n0Vl+1XTMqMQmXHUwMDA07UEkSEz0hFEw/UQgcCeiXHUwMDE45CdWr5rOdmaHc3JMXHUwMDA28lx1MDAxM1x0LbdcXCwzr7OOcVx1MDAxYeeYwaLCXHUwMDE3L1x1MDAxNvNcdTAwMWatfetL7XDvwlx1MDAxM7FC3S46vmttOqdcdEZcckWJgHDjXHUwMDEyKzZZK9ZUKFhQYGXNvlT2nPddmSWcO87YJKVcdTAwMTGR9pxcdTAwMTaKM1vQXHUwMDFlOEtCqqVhTp7xXGJoXHUwMDFlZ1xyw2pKyaLt69L9j6/V71cq+u53j3ixcVJ9eSWkKE87ptM+/G7+1Y0vT2k1qsYzXHUwMDFl+i6pXHUwMDEyMn0gabePiJrN36BcdTAwMDKUeMrjsFxccM6qhEiSkzrBIVx1MDAwNVx1MDAxNotcdTAwMDMzf/o2XHUwMDE2mCpcdTAwMGaYmsHStCRg5qpccsKnQJNMpEZcdTAwMThcdTAwMDNXcs7Uup/OPjFcdTAwMWPTWU9cdTAwMGIhmUeGI4WQdJCPhVx1MDAxMKeT2GR8cHpvXHUwMDFhTu/9deHiujDjXHUwMDA1Tj3y46W9wDlnkVx1MDAxOa92TDd4gMmtXHUwMDA3oFx1MDAxN8xW6zxcdTAwMDa/XHUwMDBlXHUwMDA1XGZMnWs/OCf1ZaHjOt29Kbx+1z+SXvs4T1x1MDAwMOUkXHUwMDEz9/PX1q//XHUwMDAxXHUwMDA3vCMgIn0=        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      App()Container(    id=\"dialog\")Button(        \"Yes\",    variant=\"success\")Button(        \"No\",    variant=\"error\")events.Key(key=\"T\") <p>After Textual calls <code>Button.on_key</code> the event bubbles to the button's parent and will call <code>Container.on_key</code> (if it exists).</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1cXG1T4spcdTAwMTL+7q+wOF/2Vq3ZeX85VVu3XHUwMDE01PXdVVddr6e2YohcdTAwMTBcdFx0Jlx1MDAwMcSt/e+ngyxJeFx0iODi3U1ZXHUwMDAymaHT09P9zNOdXHTfV1ZXXHUwMDBiUadhXHUwMDE3/l4t2Fx1MDAwZpbpOuXAbFx1MDAxN97H51t2XHUwMDEwOr5cdTAwMDdNpPs59JuB1e1ZjaJG+PeHXHUwMDBmdTOo2VHDNS3baDlh03TDqFl2fMPy61x1MDAxZpzIrof/jf9cdTAwMWaadftjw6+Xo8BILrJml53IXHUwMDBmnq5lu3bd9qJcdTAwMTCk/1x1MDAwZj6vrn7v/k9pV3bMuu+Vu927XHKJekKiwbOHvtdVVWpMJNOc9js4YVx0Llx1MDAxNtllaL1cdTAwMDWF7aQlPlVwS+dccr0vNre3qvdRdHrepHf1teSqt47rnkZcdTAwMWT3yVx1MDAwZaZVbVx1MDAwNnbSXHUwMDFhRoFfsy+cclSFdjxwvv+90Fx1MDAwN1x1MDAxMyTfXG78ZqXq2WGY+Y7fMC0n6sTnUDI+06t0ZSRnXHUwMDFl4lx1MDAxZVx1MDAxOFx1MDAxYlgozjiTQlLBkvF2es1cXCiKNSWSQC86oFnRd2EmQLO/UPdIdLsxrVpcdTAwMDVcdTAwMTT0yklcdTAwMWZFLI1To27/XHUwMDFjr6JcdTAwMDZjlFx1MDAxMEmJplx1MDAxYVx1MDAxMd7vUrWdSjWK+1x1MDAxMGIoxISS/OlSKSPZ3UlRQlDCiEh0jK/f2Cl3neOfQZtWzaDRs10hjD+kdI/V3lx1MDAxY/SstHel5t1sX3ok2tza31x1MDAxMZfhiSutVl3gvqyMK0b2Q1ToN/x4nyf24XBcdTAwMTe7Zpl9uSi192osujQv9uhosWZcdTAwMTD47WnlLkjd31xcbKb3+2kvmIjtvUuctNkom09Yg8GtXHUwMDE54kRwOPrtruPVoNFrum5yzrdqXHQ8raT0XHUwMDFkXHUwMDAyxYyeKUTkaixcIjKlkYbwTHSYhIj5Vl5aRFx1MDAxNLmIKIjBJII5QfLliFx1MDAxOFx1MDAwNaZcdTAwMTc2zFx1MDAwMHBmXHUwMDA0KsrJqEiGUJAqzVxilkLPXHUwMDFmXHUwMDA15+mdiVx1MDAxN/hedOo82l1ZXHUwMDA2x4ohXCJcdTAwMTCRWiMuM722zLrjdjJcdTAwMTPbdWPQfL3RePeftKVDXHUwMDFiVOjK5JnO665Tif28YMGg7CBcdTAwMTNcdTAwMDKRXHUwMDAzXGaj36HulMtuylx1MDAxZi3QwFx1MDAwNJnBzjSrvVx1MDAxZjhcdTAwMTXHM92zjIK5IfmE4iNiUlx1MDAwYjYuJqmG6eaYTc9S8peVJY1JgpBBXHUwMDE0xKRElFx0hjHLxCSh2kCEMM41XHUwMDA355dcXCwsJpGhpeSKgzaMyVx1MDAxMVx1MDAwMcm4QVx1MDAxNVx1MDAxMlxuaU0wk1SKwVx1MDAwMMVUUIlcdTAwMTVHM/CUrqazRiggXGKZJULDyFxmolxyxys7Xlx1MDAwNVx1MDAxYZN17yf5niZcIroxbDXDrlxyXHUwMDExo1xu0JMpXHUwMDAwUoKFZDzVrWI24oXIoFx1MDAxOMGUY1x1MDAwNeingIj3OvRcdTAwMTfggu2VJyvFOo9cdTAwMWN92l5v75OrWqd0XCK+XFw0ySil1kArXHJTg5HATFxizaRcdTAwMWVWXG5TQ1x1MDAxMVx1MDAwNViHOcFYa4yHtHLNMCr69bpcdTAwMTOB9Y99x4tcdTAwMDat3DXnelx1MDAxY+xV2yxcdTAwMGa2wqjSbYOo0IglZilp8m41XHSb7of++3/ej+492pnjY9iNXHUwMDEzYSvp13FoXHUwMDE22Fb0XHUwMDE0zCNcdTAwMTCNUDpcdTAwMTbSMIQvl1qpXHUwMDA0KiZhWv4kLymmQXppYIUhX0GUUKF1lmdcdTAwMTCtXGZCMSyGXHUwMDE4QStTfECzOfJcZpFgVFx1MDAxZseUXHUwMDFhwi2CtITVJoV6r5Jfbd7W6N3mbadxb53csk7rlG6ffVre/Opi97zV3melg/2Al7c7pElYScxBLrko73zaqllcdTAwMDdqneGzunu06V1V5iB3QeZ9W2Jr4mKntdU4wd+aYbXW4lvo9rD8x7hLLfaRblx1MDAxZu/fsiNyXiu5XHUwMDFi9p44q1x1MDAxZOzOo0Bycllj1YOz/a/0+HHnq/ulxYLSi+ROKlx1MDAwZYw2UFwi9ueCm0PuuEB44cVcdTAwMDFC2fhlWyhcdTAwMTmTXGKS5J2Tlu18v1jWZZuSvGWbXHUwMDAyRZSvtGzzXHUwMDExy3YqZe4v20RLyqRIxvtcblx1MDAwNVx1MDAwMaZcdTAwMTTCXHUwMDFhP8MjR1x1MDAxN1x1MDAwNKYtXHUwMDAwXHUwMDE0f2bn7669uMEpf7yOK/+uX7kuXFx7o2tcdTAwMDOcZOT0U3/Xvs36/7MqXHUwMDAzXHUwMDEz2OhgZWCi5rPTbHDG8fc3XGLTXGLy0OnD9ZN9ZNPHc+fh6/bxSXX7xrNcdTAwMWXto19cdTAwMWKufGK0XHUwMDFhXHUwMDE4XHUwMDExXHUwMDAx2CgohFx1MDAwMYCTyEQrXHUwMDEz3Fx1MDAxMMCyIVx1MDAxOedap1x1MDAwYlhzXHUwMDBmVo2Gg1VcctdcdTAwMDY0xZhS9dr3ME7XnMvS/tq3b0FJ31xir3VPXHUwMDAzbP3h2PPi2Fx1MDAwYjLv21x1MDAxMrsojv22rOBeXHUwMDE2vfXO1n2FXHUwMDE3afXIosXjqIh+PyvojaK62S6yolx1MDAxMPbp2d5DZWurvbxWWFSqMXd1J2VcdTAwMWGjL5iI7b2bJ6/LpS/jMlxySphcdTAwMWE8nTBcdTAwMTeluKY0YbqTmEu+mZeTuYgsc8lmXHUwMDE5TKLX4i1qXHUwMDA0b1x1MDAxOXFPQ1NcdTAwMWRXilOT8n+YZGw0o8j33sXnnrj6deGrXHUwMDFkXlx1MDAxN94/fWqZgWN6XHUwMDEx0PewaVkwuvGZh8xcbp9T5jGBoVx1MDAwZmZcdTAwMWWzXHInN54npCNCjlx1MDAwYmrOXHUwMDE44/g5NzLXLiufxVWntLPjXHUwMDFjuvbnzm7n7mHpq1x1MDAwN4RcbkNThFx1MDAxNCVcXGlAuYG4hnxcdTAwMDTBeYw4U9BXysVcdTAwMDX2dFx0XHSDMVx0qVx1MDAxN1A7yKWK+uiIq8+HzZ3L5teaf2Fe3W3JP+nIvNKRXHUwMDA1mfeNiV1QOvK2rLCodOSNWWFB6cjbssL8b3wsSN1JWc7oXHUwMDBiJmJ775Ygy+Fjs1x1MDAxY6KB4Ovn3E7JN/OyXHUwMDEyXCKGc1x0XHUwMDExJDqvRYimzHRcdTAwMDRcdTAwMTJUKM5cdTAwMTdQoV3qTOfQXHUwMDFmkVx1MDAxOdiAXHUwMDAzwWunOVx1MDAxM5j/XHUwMDE0ac6kseRG89h9mlx1MDAwNOHxt0fBwbHkWj5j93QuXHUwMDFjL2s8XHUwMDEzajBcdLFEhGSMZm+3UKVcZsA0QZiIN/nSXHUwMDA1XHUwMDA2M8aGXHUwMDEwglx1MDAxMcYpJYAtbDi2IdeK94tCZFx1MDAwMdBcIonpUKgrgCNGOZmhqDH7Rs1cdTAwMTeE+pRcdTAwMWI1p95cdTAwMTOJXGaGYfhgXHUwMDAyKjhHhKhUp6dcdTAwMWSRxMBgZULiXHUwMDFlQilGSa/HM/dp5sd0RicuXHUwMDA0LFx1MDAxNTzeXHRMJUpcdTAwMTC6r1x1MDAxM8w90lJoXHT6IFx1MDAwMXP8tndpjvfl+Fx1MDAxOPLiRNxK+vXZaIY104Onkz2aSkpYtNn0ezTzS+jLWYMlYHkpkFx1MDAwNk+iUjCW2lx1MDAxM/lcdTAwMDRn2oh3XG5cdTAwMGLEqKZcdTAwMDIrNqDYPPFcZmBVXHUwMDExrVx1MDAxMEw2k0IlO1x1MDAxN1x1MDAxMjwjhlx1MDAwMColMFdKXCLGdKoq3Fx1MDAwMzREXHUwMDAwk1x1MDAxNVEzlHNmXHUwMDA3NPjHuUx86Vx1MDAxN1x1MDAwMtpcdTAwMWGgXHUwMDA3zKRgmDGAdSZIqtNcdTAwMTN4gJ0pWFlRXG44I7RmM248z6/FXHUwMDBl6Fx1MDAxNKuEgFx1MDAxZmDALZxQ/tXUvnNcIrrPXHUwMDFjUayUxupNXHUwMDAz2tp4b46PYT9+JqTlXHUwMDE2oWFix6NcdTAwMWFnXHUwMDA0ol1PX4Qu31x1MDAxY1/c3947l6XPx7e6yuT5oW3+WlSjk1BccixvSLA6XHUwMDAx6ytcdTAwMDbeNLwnRlx1MDAwYlx1MDAwZcu6XHUwMDEyWCP2omdp/mKWsG85Y8OQRkSCpklcdTAwMDE6wbVcdTAwMWVmcZhcdTAwMTNccvrMsOl8XHUwMDEyZPXdakTNorTl7IR8XHUwMDE37Z5cdTAwMWNcdTAwMWY+3lhHlebGWvHlJZaiPGqZdvPTvfmlXHUwMDFkXVx1MDAxY9HD8DDam0OJZe7qTiqxjL7glNo6n3evLm4qdrBn1qnliK90s/FtOiv8XHUwMDA0gDz6XGZ/iWstqHQj5djKXHJGgoLLajZ9qpc/fctcbiMyXHUwMDE3RjQ3WFx1MDAxYUZcdTAwMTaX7KWraMmDscPpXHUwMDFjQLtcdTAwMDI6J39B5Wam5+5SlVx1MDAxYoIyZ/uVm2QoPys3divWydizO+9qdufjdeHsujDmyVid+fLcnoydsCZcdTAwMGWWZ0YrPPtcdTAwMDKvUyvWYE1cdTAwMTWmgrDnZC3ty9ZR5+BTZJ5vr31ztrfq7EBtLntcclx1MDAwNlJcdTAwMTFDQqIo4u0jXFxcdTAwMTA+UIVBkDJcbowhhWNAhNGLXHUwMDAy8+VcdTAwMGI8dIOo1LM8r/6SXHUwMDA13lx1MDAxNlx1MDAxYid3ev2uuVtad+W3dus4OKsv71x1MDAwMr8gdecudlx1MDAxMm9cdTAwMTh9wd+HNyg9dkc+iZ+Fxlx1MDAxMLfT3/LJn76lhSeRXHUwMDBiT5RcdTAwMWJoXvA0XHUwMDE33iBjXHUwMDEywyVdwHOvf3hDwlx1MDAxYiastXPgXHJja52pZ6NcdTAwMDb3pXFcdTAwMDSrXHUwMDEzXHUwMDE208dkPkg9KybJq8UkV8JAkGjHv66VpfFcdTAwMWNcdTAwMTkqrktROX6TqS3iavDsgSjhXHUwMDFhXHUwMDA0UTzqXHUwMDA3brgwQC/IXHUwMDFmXHUwMDA0RfG2XzlcXNVkQmtMkX7d2zRwSZz6XHUwMDE1g/lXNfN59Gr6llxiXHUwMDAxnGRIi/hX0SBcdTAwMTVcdTAwMWLxc1x1MDAxYVx1MDAxOEBVXHUwMDAzmGI4YmuyXodnVjXzY3RAJ+B1Or6nT1x1MDAwNJNsSCNhXHUwMDAwwnVnlOk4W6ZDXHUwMDFhvama5rBcdTAwMGZ3T1x1MDAwZrtvXCJpJf36bFwiMb6MyblShKR/X2ZcdTAwMTJmSeteXHUwMDFkXFzV/eKRf3/X1vqiendcdTAwMTUuP2ZJXHUwMDAz+Fx1MDAwM9aKgWdjNlx1MDAwMFxcSFx1MDAxYZpJQYVWWDGxuC3yPFlcdTAwMWJcdTAwMTJcdTAwMTYxjFI0vlx1MDAxZFx0gfeqv8slXHUwMDA00UrNhFJTsIjhfSM3zZub9Fx1MDAxMp+mXHIq03vavSCR31x1MDAxOMdcdTAwMTgyo1x1MDAxOKRcdTAwMDc9TZ5ia6VcdTAwMTe3XHUwMDA1s9E4jcBCfYiDSXDKvWEm8lxuLcdub4zIdm+7Ryy1XHUwMDFir3Fk2PFcdTAwMTR8/7Hy419iJnwqIn0=        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      App()Container(    id=\"dialog\")Button(        \"Yes\",    variant=\"success\")Button(        \"No\",    variant=\"error\")events.Key(key=\"T\")events.Key(key=\"T\")bubble <p>As before, the event bubbles to its parent (the App class).</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1cXGtT4lhcdTAwMTP+7q+w2C/zVlxy2XO/bNXWW4p3XHUwMDFkXHUwMDFkXHUwMDA1dZzXLStAhFxmgWBcdTAwMTK8zNb+97dcdTAwMGYqXHS3XHUwMDEwlTgwO1QpkFx1MDAxYzqdPt1Pnu7Tyd8rq6uF6KHrXHUwMDE0/lgtOPc123PrgX1X+Gi23zpB6PpcdTAwMWTYRfrfQ79cdTAwMTfU+iObUdRccv/4/fe2XHUwMDFktJyo69k1x7p1w57thVGv7vpWzW//7kZOO/yv+X9ot50/u367XHUwMDFlXHUwMDA1VnyQolN3Iz94PJbjOW2nXHUwMDEzhSD9f/B9dfXv/v+EdnXXbvuden94f0esXHUwMDFl13p066Hf6auKmWBMak3jXHUwMDExbrhcdTAwMDFHi5w67L5cdTAwMDaNnXiP2VRAZVxc/LZ3vr7+5UpUrtTa3XkobuPDXrueV45cdTAwMWW8R0PYtWYvcOK9YVx1MDAxNPgt59ytR01z9JHtg9+FPtgg/lXg91x1MDAxYc2OXHUwMDEzhkO/8bt2zY1cdTAwMWXMNoRcdTAwMDZb7U6jLyPeclx1MDAwZt+KmEhLIaQ5ZZxJitRgd19cdTAwMDDllmJKI0a1YFxu61x1MDAxMcVKvlx1MDAwNzNcdTAwMDGK/Yb6r1i1ql1rNUC/Tj1cdTAwMWWjSE3jxEnfPZ+uolx1MDAxNmOUXHUwMDEwSVx0WFx1MDAxY1x1MDAxMT5cdTAwMTjSdNxGMzJjXGJcdTAwMDE9mVCSP1x1MDAxZSphI6c/J1hJolx05yreY1x1MDAxNOju1vve8deoTZt20H2yXSE0X1x1MDAxMspcdTAwMWK9N0ddK+leiXnvKSEu9q/0fveb+vL15vtR8M0hXHUwMDAzWUO+XHUwMDE4OfdRYbDjn4+/xP4kYodGf8x6wKzaXHUwMDFlRrf35Vx1MDAwYreoP92cVnfOTlx1MDAxZZwvXHUwMDA3k7W1g8C/S8h9+lx1MDAxNPt+r1u3XHUwMDFmIVxmXHUwMDBiQVx1MDAxOeJEUarkYL/ndlqws9PzvHibX2vFqLeSUHhcZmyHzj+JtEhMRVrEXHUwMDE4w0igOOhnIW369C0u0pI0pFXCklx1MDAxY1x1MDAxM1x1MDAwMFn2ZqSNXHUwMDAyu1x1MDAxM3btXHUwMDAw4GtcdTAwMDLaytloS8bRXHUwMDE1SSFcYvxcIlZsbug6T/eMvcDvRGX3e9/FhMWxYohcYkTgmo64XHUwMDFjXHUwMDFhtWW3Xe9haGL7flxmmq91u1x1MDAxZv6TNHXogFxufZl8aPCa5zaMo1x1MDAxN2pwUk4wXHUwMDE0XHUwMDAzkVx1MDAwYtRlMKDt1utewlx1MDAxZmuggVxyMoPdLCzCXHUwMDBm3Ibbsb3KkIKpMfmIXHRcdTAwMTOCXHUwMDEyI6KmRaVcIkozJjDOXHUwMDFllKkotahBSYVFXGJFhHCFNNA9OVx1MDAxNJREUPBcdTAwMWNcdTAwMDAnJoFYYIJZflFpSawxVlxcXHRkXFyejFx1MDAwNyUjXHUwMDE2XHUwMDE1lFJcYlxcRVx1MDAxNUpQ0+dcdTAwMTiVmFx1MDAxMcpwwjczx2hf1dfG6Fx1MDAxMJq9IEbDyFx1MDAwZaJ1t1N3O1xy2Fx1MDAxOV/7nnl9lpjoR3GtZ7QsXCJcdTAwMGJcIlxcMiVcdTAwMTUgLONcdTAwMWMmViXGNeyusaOFsWCYXHUwMDFhsFVgcfI0YHBcdTAwMTUuOJ36bK22909Pd13S+7z9cNw624nOTsrlL5O0XHUwMDAypVx1MDAwMDypQDA/iiNcdTAwMDPwMeZcdTAwMGW00lx1MDAxNlKUXHUwMDBiialWiFA5ppRnh1HJb7fdXGKs/9l3O9GolfvmXFwz4d507ProXjip5L5RXFzoXHUwMDFhicNkN/60XHUwMDFhx03/y+DzX1x1MDAxZieOLk51Z/NcdTAwMWFz5FjcSvJ9XHUwMDFholx1MDAwNU4teoznXHSoRijlo5ufUY0gpYngmtLMsJY+y4tcbmuYUEsyXG54QJnJ31hsXHUwMDEyI4FiZmkuIaWD2Vx1MDAxMZrlSDZETPxcdTAwMDZApmKweEIuXHKhylx1MDAxMCM5kIs0Zu2fXHUwMDE3T2+6p9WOOjhu3n1cdTAwMGbsi1wiZ29PL7pF50SSXHLt7jKt9nuHLba9s5eNsKfKPd87u707YFx1MDAxYp9cdTAwMGVcdTAwMDJe334gPcI2xFx1MDAxY+SS8/ruzlar9kmtMVxcaXtHm52vjTnIzcm8yyW2Jc53b7e6J/iqXHUwMDE3Nlu3fFx1MDAwYl1cdTAwMWbW/3XGfUNcdTAwMGX7XHUwMDEzWSHqXu00Nq+0s1x1MDAxOVRxsX5cdTAwMWKG3l4wXHUwMDA3KyCnsvnJ82XjqHm/s394sulT725cdTAwMTGtO6tOMvmAsdhnejCVjDLNgcfH5Dmnelx1MDAwNrDsqSRcdTAwMDNcdTAwMGItXHT8yewkI93OXHUwMDBiSzKwSiVcdTAwMTlcdTAwMTRZ7H1IXHUwMDA2n0AyXHUwMDEySf5cdTAwMTPJgFx1MDAxY85cdTAwMTQxWDwv71DBeHRI/Fx1MDAwMoecXFzByFqxKD2XXHUwMDEzPlxcdsxcdTAwMGW3/uelWVx1MDAwM/H8xmXhsjO5mMHJkJxBrcJzrofd/0WljFx1MDAxOdR5tJQxU/PUSE3NXHQopmRauCpIXyVjQmaO1kP3XHUwMDA2bzU66/dcdTAwMDeoev39SFKvVKr/2GjlM4OVMG0pXHUwMDAyXHUwMDE5L1wiWFxuotVwsDJcdTAwMDU5XHUwMDE505JJzjWwcZFfsGo0XHUwMDFlrEqMXHUwMDA2K1NcdTAwMDIyYczeOSNwTnmVVuAlO8Xt1s3DWsA3rn5lXHUwMDA088pcYnIy73KJzSsjWC4r5JVcdTAwMTEsl1x1MDAxNTy9XlLV7Vx1MDAxMitcdOGUK/v3ja2teTD3nNTNK4FZlkmblb9MPmAs9unTXHUwMDBmz18oYdNbXySmlFx1MDAwYqqzM6J0Oy8sI2LpjEi+XHUwMDE3I1JcdTAwMTNcdTAwMTiRXHUwMDFjY0RKaES1UD91+rLei1wiv/PBbHvMXHUwMDAyLlx1MDAwYlx1MDAxN054Wfj4+O3WXHUwMDBlXFy7XHUwMDEzQWJcdTAwMTD2ajU4u+k5jVx1MDAxY1x1MDAxNj6nnGZcdTAwMDb3XHUwMDFmzWledzqpIT0j0Vx1MDAxMVPjmmjNMKTj2fss1Oej3fXjXHUwMDBi965q22F5u/LlU/PsfvHLXHUwMDEy1IJ4RVxcYoI1XHUwMDExmqmRuMaWwtysWULSQ4XKL64zZjpCaa6QeOe2tWtSo7h3Ujyon8pcdTAwMTLueC1ug9Bfmc6cMp2czLtcXGLzynSWy1xueWU6y2WFvDKd5bJCXis1y2KFWVx01ORcdTAwMDPGYp8+LUBcdTAwMDLFU1x1MDAxMijJJWGSZb93IN3Oi8q01FxmoiXei2hlS6BcdTAwMTjTjCgt/m1cdNShPyHhcFx1MDAwMF2C986eZiRcdTAwMTRcdTAwMTmyp1nnklx1MDAxYcxTO2FcdMJpy7mYMcp59rwpXHUwMDFk5Fx1MDAxNzWaibRcdTAwMTinlEqJXHUwMDA0I5QmXG5ccv1wRtzChGAlsemkppLnXHUwMDE3z1x1MDAxOFtCgFx1MDAxMkZcdTAwMWZcdTAwMDJQy8bDW3CLa66V6ZXUSGI6XHUwMDFh7Vx1MDAwMExCICXly6P99b2wL7/6JPSY1lx1MDAwYlx1MDAxYveRMkw5XHUwMDAxX6RiSmsrsTCYjVx1MDAxMDNCKMVoou8yS/fq0+DZnbCxTmBlXHUwMDBlXHQsolxmfFx1MDAwMsWoO9BcdCZcdTAwMTNpKbRcdTAwMDR9kIBJw9N0mlxmXHUwMDBmYzotUyPsdFc2rzEnjsWtJN9f3tqvp9d3KTiQubsxO56lV/1cdTAwMTdcdTAwMTXPqDbBgFx1MDAxOdicXHUwMDEygHBcdTAwMWRfQ1x1MDAxZvFMWFRcdTAwMGJcYiNNNVx1MDAxNXnecIOpXHUwMDA1XGZIK1x1MDAwNJPNpFBcdTAwMTN6+1x1MDAwNbGEpkhcdTAwMDBfUlx1MDAxMoGyXHR0fWIvXFxcIlx1MDAwZVx1MDAwMPOKXHUwMDA18Vx1MDAwNcWzXCKAXHUwMDA3NVxyOTA5nEgmkmD1iFx1MDAxZGA4XG5mU2ZBQlxinWgxylx0z4xORiWzJoBcdTAwMDG2cNySXHUwMDFjXHUwMDAzXHUwMDFhtYhAYFx1MDAxZkSxUlx1MDAxYatpOk0uXHUwMDE2LzWeXHUwMDE1pzuzeY278Vx1MDAwYlx1MDAxMS21uq3o9LtcYvshTjDJjmqVXHUwMDA3t1k+uHPuSifOt/Jaw1x0i9/2fyyq0VmgRihcdTAwMWVes1x1MDAxYcm4jPmxJNLgXHUwMDE5SvY0veZ2bVZcdTAwMTPONWdsXHUwMDFj0UhcIpmLK9sxTDzfj4SVuWmKklx1MDAxY+5HXHUwMDFh+NWEqkXt+vz4QNb3mq1cdTAwMWLvXHUwMDBivjj8fmJvbb29XHUwMDE4UpJHt7bT27mxT++i8yN6XHUwMDE4XHUwMDFlRvuTxb6odpOTunNcdTAwMTc7q3Yz+YCx2GdcdTAwMDBIudpcdTAwMDDyJlx1MDAxNk1yqt1IOb10g1x1MDAwMdZcdTAwMTBcdTAwMDeyllx1MDAxOUbSzbyoMFwiUmBcdTAwMDRi1sJcdFx1MDAxOHlcdTAwMTOKpDIjwifgXGJcdTAwMTlL5bBkXFzBgX5A4eZV1CdRuCFoaOugcFx1MDAxM5/Kc+HGuTU6WfvOw4eW8/DnZaFyWZhy67FcdTAwMWX68dxuPZ5xQVx1MDAxY63OTFb49Vd3nUjzx8KSYE2xTjzaY1ZYejdl9nnz/qHZ3tpu672d43DXX1/wsFx1MDAwNPSxuGKacHPNXHUwMDE0hI801Fx1MDAxM2KZZmVI/Vx1MDAxOXBmJN90N/LbL+8ms9LoVVx1MDAwYtdvubpfXHR0UdtZP946p3vVs/2Tln/8eWNxr+45qbssYmeRhslcdTAwMDfMqG2vWj/fYdXKzV6RrYn2UbVabspsc5aBjEhNaO5PRlE65W5lSLA4ZSp7TpM+fYuKejxcdTAwMTX1OLbk3FBvXHUwMDFldISYslx1MDAwMEf8XZ+EXHUwMDAy7kg5euuTUJaJjsy4gudNR8wjiaZGJqZKcYNcdTAwMGaZI3N9jbZcdTAwMTTfaWzfn5XOfMlC7yxoLXpcclx1MDAxNZtcdTAwMWGpXHUwMDEwXHUwMDFjklx1MDAwMY20XHUwMDEymlxyhSbm3JJcXHJwTZO64eRcIsyPICRcXDNO2KtcdTAwMTZ430JIPt/qYD3c6V03v29ffN3arGzc3PdcdTAwMTaXkOSk7nKJ3f3aq5xViN495Vx1MDAxN2frd07P35XeXCJcdTAwMWF3XHUwMDE2f5p8wFx1MDAxZs+fKFVEXHUwMDEynHsxXHUwMDA3J59cdTAwMDQ5XG7TXHUwMDE0XHUwMDAwQSRJ3CyUTp++RUVpjFNRWnGLzFxypedSz4G0kSMk87i5c55cdTAwMGW57Fxmalx1MDAwNueYXHUwMDAzg0p5ttz09WdJXHRcdTAwMTOcveDRcqkw9aKoJO9cdTAwMTaV5vZcItPywKnCiGAx0lx1MDAxZEeRtFx1MDAwNMdSIVxykavV9NuLXHUwMDFjIeVbgtI8fkxRhDnlXGaSK8YxmfC4XHUwMDA0XHUwMDAxWVx1MDAxNoP9XHUwMDE0eC2nVNCx9jmTnUlcdTAwMDRcdTAwMTDznlx1MDAxZDVPUfuq/rmMT5dLzzNWh5/jXHUwMDA2zF9rJMCI2DzCLNHN8bw4zCxBuVx1MDAxNppIhVx1MDAxOWj+3NPxwqfLpcfu6tCKNaJEKTgq4qbpR3MxrpayXHUwMDAwdDVkrlxcKUSVYGNaLdUqdJpP91x1MDAwN4y7cyxzJfn+Yr6RuJyNXHUwMDAwXHUwMDFiU5pcIk1Zdrpx4GyfXpVON4vnVcq/ke1cdTAwMTLZrp0sPLBJYVx1MDAxMbP2jzhcdTAwMDZGQYZxjUjz5DlOzJ2KXG6ihOXXJpgowMRkY6xvxviAIFi9a7VcdTAwMDbYXHUwMDE45TSvxaPxrt9qr1pNXHUwMDEygSS5UEOjs3byRn53XHUwMDFhr1x1MDAxODqLUVx1MDAxMvGkyWNsrTxFcMHudstcdTAwMTFYaFx1MDAwMHgwXHRu/ek0Y3mFW9e5W59QXHUwMDFhuO6/jNR+vJrIcMxcdTAwMTT8/c/KP/9cdTAwMDeoXHUwMDAzMlx1MDAwNiJ9        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      App()Container(    id=\"dialog\")Button(        \"Yes\",    variant=\"success\")Button(        \"No\",    variant=\"error\")events.Key(key=\"T\")events.Key(key=\"T\")events.Key(key=\"T\")bubble <p>The App class is always the root of the DOM, so there is nowhere for the event to bubble to.</p>"},{"location":"guide/events/#stopping-bubbling","title":"Stopping bubbling","text":"<p>Event handlers may stop this bubble behavior by calling the stop() method on the event or message. You might want to do this if a widget has responded to the event in an authoritative way. For instance when a text input widget responds to a key event it stops the bubbling so that the key doesn't also invoke a key binding.</p>"},{"location":"guide/events/#custom-messages","title":"Custom messages","text":"<p>You can create custom messages for your application that may be used in the same way as events (recall that events are simply messages reserved for use by Textual).</p> <p>The most common reason to do this is if you are building a custom widget and you need to inform a parent widget about a state change.</p> <p>Let's look at an example which defines a custom message. The following example creates color buttons which\u2014when clicked\u2014send a custom message.</p> custom01.pyOutput custom01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.color import Color\nfrom textual.message import Message, MessageTarget\nfrom textual.widgets import Static\nclass ColorButton(Static):\n\"\"\"A color button.\"\"\"\nclass Selected(Message):\n\"\"\"Color selected message.\"\"\"\ndef __init__(self, color: Color) -&gt; None:\nself.color = color\nsuper().__init__()\ndef __init__(self, color: Color) -&gt; None:\nself.color = color\nsuper().__init__()\ndef on_mount(self) -&gt; None:\nself.styles.margin = (1, 2)\nself.styles.content_align = (\"center\", \"middle\")\nself.styles.background = Color.parse(\"#ffffff33\")\nself.styles.border = (\"tall\", self.color)\ndef on_click(self) -&gt; None:\n# The post_message method sends an event to be handled in the DOM\nself.post_message(self.Selected(self.color))\ndef render(self) -&gt; str:\nreturn str(self.color)\nclass ColorApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield ColorButton(Color.parse(\"#008080\"))\nyield ColorButton(Color.parse(\"#808000\"))\nyield ColorButton(Color.parse(\"#E9967A\"))\nyield ColorButton(Color.parse(\"#121212\"))\ndef on_color_button_selected(self, message: ColorButton.Selected) -&gt; None:\nself.screen.styles.animate(\"background\", message.color, duration=0.5)\nif __name__ == \"__main__\":\napp = ColorApp()\napp.run()\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-992280194-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-992280194-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-992280194-r1 { fill: #e1e1e1 } .terminal-992280194-r2 { fill: #c5c8c6 } .terminal-992280194-r3 { fill: #1e1e1e } .terminal-992280194-r4 { fill: #008080 } .terminal-992280194-r5 { fill: #e7e7e7 } .terminal-992280194-r6 { fill: #808000 } .terminal-992280194-r7 { fill: #e9967a } .terminal-992280194-r8 { fill: #121212 }      ColorApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258aColor(0,\u00a0128,\u00a0128,\u00a0a=1.0)\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258aColor(128,\u00a0128,\u00a00,\u00a0a=1.0)\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258aColor(233,\u00a0150,\u00a0122,\u00a0a=1.0)\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258aColor(18,\u00a018,\u00a018,\u00a0a=1.0)\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p> <p>Note the custom message class which extends Message. The constructor stores a color object which handler methods will be able to inspect.</p> <p>The message class is defined within the widget class itself. This is not strictly required but recommended, for these reasons:</p> <ul> <li>It reduces the amount of imports. If you import <code>ColorButton</code>, you have access to the message class via <code>ColorButton.Selected</code>.</li> <li>It creates a namespace for the handler. So rather than <code>on_selected</code>, the handler name becomes <code>on_color_button_selected</code>. This makes it less likely that your chosen name will clash with another message.</li> </ul>"},{"location":"guide/events/#sending-messages","title":"Sending messages","text":"<p>To send a message call the post_message() method. This will place a message on the widget's message queue and run any message handlers.</p> <p>It is common for widgets to send messages to themselves, and allow them to bubble. This is so a base class has an opportunity to handle the message. We do this in the example above, which means a subclass could add a <code>on_color_button_selected</code> if it wanted to handle the message itself.</p>"},{"location":"guide/events/#preventing-messages","title":"Preventing messages","text":"<p>You can temporarily disable posting of messages of a particular type by calling prevent, which returns a context manager (used with Python's <code>with</code> keyword). This is typically used when updating data in a child widget and you don't want to receive notifications that something has changed.</p> <p>The following example will play the terminal bell as you type. It does this by handling Input.Changed and calling bell(). There is a Clear button which sets the input's value to an empty string. This would normally also result in a <code>Input.Changed</code> event being sent (and the bell playing). Since we don't want the button to make a sound, the assignment to <code>value</code> is wrapped within a prevent context manager.</p> <p>Tip</p> <p>In reality, playing the terminal bell as you type would be very irritating -- we don't recommend it!</p> prevent.pyOutput prevent.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Horizontal\nfrom textual.widgets import Button, Input\nclass PreventApp(App):\n\"\"\"Demonstrates `prevent` context manager.\"\"\"\ndef compose(self) -&gt; ComposeResult:\nyield Input()\nyield Button(\"Clear\", id=\"clear\")\ndef on_button_pressed(self) -&gt; None:\n\"\"\"Clear the text input.\"\"\"\ninput = self.query_one(Input)\nwith input.prevent(Input.Changed):  # (1)!\ninput.value = \"\"\ndef on_input_changed(self) -&gt; None:\n\"\"\"Called as the user types.\"\"\"\nself.bell()  # (2)!\nif __name__ == \"__main__\":\napp = PreventApp()\napp.run()\n</code></pre> <ol> <li>Clear the input without sending an Input.Changed event.</li> <li>Plays the terminal sound when typing.</li> </ol> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1429246676-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1429246676-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1429246676-r1 { fill: #1e1e1e } .terminal-1429246676-r2 { fill: #121212 } .terminal-1429246676-r3 { fill: #c5c8c6 } .terminal-1429246676-r4 { fill: #e2e2e2 } .terminal-1429246676-r5 { fill: #454a50 } .terminal-1429246676-r6 { fill: #e1e1e1 } .terminal-1429246676-r7 { fill: #e2e3e3;font-weight: bold } .terminal-1429246676-r8 { fill: #000000 }      PreventApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Clear \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p>"},{"location":"guide/events/#message-handlers","title":"Message handlers","text":"<p>Most of the logic in a Textual app will be written in message handlers. Let's explore handlers in more detail.</p>"},{"location":"guide/events/#handler-naming","title":"Handler naming","text":"<p>Textual uses the following scheme to map messages classes on to a Python method.</p> <ul> <li>Start with <code>\"on_\"</code>.</li> <li>Add the messages' namespace (if any) converted from CamelCase to snake_case plus an underscore <code>\"_\"</code></li> <li>Add the name of the class converted from CamelCase to snake_case.</li> </ul> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nNVaa0/byFx1MDAxYf7eX1x1MDAxMeV8OStcdTAwMTV37pdKq1x1MDAxNbC0hZSKXHUwMDE2SludripjT1x1MDAxMlx1MDAxN8c29oTLVvz3845cdLGdXHUwMDFiJFx1MDAwNJaNXHUwMDA0iWcm9ut3nud5L86vXHUwMDE3rVbbXmWm/brVNpeBXHUwMDFmR2HuX7RfuvFzk1x1MDAxN1GawFx1MDAxNCmPi3SYXHUwMDA35cq+tVnx+tWrgZ+fXHUwMDFhm8V+YLzzqFx1MDAxOPpxYYdhlHpBOnhcdTAwMTVZMyj+cP8/+Fx1MDAwM/N7llx1MDAwZUKbe9VFNkxcdTAwMTjZNL+5lonNwCS2gLP/XHUwMDBmjlutX+X/mnW5XHSsn/RiU36hnKpcZqSMT45+SJPSWEyEIEghQcYrouJPuJ41IUx3wWZTzbih9uHRWXbGf36Sxu/wY3HOWYfH1WW7UVx1MDAxY1x1MDAxZtqruDSrSOFuqrnC5ump+Vx1MDAxMoW27649MT7+VuhcdTAwMTd9U/tanlx1MDAwZXv9xFx1MDAxNO7+0Xg0zfwgslfuRKhcdTAwMWG9cUJ93WXpXHUwMDAx5mkqJEOSY0mVqlx1MDAxY+JOQFx1MDAxNfVcdTAwMTRiWlx1MDAxMy2xkpLwXHTTttNcdTAwMTj2XHUwMDAyTPtcdTAwMGYqX5VtJ35w2lx1MDAwM1x1MDAwM5OwWtP1OeHg2GrVxeiWufaI1FIqxqjQRHAxXtI3Ua9vYVxymMqphlx1MDAxZKlcdTAwMTlhyt2QREmMqVx1MDAxYY+7XHUwMDBiZ7thiYu/Jr3Z9/Ns5LR2aWDNaHe4U1x1MDAwM1X15WFcdTAwMTb6N3uPhaCMYiYwl3Q8XHUwMDFmR8kpTCbDOK7G0uC0gks5ev1yXHUwMDA1nHIh5uGUaoKpVETcXHUwMDFiprvKbH3K2LtT8/VL9mZjiFx1MDAwZnW8/8xhypDwsFx1MDAwMjcgXHUwMDAxb0hKOVx1MDAwMVPmwYZIqplmgmPxIJRicqKUmIVSgpCHXHUwMDA1lkpywrRAWC2DUsw1sEgyjNaP09FEXHUwMDA1rNqGZ2pPXHUwMDA1vv3z8it786M3/FZcdTAwMWO9XHUwMDFkRuNzNVDo53l60Vx1MDAxZc9cXI8+zWdcdTAwMDHilMHNPlx0XHUwMDBiXHUwMDE0V/NYoCRBVFx1MDAwYszuzYKtg86eke92XHUwMDBlXHUwMDA2W+Kk0z00XHUwMDE355vZM2eBQMqTXHUwMDFjIaEoXHUwMDA1KFwiPEVcdTAwMDLFXGIjXHUwMDFhlNyJwsNYwFx1MDAwMmG6fFx1MDAxNlx1MDAwYjDhXHUwMDFlgFx1MDAxOPM6xu+Bf65cdTAwMTQhgj6GTC+C//bnz2FHXuxcdTAwMDdcdTAwMWb3tnl+2T/svDtGa4M/k6qGulx1MDAwN8Lfmks7XHUwMDBi+Vx1MDAxOOm5XHUwMDAxXHUwMDAwXHUwMDEyXHUwMDE1XGKcXGYtgX1fXHUwMDFl51x1MDAwN/tZxFx1MDAwZtOf4uJIbnx7n+C1Yn/iW3Xo45WgT1x1MDAxMfVcdTAwMTjSWiHIWIRqyj+XIMtcdTAwMWMxqTlnXHUwMDFhXHUwMDA06bGAr+g03jmaxLnETElIY8TyOC/cwYo4XHUwMDE3Nk63szOqTj7GfPPqfNOc7H5dXHUwMDEzzlx0oYIqslx1MDAwNM4rNKWJPYz+NmX4bIy+8Vx1MDAwN1F81YBESVx1MDAwMDBw3z81Rcv2TWtgbD9ccr8nPnwqXG6/Z1p9P1x0Y5PXN7EwYJC7XHUwMDAyo41TbcZRz/GnXHUwMDFkm26TWDaCemI8bdOa01x1MDAwMzDNh9Plu+HkLaZ51ItcdTAwMTI/PlrCzJVcYi/lXFy+Q6AjIFx1MDAwN7yWRdzF9zefd97KLOb9y1x1MDAxZPb+7eCg8377p37efGeMe1x1MDAwNFx1MDAwM6khmDHBVDPUQcrhQSjhXHUwMDA0SSYg4j1apNOVqC4gPKFgiUtcdTAwMGKflvCPmddcdTAwMTFcdTAwMDI7oKpcdTAwMWJ6dMKPWJNAzV9cdTAwMDBOzPfkv+nQmrxcdTAwMTXEflH8tlx1MDAxNNtcdTAwMDPwXl0g1sf3u6xcXInsXHUwMDAyycnRMdlcdTAwMTXVUNjo+3M97n56XHUwMDFmn3X2985+fOufpztcdTAwMWaO9o7X24RYO9dcdTAwMDUlnlx1MDAwMFx1MDAxYbuyTihBmlxc54J6RFx1MDAxMq2g2Fx1MDAwNtFTXHUwMDBm60As4DqrrruA61hLXHJ/XHUwMDFjVcHwScj+mFksRHdcdTAwMDVC+2Rkd429Vtr9ntzGypI9z4Pic2xbSOxcdTAwMWKHz6pYiZ5cdTAwMWO9ZTaTpKyH7t9eXFyc3y3BbDKJ0Vx1MDAxNZkt70zahfa05sQ1ypieiOGcS09Csq6ohDBcdTAwMGbEnsvrUDOFuqtXq641XHUwMDA0nlaUKC2FnNFZxIR6XHUwMDFhMSpcdTAwMTVcdTAwMThcdTAwMDJcdTAwMDU0q1x1MDAwNPm2duVQ5nGxXHUwMDAy6VfvMN4k3ct0XHUwMDE4a3b4ud2KkjBKejBZ6cltx3z3XHUwMDFlhWBJ5GDorNxAXHUwMDFlRYxzjClcdTAwMTJQ84Jtsras52cjT3NcdTAwMDFcdTAwMWJcdTAwMGVBS1x1MDAxM4bxaMH12CyThHdcdTAwMWLV/Vx1MDAxNvTzqyP68biTXHUwMDExxTa2gy8mnmVcdTAwMTTyXHUwMDE0XHUwMDE4xFx1MDAxMFx1MDAxNH1cdTAwMTIkWVA9bVx1MDAxMvdcdTAwMTBsLFx1MDAxM6497HrYesomoLfdTlx1MDAwN4PIgu9cdTAwMGbSKLGTPi6duek43jf+lIDAPdXnJsUgc2dsqnv1qVVcdTAwMTGmPFx1MDAxOH/+6+XM1fOx7F5cdTAwMWLTMK5O+KL+vrSQQVx1MDAxMEeTw5WSXHTYdCnv339YnLg+RyXjWHuuv4ggzVx1MDAwN6+z6sJlOaKQx6FcIlx1MDAwM4oghvWChyQ80FxmhatKXHUwMDE5XHUwMDA1XHUwMDFiXHUwMDE4p5hcbsY10bXYUXXfqMcoXHUwMDE0RIpgxFx1MDAxMVx1MDAxMzVVXHUwMDFk5S+YKIFcdTAwMTnI8dNKXHUwMDE5g1x1MDAwZlUwXFy/lC2ucZtS5kpoTDjDXG70SkheY9FINzQkpJhqXHUwMDA0rlx1MDAwNDditpqSLX7S0rRcdEmCXHUwMDA1lLRKYoqRXHUwMDE0fMomXHUwMDA1abBEXHUwMDAyYVxydkGWPG3Uv0nKNuaCuZydwvHalIyrudVcdTAwMTZWIJ5Y1blxl5QtTsv/XHUwMDAxKVN3VltaeKrsW0OgRnDHXHUwMDEzWZlcdTAwMDAoUijFXHUwMDFj7sX8xlxubFs3kKsqXHUwMDE5cTVcdTAwMWRkN1x1MDAxYVx1MDAwNFWDINVcdTAwMTKuKinDwnNSi7iCilx1MDAwYik5lZRp95iB1DvfT5OVrVos3VPKXHUwMDE2l/CNXHUwMDA0XGLCsqZcXFNcbuVcdTAwMDSkZOCQXHUwMDFhjUa6IT1QXGbwn1x1MDAwMGAzwlx1MDAxOF1NzFx1MDAxNj8wa1olmGBaXHUwMDBipIWSkFxyztJXXHL7XHUwMDBmlTSDRIVCMf3v1rL5cC6np5G8pJrN61x1MDAxY1x1MDAxMTz3iSiBbFx1MDAwNMKJXFyidbQ48W5qWd9cdTAwMGb6w9zMU7N1NY/0nSUmV56mXHUwMDAwJii1QdpcdTAwMTVrylx1MDAxOVXSQ1gypLSm5IE/XGawuZ9cdTAwMTSZn1x1MDAwMyVm5GZcdTAwMTJcIlx1MDAxNilcdTAwMDFfnmlGbkaxJ1x1MDAxNSbAjNGrZs2oyoRbgJJ4lVx1MDAxZlxiPNcnR5hJcEu1tyv2loTHXHUwMDE0XHUwMDE0Nje+hZdsrFx1MDAxYfeamt1cImdwmvxcYtxcdTAwMDb+OFx1MDAxOVpcdTAwMGJcdTAwMDdcdTAwMDVQILCmkYOPu02Ez92hp3icNNfWXHUwMDE3t74u/dz2s+zQgpfHalxyMInCkauqK7TPI3OxNetnWOXLnbVcdTAwMTRcdTAwMWPHbONA8uv6xfX/XHUwMDAx2ibQXHUwMDAzIn0=        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      Makes the methoda message handlerMessage namespace(outer class)Name ofmessage classon_color_button_selected"},{"location":"guide/events/#handler-arguments","title":"Handler arguments","text":"<p>Message handler methods can be written with or without a positional argument. If you add a positional argument, Textual will call the handler with the event object. The following handler (taken from custom01.py above) contains a <code>message</code> parameter. The body of the code makes use of the message to set a preset color.</p> <pre><code>    def on_color_button_selected(self, message: ColorButton.Selected) -&gt; None:\nself.screen.styles.animate(\"background\", message.color, duration=0.5)\n</code></pre> <p>If the body of your handler doesn't require any information in the message you can omit it from the method signature. If we just want to play a bell noise when the button is clicked, we could write our handler like this:</p> <pre><code>    def on_color_button_selected(self) -&gt; None:\nself.app.bell()\n</code></pre> <p>This pattern is a convenience that saves writing out a parameter that may not be used.</p>"},{"location":"guide/events/#async-handlers","title":"Async handlers","text":"<p>Message handlers may be coroutines. If you prefix your handlers with the <code>async</code> keyword, Textual will <code>await</code> them. This lets your handler use the <code>await</code> keyword for asynchronous APIs.</p> <p>If your event handlers are coroutines it will allow multiple events to be processed concurrently, but bear in mind an individual widget (or app) will not be able to pick up a new message from its message queue until the handler has returned. This is rarely a problem in practice; as long as handlers return within a few milliseconds the UI will remain responsive. But slow handlers might make your app hard to use.</p> <p>Info</p> <p>To re-use the chef analogy, if an order comes in for beef wellington (which takes a while to cook), orders may start to pile up and customers may have to wait for their meal. The solution would be to have another chef work on the wellington while the first chef picks up new orders.</p> <p>Network access is a common cause of slow handlers. If you try to retrieve a file from the internet, the message handler may take anything up to a few seconds to return, which would prevent the widget or app from updating during that time. The solution is to launch a new asyncio task to do the network task in the background.</p> <p>Let's look at an example which looks up word definitions from an api as you type.</p> <p>Note</p> <p>You will need to install httpx with <code>pip install httpx</code> to run this example.</p> dictionary.pydictionary.cssOutput dictionary.py<pre><code>import asyncio\ntry:\nimport httpx\nexcept ImportError:\nraise ImportError(\"Please install httpx with 'pip install httpx' \")\nfrom rich.json import JSON\nfrom textual.app import App, ComposeResult\nfrom textual.containers import VerticalScroll\nfrom textual.widgets import Input, Static\nclass DictionaryApp(App):\n\"\"\"Searches a dictionary API as-you-type.\"\"\"\nCSS_PATH = \"dictionary.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Input(placeholder=\"Search for a word\")\nyield VerticalScroll(Static(id=\"results\"), id=\"results-container\")\nasync def on_input_changed(self, message: Input.Changed) -&gt; None:\n\"\"\"A coroutine to handle a text changed message.\"\"\"\nif message.value:\n# Look up the word in the background\nasyncio.create_task(self.lookup_word(message.value))\nelse:\n# Clear the results\nself.query_one(\"#results\", Static).update()\nasync def lookup_word(self, word: str) -&gt; None:\n\"\"\"Looks up a word.\"\"\"\nurl = f\"https://api.dictionaryapi.dev/api/v2/entries/en/{word}\"\nasync with httpx.AsyncClient() as client:\nresults = (await client.get(url)).text\nif word == self.query_one(Input).value:\nself.query_one(\"#results\", Static).update(JSON(results))\nif __name__ == \"__main__\":\napp = DictionaryApp()\napp.run()\n</code></pre> dictionary.css<pre><code>Screen {\nbackground: $panel;\n}\nInput {\ndock: top;    \nwidth: 100%;\nheight: 1;\npadding: 0 1;\nmargin: 1 1 0 1;    \n}\n#results {\nwidth: auto;   \nmin-height: 100%;\n}\n#results-container {\nbackground: $background 50%;\noverflow: auto;    \nmargin: 1 2;    \nheight: 100%;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1933403707-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1933403707-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1933403707-r1 { fill: #e2e3e3 } .terminal-1933403707-r2 { fill: #c5c8c6 } .terminal-1933403707-r3 { fill: #24292f } .terminal-1933403707-r4 { fill: #121212 } .terminal-1933403707-r5 { fill: #7c7f83 } .terminal-1933403707-r6 { fill: #e3e4e5 }      DictionaryApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258aSearch\u00a0for\u00a0a\u00a0word\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p> <p>Note the highlighted line in the above code which calls <code>asyncio.create_task</code> to run a coroutine in the background. Without this you would find typing in to the text box to be unresponsive.</p>"},{"location":"guide/input/","title":"Input","text":"<p>This chapter will discuss how to make your app respond to input in the form of key presses and mouse actions.</p> <p>Quote</p> <p>More Input!</p> <p>\u2014 Johnny Five</p>"},{"location":"guide/input/#keyboard-input","title":"Keyboard input","text":"<p>The most fundamental way to receive input is via Key events which are sent to your app when the user presses a key. Let's write an app to show key events as you type.</p> key01.pyOutput key01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import TextLog\nfrom textual import events\nclass InputApp(App):\n\"\"\"App to display key events.\"\"\"\ndef compose(self) -&gt; ComposeResult:\nyield TextLog()\ndef on_key(self, event: events.Key) -&gt; None:\nself.query_one(TextLog).write(event)\nif __name__ == \"__main__\":\napp = InputApp()\napp.run()\n</code></pre> <p> InputApp Key(key='T',\u00a0character='T',\u00a0name='upper_t',\u00a0is_printable=True) Key(key='e',\u00a0character='e',\u00a0name='e',\u00a0is_printable=True) Key(key='x',\u00a0character='x',\u00a0name='x',\u00a0is_printable=True) Key(key='t',\u00a0character='t',\u00a0name='t',\u00a0is_printable=True) Key(key='u',\u00a0character='u',\u00a0name='u',\u00a0is_printable=True) Key(key='a',\u00a0character='a',\u00a0name='a',\u00a0is_printable=True) Key(key='l',\u00a0character='l',\u00a0name='l',\u00a0is_printable=True) Key( key='exclamation_mark', character='!', name='exclamation_mark', is_printable=True ) </p> <p>When you press a key, the app will receive the event and write it to a TextLog widget. Try pressing a few keys to see what happens.</p> <p>Tip</p> <p>For a more feature rich version of this example, run <code>textual keys</code> from the command line.</p>"},{"location":"guide/input/#key-event","title":"Key Event","text":"<p>The key event contains the following attributes which your app can use to know how to respond.</p>"},{"location":"guide/input/#key","title":"key","text":"<p>The <code>key</code> attribute is a string which identifies the key that was pressed. The value of <code>key</code> will be a single character for letters and numbers, or a longer identifier for other keys.</p> <p>Some keys may be combined with the Shift key. In the case of letters, this will result in a capital letter as you might expect. For non-printable keys, the <code>key</code> attribute will be prefixed with <code>shift+</code>. For example, Shift+Home will produce an event with <code>key=\"shift+home\"</code>.</p> <p>Many keys can also be combined with Ctrl which will prefix the key with <code>ctrl+</code>. For instance, Ctrl+P will produce an event with <code>key=\"ctrl+p\"</code>.</p> <p>Warning</p> <p>Not all keys combinations are supported in terminals and some keys may be intercepted by your OS. If in doubt, run <code>textual keys</code> from the command line.</p>"},{"location":"guide/input/#character","title":"character","text":"<p>If the key has an associated printable character, then <code>character</code> will contain a string with a single Unicode character. If there is no printable character for the key (such as for function keys) then <code>character</code> will be <code>None</code>.</p> <p>For example the P key will produce <code>character=\"p\"</code> but F2 will produce <code>character=None</code>.</p>"},{"location":"guide/input/#name","title":"name","text":"<p>The <code>name</code> attribute is similar to <code>key</code> but, unlike <code>key</code>, is guaranteed to be valid within a Python function name. Textual derives <code>name</code> from the <code>key</code> attribute by lower casing it and replacing <code>+</code> with <code>_</code>. Upper case letters are prefixed with <code>upper_</code> to distinguish them from lower case names.</p> <p>For example, Ctrl+P produces <code>name=\"ctrl_p\"</code> and Shift+P produces <code>name=\"upper_p\"</code>.</p>"},{"location":"guide/input/#is_printable","title":"is_printable","text":"<p>The <code>is_printable</code> attribute is a boolean which indicates if the key would typically result in something that could be used in an input widget. If <code>is_printable</code> is <code>False</code> then the key is a control code or function key that you wouldn't expect to produce anything in an input.</p>"},{"location":"guide/input/#aliases","title":"aliases","text":"<p>Some keys or combinations of keys can produce the same event. For instance, the Tab key is indistinguishable from Ctrl+I in the terminal. For such keys, Textual events will contain a list of the possible keys that may have produced this event. In the case of Tab, the <code>aliases</code> attribute will contain <code>[\"tab\", \"ctrl+i\"]</code></p>"},{"location":"guide/input/#key-methods","title":"Key methods","text":"<p>Textual offers a convenient way of handling specific keys. If you create a method beginning with <code>key_</code> followed by the key name (the event's <code>name</code> attribute), then that method will be called in response to the key press.</p> <p>Let's add a key method to the example code.</p> key02.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import TextLog\nfrom textual import events\nclass InputApp(App):\n\"\"\"App to display key events.\"\"\"\ndef compose(self) -&gt; ComposeResult:\nyield TextLog()\ndef on_key(self, event: events.Key) -&gt; None:\nself.query_one(TextLog).write(event)\ndef key_space(self) -&gt; None:\nself.bell()\nif __name__ == \"__main__\":\napp = InputApp()\napp.run()\n</code></pre> <p>Note the addition of a <code>key_space</code> method which is called in response to the space key, and plays the terminal bell noise.</p> <p>Note</p> <p>Consider key methods to be a convenience for experimenting with Textual features. In nearly all cases, key bindings and actions are preferable.</p>"},{"location":"guide/input/#input-focus","title":"Input focus","text":"<p>Only a single widget may receive key events at a time. The widget which is actively receiving key events is said to have input focus.</p> <p>The following example shows how focus works in practice.</p> key03.pykey03.cssOutput key03.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import TextLog\nfrom textual import events\nclass KeyLogger(TextLog):\ndef on_key(self, event: events.Key) -&gt; None:\nself.write(event)\nclass InputApp(App):\n\"\"\"App to display key events.\"\"\"\nCSS_PATH = \"key03.css\"\ndef compose(self) -&gt; ComposeResult:\nyield KeyLogger()\nyield KeyLogger()\nyield KeyLogger()\nyield KeyLogger()\nif __name__ == \"__main__\":\napp = InputApp()\napp.run()\n</code></pre> key03.css<pre><code>Screen {\nlayout: grid;\ngrid-size: 2 2;\ngrid-columns: 1fr;\n}\nKeyLogger {  \nborder: blank;\n}\nKeyLogger:hover {\nborder: wide $secondary;\n}\nKeyLogger:focus {\nborder: wide $accent;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-564948057-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-564948057-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-564948057-r1 { fill: #00ff00 } .terminal-564948057-r2 { fill: #0178d4 } .terminal-564948057-r3 { fill: #c5c8c6 } .terminal-564948057-r4 { fill: #e1e1e1 } .terminal-564948057-r5 { fill: #d0b344 } .terminal-564948057-r6 { fill: #98a84b } .terminal-564948057-r7 { fill: #1e1e1e } .terminal-564948057-r8 { fill: #00823d;font-style: italic; } .terminal-564948057-r9 { fill: #e1e1e1;font-weight: bold } .terminal-564948057-r10 { fill: #98729f;font-weight: bold } .terminal-564948057-r11 { fill: #ff2627;font-style: italic; } .terminal-564948057-r12 { fill: #23568b }      InputApp \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 name='o',\u258echaracter='d',\u258b is_printable=True\u258ename='d',\u258b )\u258eis_printable=True\u258b Key(\u258e)\u258b key='tab',\u258eKey(\u258b character='\\t',\u258ekey='exclamation_mark',\u258b name='tab',\u258echaracter='!',\u258b is_printable=False,\u2586\u2586\u258ename='exclamation_mark',\u2587\u2587\u258b aliases=['tab',\u00a0'ctrl+i']\u258eis_printable=True\u258b )\u258e)\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 </p> <p>The app splits the screen in to quarters, with a <code>TextLog</code> widget in each quarter. If you click any of the text logs, you should see that it is highlighted to show that the widget has focus. Key events will be sent to the focused widget only.</p> <p>Tip</p> <p>the <code>:focus</code> CSS pseudo-selector can be used to apply a style to the focused widget.</p> <p>You can move focus by pressing the Tab key to focus the next widget. Pressing Shift+Tab moves the focus in the opposite direction.</p>"},{"location":"guide/input/#controlling-focus","title":"Controlling focus","text":"<p>Textual will handle keyboard focus automatically, but you can tell Textual to focus a widget by calling the widget's focus() method.</p>"},{"location":"guide/input/#focus-events","title":"Focus events","text":"<p>When a widget receives focus, it is sent a Focus event. When a widget loses focus it is sent a Blur event.</p>"},{"location":"guide/input/#bindings","title":"Bindings","text":"<p>Keys may be associated with actions for a given widget. This association is known as a key binding.</p> <p>To create bindings, add a <code>BINDINGS</code> class variable to your app or widget. This should be a list of tuples of three strings. The first value is the key, the second is the action, the third value is a short human readable description.</p> <p>The following example binds the keys R, G, and B to an action which adds a bar widget to the screen.</p> binding01.pybinding01.cssOutput binding01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.color import Color\nfrom textual.widgets import Footer, Static\nclass Bar(Static):\npass\nclass BindingApp(App):\nCSS_PATH = \"binding01.css\"\nBINDINGS = [\n(\"r\", \"add_bar('red')\", \"Add Red\"),\n(\"g\", \"add_bar('green')\", \"Add Green\"),\n(\"b\", \"add_bar('blue')\", \"Add Blue\"),\n]\ndef compose(self) -&gt; ComposeResult:\nyield Footer()\ndef action_add_bar(self, color: str) -&gt; None:\nbar = Bar(color)\nbar.styles.background = Color.parse(color).with_alpha(0.5)\nself.mount(bar)\nself.call_after_refresh(self.screen.scroll_end, animate=False)\nif __name__ == \"__main__\":\napp = BindingApp()\napp.run()\n</code></pre> binding01.css<pre><code>Bar {\nheight: 5;    \ncontent-align: center middle;\ntext-style: bold;\nmargin: 1 2;\ncolor: $text;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3657381348-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3657381348-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3657381348-r1 { fill: #e1e1e1 } .terminal-3657381348-r2 { fill: #c5c8c6 } .terminal-3657381348-r3 { fill: #f0dfdf;font-weight: bold } .terminal-3657381348-r4 { fill: #23568b } .terminal-3657381348-r5 { fill: #dfe8df;font-weight: bold } .terminal-3657381348-r6 { fill: #dfdff0;font-weight: bold } .terminal-3657381348-r7 { fill: #dde8f3;font-weight: bold } .terminal-3657381348-r8 { fill: #ddedf9 }      BindingApp red\u2582\u2582 green blue blue \u00a0R\u00a0\u00a0Add\u00a0Red\u00a0\u00a0G\u00a0\u00a0Add\u00a0Green\u00a0\u00a0B\u00a0\u00a0Add\u00a0Blue\u00a0 </p> <p>Note how the footer displays bindings and makes them clickable.</p> <p>Tip</p> <p>Multiple keys can be bound to a single action by comma-separating them. For example, <code>(\"r,t\", \"add_bar('red')\", \"Add Red\")</code> means both R and T are bound to <code>add_bar('red')</code>.</p>"},{"location":"guide/input/#binding-class","title":"Binding class","text":"<p>The tuple of three strings may be enough for simple bindings, but you can also replace the tuple with a Binding instance which exposes a few more options.</p>"},{"location":"guide/input/#priority-bindings","title":"Priority bindings","text":"<p>Individual bindings may be marked as a priority, which means they will be checked prior to the bindings of the focused widget. This feature is often used to create hot-keys on the app or screen. Such bindings can not be disabled by binding the same key on a widget.</p> <p>You can create priority key bindings by setting <code>priority=True</code> on the Binding object. Textual uses this feature to add a default binding for Ctrl+C so there is always a way to exit the app. Here's the bindings from the App base class. Note the first binding is set as a priority:</p> <pre><code>    BINDINGS = [\nBinding(\"ctrl+c\", \"quit\", \"Quit\", show=False, priority=True),\nBinding(\"tab\", \"focus_next\", \"Focus Next\", show=False),\nBinding(\"shift+tab\", \"focus_previous\", \"Focus Previous\", show=False),\n]\n</code></pre>"},{"location":"guide/input/#show-bindings","title":"Show bindings","text":"<p>The footer widget can inspect bindings to display available keys. If you don't want a binding to display in the footer you can set <code>show=False</code>. The default bindings on App do this so that the standard Ctrl+C, Tab and Shift+Tab bindings don't typically appear in the footer.</p>"},{"location":"guide/input/#mouse-input","title":"Mouse Input","text":"<p>Textual will send events in response to mouse movement and mouse clicks. These events contain the coordinates of the mouse cursor relative to the terminal or widget.</p> <p>Information</p> <p>The trackpad (and possibly other pointer devices) are treated the same as the mouse in terminals.</p> <p>Terminal coordinates are given by a pair values named <code>x</code> and <code>y</code>. The X coordinate is an offset in characters, extending from the left to the right of the screen. The Y coordinate is an offset in lines, extending from the top of the screen to the bottom.</p> <p>Coordinates may be relative to the screen, so <code>(0, 0)</code> would be the top left of the screen. Coordinates may also be relative to a widget, where <code>(0, 0)</code> would be the top left of the widget itself.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1ba0/bSFx1MDAxNP3eX1x1MDAxMaVfdqUynfej0mpcdTAwMDVcdTAwMDGaQHktXHUwMDAxXG6rVeUmTmxw7GA7XHUwMDA0qPjve+1A7DxcdKHJhlXzXHUwMDAxyIxcdTAwMWbXM+ecOfeO+fGuUCjGd227+KlQtG9rlufWQ6tb/JC039hh5Fx1MDAwNj500fR7XHUwMDE0dMJaeqRcdTAwMTPH7ejTx48tK7yy47Zn1Wx040ZcdTAwMWTLi+JO3VxyUC1ofXRju1x1MDAxNf2Z/Ny3WvZcdTAwMWbtoFWPQ5TdZM2uu3FcdTAwMTD27mV7dsv241xirv43fC9cdTAwMTR+pD9z0YV2Lbb8pmenJ6RdWYBcdTAwMDRcdTAwMTM63LxcdTAwMWb4abREcIO1xFxc9I9wo024YWzXobtcdTAwMDFB21lP0lRcXN/ddcqh3GlFe7dcdTAwMDd1p4nXP5Nqdt+G63nH8Z2XxlVcdTAwMGKDKFpzrLjmZEdEcVx1MDAxOFxc2WduPXaehi/X3j83XG5gKLKzwqDTdHw7SkaB9FuDtlVz47v0KXG/tTdcdTAwMTSfXG5Zyy18Y1xcIS1cdTAwMTVcdTAwMTFEsuShs0dOzqdKIK2l4ZphTnVuQHpxlVx1MDAwMlx1MDAwZuZcdTAwMDPieo/TT1x1MDAxNtl3q3bVhPD8ev+YOLT8qG2FMGvZcd3HJ1x1MDAxNpwjySjjXGZcdTAwMGJCSHYjx3abTpxEKjHSXHUwMDA0XHUwMDFiziVjgmgqs2DsdGKMVIJjzni/I4mgXamnIPlneExcdTAwMWQrbD+OXTFKvuSiT1x1MDAwMt/KISw7udOuWz1cdTAwMWNcdTAwMTApOVFKJSGpfr/n+lfQ6Xc8L2tcdTAwMGJqV1x1MDAxOXTS1odcdTAwMGZzgFZRPFx0s1RcdTAwMWKYKMrUzJC9pXW+tS3Pr02zVbnc2zrnNz6ZXHUwMDAw2SHY/ZdgXHUwMDE1XHUwMDE4XHUwMDBiLFx1MDAxODbKaDlcdTAwMDJWhinBXG5LSoyii0QrQ5hIQbVQRFx1MDAxOaVH4Uo1klx1MDAxMjNcdTAwMGU6QiVcdTAwMDNoj8BVSmNcYjVcdTAwMDS/Ybjanue2o7FglUJMXHUwMDAyq1x1MDAxMdhcYi3MzFg9XzPfhFPdPmp2tXdcdTAwMTFEe/5e4/M8WCXLw6owiFx1MDAxOclcdTAwMTnAQ1x1MDAxYWL0IFa1QEJcdTAwMDEoXHUwMDE4pVx1MDAxOGuB+Wuw+r5hXHQq6ChOXHRDXHUwMDFjUyqMpPCLa81HgUooXHUwMDEyXHUwMDAwXHJcdTAwMDOaiiljNFx1MDAwN45HoFxuiFx1MDAxNEiVQ/D/XG6ocKOJToBcdTAwMTgjYU0hbGaofnXx93XiXHUwMDFj8Z3908PWXHUwMDA2/evM7norXHUwMDBlVS1cdTAwMTGjilx1MDAxOSap1ppcdTAwMTA1hFWOXHUwMDAwXHUwMDFjSmiDXHUwMDA11yQnu/Nh9TtI+KKwSlx1MDAxOSxcZkyI/6moKskmYlx1MDAxNVx1MDAxNlx1MDAxYWpcdTAwMTjFs2M12rwpy3W3s3dcdTAwMWWas9qFiNbL5Hi1scpJXHUwMDAyRlx1MDAwNoNONFx1MDAwMJaTIagypDBcdTAwMDYzZFx1MDAxOKgue5VcdTAwMDN4T+h38FSLQiphXHSjXHUwMDE4e8tItcIw6I5Nr9jExZ8rpjCTuVx1MDAwNfE5mKqD+0atpiW/3qVhyexcdTAwMTFIXHUwMDAzK1x1MDAxM2DqWDWnXHUwMDEz2v89UJlUSEkh6WBGxVx1MDAxOEFcdTAwMTgyLblAd4pcdTAwMTFVXG4yKTUmi5JitPNcdJDwUMJoMUf6lFx1MDAwNjcnILlcdTAwMDBcdTAwMWL9XHUwMDAyQObisMJ4w/Xrrt9cdTAwMWM+xfbrWc9cdTAwMTNsXHUwMDBi/apBpecqO9s7+5ub3Vx1MDAxM6dy24lOon1cdTAwMTmfZrhKkFx1MDAxNdQ6UTqghFx1MDAxOUHBrFx1MDAwM+UlOFx1MDAwMpI7qGm1XHUwMDEzVCNB01F97HjIoreiuFx1MDAxNLRablxmz31cdTAwMTi4fjxcdTAwMWNs+iDrXHSVXHUwMDFj26qPeZR83zDn2slcdTAwMTWzKkjyyf4qZKBMv/T//ufD2KPXRqGTfHKgya7wLv/7xVx1MDAwMqHkcGM/k4XEXG6QSNTsXHUwMDAyXHUwMDEx3G59bVxcnljd06tSuXFz0vWv/7pYfYGAXGZcdTAwMTFWMTUkXHUwMDEw1CDJsVx1MDAwNpVkXHUwMDFhw2rOhlwi+olZrEGQepixOkFcdTAwMTDBZEC9nlRCc2a4WrZMXHUwMDE4pvNcdP0yZeLwRl+FR+t39dYhO7mp4jiu7tTHy1x1MDAwNCZcdTAwMTTUjIO6q0RLiaa5w3pCQTCSvZF900oxip3ks9aHzVx1MDAwYnVcIrZv43EykUPZkExcYkGYJHmj/5xKTJ/HXHUwMDE1VVx0zjT43Vx1MDAwMY6mKkFcdTAwMDTSSi/WR+Sy3qysNSpcYlx1MDAwMGdcIlx1MDAxOPD051x1MDAxYtk+in7kQDaT6Fx1MDAwZqCrR4R+z8NcdTAwMTMkp7lcdTAwMTLKSTZjL5CbRuDHx+59byVcdTAwMWJo3bZarnc3gIRcdTAwMTT2SdEgP0mRXHK3SzM6PXDguuc2XHUwMDEzTlx1MDAxND27MUiW2K1ZXr87XHUwMDBlckNag1x1MDAxYltwubAyXCJcdTAwMTdB6DZd3/Kq/SDmoqiavI+iXHLVIIM4O+LZQt9US7aiXHUwMDFjXHUwMDA1XHUwMDFkQorgXHUwMDExknKMXHUwMDExJKl60Gz/bJJmsUwjqUnqO1xc5EzVUkg6PXVcdTAwMWLA1zwknTd1mIukd6tA0rvpJJ26fcTYRNMtlZGJY8mW2+eYKr/qzeq5+ra5xaPTXHUwMDFhoSdl91x1MDAxMs/H1OVtIFx0IdBwRs45RYxyOuDE5yps1pVNOOejXHUwMDFjZYlcdTAwMTCMddnSoLEuW1HCtFFkuVuZWsFgyFx1MDAxN1x1MDAxMGoqXHUwMDE2J+Z+Uk0sXHUwMDBlJU5CQs7D5cxA1MI76HSFdqtB6aLEq3LvXHUwMDFiu1xc9SVcdTAwMDOEXHUwMDE4XHQ96uu4ZFxic2rkK8G4iPpQsrPKwOjllvNlZH5cdTAwMWFzpfBcdTAwMGJA+fMyv/tNZ9uznS1TvdhVpVp5o0qP4tzq9atA9PhZQIFIYjXc2lx1MDAxN1x0WMhcYoXRnl0kqvbpl8P7vc+4XHUwMDFhhpVyffdr4/42Wn2RMIhcdTAwMWI6Ulwi4onfZJpqsshXXHUwMDFj5ilcdTAwMGVRXGYzwzWZx2a+TYnoVlx1MDAwZU7Lbjlyb732l42Se3h3fXw1oTiEXHUwMDA12Fx1MDAwM5gzpmBhXHUwMDE3ODd7hV/VodzDzpx6MjptN5Qkb4O9IPecPpUrqlx1MDAxMZKDg1SDfqHnalx1MDAxNdJcdTAwMGKWiNnqQzrZc9RCLcDK9mE0JvOcrvhcdTAwMDPwennmXHSCkzexv8pDUzia26JcdTAwMWbmqOGgXHUwMDExlJDZs87pjmxFOSpcdTAwMTRF4JuH8k7BKFqF0pDSsCwl3nS5/JyetlxyQGvl+flcdTAwMTYqQ5P4SfFEfjLNXHUwMDA1y7+g8lx1MDAxYztcdTAwMWT7vGxFYSm4a1xcXHUwMDFjXHUwMDFkXHUwMDE4vGNcImfl92HpSFxyJt1gwVx1MDAwNqnXloSeMdizsFx1MDAxM1wiXHUwMDEz4PfZkl++1FxmgzYtjUC/4Vx1MDAwZlx1MDAwNfz7KrDoMZK5qKRy7zRcctdXXHUwMDE5JpqJXHUwMDE3uNHKmXW4WflyXHUwMDE4XHUwMDFknYlcbrlukMvd49aqc4lrgyC/XHUwMDE53JZM7SjTi99cbpmRUZxcdTAwMWLMtDHLffFOU54vr/9iVGFcdTAwMTbzOHFt4jR5I1x1MDAwNM9eXHUwMDAxKlx1MDAxMa5cdTAwMGVD3N611i/3jsXJie9/2171/VxuqSmSckx6J4hChL9293/KloVcdTAwMWPzTutcdTAwMTguKYqTfzpcdTAwMTJcdTAwMGLYVpzGJVx1MDAwM7dd3upcdTAwMDTz3rTjVeDSYyQ9Lr17tMBFq90+jmGEik9lKphcdTAwMDS3/viY2fWKN67d3Vx1MDAxOIeC9JNcXDXlZ8JcdTAwMDU7mYJcdTAwMWZcdTAwMGbvXHUwMDFl/lx1MDAwNeEmVVx1MDAxOCJ9        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      XyXy(0, 0)(0, 0)Widget"},{"location":"guide/input/#mouse-movements","title":"Mouse movements","text":"<p>When you move the mouse cursor over a widget it will receive MouseMove events which contain the coordinate of the mouse and information about what modifier keys (Ctrl, Shift etc) are held down.</p> <p>The following example shows mouse movements being used to attach a widget to the mouse cursor.</p> mouse01.pymouse01.css mouse01.py<pre><code>from textual import events\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.widgets import Static, TextLog\nclass PlayArea(Container):\ndef on_mount(self) -&gt; None:\nself.capture_mouse()\ndef on_mouse_move(self, event: events.MouseMove) -&gt; None:\nself.screen.query_one(TextLog).write(event)\nself.query_one(Ball).offset = event.offset - (8, 2)\nclass Ball(Static):\npass\nclass MouseApp(App):\nCSS_PATH = \"mouse01.css\"\ndef compose(self) -&gt; ComposeResult:\nyield TextLog()\nyield PlayArea(Ball(\"Textual\"))\nif __name__ == \"__main__\":\napp = MouseApp()\napp.run()\n</code></pre> mouse01.css<pre><code>Screen {\nlayers: log ball;\n}\nTextLog {\nlayer: log;\n}\nPlayArea {\nopacity: 0%;\nlayer: ball;\n}\nBall {\nlayer: ball;\nwidth: auto;\nheight: 1;\nbackground: $secondary;\nborder: tall $secondary;\ncolor: $background;\nbox-sizing: content-box;\ntext-style: bold;\npadding: 0 4;\n}\n</code></pre> <p>If you run <code>mouse01.py</code> you should find that it logs the mouse move event, and keeps a widget pinned directly under the cursor.</p> <p>The <code>on_mouse_move</code> handler sets the offset style of the ball (a rectangular one) to match the mouse coordinates.</p>"},{"location":"guide/input/#mouse-capture","title":"Mouse capture","text":"<p>In the <code>mouse01.py</code> example there was a call to <code>capture_mouse()</code> in the mount handler. Textual will send mouse move events to the widget directly under the cursor. You can tell Textual to send all mouse events to a widget regardless of the position of the mouse cursor by calling capture_mouse.</p> <p>Call release_mouse to restore the default behavior.</p> <p>Warning</p> <p>If you capture the mouse, be aware you might get negative mouse coordinates if the cursor is to the left of the widget.</p> <p>Textual will send a MouseCapture event when the mouse is captured, and a MouseRelease event when it is released.</p>"},{"location":"guide/input/#enter-and-leave-events","title":"Enter and Leave events","text":"<p>Textual will send a Enter event to a widget when the mouse cursor first moves over it, and a Leave event when the cursor moves off a widget.</p>"},{"location":"guide/input/#click-events","title":"Click events","text":"<p>There are three events associated with clicking a button on your mouse. When the button is initially pressed, Textual sends a MouseDown event, followed by MouseUp when the button is released. Textual then sends a final Click event.</p> <p>If you want your app to respond to a mouse click you should prefer the Click event (and not MouseDown or MouseUp). This is because a future version of Textual may support other pointing devices which don't have up and down states.</p>"},{"location":"guide/input/#scroll-events","title":"Scroll events","text":"<p>Most mice have a scroll wheel which you can use to scroll the window underneath the cursor. Scrollable containers in Textual will handle these automatically, but you can handle MouseScrollDown and MouseScrollUp if you want build your own scrolling functionality.</p> <p>Information</p> <p>Terminal emulators will typically convert trackpad gestures in to scroll events.</p>"},{"location":"guide/layout/","title":"Layout","text":"<p>In Textual, the layout defines how widgets will be arranged (or laid out) inside a container. Textual supports a number of layouts which can be set either via a widget's <code>styles</code> object or via CSS. Layouts can be used for both high-level positioning of widgets on screen, and for positioning of nested widgets.</p>"},{"location":"guide/layout/#vertical","title":"Vertical","text":"<p>The <code>vertical</code> layout arranges child widgets vertically, from top to bottom.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO2ZW2/aSFx1MDAxNIDf8ytcIvrauHO/VFqtXHUwMDAyTdrck9KkTVdVNLFcdTAwMDdwMLbXXHUwMDFlXHUwMDEyoOp/37FJMVx1MDAxOFx1MDAxY1FcdTAwMWFRtrt+MPjM7XjmO2fOXHUwMDE5f93a3q6ZYaxrr7dreuCqwPdcdTAwMTL1UHuZye91kvpRaItQ/pxG/cTNa3aMidPXr171VNLVJlx1MDAwZZSrnXs/7asgNX3Pj1x1MDAxYzfqvfKN7qV/ZvdT1dN/xFHPM4lTXGayoz3fRMl4LFx1MDAxZOieXHUwMDBlTWp7/8s+b29/ze9T2iXaNSpsXHUwMDA3Om+QXHUwMDE3XHUwMDE1XG5CLsrS0yjMlYVcdTAwMDJRxFx1MDAxMGZsUsNP39jxjPZsccvqrIuSTFS7rNdcdTAwMGbj+/6RSNBdfFF/84lcdTAwMGZIUlxm2/KDoGmGQa6Wm0RputNRxu1cdTAwMTQ1UpNEXf3R90wn06Akn7RNIztcdTAwMTNFqyTqtzuhTtOZNlGsXFzfXGYzXHUwMDE5XHUwMDAwXHUwMDEz6XgmXm9cdTAwMTeSQbZOQjqSUFxmXHUwMDExncjzloI6XHUwMDE4gVx1MDAxOflYl0ZcdTAwMTTYJbC6vFx1MDAwMPlVaHOr3G7bqlx1MDAxNHqTOiZRYVx1MDAxYavELlRR7+HxLYlkXHUwMDBl5kJcdTAwMDI2NUhH++2OsaVcdTAwMThcdEdcdTAwMTDMp8bX+fxD24ZcdTAwMGLBWVGSjVx1MDAxYVx1MDAxZng5XHUwMDBiX8pz11FJ/DhHtTR7mNI4U3ZvXG6konE/9tR4vSFjXGJJiVx1MDAwMVx1MDAxN6yYvMBcdTAwMGa7tjDsXHUwMDA3QSGL3G6BSC799nJcdTAwMTU2KapiU2AkhSRkeTRcdTAwMTk4XCJcdTAwMThGh+qm8/Gi07jY8y/gTVx1MDAwNZolvGahROuDUlx1MDAwModIXHUwMDA0XHUwMDA1L0NJXHUwMDFjgGd5eX4oiVNBJGJcdTAwMGVEXHUwMDEwyFx1MDAwNUxcIkgpwFx1MDAxOK5cdTAwMTFJXGZcdTAwMDCUjHD0XFxI6iDw43QxkKjSWVxujJl1XHUwMDE0kixccuS+PLl517x6f/k+uvp09Fx1MDAwZXXdYd1bXHUwMDA1yPV5SVxmoFx1MDAwMyBlZSdpWSmJV8DxRUtRu+HMo1xikYMgmfWBXHUwMDEzXHUwMDE4IXRKbvu7e+SIQYq5/Fx1MDAxN3vHp1BcdTAwMTSVvpFbs4VcdTAwMThRsDSKny/SgTm6eXu81/Aurlx1MDAxM91NSXC04ShcIupQXHUwMDA2KGFz3lFcIuu5XHUwMDEwnt0zV+LxXHUwMDE2XHUwMDAw+lxcPFwiwFx0XHUwMDAzkEn8e1x1MDAwMmnjxCogXHQj2DpqKZZcdTAwMDbyslx1MDAxZTY/XHUwMDFm3lx1MDAwNVx1MDAwZnz0rn/gN+7vXFx8sOFAUuhAYO9cdTAwMGLcI3IwXHUwMDEwVP4skFx1MDAxMN1cbsGeXHUwMDBiSMKJpIKJ3zZ8xE+kNvaShEO8PJLnXHUwMDFmklH3nDY8vvu3fHOTXHUwMDA0QI3OKpDsKLfTT/RcdTAwMDZAXHSBXHUwMDAz5YJcdTAwMTDSukeHlZBZfc+mXHUwMDBivCQhwsk8nlxcSCW1Sc04r1wiMrtcdTAwMDQr44lcdTAwMTBEmGNcdTAwMDLXiifN7Eg8XHUwMDE3nkZcdTAwMGbMQl9Z6SohQ4xhgsDyiVxybV2NTsO3g+udYDS63mVR86ZcdTAwMTFvOpg2S5jlkZKf4fDJVIaRef5cdTAwMTbEi1x1MDAxNkKbSeBcco9cdTAwMTeLdY1C0/RHOlx1MDAwZi1mpPuq51x1MDAwN8OZpclBtJrahW5rMz2VqbZjjk97ZmrvXHUwMDA2fjtDtVx1MDAxNujWLMPGd1UwKTbR1Ju7dnRlu0tcdTAwMGW88ltEid/2Q1x1MDAxNXyY1WR1705cdTAwMTCv9u6SXHUwMDAwIaRcXD5cdTAwMDKW51x1MDAxMFx1MDAxY1x1MDAwZY7htZa3rZM9fkz76d6mXHUwMDFiXHUwMDExXHUwMDA20mFcdTAwMDLPXHUwMDA2XHUwMDE2w9ztXHUwMDEzR1xiJH7y1OpcdTAwMDVcdTAwMDEuoJwtXGI5XGIlXHUwMDBlp7jihFx1MDAwMELqXGLISFaaXHUwMDBmXHUwMDAz56yNXCJJKON0vdFcdTAwMDdcdTAwMDXUboZriT4oJlV8YmRcdTAwMTM0xvnyeKrPO83hzd6nncuTw+O6XHUwMDFj+Gr/Q3Pj8bTBXHUwMDA3gVxczmVoWWhApSzFXHUwMDA2K1x1MDAwMeoy3aKLXHUwMDAxtUFxJaCEOyjXazzIPJ9cYoBcZm+I15utUWhDtWfjUyVJ9LD4XHUwMDFjqzpX43ZcdTAwMGKU8Fx1MDAwN+KP+5OUjc5cdTAwMGUur0x8XHUwMDE2JOfDs1x1MDAwN4YvVmNzfUerwsa/slx1MDAxY1x1MDAwMH8/yypHrWUybVx1MDAxYaawfprMqlxcXHI4nHO8OFXDXGI5XHUwMDA0US5cdTAwMTZcdTAwMWZnXHRcblxiWyFcdTAwMWPONVt3eJJcdTAwMWGVmLpcdTAwMWZ6ftguN9GhV1FcdTAwMTKo1DSiXs83Vo3zyFx1MDAwZk25Rt7vblx1MDAwNnZHq7kow/Y8XVa2gDjrsfhSll3Fv+1cdTAwMDKR/GHy/8vLxbXnVjK7ptew6GFr+vdHs1x1MDAwNVwiy8JJoGMxlVhQtLy1plx1MDAwN/qwvdc+xfuXcrA/knetNiSbvpNYN+0ghNjc0Vxutnnk/LeIX5M/XHUwMDAwTG3ehjb9POW/lEBUWZR84ps3QcKGrj/wzftYJo2O2b3bXHUwMDFk6uOr3TPVc+/ev918i+JcdTAwMGVcdTAwMTFg/vScWIviXGbymVx1MDAxM6NfZFFYXHUwMDEwXHS53aP/t6i1W9TW475XU3HcNHaGbI2xfdlF8L3H1yz6q937+qG+6IQwv7JecyvN7EFnS/D129a3f1x1MDAwMLFE1Vx1MDAwMCJ9 WidgetWidgetWidget <p>The example below demonstrates how children are arranged inside a container with the <code>vertical</code> layout.</p> Outputvertical_layout.pyvertical_layout.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-452684828-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-452684828-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-452684828-r1 { fill: #008000 } .terminal-452684828-r2 { fill: #c5c8c6 } .terminal-452684828-r3 { fill: #e1e1e1 }      VerticalLayoutExample \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502One\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Two\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Three\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass VerticalLayoutExample(App):\nCSS_PATH = \"vertical_layout.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"One\", classes=\"box\")\nyield Static(\"Two\", classes=\"box\")\nyield Static(\"Three\", classes=\"box\")\nif __name__ == \"__main__\":\napp = VerticalLayoutExample()\napp.run()\n</code></pre> <pre><code>Screen {\nlayout: vertical;\n}\n.box {\nheight: 1fr;\nborder: solid green;\n}\n</code></pre> <p>Notice that the first widget yielded from the <code>compose</code> method appears at the top of the display, the second widget appears below it, and so on. Inside <code>vertical_layout.css</code>, we've assigned <code>layout: vertical</code> to <code>Screen</code>. <code>Screen</code> is the parent container of the widgets yielded from the <code>App.compose</code> method, and can be thought of as the terminal window itself.</p> <p>Note</p> <p>The <code>layout: vertical</code> CSS isn't strictly necessary in this case, since Screens use a <code>vertical</code> layout by default.</p> <p>We've assigned each child <code>.box</code> a height of <code>1fr</code>, which ensures they're each allocated an equal portion of the available height.</p> <p>You might also have noticed that the child widgets are the same width as the screen, despite nothing in our CSS file suggesting this. This is because widgets expand to the width of their parent container (in this case, the <code>Screen</code>).</p> <p>Just like other styles, <code>layout</code> can be adjusted at runtime by modifying the <code>styles</code> of a <code>Widget</code> instance:</p> <pre><code>widget.styles.layout = \"vertical\"\n</code></pre> <p>Using <code>fr</code> units guarantees that the children fill the available height of the parent. However, if the total height of the children exceeds the available space, then Textual will automatically add a scrollbar to the parent <code>Screen</code>.</p> <p>Note</p> <p>A scrollbar is added automatically because <code>Screen</code> contains the declaration <code>overflow-y: auto;</code>.</p> <p>For example, if we swap out <code>height: 1fr;</code> for <code>height: 10;</code> in the example above, the child widgets become a fixed height of 10, and a scrollbar appears (assuming our terminal window is sufficiently small):</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-532340956-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-532340956-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-532340956-r1 { fill: #008000 } .terminal-532340956-r2 { fill: #e1e1e1 } .terminal-532340956-r3 { fill: #c5c8c6 } .terminal-532340956-r4 { fill: #14191f }      VerticalLayoutScrolledExample \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502One\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2582\u2582 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Two\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 </p> <p>With the parent container in focus, we can use our mouse wheel, trackpad, or keyboard to scroll it.</p>"},{"location":"guide/layout/#horizontal","title":"Horizontal","text":"<p>The <code>horizontal</code> layout arranges child widgets horizontally, from left to right.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO2aa0/bSFx1MDAxNIa/8ytQ+rVM536ptFpcdTAwMTEuLTQtlNAtdFVVjj1JZnFsYztcdGnFf9+xQ+PE2GxcYlHKatdCSTzX45nnXHUwMDFjvzPDj63t7UY6iXTj9XZD37iOb7zYXHUwMDE5N15m6SNcdTAwMWQnJlxmbFx1MDAxNs7vk3BcdTAwMTi7ecl+mkbJ61evXHUwMDA2Tnyl08h3XFxcckYmXHUwMDE5On6SXHUwMDBlPVx1MDAxM1x1MDAwMjdcdTAwMWO8MqlcdTAwMWUkv2efXHUwMDFmnIH+LVxuXHUwMDA3Xlx1MDAxYYOik1x1MDAxZO2ZNIynfWlfXHUwMDBmdJAmtvU/7f329o/8c866WLupXHUwMDEz9HydV8izXG5cdTAwMDNcdTAwMTFH5dRcdTAwMGZhkFx1MDAxYitcdTAwMDRnTFBOZ1x1MDAwNUyyb7tLtWdzu9ZkXeRkSY1wrHY6o1x1MDAxMbuiTv8vfja8uWw3o6LXrvH9djrxc6vcOEySnb6Tuv2iRJLG4ZX+bLy0n9lWSp/VTUI7XHUwMDEwRa04XHUwMDFj9vqBTpKFOmHkuCadZGlcdTAwMTDOUqdcdTAwMDPxertIubF3XHUwMDFjXHUwMDAxXHUwMDA0XHUwMDEx45jNkvOKXHUwMDA0XHUwMDAyXHUwMDBlXHUwMDA1xUhcblYyZi/07Vx1MDAxNFhjXsD8KszpOO5Vz9pcdTAwMTR4szJp7Fx1MDAwNEnkxHaiinLju8ekilx1MDAwM1wipILz3fe16fVTm0uwXHUwMDA0kpL5/nU+XHUwMDAxXGJhXHUwMDAyle2ZzHKyXqMjL2fha3nw+k5cdTAwMWPdXHJSI8lu5izOjD2YXHUwMDAzqag8jDxnOuGIc4yVXCJcbjNajJ5vgiubXHUwMDE5XGZ9v0hcdTAwMGLdq4KRPPX25SpsXHUwMDEyXsemopxcdTAwMGKO4fJs9odB29//LryTZvzHXHUwMDA1jpLjT+ZdXHKbJb5cdTAwMTapxJukktPFuc8rYlx1MDAwNVx1MDAwNJSqRMXaqaSgXHUwMDA2ScxcdTAwMDHCXGKqKii55Vx1MDAxMVNcdTAwMDHR5qAkXHUwMDEwYiigQOuCUvu+iZJqJFx1MDAxMalDkiNCqP1cdTAwMTNLI/lpsPd2ctChqOd8eXt4zVvHcFx1MDAxZq2C5OZcdTAwMDKlwFx1MDAwMImFaDiNk1xuMIZcdTAwMDV5KpEvulx1MDAwZcNcZt+nXHUwMDExYYBRyVx1MDAxN2Y8XCJcdTAwMDQoI1xi36NcdTAwMTFbw1xiUYJvNERaKyGkXHUwMDFioZGLOlx1MDAxYe1gXHREkIBqaVx1MDAxY9E5vWmpTtg62lx1MDAxOUYnh63v3eB493njaN+cwlx1MDAwZYLi94mUgFx1MDAxMlXGYiVcIjtcdTAwMTCytVx1MDAxMVx0MWFIWiY3TyTeXHUwMDAwkVx1MDAxONfKSeuLUmJCKVmayPeuuL5pXlx1MDAxY6TiYHzcla0v+/1o/3lcdTAwMTOJsOWC2ZBTISaFXHUwMDE1ckzAJyOJcEdKvi4kXHUwMDExQlx1MDAxMCumXHUwMDE4+1x1MDAxNyP5oI7k9WtcdTAwMWOroZVgXG7hpZmM3r9PzpvDvdZxcn74RSr+5qzztobJvuP2h7H+9VRcblx1MDAwMaxywVx1MDAxMpWZXHUwMDE0XGYwWKZ19Vx1MDAxNzevopJZuShcdFOVWGIuXHUwMDAxrMKSWIVPIedqk1QqSlx1MDAxMCNiXVSm+iatVpGyXHUwMDE2SIVskGRKLS8jj1x1MDAwZttJ2mpCdlx1MDAxMnjJ8FrH74KLi+dO5DROksVcdTAwMTVGVlx1MDAxNUtcYlxixvjJSD64upnb1ChQrFjNWFxirYhcIlx1MDAxYlxczWShUVwiwsgjICzmOlxm0rb5rnOlsZB66FxmjD9ZmK6cTmupnfyeTufHMtG2z5xGuVB61ze9jN+Gr7uLYKfGdfxZdlx1MDAxYc49uWt7d2xz8ZFXfoowNj1cdTAwMTM4/vmiJatHeilonWNcdFx1MDAxYuelJIIv7Ve4NWiN+67eXHUwMDFm6dbHyWRMh2ejo+fuV5gxUN5cdTAwMWGYRnr7XG6AVns+OdJP1UdlpIdcdTAwMWPYt7pYeM3MRXpcdTAwMDZ4aZPtp59Jqz6gIHijXHUwMDEyRFFcdTAwMWJq4WP8bHUwXHUwMDE1YnVgXCJMoWBYLs3ldde9hEcn15+Cvve5N1x1MDAxYZs2Pfz23Lkkklx1MDAwMJS90O8pXHUwMDEwXHUwMDA0eFmarIIlxrKjq7HkXHUwMDE4SJ53QVV2iSo4XHUwMDE1kFx1MDAwNFcqXHUwMDExpCRWVJBccitcdTAwMTEsXHUwMDA15OuCs1aJqHouKYNcdTAwMWOJR+xnnYs3x6NT7/SjY051e6/3wfF26/aznlxymFhIIGBpVTZcdTAwMTVcIlx1MDAxMqh1bCGsQYhQqlxis4vHTetcdTAwMTAqXHUwMDFmJYb/Szqk1qPkXHUwMDAzXHUwMDEyhNs4w+dm8Vx1MDAxZlx1MDAwZtQ+XHUwMDFmOJff6NklvDa9sVaBOPlr8tw9imJcdTAwMDHKbvPToaDgpf3jX6TsieJ2sUfxpj0qO7T636Oyr3tcdTAwMWXlxHE4rnQpWOtSdrVoXHUwMDAzOH/EnuK3uHnK946uXHUwMDA35uDj8I1vlHmz667mUlx1MDAxYjxcdJSA4vu73FxmXCLwkCtJ0WWdp1x1MDAxY1x1MDAwMTJA+KK7XHUwMDE2+4mAK1U6XHUwMDE4v/MtaHOs4EUr7HHn1q3mW1xmMkVcdTAwMWVz6jJnh1x1MDAxM6dNXHUwMDEzeCbolavowKvJ8Z0k3Vx1MDAwYlx1MDAwN1x1MDAwM5NaM05DXHUwMDEzpOVcdTAwMTJ5u7tcdTAwMTnVfe3cc1x1MDAxMdvyfF5cdTAwMTn/KGux+K+O7Cp+bVx1MDAxN3zkN7PfX19Wlq6Yyewq5rBoYGv++3brrsmGXHUwMDEzRe3UXHUwMDBluDVo6rh2To13XHUwMDE3kYrnaoyMXHUwMDFlN6v2XHUwMDA38ytcdTAwMGJcdTAwMDC5+2d+prOn+3G7dfs38GbaXHUwMDA3In0=        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      WidgetWidgetWidget <p>The example below shows how we can arrange widgets horizontally, with minimal changes to the vertical layout example above.</p> Outputhorizontal_layout.pyhorizontal_layout.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1769115774-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1769115774-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1769115774-r1 { fill: #008000 } .terminal-1769115774-r2 { fill: #c5c8c6 } .terminal-1769115774-r3 { fill: #e1e1e1 }      HorizontalLayoutExample \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502One\u2502\u2502Two\u2502\u2502Three\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass HorizontalLayoutExample(App):\nCSS_PATH = \"horizontal_layout.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"One\", classes=\"box\")\nyield Static(\"Two\", classes=\"box\")\nyield Static(\"Three\", classes=\"box\")\nif __name__ == \"__main__\":\napp = HorizontalLayoutExample()\napp.run()\n</code></pre> <pre><code>Screen {\nlayout: horizontal;\n}\n.box {\nheight: 100%;\nwidth: 1fr;\nborder: solid green;\n}\n</code></pre> <p>We've changed the <code>layout</code> to <code>horizontal</code> inside our CSS file. As a result, the widgets are now arranged from left to right instead of top to bottom.</p> <p>We also adjusted the height of the child <code>.box</code> widgets to <code>100%</code>. As mentioned earlier, widgets expand to fill the width of their parent container. They do not, however, expand to fill the container's height. Thus, we need explicitly assign <code>height: 100%</code> to achieve this.</p> <p>A consequence of this \"horizontal growth\" behaviour is that if we remove the width restriction from the above example (by deleting <code>width: 1fr;</code>), each child widget will grow to fit the width of the screen, and only the first widget will be visible. The other two widgets in our layout are offscreen, to the right-hand side of the screen. In the case of <code>horizontal</code> layout, Textual will not automatically add a scrollbar.</p> <p>To enable horizontal scrolling, we can use the <code>overflow-x: auto;</code> declaration:</p> Outputhorizontal_layout_overflow.pyhorizontal_layout_overflow.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1539439364-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1539439364-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1539439364-r1 { fill: #008000 } .terminal-1539439364-r2 { fill: #c5c8c6 } .terminal-1539439364-r3 { fill: #e1e1e1 } .terminal-1539439364-r4 { fill: #23568b }      HorizontalLayoutExample \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502One\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u258a </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass HorizontalLayoutExample(App):\nCSS_PATH = \"horizontal_layout_overflow.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"One\", classes=\"box\")\nyield Static(\"Two\", classes=\"box\")\nyield Static(\"Three\", classes=\"box\")\nif __name__ == \"__main__\":\napp = HorizontalLayoutExample()\napp.run()\n</code></pre> <pre><code>Screen {\nlayout: horizontal;\noverflow-x: auto;\n}\n.box {\nheight: 100%;\nborder: solid green;\n}\n</code></pre> <p>With <code>overflow-x: auto;</code>, Textual automatically adds a horizontal scrollbar since the width of the children exceeds the available horizontal space in the parent container.</p>"},{"location":"guide/layout/#utility-containers","title":"Utility containers","text":"<p>Textual comes with several \"container\" widgets. Among them, we have Vertical, Horizontal, and Grid which have the corresponding layout.</p> <p>The example below shows how we can combine these containers to create a simple 2x2 grid. Inside a single <code>Horizontal</code> container, we place two <code>Vertical</code> containers. In other words, we have a single row containing two columns.</p> Outpututility_containers.pyutility_containers.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-4229676841-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-4229676841-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-4229676841-r1 { fill: #8b0000 } .terminal-4229676841-r2 { fill: #c5c8c6 } .terminal-4229676841-r3 { fill: #fae0e5 }      UtilityContainersExample \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502One\u2502\u2502Three\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502Two\u2502\u2502Four\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Horizontal, Vertical\nfrom textual.widgets import Static\nclass UtilityContainersExample(App):\nCSS_PATH = \"utility_containers.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Horizontal(\nVertical(\nStatic(\"One\"),\nStatic(\"Two\"),\nclasses=\"column\",\n),\nVertical(\nStatic(\"Three\"),\nStatic(\"Four\"),\nclasses=\"column\",\n),\n)\nif __name__ == \"__main__\":\napp = UtilityContainersExample()\napp.run()\n</code></pre> <pre><code>Static {\ncontent-align: center middle;\nbackground: crimson;\nborder: solid darkred;\nheight: 1fr;\n}\n.column {\nwidth: 1fr;\n}\n</code></pre> <p>You may be tempted to use many levels of nested utility containers in order to build advanced, grid-like layouts. However, Textual comes with a more powerful mechanism for achieving this known as grid layout, which we'll discuss below.</p>"},{"location":"guide/layout/#composing-with-context-managers","title":"Composing with context managers","text":"<p>In the previous section, we've shown how you add children to a container (such as <code>Horizontal</code> and <code>Vertical</code>) using positional arguments. It's fine to do it this way, but Textual offers a simplified syntax using context managers, which is generally easier to write and edit.</p> <p>When composing a widget, you can introduce a container using Python's <code>with</code> statement. Any widgets yielded within that block are added as a child of the container.</p> <p>Let's update the utility containers example to use the context manager approach.</p> utility_containers_using_with.pyutility_containers.pyutility_containers.cssOutput <p>Note</p> <p>This code uses context managers to compose widgets.</p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Horizontal, Vertical\nfrom textual.widgets import Static\nclass UtilityContainersExample(App):\nCSS_PATH = \"utility_containers.css\"\ndef compose(self) -&gt; ComposeResult:\nwith Horizontal():\nwith Vertical(classes=\"column\"):\nyield Static(\"One\")\nyield Static(\"Two\")\nwith Vertical(classes=\"column\"):\nyield Static(\"Three\")\nyield Static(\"Four\")\nif __name__ == \"__main__\":\napp = UtilityContainersExample()\napp.run()\n</code></pre> <p>Note</p> <p>This is the original code using positional arguments.</p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Horizontal, Vertical\nfrom textual.widgets import Static\nclass UtilityContainersExample(App):\nCSS_PATH = \"utility_containers.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Horizontal(\nVertical(\nStatic(\"One\"),\nStatic(\"Two\"),\nclasses=\"column\",\n),\nVertical(\nStatic(\"Three\"),\nStatic(\"Four\"),\nclasses=\"column\",\n),\n)\nif __name__ == \"__main__\":\napp = UtilityContainersExample()\napp.run()\n</code></pre> <pre><code>Static {\ncontent-align: center middle;\nbackground: crimson;\nborder: solid darkred;\nheight: 1fr;\n}\n.column {\nwidth: 1fr;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-4229676841-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-4229676841-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-4229676841-r1 { fill: #8b0000 } .terminal-4229676841-r2 { fill: #c5c8c6 } .terminal-4229676841-r3 { fill: #fae0e5 }      UtilityContainersExample \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502One\u2502\u2502Three\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502Two\u2502\u2502Four\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <p>Note how the end result is the same, but the code with context managers is a little easier to read. It is up to you which method you want to use, and you can mix context managers with positional arguments if you like!</p>"},{"location":"guide/layout/#grid","title":"Grid","text":"<p>The <code>grid</code> layout arranges widgets within a grid. Widgets can span multiple rows and columns to create complex layouts. The diagram below hints at what can be achieved using <code>layout: grid</code>.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nN2ZW3PaRlx1MDAxNMff8yk85DVsds/eM9PpONimwZc40NZ2O52MkFx1MDAxNiQjkCxcdOM4k+/elUhcdTAwMTFcYpNQyrhcdTAwMDQ9aEZnb8e7P875n/XnXHUwMDE3XHUwMDA3XHUwMDA3texTbGpvXHUwMDBlaubBdcLAS5xJ7VVuvzdJXHUwMDFhRCPbXHUwMDA0xXdcdTAwMWGNXHUwMDEzt+jpZ1mcvnn9eugkXHUwMDAzk8Wh41x1MDAxYXRcdTAwMWakYydMs7FcdTAwMTdEyI2Gr4PMXGbTn/P3hTM0P8XR0MtcdTAwMTJULlI3XpBFyXQtXHUwMDEzmqFcdTAwMTllqZ39T/t9cPC5eM95l1x1MDAxODdzRv3QXHUwMDE0XHUwMDAziqbSQVx1MDAwZbRqvYhGhbNSYYEpV3rWIUiP7HKZ8Wxrz7psypbcVLtpnVx1MDAxZl596NavLlx1MDAxZlx1MDAxZVx1MDAxYVx1MDAxZlx1MDAwNmN8d/rQKlftXHUwMDA1YdjJPoWFV25cdTAwMTKlad13Mtcve6RZXHUwMDEyXHLMVeBlvu1DKvbZ2DSyXHUwMDFiUY5KonHfXHUwMDFmmTRdXHUwMDE4XHUwMDEzxY5cdTAwMWJkn3JcdTAwMWLGM+t0I95cdTAwMWOUloeiXHUwMDA3Q1RSzISSfNZSjFx1MDAxNVxuXHUwMDExxjglwCvuNKLQXHUwMDFlgnXnJS6e0qGu41x1MDAwZfrWq5E365MlziiNncRcdTAwMWVV2W/y9Vx1MDAwZmVa2OWVxmJuXHUwMDEx31x1MDAwNH0/s61cdTAwMTRcdTAwMTRSjM45lpriXGKIXHUwMDEyUlGQsjzCfNX4nVfQ8Fd1+3wnib9uUy3NP+Y8zp09nkOpXHUwMDFjPI49Z3rkRFxioFhcYo0xLfcvXGZGXHUwMDAz2zhcdTAwMWGHYWmL3EFJSWH98mpcdTAwMDM6iYaVdFxuKblQhKxN51x1MDAxOVHtWH7sezeP/lHnulx1MDAwMVx1MDAwZbm+XUFnhbBFLuFZuVx1MDAwNFxuXGbIMpdcdTAwMTIxXCL1XHUwMDAysNvnkqFcdTAwMTVQgkBcdTAwMDRcYtZPYSmVXHUwMDEyhCtJfmAsTVx1MDAxOFx1MDAwNnH6NJRCroKSgKCSYGB8bSpvvZPTNlx1MDAxN73r5nEr6pCscXtydrZcdJXPXHUwMDE4LVx0Q0phxVx1MDAxN06/XHUwMDE4K1x1MDAwNdJcdTAwMTJcdTAwMDRcdTAwMTf/LVq+7DlcdTAwMWM4LFx1MDAxM0lcdTAwMDBcdTAwMDFhi9FwxiQhqFx1MDAxYainRCrGXGLYUfr5gSTPXHUwMDAwJFx1MDAwMFlccqSywYNpvj6QN2MxOUs8t3nphONcdTAwMTNcdTAwMTI770izu+NAUo1cdTAwMThwqebPfsojR1x1MDAxNUw3o7GLMd9cdTAwMTaNVHPFlFx1MDAwNrmnNM5tRpVGLG101DZGrk2j4dK9ad+178bvo7fHl0o49cbJjtMobNZcXFx1MDAxNpJcdTAwMTbFLVx1MDAwNEZcdTAwMDJdm123hVwiyVx1MDAxMzVVWvxcdTAwMGapemssfltBXHUwMDEyvlJCMlxuQtn6Zv1cdTAwMDKn58i02ei/u3J9OrlodY/Os4+rkrXvuP44MTvAI1x1MDAxMMujkMtMgqVmSV1unq7FU1xcaoxA0pzL6UR0XHUwMDE5T1x0/0hZpotnXHRTomxxROeF195hOldmV6OmxsDtr1x1MDAxNNbnNFx1MDAxOep2M2xcdTAwMWReXHUwMDBl07f3LGh15MVxvOucUmo5kFhiWk3jgDXKz2KxXHUwMDE22S6oXG4jOc8p2YRT4FQrofT+ckphdfGDqS3KQdP1Of2j0W1cdTAwMDa3V4T83nPdX25cdTAwMWb751x1MDAxN0fOrnNq01x1MDAwNlJSaL7MqY2nXFxhvChEt1x1MDAxY1CZLb6YzJXElEK5XGZqrkB4cZc1XVx1MDAwYosqqfZcdTAwMTclOFx1MDAwNjJcdTAwMTf3941UXHUwMDAyeCWpXHUwMDAyXHUwMDEzRYGT9XXo+aVw621y18x4NOanp93eIVx1MDAxOe06qXnmZ5zj5cKIYkBWjW8h9U9cdTAwMDXp06mfXCLNXGLLg/bmqZ8qZXOCwPurUC2H30j9Np3k97xrg0rYUVx1MDAwMHU2oYG+gUFrXHUwMDEyTn5cdTAwMTk+7DqolDKElV4sX6ac2lpKq8rF/HY53U7mXHUwMDE33Go0YPub+blcdTAwMTIrMZVC2OPjZP1bps71yfk5jDJcdTAwMGbjTP7620X9LIuPdlx1MDAxZNOikpJM4KWLT6ol4lpXWjbhXHUwMDE0QHXNk5yCJohcbrlcdTAwMTCx/1xyofm9PFx1MDAxMXR/XHUwMDAzKdPf0Ka5XHUwMDFlgLl7ju9cdTAwMDH6cVx1MDAxON++T4Pe44fw0L+Pzvw2ucG7XHUwMDBlKLNxlC39X2ZcdTAwMDboVqTpakBcdFx1MDAxM0hPr2FXStPvclxuWFx1MDAxMK2A/Vx1MDAxOJf19l1MWnPiuJPZKW3zlFrrdeB1gkezME3tPjCTt09cdP7iqb34yn7Ol8l9/vzlxZe/XHUwMDAxUO5ccsMifQ==        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      <p>Note</p> <p>Grid layouts in Textual have little in common with browser-based CSS Grid.</p> <p>To get started with grid layout, define the number of columns and rows in your grid with the <code>grid-size</code> CSS property and set <code>layout: grid</code>. Widgets are inserted into the \"cells\" of the grid from left-to-right and top-to-bottom order.</p> <p>The following example creates a 3 x 2 grid and adds six widgets to it</p> Outputgrid_layout1.pygrid_layout1.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3077119198-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3077119198-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3077119198-r1 { fill: #008000 } .terminal-3077119198-r2 { fill: #c5c8c6 } .terminal-3077119198-r3 { fill: #e1e1e1 }      GridLayoutExample \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502One\u2502\u2502Two\u2502\u2502Three\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Four\u2502\u2502Five\u2502\u2502Six\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass GridLayoutExample(App):\nCSS_PATH = \"grid_layout1.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"One\", classes=\"box\")\nyield Static(\"Two\", classes=\"box\")\nyield Static(\"Three\", classes=\"box\")\nyield Static(\"Four\", classes=\"box\")\nyield Static(\"Five\", classes=\"box\")\nyield Static(\"Six\", classes=\"box\")\nif __name__ == \"__main__\":\napp = GridLayoutExample()\napp.run()\n</code></pre> <pre><code>Screen {\nlayout: grid;\ngrid-size: 3 2;\n}\n.box {\nheight: 100%;\nborder: solid green;\n}\n</code></pre> <p>If we were to yield a seventh widget from our <code>compose</code> method, it would not be visible as the grid does not contain enough cells to accommodate it. We can tell Textual to add new rows on demand to fit the number of widgets, by omitting the number of rows from <code>grid-size</code>. The following example creates a grid with three columns, with rows created on demand:</p> Outputgrid_layout2.pygrid_layout2.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1958232742-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1958232742-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1958232742-r1 { fill: #008000 } .terminal-1958232742-r2 { fill: #c5c8c6 } .terminal-1958232742-r3 { fill: #e1e1e1 }      GridLayoutExample \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502One\u2502\u2502Two\u2502\u2502Three\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Four\u2502\u2502Five\u2502\u2502Six\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Seven\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass GridLayoutExample(App):\nCSS_PATH = \"grid_layout2.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"One\", classes=\"box\")\nyield Static(\"Two\", classes=\"box\")\nyield Static(\"Three\", classes=\"box\")\nyield Static(\"Four\", classes=\"box\")\nyield Static(\"Five\", classes=\"box\")\nyield Static(\"Six\", classes=\"box\")\nyield Static(\"Seven\", classes=\"box\")\nif __name__ == \"__main__\":\napp = GridLayoutExample()\napp.run()\n</code></pre> <pre><code>Screen {\nlayout: grid;\ngrid-size: 3;\n}\n.box {\nheight: 100%;\nborder: solid green;\n}\n</code></pre> <p>Since we specified that our grid has three columns (<code>grid-size: 3</code>), and we've yielded seven widgets in total, a third row has been created to accommodate the seventh widget.</p> <p>Now that we know how to define a simple uniform grid, let's look at how we can customize it to create more complex layouts.</p>"},{"location":"guide/layout/#row-and-column-sizes","title":"Row and column sizes","text":"<p>You can adjust the width of columns and the height of rows in your grid using the <code>grid-columns</code> and <code>grid-rows</code> properties. These properties can take multiple values, letting you specify dimensions on a column-by-column or row-by-row basis.</p> <p>Continuing on from our earlier 3x2 example grid, let's adjust the width of the columns using <code>grid-columns</code>. We'll make the first column take up half of the screen width, with the other two columns sharing the remaining space equally.</p> Outputgrid_layout3_row_col_adjust.pygrid_layout3_row_col_adjust.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-122166494-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-122166494-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-122166494-r1 { fill: #008000 } .terminal-122166494-r2 { fill: #c5c8c6 } .terminal-122166494-r3 { fill: #e1e1e1 }      GridLayoutExample \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502One\u2502\u2502Two\u2502\u2502Three\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Four\u2502\u2502Five\u2502\u2502Six\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass GridLayoutExample(App):\nCSS_PATH = \"grid_layout3_row_col_adjust.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"One\", classes=\"box\")\nyield Static(\"Two\", classes=\"box\")\nyield Static(\"Three\", classes=\"box\")\nyield Static(\"Four\", classes=\"box\")\nyield Static(\"Five\", classes=\"box\")\nyield Static(\"Six\", classes=\"box\")\nif __name__ == \"__main__\":\napp = GridLayoutExample()\napp.run()\n</code></pre> <pre><code>Screen {\nlayout: grid;\ngrid-size: 3;\ngrid-columns: 2fr 1fr 1fr;\n}\n.box {\nheight: 100%;\nborder: solid green;\n}\n</code></pre> <p>Since our <code>grid-size</code> is 3 (meaning it has three columns), our <code>grid-columns</code> declaration has three space-separated values. Each of these values sets the width of a column. The first value refers to the left-most column, the second value refers to the next column, and so on. In the example above, we've given the left-most column a width of <code>2fr</code> and the other columns widths of <code>1fr</code>. As a result, the first column is allocated twice the width of the other columns.</p> <p>Similarly, we can adjust the height of a row using <code>grid-rows</code>. In the following example, we use <code>%</code> units to adjust the first row of our grid to <code>25%</code> height, and the second row to <code>75%</code> height (while retaining the <code>grid-columns</code> change from above).</p> Outputgrid_layout4_row_col_adjust.pygrid_layout4_row_col_adjust.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1005198558-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1005198558-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1005198558-r1 { fill: #008000 } .terminal-1005198558-r2 { fill: #c5c8c6 } .terminal-1005198558-r3 { fill: #e1e1e1 }      GridLayoutExample \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502One\u2502\u2502Two\u2502\u2502Three\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Four\u2502\u2502Five\u2502\u2502Six\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass GridLayoutExample(App):\nCSS_PATH = \"grid_layout4_row_col_adjust.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"One\", classes=\"box\")\nyield Static(\"Two\", classes=\"box\")\nyield Static(\"Three\", classes=\"box\")\nyield Static(\"Four\", classes=\"box\")\nyield Static(\"Five\", classes=\"box\")\nyield Static(\"Six\", classes=\"box\")\nif __name__ == \"__main__\":\napp = GridLayoutExample()\napp.run()\n</code></pre> <pre><code>Screen {\nlayout: grid;\ngrid-size: 3;\ngrid-columns: 2fr 1fr 1fr;\ngrid-rows: 25% 75%;\n}\n.box {\nheight: 100%;\nborder: solid green;\n}\n</code></pre> <p>If you don't specify enough values in a <code>grid-columns</code> or <code>grid-rows</code> declaration, the values you have provided will be \"repeated\". For example, if your grid has four columns (i.e. <code>grid-size: 4;</code>), then <code>grid-columns: 2 4;</code> is equivalent to <code>grid-columns: 2 4 2 4;</code>. If it instead had three columns, then <code>grid-columns: 2 4;</code> would be equivalent to <code>grid-columns: 2 4 2;</code>.</p>"},{"location":"guide/layout/#cell-spans","title":"Cell spans","text":"<p>Cells may span multiple rows or columns, to create more interesting grid arrangements.</p> <p>To make a single cell span multiple rows or columns in the grid, we need to be able to select it using CSS. To do this, we'll add an ID to the widget inside our <code>compose</code> method so we can set the <code>row-span</code> and <code>column-span</code> properties using CSS.</p> <p>Let's add an ID of <code>#two</code> to the second widget yielded from <code>compose</code>, and give it a <code>column-span</code> of 2 to make that widget span two columns. We'll also add a slight tint using <code>tint: magenta 40%;</code> to draw attention to it.</p> Outputgrid_layout5_col_span.pygrid_layout5_col_span.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3502422581-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3502422581-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3502422581-r1 { fill: #008000 } .terminal-3502422581-r2 { fill: #664c66 } .terminal-3502422581-r3 { fill: #c5c8c6 } .terminal-3502422581-r4 { fill: #e1e1e1 } .terminal-3502422581-r5 { fill: #ed87ed } .terminal-3502422581-r6 { fill: #ed87ed;font-weight: bold }      GridLayoutExample \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502One\u2502\u2502Two\u00a0(column-span:\u00a02)\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Three\u2502\u2502Four\u2502\u2502Five\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Six\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass GridLayoutExample(App):\nCSS_PATH = \"grid_layout5_col_span.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"One\", classes=\"box\")\nyield Static(\"Two [b](column-span: 2)\", classes=\"box\", id=\"two\")\nyield Static(\"Three\", classes=\"box\")\nyield Static(\"Four\", classes=\"box\")\nyield Static(\"Five\", classes=\"box\")\nyield Static(\"Six\", classes=\"box\")\nif __name__ == \"__main__\":\napp = GridLayoutExample()\napp.run()\n</code></pre> <pre><code>Screen {\nlayout: grid;\ngrid-size: 3;\n}\n#two {\ncolumn-span: 2;\ntint: magenta 40%;\n}\n.box {\nheight: 100%;\nborder: solid green;\n}\n</code></pre> <p>Notice that the widget expands to fill columns to the right of its original position. Since <code>#two</code> now spans two cells instead of one, all widgets that follow it are shifted along one cell in the grid to accommodate. As a result, the final widget wraps on to a new row at the bottom of the grid.</p> <p>Note</p> <p>In the example above, setting the <code>column-span</code> of <code>#two</code> to be 3 (instead of 2) would have the same effect, since there are only 2 columns available (including <code>#two</code>'s original column).</p> <p>We can similarly adjust the <code>row-span</code> of a cell to have it span multiple rows. This can be used in conjunction with <code>column-span</code>, meaning one cell may span multiple rows and columns. The example below shows <code>row-span</code> in action. We again target widget <code>#two</code> in our CSS, and add a <code>row-span: 2;</code> declaration to it.</p> Outputgrid_layout6_row_span.pygrid_layout6_row_span.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-180753279-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-180753279-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-180753279-r1 { fill: #008000 } .terminal-180753279-r2 { fill: #664c66 } .terminal-180753279-r3 { fill: #c5c8c6 } .terminal-180753279-r4 { fill: #e1e1e1 } .terminal-180753279-r5 { fill: #ed87ed } .terminal-180753279-r6 { fill: #ed87ed;font-weight: bold }      GridLayoutExample \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502One\u2502\u2502Two\u00a0(column-span:\u00a02\u00a0and\u00a0row-span:\u00a02)\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502 \u2502Three\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Four\u2502\u2502Five\u2502\u2502Six\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass GridLayoutExample(App):\nCSS_PATH = \"grid_layout6_row_span.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"One\", classes=\"box\")\nyield Static(\"Two [b](column-span: 2 and row-span: 2)\", classes=\"box\", id=\"two\")\nyield Static(\"Three\", classes=\"box\")\nyield Static(\"Four\", classes=\"box\")\nyield Static(\"Five\", classes=\"box\")\nyield Static(\"Six\", classes=\"box\")\napp = GridLayoutExample()\nif __name__ == \"__main__\":\napp.run()\n</code></pre> <pre><code>Screen {\nlayout: grid;\ngrid-size: 3;\n}\n#two {\ncolumn-span: 2;\nrow-span: 2;\ntint: magenta 40%;\n}\n.box {\nheight: 100%;\nborder: solid green;\n}\n</code></pre> <p>Widget <code>#two</code> now spans two columns and two rows, covering a total of four cells. Notice how the other cells are moved to accommodate this change. The widget that previously occupied a single cell now occupies four cells, thus displacing three cells to a new row.</p>"},{"location":"guide/layout/#gutter","title":"Gutter","text":"<p>The spacing between cells in the grid can be adjusted using the <code>grid-gutter</code> CSS property. By default, cells have no gutter, meaning their edges touch each other. Gutter is applied across every cell in the grid, so <code>grid-gutter</code> must be used on a widget with <code>layout: grid</code> (not on a child/cell widget).</p> <p>To illustrate gutter let's set our <code>Screen</code> background color to <code>lightgreen</code>, and the background color of the widgets we yield to <code>darkmagenta</code>. Now if we add <code>grid-gutter: 1;</code> to our grid, one cell of spacing appears between the cells and reveals the light green background of the <code>Screen</code>.</p> Outputgrid_layout7_gutter.pygrid_layout7_gutter.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-721777988-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-721777988-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-721777988-r1 { fill: #efddef } .terminal-721777988-r2 { fill: #c5c8c6 } .terminal-721777988-r3 { fill: #f0fcf0 }      GridLayoutExample OneTwoThree FourFiveSix </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass GridLayoutExample(App):\nCSS_PATH = \"grid_layout7_gutter.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"One\", classes=\"box\")\nyield Static(\"Two\", classes=\"box\")\nyield Static(\"Three\", classes=\"box\")\nyield Static(\"Four\", classes=\"box\")\nyield Static(\"Five\", classes=\"box\")\nyield Static(\"Six\", classes=\"box\")\nif __name__ == \"__main__\":\napp = GridLayoutExample()\napp.run()\n</code></pre> <pre><code>Screen {\nlayout: grid;\ngrid-size: 3;\ngrid-gutter: 1;\nbackground: lightgreen;\n}\n.box {\nbackground: darkmagenta;\nheight: 100%;\n}\n</code></pre> <p>Notice that gutter only applies between the cells in a grid, pushing them away from each other. It doesn't add any spacing between cells and the edges of the parent container.</p> <p>Tip</p> <p>You can also supply two values to the <code>grid-gutter</code> property to set vertical and horizontal gutters respectively. Since terminal cells are typically two times taller than they are wide, it's common to set the horizontal gutter equal to double the vertical gutter (e.g. <code>grid-gutter: 1 2;</code>) in order to achieve visually consistent spacing around grid cells.</p>"},{"location":"guide/layout/#docking","title":"Docking","text":"<p>Widgets may be docked. Docking a widget removes it from the layout and fixes its position, aligned to either the top, right, bottom, or left edges of a container. Docked widgets will not scroll out of view, making them ideal for sticky headers, footers, and sidebars.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nN2aWXPbNlx1MDAxMIDf8ys0ymvM4D4y0+nItpKocWwnjuOj0+nQJCTSokiWpCxLXHUwMDE5//cuaVXURVx1MDAxZrKqqtGDLWFcdGBcdHy72Fx1MDAwNfDjVa1Wz4axqb+r1c2tY1x1MDAwN76b2IP6m7z8xiSpXHUwMDFmhSBcIsXvNOonTvGkl2Vx+u7t256ddE1cdTAwMTZcdTAwMDe2Y6xcdTAwMWI/7dtBmvVdP7KcqPfWz0wv/TX/e2j3zC9x1HOzxCo72TGun0XJfV8mMD1cdTAwMTNmKbT+O/yu1X5cdTAwMTR/p7RLjJPZYScwRYVCVCrIXHSbLz2MwkJZzDXHTCuMJk/46T70l1x1MDAxOVx1MDAxN8Rt0NmUkryovk9cdTAwMWKNLDiPm7vvveD4YtQ6b3mdstu2XHUwMDFmXHUwMDA0J9kwKNRykihNdzw7c7zyiTRLoq45893MyzWYK5/UTSNcdTAwMTiJslZcdTAwMTL1O15o0nSmTlx1MDAxNNuOn1xy8zJUvsL9SLyrlSW3+TBcYksppLimkk9cdTAwMDR5VVwiLc0wQ4LwOWX2olx1MDAwMOZcdTAwMDCUeY2KT6nOle10O6BT6E6eyVx1MDAxMjtMYzuBmSqfXHUwMDFijF+TaWFRqfRMJ57xO15cdTAwMDZSSpSl2LReqSkmQFLMXHUwMDE4RVxcTVx1MDAwNHmnccstWPhjfuw8O4nHY1RP81x1MDAxZlNcbue6NqdAKiv3Y9e+n28sXHUwMDA0YVx1MDAxYyOtJKJcdTAwMTN54IddXHUwMDEwhv0gKMtcIqdbXCJSlN69WYFNrGklm4wjXCI1k09nM+yfXHUwMDFj73qX3/rdXHUwMDEz3jvY/Vx1MDAxNCFf7lWwOcfXLJVkk1RKhlxiZUuoJJjNUbF2KplVgSRcdTAwMTFcdTAwMTYmQMIyKJHGXHUwMDFhXHUwMDFjXHUwMDA3+lx1MDAxZkNpgsCP0+VIXG5VhaQg4D84werJRLZUvG9uj6L9a9p2/mzEPlx1MDAxYuhwXHUwMDE1XCI35yeFtKhSQmI1RyRcdTAwMDVUheZcdTAwMTS/zE++btuccLJIIyaLxE94xNhic13f08hcdTAwMDVSQlx1MDAwYkV+Tlx1MDAxYVx0IVU0YiykJuA7no6jz0dnXel+uP14ddL63CW94Pw82G5cdTAwMWM1tjSli6s25ZbgL1xcslx1MDAwMcUrhPi6UCyCXGLNlPhJUZSiXG5FmFx1MDAxZKQwsPhkXHUwMDEym8R8O/R6XzzxvXf05f1+s5mNXHUwMDBltptEjKXF5Cx0Y1x1MDAxMl9cdTAwMWE7vsbkXG587rpA1FgqJqT8P6/QXHUwMDBmh41cdTAwMTC5VLpFSlx1MDAxOVx1MDAxM1x1MDAxMOc/PW68uTj8XHUwMDFj68ug2T/5yptcdTAwMTk7v4pdv1x1MDAwMkbPdrx+Yv57XHUwMDFjuVx1MDAwNjTIXFxKkVfldJ3rtFhGJdWWXHUwMDEwRcZ031x1MDAxMF2Ek1wiYtFZ5cZ0XG4miCZywys2jFx1MDAwNkViM3TKXHUwMDA3Mm4qXGJoJJ+R1Vx1MDAxY1x1MDAxZYlcdTAwMTZpXFz3XHUwMDAzX35cdTAwMTmq9vfWzaCRbjudXHUwMDA0c0stYJjXXHUwMDE11FKQ2NGXZjZjn7mMT8iYLYZcdTAwMTHmS1NcdTAwMWJJQCghZJRMXHUwMDE3n3lAMVx1MDAwNF2SK0o2SygkXHUwMDE3SMrNXHUwMDEwqpSsXCKU5IqoZ1x1MDAxMbpz9MGcfo/OzcDP1M7p8V+O23K2n1BlgUdcdTAwMTBswYFiziyBJCMzKdB6XHUwMDExJVpZfFVAXHUwMDA1olQwyjaLJ5jFxvBElVmPRlhTNZ1cdTAwMTY9Rif969PnVn/onO3tfrn0mmfNTvL5z+2nXHUwMDEzsu2lyzthzFKU6lx1MDAxN29ccj1Cp0RcdTAwMTDN4dVcdTAwMWMoQ+A/MaGbXHJAYc2hXHUwMDAyb4RQgmTlLlx1MDAxMURHVEJcdTAwMWH4jGyo8enyMOy6UUz6R3vu7c23bD+Mt1x1MDAxZFFOmSU5X7KjLoWl+Dr8JyHqyiwlXHUwMDE0wotcIrZcdTAwMThcdTAwMTOotVjkXHUwMDE0XHUwMDBibTGxdFx1MDAwZlx1MDAxM1x1MDAxMiRcblx1MDAxM1x1MDAwNPRveIlcdTAwMTeYboZQrFHl1rpSmmBKpnKox1x1MDAwMFx1MDAxNa33e8e/XHRcdTAwMTnstM2+STJFXHUwMDBm+61tXHUwMDA3NF/hXHRcdTAwMTWUqPlcdTAwMTiUQs4uOV5DkvSQXHUwMDBmXHUwMDA1K1x1MDAxOJ83XHUwMDE1XHItI1RbsJapXHUwMDEyYzpcdTAwMGYqpVx1MDAxNFDlerMnQDBykESvi1M7SaLBUi/KKlx1MDAxMWWUS4LwM1x1MDAwZSbbl1xyXHUwMDE571x1MDAwN5/E6FwiuKTy4243XHUwMDFjXHUwMDBlVkN0c8c/WECaRDBmRFx1MDAxMIWEwnKGU5afTT5cZil3NEPuqpDmm1xiXHUwMDEwXHUwMDAyc5jyonu2yChB2lr0n1x1MDAwMoPqXG6vcjJZKLdcdTAwMWGXlMKQPsd/TulhJ9muXHUwMDFmun7YXHUwMDAx4T+M1ian661cdTAwMDKig49fvUBcdTAwMGVcdGmedk4v5ECnX9HpRNdcdTAwMWOjyOnnWu4gXHUwMDBiwlxywlx1MDAxNbhcdTAwMTdCNSyDik891rHjYv4teZ/ojiV3XHUwMDEzfUzoltrMvoCdZntRr+dn8OrHkVx1MDAxZmbzT1x1MDAxNO/SyI3KM7Y7L4WWp2Xz1lx1MDAxN+ctlldcdPJP+a1W4ln8mHz/483Sp3cq+SmkXHUwMDA1OmVcdTAwMWKvpv9XOYvM3GZLfVx1MDAwNa5cZrgkg0BcdTAwMTRcdTAwMDLO0sE+5itcdTAwMWWe5i1dznCxnC1cdTAwMWNcdTAwMTQzXG6xOnn5WUi1k4BwfolbWPBcdFx1MDAxME9cdIhcdP+N449cdEM/pvB6kt+fYeveXHUwMDE0JpK7f4D8N1x1MDAxY047XG6zXHUwMDEzf1TsqKCZ0vd2z1x1MDAwZoYzXHUwMDE4XHUwMDE00OeXa4q2ajDwXHUwMDFkk01PV2qg61wiuVAzlVx1MDAxYYHfya2jXHUwMDFlmPas2WS+Y1x1MDAwN1x1MDAxM3FcdTAwMTZNXHKvXHUwMDAzStjQXFzSWnBcdTAwMWVR4nf80Fx1MDAwZb4tVWglw8XVW02QIVxuSVx1MDAxOFJPz5RcdTAwMGVcdTAwMDJzdINij35cdTAwMThdOFe/XVx1MDAwZkbBaMWt+s2t8lRLaz6NXHUwMDA3O7aUnj+/WfNcdTAwMDVcdTAwMGbMS4VcdTAwMWawXFyMXHUwMDE01lx1MDAxMHuwXHKb7uHxdYNeKXamlZdcXCeDXHUwMDBmo1x1MDAwMTtYm+lyjMRz9qteZrpcdTAwMDf2MOpnY0tJt8F25zRaMUTn1Vx1MDAxN7RcdTAwMTCh+DnXs1x1MDAxZZ7uLbVdxoVFXHUwMDE5yq/hIaXx1GWL+1x1MDAwMJ1Z+rG7g0q2+dXqRqykhbjGeqzA1MZTadJcdTAwMTBcdTAwMWFUXdeCcsGJ5qusyy9cdNVz81OrmN9TQ/VcdTAwMDdXgtlQXHUwMDFkVpj8SFxcUYihJFXlJJahOrG0QkyonzdWr+SokE4jVFx1MDAxNbK/XHUwMDFhN1634/gkg/meTFx1MDAwZiDlu2OfWb5h/cY3g91lR8vFJ3dJxSjnpm/y9/xx9+rub5B4Q/4ifQ==        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      Docked widgetLayout widgets <p>To dock a widget to an edge, add a <code>dock: &lt;EDGE&gt;;</code> declaration to it, where <code>&lt;EDGE&gt;</code> is one of <code>top</code>, <code>right</code>, <code>bottom</code>, or <code>left</code>. For example, a sidebar similar to that shown in the diagram above can be achieved using <code>dock: left;</code>. The code below shows a simple sidebar implementation.</p> Outputdock_layout1_sidebar.pydock_layout1_sidebar.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2717415989-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2717415989-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2717415989-r1 { fill: #0f2b41 } .terminal-2717415989-r2 { fill: #c5c8c6 } .terminal-2717415989-r3 { fill: #e1e1e1 } .terminal-2717415989-r4 { fill: #23568b } .terminal-2717415989-r5 { fill: #14191f }      DockLayoutExample Sidebarfor\u00a0sticky\u00a0headers,\u00a0footers,\u00a0and\u00a0sidebars. Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0fixes\u00a0its\u00a0 position,\u00a0aligned\u00a0to\u00a0either\u00a0the\u00a0top,\u00a0right,\u00a0bottom,\u00a0or\u00a0left\u00a0 edges\u00a0of\u00a0a\u00a0container. Docked\u00a0widgets\u00a0will\u00a0not\u00a0scroll\u00a0out\u00a0of\u00a0view,\u00a0making\u00a0them\u00a0ideal\u00a0 for\u00a0sticky\u00a0headers,\u00a0footers,\u00a0and\u00a0sidebars. \u2582\u2582 Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0fixes\u00a0its\u00a0 position,\u00a0aligned\u00a0to\u00a0either\u00a0the\u00a0top,\u00a0right,\u00a0bottom,\u00a0or\u00a0left\u00a0 edges\u00a0of\u00a0a\u00a0container. Docked\u00a0widgets\u00a0will\u00a0not\u00a0scroll\u00a0out\u00a0of\u00a0view,\u00a0making\u00a0them\u00a0ideal\u00a0 for\u00a0sticky\u00a0headers,\u00a0footers,\u00a0and\u00a0sidebars. Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0fixes\u00a0its\u00a0\u2581\u2581 position,\u00a0aligned\u00a0to\u00a0either\u00a0the\u00a0top,\u00a0right,\u00a0bottom,\u00a0or\u00a0left\u00a0 edges\u00a0of\u00a0a\u00a0container. Docked\u00a0widgets\u00a0will\u00a0not\u00a0scroll\u00a0out\u00a0of\u00a0view,\u00a0making\u00a0them\u00a0ideal\u00a0 for\u00a0sticky\u00a0headers,\u00a0footers,\u00a0and\u00a0sidebars. Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0fixes\u00a0its\u00a0 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"\\\nDocking a widget removes it from the layout and fixes its position, aligned to either the top, right, bottom, or left edges of a container.\nDocked widgets will not scroll out of view, making them ideal for sticky headers, footers, and sidebars.\n\"\"\"\nclass DockLayoutExample(App):\nCSS_PATH = \"dock_layout1_sidebar.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"Sidebar\", id=\"sidebar\")\nyield Static(TEXT * 10, id=\"body\")\nif __name__ == \"__main__\":\napp = DockLayoutExample()\napp.run()\n</code></pre> <pre><code>#sidebar {\ndock: left;\nwidth: 15;\nheight: 100%;\ncolor: #0f2b41;\nbackground: dodgerblue;\n}\n</code></pre> <p>If we run the app above and scroll down, the body text will scroll but the sidebar does not (note the position of the scrollbar in the output shown above).</p> <p>Docking multiple widgets to the same edge will result in overlap. The first widget yielded from <code>compose</code> will appear below widgets yielded after it. Let's dock a second sidebar, <code>#another-sidebar</code>, to the left of the screen. This new sidebar is double the width of the one previous one, and has a <code>deeppink</code> background.</p> Outputdock_layout2_sidebar.pydock_layout2_sidebar.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3539250525-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3539250525-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3539250525-r1 { fill: #0f2b41 } .terminal-3539250525-r2 { fill: #c5c8c6 } .terminal-3539250525-r3 { fill: #e1e1e1 } .terminal-3539250525-r4 { fill: #23568b } .terminal-3539250525-r5 { fill: #14191f }      DockLayoutExample Sidebar1right,\u00a0bottom,\u00a0or\u00a0left\u00a0edges\u00a0of\u00a0a\u00a0container. Docked\u00a0widgets\u00a0will\u00a0not\u00a0scroll\u00a0out\u00a0of\u00a0view,\u00a0 making\u00a0them\u00a0ideal\u00a0for\u00a0sticky\u00a0headers,\u00a0footers,\u00a0 and\u00a0sidebars. Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0 fixes\u00a0its\u00a0position,\u00a0aligned\u00a0to\u00a0either\u00a0the\u00a0top,\u00a0\u2583\u2583 right,\u00a0bottom,\u00a0or\u00a0left\u00a0edges\u00a0of\u00a0a\u00a0container. Docked\u00a0widgets\u00a0will\u00a0not\u00a0scroll\u00a0out\u00a0of\u00a0view,\u00a0 making\u00a0them\u00a0ideal\u00a0for\u00a0sticky\u00a0headers,\u00a0footers,\u00a0 and\u00a0sidebars. Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0\u2582\u2582 fixes\u00a0its\u00a0position,\u00a0aligned\u00a0to\u00a0either\u00a0the\u00a0top,\u00a0 right,\u00a0bottom,\u00a0or\u00a0left\u00a0edges\u00a0of\u00a0a\u00a0container. Docked\u00a0widgets\u00a0will\u00a0not\u00a0scroll\u00a0out\u00a0of\u00a0view,\u00a0 making\u00a0them\u00a0ideal\u00a0for\u00a0sticky\u00a0headers,\u00a0footers,\u00a0 and\u00a0sidebars. Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0 fixes\u00a0its\u00a0position,\u00a0aligned\u00a0to\u00a0either\u00a0the\u00a0top,\u00a0 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"\\\nDocking a widget removes it from the layout and fixes its position, aligned to either the top, right, bottom, or left edges of a container.\nDocked widgets will not scroll out of view, making them ideal for sticky headers, footers, and sidebars.\n\"\"\"\nclass DockLayoutExample(App):\nCSS_PATH = \"dock_layout2_sidebar.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"Sidebar2\", id=\"another-sidebar\")\nyield Static(\"Sidebar1\", id=\"sidebar\")\nyield Static(TEXT * 10, id=\"body\")\napp = DockLayoutExample()\nif __name__ == \"__main__\":\napp.run()\n</code></pre> <pre><code>#another-sidebar {\ndock: left;\nwidth: 30;\nheight: 100%;\nbackground: deeppink;\n}\n#sidebar {\ndock: left;\nwidth: 15;\nheight: 100%;\ncolor: #0f2b41;\nbackground: dodgerblue;\n}\n</code></pre> <p>Notice that the original sidebar (<code>#sidebar</code>) appears on top of the newly docked widget. This is because <code>#sidebar</code> was yielded after <code>#another-sidebar</code> inside the <code>compose</code> method.</p> <p>Of course, we can also dock widgets to multiple edges within the same container. The built-in <code>Header</code> widget contains some internal CSS which docks it to the top. We can yield it inside <code>compose</code>, and without any additional CSS, we get a header fixed to the top of the screen.</p> Outputdock_layout3_sidebar_header.pydock_layout3_sidebar_header.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-645305685-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-645305685-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-645305685-r1 { fill: #0f2b41 } .terminal-645305685-r2 { fill: #c5c8c6 } .terminal-645305685-r3 { fill: #e3e3e3 } .terminal-645305685-r4 { fill: #e1e1e1 }      DockLayoutExample Sidebar1DockLayoutExample Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0fixes\u00a0its\u00a0 position,\u00a0aligned\u00a0to\u00a0either\u00a0the\u00a0top,\u00a0right,\u00a0bottom,\u00a0or\u00a0left\u00a0 edges\u00a0of\u00a0a\u00a0container. Docked\u00a0widgets\u00a0will\u00a0not\u00a0scroll\u00a0out\u00a0of\u00a0view,\u00a0making\u00a0them\u00a0ideal\u00a0 for\u00a0sticky\u00a0headers,\u00a0footers,\u00a0and\u00a0sidebars. Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0fixes\u00a0its\u00a0 position,\u00a0aligned\u00a0to\u00a0either\u00a0the\u00a0top,\u00a0right,\u00a0bottom,\u00a0or\u00a0left\u00a0 edges\u00a0of\u00a0a\u00a0container. Docked\u00a0widgets\u00a0will\u00a0not\u00a0scroll\u00a0out\u00a0of\u00a0view,\u00a0making\u00a0them\u00a0ideal\u00a0 for\u00a0sticky\u00a0headers,\u00a0footers,\u00a0and\u00a0sidebars. Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0fixes\u00a0its\u00a0 position,\u00a0aligned\u00a0to\u00a0either\u00a0the\u00a0top,\u00a0right,\u00a0bottom,\u00a0or\u00a0left\u00a0 edges\u00a0of\u00a0a\u00a0container. Docked\u00a0widgets\u00a0will\u00a0not\u00a0scroll\u00a0out\u00a0of\u00a0view,\u00a0making\u00a0them\u00a0ideal\u00a0 for\u00a0sticky\u00a0headers,\u00a0footers,\u00a0and\u00a0sidebars. Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0fixes\u00a0its\u00a0 position,\u00a0aligned\u00a0to\u00a0either\u00a0the\u00a0top,\u00a0right,\u00a0bottom,\u00a0or\u00a0left\u00a0 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static, Header\nTEXT = \"\"\"\\\nDocking a widget removes it from the layout and fixes its position, aligned to either the top, right, bottom, or left edges of a container.\nDocked widgets will not scroll out of view, making them ideal for sticky headers, footers, and sidebars.\n\"\"\"\nclass DockLayoutExample(App):\nCSS_PATH = \"dock_layout3_sidebar_header.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Header(id=\"header\")\nyield Static(\"Sidebar1\", id=\"sidebar\")\nyield Static(TEXT * 10, id=\"body\")\nif __name__ == \"__main__\":\napp = DockLayoutExample()\napp.run()\n</code></pre> <pre><code>#sidebar {\ndock: left;\nwidth: 15;\nheight: 100%;\ncolor: #0f2b41;\nbackground: dodgerblue;\n}\n</code></pre> <p>If we wished for the sidebar to appear below the header, it'd simply be a case of yielding the sidebar before we yield the header.</p>"},{"location":"guide/layout/#layers","title":"Layers","text":"<p>Textual has a concept of layers which gives you finely grained control over the order widgets are placed.</p> <p>When drawing widgets, Textual will first draw on lower layers, working its way up to higher layers. As such, widgets on higher layers will be drawn on top of those on lower layers.</p> <p>Layer names are defined with a <code>layers</code> style on a container (parent) widget. Descendants of this widget can then be assigned to one of these layers using a <code>layer</code> style.</p> <p>The <code>layers</code> style takes a space-separated list of layer names. The leftmost name is the lowest layer, and the rightmost is the highest layer. Therefore, if you assign a descendant to the rightmost layer name, it'll be drawn on the top layer and will be visible above all other descendants.</p> <p>An example <code>layers</code> declaration looks like: <code>layers: one two three;</code>. To add a widget to the topmost layer in this case, you'd add a declaration of <code>layer: three;</code> to it.</p> <p>In the example below, <code>#box1</code> is yielded before <code>#box2</code>. Given our earlier discussion on yield order, you'd expect <code>#box2</code> to appear on top. However, in this case, both <code>#box1</code> and <code>#box2</code> are assigned to layers which define the reverse order, so <code>#box1</code> is on top of <code>#box2</code></p> Outputlayers.pylayers.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3301495769-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3301495769-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3301495769-r1 { fill: #e1e1e1 } .terminal-3301495769-r2 { fill: #c5c8c6 } .terminal-3301495769-r3 { fill: #ddefef } .terminal-3301495769-r4 { fill: #211500 }      LayersExample box1\u00a0(layer\u00a0=\u00a0above) box2\u00a0(layer\u00a0=\u00a0below) </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass LayersExample(App):\nCSS_PATH = \"layers.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"box1 (layer = above)\", id=\"box1\")\nyield Static(\"box2 (layer = below)\", id=\"box2\")\nif __name__ == \"__main__\":\napp = LayersExample()\napp.run()\n</code></pre> <pre><code>Screen {\nalign: center middle;\nlayers: below above;\n}\nStatic {\nwidth: 28;\nheight: 8;\ncolor: auto;\ncontent-align: center middle;\n}\n#box1 {\nlayer: above;\nbackground: darkcyan;\n}\n#box2 {\nlayer: below;\nbackground: orange;\noffset: 12 6;\n}\n</code></pre>"},{"location":"guide/layout/#offsets","title":"Offsets","text":"<p>Widgets have a relative offset which is added to the widget's location, after its location has been determined via its parent's layout. This means that if a widget hasn't had its offset modified using CSS or Python code, it will have an offset of <code>(0, 0)</code>.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nN2ZWVPbSFx1MDAxMIDf+Vx1MDAxNZTzXHUwMDFhK3NcdTAwMWap2triXlxiS8JcdTAwMTVcYlspSkhjWWtZUqQx2Enx37clXHUwMDFjS744XGZhXHR6sK3p0Uxr5utr/GNpeblhXHUwMDA3qWm8X26YvudGoZ+5V423RfulyfIwiUFEyvs86WVe2bNtbZq/f/eu62ZcdTAwMWRj08j1jHNcdTAwMTnmPTfKbc9cdTAwMGZcdTAwMTPHS7rvQmu6+Z/F557bNX+kSde3mVNN0jR+aJPsZi5cdTAwMTOZroltXHUwMDBlo/9cdTAwMDP3y8s/ys+adpnxrFx1MDAxYlx1MDAwN5EpXHUwMDFmKEWVgpywyda9JC6VJVxcaM1cdTAwMDRBo1x1MDAwZWG+XHUwMDBl01njg7RcdTAwMDUqm0pSNDU2/L/pRvvbv70g+1x1MDAxNlxmVulgTZ82q1lbYVx1MDAxNFx1MDAxZNpBVGrlZUmeN9uu9dpVj9xmScechL5tQ1x1MDAxZjzRPno2T2AhqqeypFx1MDAxN7Rjk+djzySp64V2ULSh6lx1MDAxNW5cdTAwMTbi/XLV0i96UO4ohVx1MDAxNNdU8pGkeJYw7miGXHUwMDE5XHUwMDEyhE+os5ZEsFx0oM5cdTAwMWJUXpVCXHUwMDE3rtdcdECr2Fx1MDAxZvWxmVx1MDAxYuepm8FWVf2uhi/KtHCoVHpskrZcdIO2XHUwMDA1KSXKUayuWG7KLSCIYKWkpnokKWZNt/2Shq+Ty9d2s3S4TI28uKlpXFwou1FDqXq4l/ruzZZjIWA5XGJcdTAwMTDBdbV+UVx1MDAxOHdAXHUwMDE496Koaku8TkVJ2Xr9dlx1MDAwMTqxpvPoxJxgyTGW5N54XHUwMDFl2Y39081wV7ubXHUwMDFiJjv1z9OrvXl4TiA2XHUwMDBlJnlWMCVDhLJZYFx1MDAxMswmwHhyMJkzh0pcIlx1MDAxY0ww0jO4xEpQyonC9Dfm0kRRmOazqVx1MDAxNGoulVJcdTAwMTJcdTAwMDFb8lx1MDAwMCqT1Ytm/7CXx53Vg72TY4hcdTAwMDWfcGdcdTAwMTEqn9FdMvBXSlx0idUklZw5UmhO8ePc5ZuWy1x0J9NEYjJN/YhJjFx1MDAxZDYx9VxykUIrXHUwMDBlNqTx61x1MDAwNJKQuW5SIcxcdTAwMDVcdTAwMTX8/jz2XHUwMDBljoONwzPvUH6x4V/euWKnweZcdTAwMGLnUVwiR4PLmY7enDqTcXUxXHUwMDFhL1x1MDAxMOJPRaNUQkjxat0jkWKue0RCYK5FrcedOaV111vrQaY656q/x21rv1x1MDAxYixcdTAwMTS0n1x1MDAxMUdI55hcdTAwMTS8Tt1PXHUwMDFhXHUwMDFmjVwiJlx1MDAxN+B5n1xuRXDgiEtBlfyNWbw9hYQ0cS6OTCHN1Vx1MDAwM2hcXNvaOuqibbZ1XHUwMDE2fVx1MDAxOFxmdnbyj0r259DYdr12LzP/P49Eclx1MDAwN3EhxouYkkilXHUwMDFjOonq4uFazOJSI4fIMn+9XHUwMDE5iE7jKYnDsNRCSabLa1xuU1akXHUwMDE0XHUwMDE0iV9Q6VxmXHUwMDA1XHUwMDE1V7Xt3jnZXHUwMDBm6cpcdTAwMGU/kGebO1v+Jv34feXbaKwxXGLdLEuuXHUwMDFhI8n18NdcdTAwMGIxXHUwMDAyRvlcXCNcdTAwMTBcdTAwMTLyOMJqSe1dVtBstdbTXcp2dz+fb1xyzk74v51IvXQroFx1MDAxYUNcdTAwMTlccu+JucRIsYlUgVx1MDAxMeJcYqxcdTAwMWZf6Vx1MDAwZj30bFugo8OEhW2BgsdiYFxmr8pcdTAwMTRcbv+An8dcdTAwMTSEnpueXHUwMDEwpLDWhUO8tylE6+GXo1x1MDAwM2mClt7vtN0zkXhb+Us3hVwiICguXHUwMDE5marfXHUwMDE4l1x1MDAwZSNS0sdcdTAwMWUr3Fx1MDAxNlx1MDAxMVx1MDAxNHNcdTAwMTRReGhcdTAwMDNcYolcdTAwMDWsXHUwMDAwXHUwMDA24Fx1MDAwNKL373z0dWMnM931/FxmmjHQXHUwMDAxq/s769tccvdBhD7fuVx1MDAxN9RcdTAwMTDFiShDgKnCUvFxTGmR0eC7jlx1MDAxOZRs8YvFXHUwMDBmv6BYccCPa4Uxhe3neFx1MDAxYdPicJgzpYnSklx1MDAwYkbVJKZQknIsXHUwMDE5W6DUKzVdXHUwMDEw08J8yVx1MDAwMzCt6eFmdjWM/TBcdTAwMGVAWMWBn/8zbN8jXHIuqEq8Xrn7XHUwMDBllpD4gVx1MDAxOeNcItxcdTAwMDG8tU6Bm5ZEO1BcdTAwMTiVNfpQdD1Sx8T+3crcno3UlGlcIlx1MDAwN4FLwVx1MDAwNPJdpTVcdTAwMDRRxKbUUY7kRCvGOIJccuVCTilcdTAwMTW5uV1Lut3QwqJ/SsLYTi5uuYorhXW3jetPSuGl6rJJN5BcdTAwMTYjjofj6tdyZSflzej317cze89luLim6K1GW6p/z/Nf1vTtLPfF0S3uiyNYf0iB7u2/Lq8+dE6PV7+vN9m2/Cy7l3ZggpdcdTAwMWVhsdLgv1x1MDAwNNNMICaAqGpFSv8llFx1MDAwM9ZQxC+tMUTbx4TaW51YLauvju6nj1x1MDAwMSTkpFJcdTAwMTDyzMdcdTAwMDBcdTAwMTTXI9lcdTAwMDP8VCuJ7WH4/SZpXHUwMDFia910u2E0XHUwMDE427iSU9D0Y6uVXHUwMDFiW1/L3MCcJZdqrPdKXHUwMDE0XHUwMDA2cZnemdY44jb03GgktkntzT2Y3YXhsu0pk0+yMFxiYzc6XHUwMDFh1+RcdTAwMTFZLNdkro1xjFx1MDAwNUVS3d/G9pvHXHUwMDFl2ewrlVE//JCGe8dcdTAwMWLu2Vx1MDAxM9uYn1x1MDAxNP7yaZNcdTAwMDTmcKRnnLRRSVx1MDAxZHDv4tf+bfsk5Vx1MDAxYyZcZnKEwlx1MDAxYV5TPVfkyVx1MDAwZq/nloaDNtw0PbQw5Cjqw5qE/tDgq2FcdTAwMWGXoblanVV8lFehcmldXHUwMDA1wKZYkVx1MDAxZtdL1/9cdTAwMDE0elVbIn0=        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      Offset <p>The offset of a widget can be set using the <code>offset</code> CSS property. <code>offset</code> takes two values.</p> <ul> <li>The first value defines the <code>x</code> (horizontal) offset. Positive values will shift the widget to the right. Negative values will shift the widget to the left.</li> <li>The second value defines the <code>y</code> (vertical) offset. Positive values will shift the widget down. Negative values will shift the widget up.</li> </ul>"},{"location":"guide/layout/#putting-it-all-together","title":"Putting it all together","text":"<p>The sections above show how the various layouts in Textual can be used to position widgets on screen. In a real application, you'll make use of several layouts.</p> <p>The example below shows how an advanced layout can be built by combining the various techniques described on this page.</p> Outputcombining_layouts.pycombining_layouts.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1423073914-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1423073914-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1423073914-r1 { fill: #c5c8c6 } .terminal-1423073914-r2 { fill: #e3e3e3 } .terminal-1423073914-r3 { fill: #1e90ff } .terminal-1423073914-r4 { fill: #c71585 } .terminal-1423073914-r5 { fill: #e3e4e5 } .terminal-1423073914-r6 { fill: #adff2f }      CombiningLayoutsExample \u2b58CombiningLayoutsExample \u250c\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502\u2502HorizontallyPositionedChildrenHere\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502\u2502Thispanelis\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502usinggrid\u00a0layout!\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2514\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Container, Horizontal, VerticalScroll\nfrom textual.widgets import Header, Static\nclass CombiningLayoutsExample(App):\nCSS_PATH = \"combining_layouts.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Header()\nwith Container(id=\"app-grid\"):\nwith VerticalScroll(id=\"left-pane\"):\nfor number in range(15):\nyield Static(f\"Vertical layout, child {number}\")\nwith Horizontal(id=\"top-right\"):\nyield Static(\"Horizontally\")\nyield Static(\"Positioned\")\nyield Static(\"Children\")\nyield Static(\"Here\")\nwith Container(id=\"bottom-right\"):\nyield Static(\"This\")\nyield Static(\"panel\")\nyield Static(\"is\")\nyield Static(\"using\")\nyield Static(\"grid layout!\", id=\"bottom-right-final\")\nif __name__ == \"__main__\":\napp = CombiningLayoutsExample()\napp.run()\n</code></pre> <pre><code>#app-grid {\nlayout: grid;\ngrid-size: 2;  /* two columns */\ngrid-columns: 1fr;\ngrid-rows: 1fr;\n}\n#left-pane &gt; Static {    background: $boost;\ncolor: auto;\nmargin-bottom: 1;\npadding: 1;\n}\n#left-pane {\nheight: 100%;\nrow-span: 2;\nbackground: $panel;\nborder: dodgerblue;\n}\n#top-right {\nheight: 100%;\nbackground: $panel;\nborder: mediumvioletred;\n}\n#top-right &gt; Static {\nwidth: auto;\nheight: 100%;\nmargin-right: 1;\nbackground: $boost;\n}\n#bottom-right {\nheight: 100%;\nlayout: grid;\ngrid-size: 3;\ngrid-columns: 1fr;\ngrid-rows: 1fr;\ngrid-gutter: 1;\nbackground: $panel;\nborder: greenyellow;\n}\n#bottom-right-final {\ncolumn-span: 2;\n}\n#bottom-right &gt; Static {\nheight: 100%;\nbackground: $boost;\n}\n</code></pre> <p>Textual layouts make it easy to design and build real-life applications with relatively little code.</p>"},{"location":"guide/queries/","title":"DOM Queries","text":"<p>In the previous chapter we introduced the DOM which is how Textual apps keep track of widgets. We saw how you can apply styles to the DOM with CSS selectors.</p> <p>Selectors are a very useful idea and can do more that apply styles. We can also find widgets in Python code with selectors, and make updates to widgets in a simple expressive way. Let's look at how!</p>"},{"location":"guide/queries/#query-one","title":"Query one","text":"<p>The query_one method gets a single widget in an app or other widget. If you call it with a selector it will return the first matching widget.</p> <p>Let's say we have a widget with an ID of <code>send</code> and we want to get a reference to it in our app. We could do this with the following:</p> <pre><code>send_button = self.query_one(\"#send\")\n</code></pre> <p>If there is no widget with an ID of <code>send</code>, Textual will raise a NoMatches exception. Otherwise it will return the matched widget.</p> <p>You can also add a second parameter for the expected type.</p> <pre><code>send_button = self.query_one(\"#send\", Button)\n</code></pre> <p>If the matched widget is not a button (i.e. if <code>isinstance(widget, Button)</code> equals <code>False</code>), Textual will raise a WrongType exception.</p> <p>Tip</p> <p>The second parameter allows type-checkers like MyPy to know the exact return type. Without it, MyPy would only know the result of <code>query_one</code> is a Widget (the base class).</p>"},{"location":"guide/queries/#making-queries","title":"Making queries","text":"<p>Apps and widgets have a query method which finds (or queries) widgets. This method returns a DOMQuery object which is a list-like container of widgets.</p> <p>If you call <code>query</code> with no arguments, you will get back a <code>DOMQuery</code> containing all widgets. This method is recursive, meaning it will also return child widgets (as many levels as required).</p> <p>Here's how you might iterate over all the widgets in your app:</p> <pre><code>for widget in self.query():\nprint(widget)\n</code></pre> <p>Called on the <code>app</code>, this will retrieve all widgets in the app. If you call the same method on a widget, it will return the children of that widget.</p> <p>Note</p> <p>All the query and related methods work on both App and Widget sub-classes.</p>"},{"location":"guide/queries/#query-selectors","title":"Query selectors","text":"<p>You can call <code>query</code> with a CSS selector. Let's look a few examples:</p> <p>If we want to find all the button widgets, we could do something like the following:</p> <pre><code>for button in self.query(\"Button\"):\nprint(button)\n</code></pre> <p>Any selector that works in CSS will work with the <code>query</code> method. For instance, if we want to find all the disabled buttons in a Dialog widget, we could do this:</p> <pre><code>for button in self.query(\"Dialog Button.disabled\"):\nprint(button)\n</code></pre> <p>Info</p> <p>The selector <code>Dialog Button.disabled</code> says find all the <code>Button</code> with a CSS class of <code>disabled</code> that are a child of a <code>Dialog</code> widget.</p>"},{"location":"guide/queries/#results","title":"Results","text":"<p>Query objects have a results method which is an alternative way of iterating over widgets. If you supply a type (i.e. a Widget class) then this method will generate only objects of that type.</p> <p>The following example queries for widgets with the <code>disabled</code> CSS class and iterates over just the Button objects.</p> <pre><code>for button in self.query(\".disabled\").results(Button):\nprint(button)\n</code></pre> <p>Tip</p> <p>This method allows type-checkers like MyPy to know the exact type of the object in the loop. Without it, MyPy would only know that <code>button</code> is a <code>Widget</code> (the base class).</p>"},{"location":"guide/queries/#query-objects","title":"Query objects","text":"<p>We've seen that the query method returns a DOMQuery object you can iterate over in a for loop. Query objects behave like Python lists and support all of the same operations (such as <code>query[0]</code>, <code>len(query)</code> ,<code>reverse(query)</code> etc). They also have a number of other methods to simplify retrieving and modifying widgets.</p>"},{"location":"guide/queries/#first-and-last","title":"First and last","text":"<p>The first and last methods return the first or last matching widget from the selector, respectively.</p> <p>Here's how we might find the last button in an app:</p> <pre><code>last_button = self.query(\"Button\").last()\n</code></pre> <p>If there are no buttons, Textual will raise a NoMatches exception. Otherwise it will return a button widget.</p> <p>Both <code>first()</code> and <code>last()</code> accept an <code>expect_type</code> argument that should be the class of the widget you are expecting. Let's say we want to get the last widget with class <code>.disabled</code>, and we want to check it really is a button. We could do this:</p> <pre><code>disabled_button = self.query(\".disabled\").last(Button)\n</code></pre> <p>The query selects all widgets with a <code>disabled</code> CSS class. The <code>last</code> method gets the last disabled widget and checks it is a <code>Button</code> and not any other kind of widget.</p> <p>If the last widget is not a button, Textual will raise a WrongType exception.</p> <p>Tip</p> <p>Specifying the expected type allows type-checkers like MyPy to know the exact return type.</p>"},{"location":"guide/queries/#filter","title":"Filter","text":"<p>Query objects have a filter method which further refines a query. This method will return a new query object with widgets that match both the original query and the new selector</p> <p>Let's say we have a query which gets all the buttons in an app, and we want a new query object with just the disabled buttons. We could write something like this:</p> <pre><code># Get all the Buttons\nbuttons_query = self.query(\"Button\")\n# Buttons with 'disabled' CSS class\ndisabled_buttons = buttons_query.filter(\".disabled\")\n</code></pre> <p>Iterating over <code>disabled_buttons</code> will give us all the disabled buttons.</p>"},{"location":"guide/queries/#exclude","title":"Exclude","text":"<p>Query objects have an exclude method which is the logical opposite of filter. The <code>exclude</code> method removes any widgets from the query object which match a selector.</p> <p>Here's how we could get all the buttons which don't have the <code>disabled</code> class set.</p> <pre><code># Get all the Buttons\nbuttons_query = self.query(\"Button\")\n# Remove all the Buttons with the 'disabled' CSS class\nenabled_buttons = buttons_query.exclude(\".disabled\")\n</code></pre>"},{"location":"guide/queries/#loop-free-operations","title":"Loop-free operations","text":"<p>Once you have a query object, you can loop over it to call methods on the matched widgets. Query objects also support a number of methods which make an update to every matched widget without an explicit loop.</p> <p>For instance, let's say we want to disable all buttons in an app. We could do this by calling add_class() on a query object.</p> <pre><code>self.query(\"Button\").add_class(\"disabled\")\n</code></pre> <p>This single line is equivalent to the following:</p> <pre><code>for widget in self.query(\"Button\"):\nwidget.add_class(\"disabled\")\n</code></pre> <p>Here are the other loop-free methods on query objects:</p> <ul> <li>set_class Sets a CSS class (or classes) on matched widgets.</li> <li>add_class Adds a CSS class (or classes) to matched widgets.</li> <li>remove_class Removes a CSS class (or classes) from matched widgets.</li> <li>toggle_class Sets a CSS class (or classes) if it is not set, or removes the class (or classes) if they are set on the matched widgets.</li> <li>remove Removes matched widgets from the DOM.</li> <li>refresh Refreshes matched widgets.</li> </ul>"},{"location":"guide/reactivity/","title":"Reactivity","text":"<p>Textual's reactive attributes are attributes with superpowers. In this chapter we will look at how reactive attributes can simplify your apps.</p> <p>Quote</p> <p>With great power comes great responsibility.</p> <p>\u2014 Uncle Ben</p>"},{"location":"guide/reactivity/#reactive-attributes","title":"Reactive attributes","text":"<p>Textual provides an alternative way of adding attributes to your widget or App, which doesn't require adding them to your class constructor (<code>__init__</code>). To create these attributes import reactive from <code>textual.reactive</code>, and assign them in the class scope.</p> <p>The following code illustrates how to create reactive attributes:</p> <pre><code>from textual.reactive import reactive\nfrom textual.widget import Widget\nclass Reactive(Widget):\nname = reactive(\"Paul\")  # (1)!\ncount = reactive(0) # (2)!\nis_cool = reactive(True)  # (3)!\n</code></pre> <ol> <li>Create a string attribute with a default of <code>\"Paul\"</code></li> <li>Creates an integer attribute with a default of <code>0</code>.</li> <li>Creates a boolean attribute with a default of <code>True</code>.</li> </ol> <p>The <code>reactive</code> constructor accepts a default value as the first positional argument.</p> <p>Information</p> <p>Textual uses Python's descriptor protocol to create reactive attributes, which is the same protocol used by the builtin <code>property</code> decorator.</p> <p>You can get and set these attributes in the same way as if you had assigned them in an <code>__init__</code> method. For instance <code>self.name = \"Jessica\"</code>, <code>self.count += 1</code>, or <code>print(self.is_cool)</code>.</p>"},{"location":"guide/reactivity/#dynamic-defaults","title":"Dynamic defaults","text":"<p>You can also set the default to a function (or other callable). Textual will call this function to get the default value. The following code illustrates a reactive value which will be automatically assigned the current time when the widget is created:</p> <pre><code>from time import time\nfrom textual.reactive import reactive\nfrom textual.widget import Widget\nclass Timer(Widget):\nstart_time = reactive(time)  # (1)!\n</code></pre> <ol> <li>The <code>time</code> function returns the current time in seconds.</li> </ol>"},{"location":"guide/reactivity/#typing-reactive-attributes","title":"Typing reactive attributes","text":"<p>There is no need to specify a type hint if a reactive attribute has a default value, as type checkers will assume the attribute is the same type as the default.</p> <p>You may want to add explicit type hints if the attribute type is a superset of the default type. For instance if you want to make an attribute optional. Here's how you would create a reactive string attribute which may be <code>None</code>:</p> <pre><code>    name: reactive[str | None] = reactive(\"Paul\")\n</code></pre>"},{"location":"guide/reactivity/#smart-refresh","title":"Smart refresh","text":"<p>The first superpower we will look at is \"smart refresh\". When you modify a reactive attribute, Textual will make note of the fact that it has changed and refresh automatically.</p> <p>Information</p> <p>If you modify multiple reactive attributes, Textual will only do a single refresh to minimize updates.</p> <p>Let's look at an example which illustrates this. In the following app, the value of an input is used to update a \"Hello, World!\" type greeting.</p> refresh01.pyrefresh01.cssOutput <pre><code>from textual.app import App, ComposeResult\nfrom textual.reactive import reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Input\nclass Name(Widget):\n\"\"\"Generates a greeting.\"\"\"\nwho = reactive(\"name\")\ndef render(self) -&gt; str:\nreturn f\"Hello, {self.who}!\"\nclass WatchApp(App):\nCSS_PATH = \"refresh01.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Input(placeholder=\"Enter your name\")\nyield Name()\ndef on_input_changed(self, event: Input.Changed) -&gt; None:\nself.query_one(Name).who = event.value\nif __name__ == \"__main__\":\napp = WatchApp()\napp.run()\n</code></pre> <pre><code>Input {\ndock: top;\nmargin-top: 1;\n}\nName {\nheight: 100%;\ncontent-align: center middle;\n}\n</code></pre> <p> WatchApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258aTextual\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e Hello,\u00a0Textual! </p> <p>The <code>Name</code> widget has a reactive <code>who</code> attribute. When the app modifies that attribute, a refresh happens automatically.</p> <p>Information</p> <p>Textual will check if a value has really changed, so assigning the same value wont prompt an unnecessary refresh.</p>"},{"location":"guide/reactivity/#disabling-refresh","title":"Disabling refresh","text":"<p>If you don't want an attribute to prompt a refresh or layout but you still want other reactive superpowers, you can use var to create an attribute. You can import <code>var</code> from <code>textual.reactive</code>.</p> <p>The following code illustrates how you create non-refreshing reactive attributes.</p> <pre><code>class MyWidget(Widget):\ncount = var(0)  # (1)!\n</code></pre> <ol> <li>Changing <code>self.count</code> wont cause a refresh or layout.</li> </ol>"},{"location":"guide/reactivity/#layout","title":"Layout","text":"<p>The smart refresh feature will update the content area of a widget, but will not change its size. If modifying an attribute should change the size of the widget, you can set <code>layout=True</code> on the reactive attribute. This ensures that your CSS layout will update accordingly.</p> <p>The following example modifies \"refresh01.py\" so that the greeting has an automatic width.</p> refresh02.pyrefresh02.cssOutput <pre><code>from textual.app import App, ComposeResult\nfrom textual.reactive import reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Input\nclass Name(Widget):\n\"\"\"Generates a greeting.\"\"\"\nwho = reactive(\"name\", layout=True)  # (1)!\ndef render(self) -&gt; str:\nreturn f\"Hello, {self.who}!\"\nclass WatchApp(App):\nCSS_PATH = \"refresh02.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Input(placeholder=\"Enter your name\")\nyield Name()\ndef on_input_changed(self, event: Input.Changed) -&gt; None:\nself.query_one(Name).who = event.value\nif __name__ == \"__main__\":\napp = WatchApp()\napp.run()\n</code></pre> <ol> <li>This attribute will update the layout when changed.</li> </ol> <pre><code>Input {\ndock: top;\nmargin-top: 1;\n}\nName {\nwidth: auto;\nheight: auto;\nborder: heavy $secondary;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3272924389-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3272924389-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3272924389-r1 { fill: #e1e1e1 } .terminal-3272924389-r2 { fill: #c5c8c6 } .terminal-3272924389-r3 { fill: #1e1e1e } .terminal-3272924389-r4 { fill: #0178d4 } .terminal-3272924389-r5 { fill: #e2e2e2 } .terminal-3272924389-r6 { fill: #fea62b }      WatchApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258aname\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Hello,\u00a0name!\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b </p> <p>If you type in to the input now, the greeting will expand to fit the content. If you were to set <code>layout=False</code> on the reactive attribute, you should see that the box remains the same size when you type.</p>"},{"location":"guide/reactivity/#validation","title":"Validation","text":"<p>The next superpower we will look at is validation, which can check and potentially modify a value you assign to a reactive attribute.</p> <p>If you add a method that begins with <code>validate_</code> followed by the name of your attribute, it will be called when you assign a value to that attribute. This method should accept the incoming value as a positional argument, and return the value to set (which may be the same or a different value).</p> <p>A common use for this is to restrict numbers to a given range. The following example keeps a count. There is a button to increase the count, and a button to decrease it. The validation ensures that the count will never go above 10 or below zero.</p> validate01.pyvalidate01.cssOutput <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Horizontal\nfrom textual.reactive import reactive\nfrom textual.widgets import Button, TextLog\nclass ValidateApp(App):\nCSS_PATH = \"validate01.css\"\ncount = reactive(0)\ndef validate_count(self, count: int) -&gt; int:\n\"\"\"Validate value.\"\"\"\nif count &lt; 0:\ncount = 0\nelif count &gt; 10:\ncount = 10\nreturn count\ndef compose(self) -&gt; ComposeResult:\nyield Horizontal(\nButton(\"+1\", id=\"plus\", variant=\"success\"),\nButton(\"-1\", id=\"minus\", variant=\"error\"),\nid=\"buttons\",\n)\nyield TextLog(highlight=True)\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\nif event.button.id == \"plus\":\nself.count += 1\nelse:\nself.count -= 1\nself.query_one(TextLog).write(f\"{self.count=}\")\nif __name__ == \"__main__\":\napp = ValidateApp()\napp.run()\n</code></pre> <pre><code>#buttons {\ndock: top;\nheight: auto;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-4189167166-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-4189167166-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-4189167166-r1 { fill: #7ae998 } .terminal-4189167166-r2 { fill: #e76580 } .terminal-4189167166-r3 { fill: #c5c8c6 } .terminal-4189167166-r4 { fill: #0a180e;font-weight: bold } .terminal-4189167166-r5 { fill: #f5e5e9;font-weight: bold } .terminal-4189167166-r6 { fill: #008139 } .terminal-4189167166-r7 { fill: #780028 } .terminal-4189167166-r8 { fill: #e1e1e1 }      ValidateApp \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 +1-1 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p> <p>If you click the buttons in the above example it will show the current count. When <code>self.count</code> is modified in the button handler, Textual runs <code>validate_count</code> which performs the validation to limit the value of count.</p>"},{"location":"guide/reactivity/#watch-methods","title":"Watch methods","text":"<p>Watch methods are another superpower. Textual will call watch methods when reactive attributes are modified. Watch method names begin with <code>watch_</code> followed by the name of the attribute, and should accept one or two arguments. If the method accepts a single argument, it will be called with the new assigned value. If the method accepts two positional arguments, it will be called with both the old value and the new value.</p> <p>The following app will display any color you type in to the input. Try it with a valid color in Textual CSS. For example <code>\"darkorchid\"</code> or <code>\"#52de44\"</code>.</p> watch01.pywatch01.cssOutput <pre><code>from textual.app import App, ComposeResult\nfrom textual.color import Color, ColorParseError\nfrom textual.containers import Grid\nfrom textual.reactive import reactive\nfrom textual.widgets import Input, Static\nclass WatchApp(App):\nCSS_PATH = \"watch01.css\"\ncolor = reactive(Color.parse(\"transparent\"))  # (1)!\ndef compose(self) -&gt; ComposeResult:\nyield Input(placeholder=\"Enter a color\")\nyield Grid(Static(id=\"old\"), Static(id=\"new\"), id=\"colors\")\ndef watch_color(self, old_color: Color, new_color: Color) -&gt; None:  # (2)!\nself.query_one(\"#old\").styles.background = old_color\nself.query_one(\"#new\").styles.background = new_color\ndef on_input_submitted(self, event: Input.Submitted) -&gt; None:\ntry:\ninput_color = Color.parse(event.value)\nexcept ColorParseError:\npass\nelse:\nself.query_one(Input).value = \"\"\nself.color = input_color  # (3)!\nif __name__ == \"__main__\":\napp = WatchApp()\napp.run()\n</code></pre> <ol> <li>Creates a reactive color attribute.</li> <li>Called when <code>self.color</code> is changed.</li> <li>New color is assigned here.</li> </ol> <pre><code>Input {\ndock: top;\nmargin-top: 1;\n}\n#colors {\ngrid-size: 2 1;\ngrid-gutter: 2 4;\ngrid-columns: 1fr;\nmargin: 0 1;\n}\n#old {\nheight: 100%;\nborder: wide $secondary;\n}\n#new {        height: 100%;\nborder: wide $secondary;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1635841605-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1635841605-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1635841605-r1 { fill: #e1e1e1 } .terminal-1635841605-r2 { fill: #c5c8c6 } .terminal-1635841605-r3 { fill: #1e1e1e } .terminal-1635841605-r4 { fill: #0178d4 } .terminal-1635841605-r5 { fill: #e2e2e2 } .terminal-1635841605-r6 { fill: #fea62b }      WatchApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258adarkorchid\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u258e\u258b\u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 </p> <p>The color is parsed in <code>on_input_submitted</code> and assigned to <code>self.color</code>. Because <code>color</code> is reactive, Textual also calls <code>watch_color</code> with the old and new values.</p>"},{"location":"guide/reactivity/#when-are-watch-methods-called","title":"When are watch methods called?","text":"<p>Textual only calls watch methods if the value of a reactive attribute changes. If the newly assigned value is the same as the previous value, the watch method is not called. You can override this behaviour by passing <code>always_update=True</code> to <code>reactive</code>.</p>"},{"location":"guide/reactivity/#compute-methods","title":"Compute methods","text":"<p>Compute methods are the final superpower offered by the <code>reactive</code> descriptor. Textual runs compute methods to calculate the value of a reactive attribute. Compute methods begin with <code>compute_</code> followed by the name of the reactive value.</p> <p>You could be forgiven in thinking this sounds a lot like Python's property decorator. The difference is that Textual will cache the value of compute methods, and update them when any other reactive attribute changes.</p> <p>The following example uses a computed attribute. It displays three inputs for each color component (red, green, and blue). If you enter numbers in to these inputs, the background color of another widget changes.</p> computed01.pycomputed01.cssOutput <pre><code>from textual.app import App, ComposeResult\nfrom textual.color import Color\nfrom textual.containers import Horizontal\nfrom textual.reactive import reactive\nfrom textual.widgets import Input, Static\nclass ComputedApp(App):\nCSS_PATH = \"computed01.css\"\nred = reactive(0)\ngreen = reactive(0)\nblue = reactive(0)\ncolor = reactive(Color.parse(\"transparent\"))\ndef compose(self) -&gt; ComposeResult:\nyield Horizontal(\nInput(\"0\", placeholder=\"Enter red 0-255\", id=\"red\"),\nInput(\"0\", placeholder=\"Enter green 0-255\", id=\"green\"),\nInput(\"0\", placeholder=\"Enter blue 0-255\", id=\"blue\"),\nid=\"color-inputs\",\n)\nyield Static(id=\"color\")\ndef compute_color(self) -&gt; Color:  # (1)!\nreturn Color(self.red, self.green, self.blue).clamped\ndef watch_color(self, color: Color) -&gt; None:  # (2)\nself.query_one(\"#color\").styles.background = color\ndef on_input_changed(self, event: Input.Changed) -&gt; None:\ntry:\ncomponent = int(event.value)\nexcept ValueError:\nself.bell()\nelse:\nif event.input.id == \"red\":\nself.red = component\nelif event.input.id == \"green\":\nself.green = component\nelse:\nself.blue = component\nif __name__ == \"__main__\":\napp = ComputedApp()\napp.run()\n</code></pre> <ol> <li>Combines color components in to a Color object.</li> <li>The watch method is called when the result of <code>compute_color</code> changes.</li> </ol> <pre><code>#color-inputs {\ndock: top;\nheight: auto;\n}\nInput {\nwidth: 1fr;\n}\n#color {\nheight: 100%;\nborder: tall $secondary;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3548459532-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3548459532-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3548459532-r1 { fill: #1e1e1e } .terminal-3548459532-r2 { fill: #121212 } .terminal-3548459532-r3 { fill: #c5c8c6 } .terminal-3548459532-r4 { fill: #e2e2e2 } .terminal-3548459532-r5 { fill: #fea62b } .terminal-3548459532-r6 { fill: #dddddd }      ComputedApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a0\u258e\u258a0\u258e\u258a0\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p> <p>Note the <code>compute_color</code> method which combines the color components into a Color object. It will be recalculated when any of the <code>red</code> , <code>green</code>, or <code>blue</code> attributes are modified.</p> <p>When the result of <code>compute_color</code> changes, Textual will also call <code>watch_color</code> since <code>color</code> still has the watch method superpower.</p> <p>Note</p> <p>Textual will first attempt to call the compute method for a reactive attribute, followed by the validate method, and finally the watch method.</p> <p>Note</p> <p>It is best to avoid doing anything slow or CPU-intensive in a compute method. Textual calls compute methods on an object when any reactive attribute changes.</p>"},{"location":"guide/screens/","title":"Screens","text":"<p>This chapter covers Textual's screen API. We will discuss how to create screens and switch between them.</p>"},{"location":"guide/screens/#what-is-a-screen","title":"What is a screen?","text":"<p>Screens are containers for widgets that occupy the dimensions of your terminal. There can be many screens in a given app, but only one screen is visible at a time.</p> <p>Textual requires that there be at least one screen object and will create one implicitly in the App class. If you don't change the screen, any widgets you mount or compose will be added to this default screen.</p> <p>Tip</p> <p>Try printing <code>widget.parent</code> to see what object your widget is connected to.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nM1Ya0/jOFx1MDAxNP3Or6i6X3YlXGKOY8fxSKtcdTAwMTXPpSywo1x1MDAwMVxyj9VcYrmJaT3Na1x1MDAxMpfHIP77XqdMXHUwMDFlbVxiZVx1MDAxN0ZEUZv4OtfX1+fc4+R+pdfr67tU9j/0+vLWXHUwMDE3oVxuMnHTXzXt1zLLVVx1MDAxMoNcdFx1MDAxN/d5Ms38oudY6zT/sL5cdTAwMWWJbFwidVx1MDAxYVxuX1rXKp+KMNfTQCWWn0TrSsso/8P8XHUwMDFliUj+niZRoDOrXHUwMDFhZE1cdTAwMDZKJ9lsLFx1MDAxOcpIxjpcdTAwMDfv/8B9r3df/NaiXHUwMDBilIiSOCi6XHUwMDE3hlp4njvfepTERaiUIVx1MDAwN3PqkbKDyrdhMC1cdTAwMDOwXkHAsrKYpn56sbN1pD45eiNcdTAwMWKyfNP5Nvy6d1WNeqXC8FjfhbM8XGJ/PM1kZc11lkzkqVxu9Fx1MDAxOOz2XFx7+VxcnkBcbqqnsmQ6XHUwMDFhxzLPXHUwMDFizySp8JW+M21cYpWtXCJcdTAwMWVcdTAwMTU+qpZbk1x1MDAwMeJamHmO5zpcdTAwMGV1XHUwMDEwqc23cECY5VLsXHUwMDEwh9G5mLaSXHUwMDEw1lx1MDAwMGL6XHUwMDA1XHUwMDE1R1x1MDAxNdVQ+JNcdTAwMTGEXHUwMDE2XHUwMDA3VVx1MDAxZlx1MDAwZvvcrs335sdMa1x1MDAwM46lXHUwMDFhjbVpxNjyXHUwMDEwcT1GZ75r+ZBF/m3P5pRcdTAwMTKMcWkxI6aDoFx1MDAwMMKX+fyNRZY+5qmfm5tatCbQnXlcdTAwMTTVkVRbY+dcIkv5vlx1MDAxYVxmvk7GfyX88CxcdTAwMWRcdTAwMGZcdTAwMGVLX1xy2Gl5q/ul4WG1y+2Ze1x1MDAxMm1cdTAwMGUv7evp9v6BPls7+8jRfrtbkWXJzfN+XHUwMDFiUawuO5HK7eNVlchpXHUwMDFhiFx1MDAxOfZt10XE5sjjXHUwMDBl4aU9VPFcdTAwMDSM8TRcZqu2xJ9UdFmpxbtA0kacdYba5CmG2thQXHUwMDE0XHUwMDEw4i1N0e7le69cdTAwMTSldidFObeAXG6GLP+HoTpcdTAwMTNxnopcZljQwlLWxlK+wErmeraDXFxcdTAwMWK9Piu7kMihOr1cdTAwMDSJ1YInsT5W31x1MDAwYjS5XHUwMDE2hWKEsIsw41x1MDAxY1HW6LUrXCJcdTAwMTXeNdawgCxEvnMrojSUXHUwMDFiafrrb/VcdTAwMTTnXHUwMDEyXCIpXFyTxjNcdTAwMWKhXHUwMDFhXHUwMDE5aPd9mJvMXHUwMDFhqNdcbkSu7Fx1MDAxMKkgXGJrXGL0IVx1MDAxMFx1MDAwMT6zwTKCk2RqpGJcdTAwMTGetMXZScZM+nqGxVx1MDAxNkZS+qRmYlx1MDAwNCDkUJXdpVx1MDAxOXn+PdGXXyfDk+PRwblzQsefkvPLd89IXHUwMDE3W8hlhHheXHUwMDFiI1x1MDAxZNuxXHUwMDEwI9h+U0pSukhJj0GlmFx1MDAxM+tHalx1MDAwMqRcdTAwMTHFXHUwMDFlcV+fml3KXHUwMDE27MfnQ0rOXHUwMDBmtlx1MDAwMrw33tldu9zDn9+jYM78nu5/vr45INuHXHUwMDA3XHUwMDE5XHL+vMNTTLbdV/CLT4PB3u7EP/Q2iH1cdTAwMTKFf+/EXHUwMDE3ozdcdTAwMTX49sS/QOCZkVZe7a/eSOBcdPXmW3+UXHUwMDEzwinUYUKX34J3o+3dVlx1MDAxM9ZZTVxisZhdaNzbXHUwMDE1XHUwMDEz0lJMsDNfREBcdTAwMWFhXHUwMDE3wp2fKu8vx2GbvGPUaO2Q82M/kzJ+SspZo/+rSfkzMjgv5WWMnZSbVZJcdTAwMTbOMfxcdTAwMTTlQCZAv+FcXF7Bu0vxO+Wc43BcdTAwMGJe7lx1MDAxMXNaOYdcdTAwMTm1XFzOjYJcdTAwMTNujjdjXHUwMDFlslxid5vkLlx06Fx1MDAxMIsz7FJcdTAwMTcvyLlcdTAwMDebXuDGf9loXHUwMDE3wf1sJuZaZHpTxYGKR2CslFxm2OhPzbhryEKO7VLCoVx1MDAxNlKOXHTyylmb6YnU7D0tXHUwMDAyckBcdTAwMWPYg1x1MDAxYYxWr5+98kNQ19b4sXMpqX1cdTAwMTlcdTAwMDfPXHUwMDA2hThUX8Tg1Vx1MDAwME7KmLdcdTAwMTBcdTAwMTW24LWh2HVcdTAwMTXfKmyHPVx1MDAxNVY7zVx1MDAxN8JcbkWut5IoUlx1MDAxYdL/MVGxnk9zkc9ccsPvsVx1MDAxNMG8XHUwMDE1plW3zVx1MDAxN4LUeGzu3KqrXsWU4qa8/rLa2nttXHUwMDExweaoYbfysFL/NzuQwmdfpOmxXHUwMDA2pJVrXHUwMDAwYFbBY+GuJta/VvJms+Xb0lVxmDRcdTAwMTYpNCVHmundP6w8/Fx1MDAwYlxiYlx1MDAxObwifQ== ExampleApp()Screen()"},{"location":"guide/screens/#creating-a-screen","title":"Creating a screen","text":"<p>You can create a screen by extending the Screen class which you can import from <code>textual.screen</code>. The screen may be styled in the same way as other widgets, with the exception that you can't modify the screen's dimensions (as these will always be the size of your terminal).</p> <p>Let's look at a simple example of writing a screen class to simulate Window's blue screen of death.</p> screen01.pyscreen01.cssOutput screen01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.screen import Screen\nfrom textual.widgets import Static\nERROR_TEXT = \"\"\"\nAn error has occurred. To continue:\nPress Enter to return to Windows, or\nPress CTRL+ALT+DEL to restart your computer. If you do this,\nyou will lose any unsaved information in all open applications.\nError: 0E : 016F : BFF9B3D4\n\"\"\"\nclass BSOD(Screen):\nBINDINGS = [(\"escape\", \"app.pop_screen\", \"Pop screen\")]\ndef compose(self) -&gt; ComposeResult:\nyield Static(\" Windows \", id=\"title\")\nyield Static(ERROR_TEXT)\nyield Static(\"Press any key to continue [blink]_[/]\", id=\"any-key\")\nclass BSODApp(App):\nCSS_PATH = \"screen01.css\"\nSCREENS = {\"bsod\": BSOD()}\nBINDINGS = [(\"b\", \"push_screen('bsod')\", \"BSOD\")]\nif __name__ == \"__main__\":\napp = BSODApp()\napp.run()\n</code></pre> screen01.css<pre><code>BSOD {\nalign: center middle;\nbackground: blue;\ncolor: white;\n}\nBSOD&gt;Static {\nwidth: 70;    }\n#title {\ncontent-align-horizontal: center;\ntext-style: reverse;\n}\n#any-key {\ncontent-align-horizontal: center;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2342142420-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2342142420-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2342142420-r1 { fill: #ffffff } .terminal-2342142420-r2 { fill: #c5c8c6 } .terminal-2342142420-r3 { fill: #0000ff }      BSODApp \u00a0Windows\u00a0 An\u00a0error\u00a0has\u00a0occurred.\u00a0To\u00a0continue: Press\u00a0Enter\u00a0to\u00a0return\u00a0to\u00a0Windows,\u00a0or Press\u00a0CTRL+ALT+DEL\u00a0to\u00a0restart\u00a0your\u00a0computer.\u00a0If\u00a0you\u00a0do\u00a0this, you\u00a0will\u00a0lose\u00a0any\u00a0unsaved\u00a0information\u00a0in\u00a0all\u00a0open\u00a0applications. Error:\u00a00E\u00a0:\u00a0016F\u00a0:\u00a0BFF9B3D4 Press\u00a0any\u00a0key\u00a0to\u00a0continue\u00a0_ </p> <p>If you run this you will see an empty screen. Hit the B key to show a blue screen of death. Hit Esc to return to the default screen.</p> <p>The <code>BSOD</code> class above defines a screen with a key binding and compose method. These should be familiar as they work in the same way as apps.</p> <p>The app class has a new <code>SCREENS</code> class variable. Textual uses this class variable to associate a name with screen object (the name is used to reference screens in the screen API). Also in the app is a key binding associated with the action <code>\"push_screen('bsod')\"</code>. The screen class has a similar action <code>\"pop_screen\"</code> bound to the Esc key. We will cover these actions below.</p>"},{"location":"guide/screens/#named-screens","title":"Named screens","text":"<p>You can associate a screen with a name by defining a <code>SCREENS</code> class variable in your app, which should be a <code>dict</code> that maps names on to <code>Screen</code> objects. The name of the screen may be used interchangeably with screen objects in much of the screen API.</p> <p>You can also install new named screens dynamically with the install_screen method. The following example installs the <code>BSOD</code> screen in a mount handler rather than from the <code>SCREENS</code> variable.</p> screen02.pyscreen02.cssOutput screen02.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.screen import Screen\nfrom textual.widgets import Static\nERROR_TEXT = \"\"\"\nAn error has occurred. To continue:\nPress Enter to return to Windows, or\nPress CTRL+ALT+DEL to restart your computer. If you do this,\nyou will lose any unsaved information in all open applications.\nError: 0E : 016F : BFF9B3D4\n\"\"\"\nclass BSOD(Screen):\nBINDINGS = [(\"escape\", \"app.pop_screen\", \"Pop screen\")]\ndef compose(self) -&gt; ComposeResult:\nyield Static(\" Windows \", id=\"title\")\nyield Static(ERROR_TEXT)\nyield Static(\"Press any key to continue [blink]_[/]\", id=\"any-key\")\nclass BSODApp(App):\nCSS_PATH = \"screen02.css\"\nBINDINGS = [(\"b\", \"push_screen('bsod')\", \"BSOD\")]\ndef on_mount(self) -&gt; None:\nself.install_screen(BSOD(), name=\"bsod\")\nif __name__ == \"__main__\":\napp = BSODApp()\napp.run()\n</code></pre> screen02.css<pre><code>BSOD {\nalign: center middle;\nbackground: blue;\ncolor: white;\n}\nBSOD&gt;Static {\nwidth: 70;    }\n#title {\ncontent-align-horizontal: center;\ntext-style: reverse;\n}\n#any-key {\ncontent-align-horizontal: center;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2342142420-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2342142420-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2342142420-r1 { fill: #ffffff } .terminal-2342142420-r2 { fill: #c5c8c6 } .terminal-2342142420-r3 { fill: #0000ff }      BSODApp \u00a0Windows\u00a0 An\u00a0error\u00a0has\u00a0occurred.\u00a0To\u00a0continue: Press\u00a0Enter\u00a0to\u00a0return\u00a0to\u00a0Windows,\u00a0or Press\u00a0CTRL+ALT+DEL\u00a0to\u00a0restart\u00a0your\u00a0computer.\u00a0If\u00a0you\u00a0do\u00a0this, you\u00a0will\u00a0lose\u00a0any\u00a0unsaved\u00a0information\u00a0in\u00a0all\u00a0open\u00a0applications. Error:\u00a00E\u00a0:\u00a0016F\u00a0:\u00a0BFF9B3D4 Press\u00a0any\u00a0key\u00a0to\u00a0continue\u00a0_ </p> <p>Although both do the same thing, we recommend <code>SCREENS</code> for screens that exist for the lifetime of your app.</p>"},{"location":"guide/screens/#uninstalling-screens","title":"Uninstalling screens","text":"<p>Screens defined in <code>SCREENS</code> or added with install_screen are installed screens. Textual will keep these screens in memory for the lifetime of your app.</p> <p>If you have installed a screen, but you later want it to be removed and cleaned up, you can call uninstall_screen.</p>"},{"location":"guide/screens/#screen-stack","title":"Screen stack","text":"<p>Textual keeps track of a stack of screens. You can think of the screen stack as a stack of paper, where only the very top sheet is visible. If you remove the top sheet the paper underneath becomes visible. Screens work in a similar way.</p> <p>The active screen (top of the stack) will render the screen and receive input events. The following API methods on the App class can manipulate this stack, and let you decide which screen the user can interact with.</p>"},{"location":"guide/screens/#push-screen","title":"Push screen","text":"<p>The push_screen method puts a screen on top of the stack and makes that screen active. You can call this method with the name of an installed screen, or a screen object.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nOVcXG1z2khcdTAwMTL+nl/h8n3Zq1xu2nnr6Zmturpcbk5cdTAwMWN7XHUwMDEzx/Fb/HK35ZJBgNaAMFx1MDAxMrbxVv779chcdTAwMGVcdTAwMTIvXCJgMEtyVGyMRkitmaeffrpnJn+92tjYTPqdYPO3jc3gvuI3w2rXv9t87Y7fXHUwMDA23TiM2tQk0s9x1OtW0jNcdTAwMWJJ0ol/+/XXlt+9XHUwMDBlkk7Tr1x1MDAwNN5tXHUwMDE49/xmnPSqYeRVotavYVx1MDAxMrTif7vfn/xW8K9O1KomXS+7SSmohknUfbxX0FxmWkE7ienq/6HPXHUwMDFiXHUwMDFif6W/c9ZVQ79cdTAwMTW1q+npaUPOPLSjRz9F7dRUY5hgWqFcdTAwMWGcXHUwMDEwxm/pZklQpdZcdTAwMWFcdTAwMTlcdTAwMWNkLe7QJjQv9MPZWalafuj/WTqqmebJXHUwMDE3nt21XHUwMDE2NptHSb+Z2lx1MDAxNEf0KFlbnHSj6+A0rCZccmrlI8eLvtWNevVGO4jjoe9EXHUwMDFkv1x1MDAxMiZ9d4yxwVG/XU+vkVx1MDAxZLmnT4prjzFccmgtN1x1MDAwMCx7WPd9oYzHuFVWgFx1MDAxMlpxgSOGbUVNXHUwMDFhXHUwMDA2MuxcdTAwMWYsfWWmXfmV6zrZ165m53Dw/aua1tlZd09cdTAwMGasLHjKKIkwaGpcdTAwMDRhvZE4I4z2XGZyZvOtcZCOXHUwMDAyV1ZbhsCzXHUwMDE2d9PObjWFw1x1MDAxZqP92PC7naf+2ozdh5zBztZ3o1jK4yk30sFu9fz86Fg97Fx1MDAxZVx1MDAxZX5IToKqvdy6XHUwMDFmXFxrXGJ8frdcdTAwMWLdbVx1MDAwZVq+Pv2VmdbrVP1HTHGtlWVcdTAwMTJcZkeW9XQzbF9TY7vXbGbHosp1XHUwMDA2w/To19dzg19cdFVcdTAwMDR+Qo7Qmis5O/rvoHFwvV+PXHUwMDBmPnROXHK7XHUwMDEwd1dvP/TWXHUwMDFj/YJ5wjKu6FGNNiiH4c9Re1xujVx1MDAwNcGNsoh8MfjX/CvGYIng18BcdTAwMDRYo/lqwVx1MDAxZuvz8Kh8X98qb5v7crdzqe3t4VLAb1xmXHUwMDFhLkGwZYE/XHTuk0nIXHUwMDA3XHKFyDdGXHUwMDEx+Fx0XHUwMDBmMyNfto9iXHUwMDFktMzno3q3vHuO8mRfrDnvXHUwMDFiXHSe0VJoXHUwMDAzipxcdTAwMWPsXHUwMDEw8ClcdTAwMTB4TCgujaBcdTAwMWZccrBcdTAwMTDu0Vx1MDAwMquJcdxzZsZcdTAwMDGPfFxm5lx1MDAxNH6YlIrJn4fjhbZKSJhcdTAwMDPmXHUwMDE5mqJ2clx1MDAxND5cdTAwMDQpOVxmXHUwMDFk3fZbYbM/XHUwMDA0iVx1MDAxNP9k4FGlXHUwMDFiXHUwMDA07Vxy/t/2L42wWlxy2v/MXHUwMDBmWVx1MDAxY9D93Vx1MDAwNfXwN980w7rzls1mUFx1MDAxYnajJCQpNmhOolxcXHUwMDFmV8hcdTAwMTKfLtfdrY4+UdRccuth229cdTAwMWVcdTAwMTdb9Sxv1kZcdTAwMTR7M1xigUTgXHUwMDE5/L/nzVx1MDAxNyfbd35n//D+Zlx1MDAwN45bV+clXHUwMDE5Xa+5Nyu0XHUwMDFlSoZWUawg+squ4r5P4cVcdTAwMTDgkFx0ozSSWHpcdTAwMTFvXHUwMDE2MiPMgTfnjj15s2aS5FxymiyU/uAxy1x0Nupblj3pipxZbPxCiVN41VxmJjuzgKFvrsiZ81ZNdebHbp7gzVxc5eLCqDtTTFKkj0Xm8N9z5+kjP4c7i1Fsvpg7g9RcdTAwMWVcdTAwMThtKTZLhZSaXHKrUqU8y8iVXHUwMDA1Q2lAczli2HL8XHUwMDE50JOcXiR/XHUwMDE13Vx1MDAwYsxcdTAwMDT3RuY5cVxmkqhF0082bt9it6A2inXyXHUwMDE5+Vlq51x1MDAxNHf/nkPOk0Hl7PC7STlsV8N2nVx1MDAxYTMm+VZm2J0hRqQuXFzpOSuZp4FzSYNI6Vx1MDAwNVx09ixRdV3hd5zN0mOGRFx1MDAwZadMg34o6Xo64+vAqqBd/b5N0/OvIZtcdTAwMTgpXFxOXHRccpL2s1xcXHQ7Zlx1MDAxNNmkZZrzcCYkmT5mU9OPk62o1VxuXHUwMDEz6vrPUdhORrs47cs3zs1cdTAwMWKBP8ZcdTAwMWb0TPm2UT7ouCtcdTAwMGXTevbXRuYw6YfB33+8nnh2MZbda1xmxdnlXuXf52Yyul0hkZGsZsRcdTAwMDSQucz3iGy6XHUwMDFlXUtcIjPUtYpcdTAwMGLrKkdEMyp72DTLkOhRzoeugEN5iFUjdi2HxzR6hmv6p4GowfKMTFx1MDAwNzRmXGJcdTAwMDCaXHUwMDEyaVdH4qBzicZcdTAwMTONSUtcdTAwMDJcdTAwMTJgxSSGXCLPqMsnselp61x1MDAxMGFI5ViCXHUwMDEzYl1HWZM76YnEhCdcdTAwMTEoWilwWog/l8Sml1BzNpXIKGlpXFy4pZtcdTAwMDGiVuNGecagdIqBMkgk++GHZrFSIZTT1jFcdTAwMTTPSWNTXG6F0rDRo1x1MDAwM1wi05K7bFx1MDAxNmZPsPzfXHUwMDBm3vfffLx4+yG86PcvL9tcdTAwMGbNXHUwMDAztt5cdFx1MDAxNiFcdTAwMWY8XHUwMDA1oDSjIE3cnYmhtE5cdTAwMGXCQ8s1UlJPRJZcdTAwMTNsa1ImJ7BokCBeoExeXFzLI6fjdq5cIsdz8Vx0qjBjUOT3zpjZq3kx6NPLclx1MDAxZuO9m/2y6uzU7vq4t/bwtJ6SXHUwMDAyXFzh0lx1MDAwMojhQMuN8Fx1MDAxOKN2XHUwMDEyQYyyXG47qlx1MDAwMP7eOjblXGJcdTAwMDBMw1x1MDAwYpSxp1TgrFwiPWJXXHUwMDAwTi1kXHUwMDExOEFKrTnD2UXgVrVcdTAwMWQlW5c7+zbeerhcdTAwMGXOeVJcdTAwMGab61x1MDAwZU4hPFLXRlJ4XHUwMDAyru1wdaqktYdcdTAwMTTTSGExJPDgYjLQiIrlwVx1MDAxMqkzzcCZYSueYTRBsNP7+PDQvLrQlzWZhLJ/wXJCaCz/XHUwMDE4tHx9Pe26+/H+obi77iad29Ln2t71l/v34tNcdTAwMTKuW8Wbm+B3/Vx0opCfRNt7N3uldydLuO5N+fN+VZ2etu7Ptt9WoFx1MDAwYu/fXHUwMDA0/WVV4Y1GsHJZXHUwMDFjUFSelpJcdTAwMTdcdTAwMTFcdTAwMDBSVkHaWsqZXHTg0n93/mf/rnZcdTAwMTi/3T/dub1Oro72dtY7XHUwMDBipDOMR1x1MDAxOZ5kLolcdTAwMTJsZJa1RKmFJ4hcYkmju0lYu2BcIkhZ01UwQTxBbrZ74PpqzOGVm/cmmbdSqYRcYozPXHUwMDE1jbJcdTAwMTHPSsiUT3NDbKtJoXKj7dA5g4JyhrVvXHUwMDA1Zb/T8Tq9uHFcdTAwMTmnNdxfXHUwMDFl3+TksnKupL+KsnKhbVNdsbAkI6coRZe1XHUwMDAym10oTqe8Zbhi1Y9cdTAwMWLBsoOx9ijUSlxutIYh48PB2IBcdTAwMDecXHUwMDE5amTkhsYsNvFb5IncXHUwMDEzzsW04kZxd5dcdI7JuSRSsKBpRCwl72JsJom7iVx1MDAwMiZI187vqc8vy5BuJLvnWaCQs2Omssx0ibeRL8tYo5hQSlCqRfwhclXNp1xuXGJ4Wlxu5UaUXHUwMDEz/VEnPp1QUJVcdTAwMTl+ilx1MDAxZqg0UoyotHVcZkvZ9V7l3+emXHUwMDEzZVxuQztHkETtYlx1MDAwZXE/XeusKaFcdTAwMDBcdTAwMDePUkpcdEaCXCKVn027pISiSFkjXG5cdTAwMDDNgVx1MDAxOGexuapcIkJcdTAwMTFcdTAwMWVQnm+UIHfgUptcdFx1MDAxYZ9z7qFby6WsK7vz3ErHgdJHXHUwMDFhM3jWcqpF+IS6jWfG/I18UlwiQrGCuVVBjjGktpg765FQKHhcYkB3krbaMGV/UkIpRJR7jWNpWXxC2UAhnyhcdTAwMDZMXG4+R6F1eq63pnxcIjR6qJTRmlx1MDAxMiPQw3RcIoT1pFx1MDAxNVppXHUwMDFhXHUwMDE4o5larJJVLFAsY5xuT9lcbpOcTZj6pifxSEXRXHUwMDE1LKUsbv52lE9QXHUwMDExMii1y1x1MDAxYVZCJ0ipy0vOXHUwMDFhzSFPSJxJKy2iXHUwMDA2olxuXHUwMDFh1DE6sVx1MDAxZadcdTAwMGUkkyl40Kjit6nXn41OXG5cdTAwMDGVNo5BaU46mbbEu3ihK7FcdTAwMWKSaJqjMv7pTInTqFxcOjg9tlx1MDAwZqdYPWbnX2prXnwkXHTmKTBGK0U9j7lcdTAwMTn5lE8096hcdTAwMDeMJFVohFx1MDAxNHKx0sNLbHBAXHUwMDEy+EOZ2ErKj0dcdTAwMTf7b5p7R8FJr1x1MDAwM+XD6qfT3avP0bLKbujkRcbcL1h6l4XhVEmwXHUwMDFhQc++kKxxU2p3XHUwMDBmto7fn15Hl5dxq9xTbz+sO/qBMlx1MDAxZlx1MDAwNsg5PaxQo/tcdTAwMWIs86RbdUSpXHUwMDEx0zQq6zUvxLlgXHUwMDE0RC0+I4IuMDGElph4XHUwMDFlQf5cXHSiLlxctmyF0qTF5+Dmz7+fd9iX3bPem/P6Wb9S7d10+s8qRq1cdTAwMTSdgjRcdTAwMDJ1ttRcdTAwMWElz3XH41x1MDAwNZRcdTAwMDdcXKBcdTAwMTKkXHUwMDExXHUwMDAw0C6WOy59Yki4WXVjV7wrYYF5oe9cdTAwMTKzJI3CzNKIuWg+RPDiJMcyRVx1MDAwMlxi7ezbzirJznZ8dVx1MDAxYpr7sniItpvxzVFcdTAwMTfWPckxaDw3XHUwMDExQsLEas1gWJWUXHUwMDA0+Vx1MDAwNaBUaaqthF5s31lcdTAwMTHy81x1MDAxYlCmrNjnXGYkokSxYqSrOHp7v7d3wpPjg6D8caeCeLK/XHUwMDE0pFPmzjVH8ayqy1wiS/blWi7Zl1x1MDAwYi/ZXHUwMDA3LC6DOpaXgs1cdTAwMTHKplx1MDAwZvx6TnFazTyBXHUwMDAyJMFcbpRcdTAwMWTZRq09bi0pXHUwMDE5Zlx1MDAwNXk7vkwgk5LuopVA6TJcdTAwMWGYtFx1MDAxZMcqz1xiSomsUW5cdTAwMTNcdTAwMGVcdTAwMWL3dVx1MDAwMaBcZua3XHUwMDFmr2Kp69xxJ2fHTEWL6UFiI1+0oFx1MDAwNF1cdTAwMGLLSSy7moTiuZNcdTAwMDZLXVx1MDAwNWjDnO3I3L7EpzN+tqJFqVx1MDAxMFHuNYal7HKv8u9zq1x1MDAwM1moio3klKHjXHUwMDFje/mOXHUwMDBm3vdKeHi6/eXjx/pd/fL0T41FS01cdTAwMWJ+pdHrXHUwMDA266CL0Vx1MDAxNYRAWMNcdTAwMTQoPZK1XHUwMDAxqWYrgCSElJbU68uIg9zE1jRtXHUwMDAwlMhz58Gr1Vx1MDAwNrUusWjnXGaO3zW2XHUwMDBmv1x1MDAxY4ja4bugM5s2eD3tui9a9rDWTZCtTHM8bqldXHUwMDA3nfFkyfO0XHUwMDA1isL/ocWme+D4XHUwMDFjM6zTcTNcdTAwMTdcdTAwMWasUFxcaItcdTAwMWVBR9Cjulx1MDAxZPt2ZFx1MDAxYo1cdTAwMTJcdTAwMWVoXHUwMDA13M2aUFx1MDAxZbtYXHUwMDExpzBZXHUwMDAwj9PFXHLnkrJxJifJXHUwMDBiro1cdTAwMDeIRksrXHUwMDA1XHUwMDEy6Mc20qCbu2GYXHUwMDFisZXMiTzb8WaUXHUwMDE308PMxvCuXHUwMDE1t0NDS+pAt0JcdTAwMDAmLNrgdJLmMt1qwMBcdTAwMDD8rFx1MDAwMqNcdTAwMThT7lVcdTAwMWGH05xcdTAwMTKjkFM0K+RcdTAwMTTQbjGylLNrjOkxY105XHUwMDA1085329qY0E5VjXCKJVx1MDAwNWKYNcYoXHUwMDE0L7Qm2yjPpYaoLaOsg7p9nFLIXHUwMDBlt1KNJCjRXHUwMDFiSW4xXoejhEpxQlHWef9/nFwiaFx1MDAxOK2rXHUwMDE4XHUwMDE56lx1MDAwYs3HOUW6rXCIlIQq1EaQfpzOKUVWTZ9cdTAwMDJcdTAwMWOxijFlJLOKI1GZlVx1MDAxM5jOc5UwTckxxVx1MDAwNUvZxI+9Qa9cdTAwMTDP7lVcdTAwMWGHclx1MDAxMZ29erqDW/x6lFx1MDAxMO5cdTAwMDZcdTAwMDNC0Fx1MDAwZatPSjB7zM3bMLgrT5qRSV9OeKVcdTAwMWTquChwXHUwMDBm+9fXV1//XHUwMDA3mNhRliJ9        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      Screen 1(hidden)Screen 2 (visible)app.push_screen(screen3)Screen 3 (visible)hidden"},{"location":"guide/screens/#action","title":"Action","text":"<p>You can also push screens with the <code>\"app.push_screen\"</code> action, which requires the name of an installed screen.</p>"},{"location":"guide/screens/#pop-screen","title":"Pop screen","text":"<p>The pop_screen method removes the top-most screen from the stack, and makes the new top screen active.</p> <p>Note</p> <p>The screen stack must always have at least one screen. If you attempt to remove the last screen, Textual will raise a ScreenStackError exception.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nN1cXOtT20hcdTAwMTL/nr+C4r7sVcWz0z3vrbq6XHUwMDAyXHUwMDEyXHUwMDEyQnhsyObB3VZK2MLW4ddaMsZs5X+/XHUwMDFlhSDJQorBxnHiXHUwMDBmXHUwMDE4a+RRa+bX3b9+yH8/2djYTKbDcPO3jc3wqlx1MDAxOXSj1iiYbD71xy/DUVx1MDAxY1xy+jSE6ed4MFx1MDAxZTXTMztJMox/+/XXXjC6XGKTYTdohuwyisdBN07GrWjAmoPer1FcdTAwMTL24n/7v4dBL/zXcNBrJSOWXaRcdTAwMTG2omQw+nKtsFx1MDAxYvbCflx1MDAxMtPs/6HPXHUwMDFiXHUwMDFif6d/c9K1oqA36LfS09OBnHhazFx1MDAxZT1cdTAwMWP0U1FBXHUwMDBiLZW28vaEKH5GXHUwMDE3S8JcdTAwMTaNnpPAYTbiXHUwMDBmbcrRNNFcdTAwMDae897Fx119cmhcdTAwMGZOxyfZVc+jbvckmXZTmeJcdTAwMDHdSjZcdTAwMTYno8FF+D5qJVx1MDAxZH/pmeNV31x1MDAxYVxyxu1OP4zjwndcdTAwMDbDoFx1MDAxOSVTOqb47cGg306nyI5cXNGnXHUwMDA2cs6M0Vx1MDAxNqTiXHUwMDEy6G7V7fiXXHRcdTAwMDQz1lx1MDAxOFx1MDAwNUJcdTAwMWEhXHUwMDA1qFx1MDAxOcl2XHUwMDA2XdpcdTAwMDeS7Fx1MDAxZjx9ZbKdXHUwMDA1zYs2XHTYb2XngFxugrPz7JzJzf1Kp5i0Uphs+k5cdTAwMTi1O4nfIauZNcBdfjRcdTAwMGXTTXCgpJNaZlvkrzjca6Vg+HN2XHUwMDE1O8FoeLNam7H/kJPWXHUwMDBi+nxcdTAwMTZJeTTl9lm8grPdXHUwMDEwYKe1v/3X85NcdTAwMDP5+2CrfztXXHUwMDAxesFoNJhs3o58vvkvXHUwMDEzbTxsXHUwMDA1X1x1MDAxMFx1MDAwNVpLa43TXHUwMDEyTVx1MDAwNspu1L+gwf64282OXHKaXHUwMDE3XHUwMDE5XGLTo5+f3lx1MDAxYvp0mSroo+OO0KD03NBcdTAwMGbHU3ux39vnfHz+ctLeiyb6hfue0Fx1MDAwN/5N7IPTTFx1MDAxOSNRc1x1MDAwZVx1MDAwMoyyXHUwMDA17EuBXGalQYKeddo4vlx1MDAxOPbPgzPO1Vx1MDAxMrGPQipwlq9cdTAwMTb7vd45n2zx5NlhNFxmwz9eXHUwMDFlbb86iJeEfVx1MDAwYlxccG6Whf0kvEruXHUwMDAyvkVdXHUwMDA1fFx1MDAxMNZx5NLh3Mh/d941l1fDy5fT3taHwfjj8PiF2F1v5CMqprRBXHUwMDA0dEZ6XHUwMDBiWlx1MDAwML7lwMhcdTAwMDRJclxi1iHkrMBDcG+c4udYxj1wW1x1MDAwNryBWZhrgdL7pp/IxDtcdTAwMGJK2PvAPEPToJ+cRNepjbaFo7tBL+pOXHUwMDBikEjxT1x1MDAwMp40R2HY34D/9n/pRK1W2P9nfsfikK7vJ9TFb251o7bXls1ueF5UoyRcIlx1MDAxZXY7nFxmcmvcJElcdTAwMDKabrTXmr2jwShqR/2g+7Zaqlpt/rLMd6gzUVx1MDAxM5w9nNNnIHojxPz6XFy/8/fQZ5zF5uPps3HMSFx1MDAwMGm4pXdbVGfjJFx1MDAwM81cdTAwMWRcdTAwMWGU6EjjXHUwMDFmRZ1cdTAwMWQyrogwS2MsR9TuXHUwMDBl5XZMIzk6KVFcdTAwMDHXOlx1MDAwM/BXlyaFv4VcdTAwMDeoeipkjao/ijLGSTBKtqN+K+q3aTCzXCJfQ5K9OVx1MDAxY0Sqvs2xl5IzhVxcS8FpI5UgL1x1MDAwNLmT2sHQLyFcdTAwMDMgTqLJZKNVTtibXHUwMDEzPt9cblx1MDAxNfZb31x1MDAxNqk+UMmJ1OBcZml5nPV7pjhqilx1MDAxM0pCSaZcdTAwMDVIXHUwMDA3nITiTlmnSlJ1gzjZXHUwMDE59HpRQmt/PIj6yexcdTAwMWGni7nldbxcdTAwMTNcdTAwMDYl40F3lVx1MDAxZps1XHUwMDA2Qz9j0aZn/21k2pJ+uP3/z6d3nt2ohHI6WkJxNt+T/PtcdTAwMDNcdTAwMTi5sJWGXGYtqVx1MDAwNlx1MDAxMZdM8b/JyM9G2NpcdTAwMGKuw/1nW1x1MDAwN89f9LWNIVhvXlwinGOOTFx1MDAxNVxiNN5y68xcdTAwMTJ8XHRGLeNcdTAwMDLAOeK+ZCaEmJHsIcGo1suj5ESVkKJcYs5cdTAwMWaBrNRYMECFuIqIkYLtSkeLZLhcdTAwMDVwNb+jPdzpXHUwMDFjXGZfXHUwMDFjvdtcdTAwMWRcdTAwMWNfj9xhcjQ+XHUwMDFmivVcdTAwMDao5IJcdJ9cdFGWdFWqYrJEXG7NuOPGXHUwMDEyQqVcdTAwMDZcXFxmnsuOXHUwMDE3SVx1MDAxZaE4mTS7fHDWMenXZ8rufYyvOsPx+MNWdPomuVx1MDAxOMllXHUwMDA1jIQ3yHG7x4O+XHUwMDE1qlxu+k6AUkS65jfN76eHb9o9t3+0r/76NH32abtzKI+WivxWXHUwMDEwd8IlQ98xolx1MDAxZYJcdTAwMTONXHUwMDA0YpGuXHUwMDAwfaGQXHUwMDExKZFcdTAwMDY5cDBcXC9GMi02XHUwMDFkhGqZ6CdcdTAwMTNpSTS+4nSJXHLDl+PX19fds1P96VxcJJGYnvL50P+0bt5Y7U+v4+3jyejgdO/Vofj0x9SeLWHe8+H7ydvG5Ni+v+7Fp1x1MDAxN83wI3ZcdTAwMGaWMC9cdTAwMWab//VO3mLyprl9XHUwMDE1NT/uvlx1MDAxMc1oWfE0J+S5pTnAqrSRrktcdTAwMWKRWjiKvOzcNuAsnuKOONpcdTAwMDXV3u6Mmq33h+r6dL3DTGlcdTAwMWSzSkvNOZleNZMuXHUwMDA1QaNOcrKERJ3JXHUwMDE3zlxudj9cdTAwMTNA6npcdTAwMTbewc1ErqZxq/myrO9CWqIrhj+Ct6tBolx1MDAwMan1fZCYbXiW2Vx1MDAxMVx1MDAxNOWlgYfnwDZcdTAwMTdJXHUwMDE38jzZVb7meYLhkFxyXHUwMDA3w09xmln55e4sj9CF7z12lqckU63qVeZ4dHVkROxXXHUwMDEz71Zyft2rN57L0L1H8L8gmERUXHUwMDE0ZiOZOzFTq7CGIVx1MDAxN9pcYqPJXHUwMDE3w2Ip2yrd40RvXHUwMDAxkVgwXHUwMDAx06E1QpZ1XHUwMDExuPGCmpRvXHUwMDAyXHUwMDE5XHUwMDA0V9ZNQjUpTC7JvopEXHUwMDBmcFqcx0z01NO6jUJWxVEsXHUwMDBmjmyoRE2rmUsx3CRVXHUwMDE0U1x1MDAxNFx1MDAwMyuOdFx1MDAwMtpvZnqKt/EjZVtqQJWOl/GUTfkk/35vo2JyRYVZo0JwXHUwMDAx8iD3yFx1MDAxYtczp/U0Ko5LZi1ZXGZDsaySZtaoXGJmXHUwMDA0V4pWnlxmXHUwMDBizEZcdTAwMWLLMipoOWghfSmfLpIrRuVsimWSglx1MDAwZetcdTAwMWNcdTAwMTiCXG6WykSgjZXOc5PV2lx1MDAxNKCYXCJbte9oU4DRXHUwMDBl0PIopykqJlx1MDAxZVJOXHUwMDFlXHUwMDAzZ8QmrNTkQoThXFyan9SmVEPKv1x1MDAxYWU0LcuiXHUwMDE08l+zXHUwMDE5XFyurZS+nDm3SalPnaynSdHKMCO55lx1MDAxMiVIk+tk8d/XXHUwMDAyXHUwMDE4+X3iMd6x4YItXHUwMDE1VSaFdMFcdTAwMTkjyWhJWnXSiez+b02KU1xmpXbKcsFccqrcrtxYXHUwMDE0dPRdhfpcdTAwMDFcdTAwMDHEQiSFK5fJ8nCDMqt8P4FaN6r3NVx1MDAxZC5t6T3Vuq5XSldTXHUwMDA1Tv5cdTAwMTM06vmpgn6m8FX0cnLZfvfhQrevT49+j79rn+C31ZrIMzBcbj6QTCatr5lpXHUwMDE5UUAkTSluXHUwMDFkUSaXL8ivR2VGeTOvVptcZlhdJ59cdTAwMTbVXlx1MDAwN4Rwvk1s/ui4cbU/tn+1wsvOycdLXHUwMDExTl87PNhZe3Rq5uNcdTAwMDdB2DMobLFwSG6XkS9cIuRcbq2EQbdcdTAwMTA6l16YcUIgUTfzgHB4kdR0I57s7CB2I9lcdTAwMTZcdTAwMWZa4z+O48nFslKyVlpuga9cdTAwMDD7NuegS1xy3IAkjJyfcMX93dFe7+L5azHF8L1otTvDg9Z6Q79cdTAwMDHWMrCKmKXTzmlcdTAwMGVcdTAwMDXoXHUwMDBiKYlcZiuL3KLv6l1cYvlfyjLLLElcdTAwMTJHXHUwMDA0XHUwMDEy7CcpypxtPT9/XHUwMDFmbPHD9rv9t1x1MDAwN83rQZDE46X1xqK0uDSNqlxmYWpcbp2gfHVbajN/W3h92Wd9I1x1MDAxOFxupYVcdTAwMDRSXHUwMDFiXHUwMDAxekafiOiQWfHxi6b9WKzOWVx1MDAxZMBcdTAwMThFXHUwMDExlKPolYiLJZ9VVizincxnZZRcIq/mfLmjpF5cdTAwMTTqy2Jss5pcdTAwMTCG1P1BNZBl50Q448AlxXBKXHUwMDE5jeA4N3d2r/neNk3RKsWlZJBuTvjZklwijWpQfVx1MDAxOS7hKZvxSf79vnVTqWD26C071cjR3ec5k6vXoVx1MDAxY530XHUwMDFiz/u6od1+6/CV6thcboPSXHSanfEoXFxcdTAwMDNcdTAwMWZN+GJcdTAwMDZ89yTB0T/jUEy0XHUwMDFhJ1x1MDAxOHF0X1x1MDAwZVx1MDAxMMpavlD1Jlx1MDAxOVx1MDAwNf14XHUwMDE4jEhd7jAsucxpTdO9XHUwMDE0qJw1YsWM9DGfLfHZXHUwMDAy41bedI9r2XSPizfdc1fdXHJBtsOSf7zHk5P1O38vtV5dP0SDXHUwMDAySlx1MDAwNspYIynYXHUwMDE3zuqZxnuLjLyhptPQmVxccWXpWlxyilx0XHUwMDAwKYiekW1x7q5cdTAwMTJcblx1MDAwMpM+XHLCLYVMoPJcdTAwMWRaN3TBu1x1MDAwN4fwkCzJXCJ0gTyzclx1MDAwZtHLOelCvcvYKDa7k+8z5CONTOvo5bIscEaLJITl3JdR9Ndi5D1cdTAwMWLw61x1MDAxZpcsUFx1MDAxOFx1MDAxMCCNpZ3zXHUwMDE5XHUwMDAyJY0uyWRcdTAwMTjSgCR648jGXHUwMDE5xJJMP1x1MDAxMk+pXHUwMDA2s381yjheXHUwMDE2TVx1MDAxMZWJXHUwMDA0XHUwMDA0n2+mUHV+nlwiPlxcyNa1fHn54tnhm9Z04sK+qirdrFx1MDAwZk9cdTAwMDHBmSFoI7FD32ePRYOGqH1cdTAwMDXRKCAuY6VSXHUwMDBipVx1MDAxM75BVO5o8ypcdTAwMTNcdTAwMTWyXHUwMDFjUlx0IdWPw1Se1s37mFx1MDAxOVx1MDAwNLK0Wq+eXHUwMDAxXHTiXHUwMDFhl1FcdTAwMWOddcN1okBcdTAwMDWxXHUwMDFlxoFcdTAwMTRWXHUwMDA2NuAsoZK4/vxN4fVbv65cdTAwMTTIP/IglFTeLKBRYqYtXHUwMDFjkFx0Ylx1MDAxNVx1MDAxNoUherTYXHUwMDAzO7X2XHUwMDAyXHUwMDFkOUokj01Ow3IpsyvdWlx1MDAwZu3du/TJXHUwMDAwXHS0MVjOl/jSXHUwMDAxRaSr7iF5sFrOSYDqfVGRXHUwMDAwgdCeXHUwMDA3Ulx1MDAxNFxuXHUwMDE2yeHlclx1MDAwNF9cdTAwMTmQZNJvJaBcdTAwMTJcdTAwMWOMeegziPW59qJUXFxcbmPJISljtNEu94NcdTAwMWa3YllmNHFcdTAwMDPaWue4MkKWpPqRSFAlnP2rXHUwMDA05CUxIFGdqCFhUEtcdTAwMGbXue3ZyfXlKzWNj6ZHL+LB5OPWZft479O6MyCK1ohcdTAwMDGh4MSCjK9ZXHUwMDE0XHUwMDEzNUJcdTAwMThGXHUwMDExgnRElFxibvlfUPlOmVx1MDAxYSBcdTAwMWHmIFx1MDAxN1x1MDAxNfzotUPHXHUwMDA1t8LlbmiFmZo15Cm4OE8xrlqvwVx1MDAxN1xyrTXzN6/Ub/2a8lx1MDAxNFxuKsH/mFx1MDAwZjk3w41cdTAwMTC5eCFtXHUwMDEwXHUwMDAwzdAnckxcdTAwMWHai8VcdTAwMWXdrNVr7dtotPDP9/tcdTAwMDdcdTAwMDfhXHUwMDBlLdeGOeu7XHUwMDE2NddWlVx1MDAxYdP8U2zKoV3l7yQspJVz0pR6h7FRKOs4RS9OXHUwMDFiXHUwMDA1WphcXGfyRpZcdTAwMTORXGLCao1cdTAwMWH8XHUwMDEzYuWfJJiLpNT3wszIRFxcSCvyyEJq8lx1MDAxZqIkXHUwMDEzkmfx7Wv+4XY0d7X0/0hcdTAwMTSlXHUwMDEyyOlgXHUwMDExwlVcdTAwMDTlyc3s/jGhk4TwdrtcdTAwMTVcdTAwMDTpqHVjyrNb3LyMwsn2XT056cvbx3QxvVx1MDAxNVxu/Y3+/fnJ5/9cdTAwMDPV4pXXIn0=        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      Screen 1(hidden)app.pop_screen()Screen 2(hidden)Screen 3(visible)Screen 2(visible) <p>When you pop a screen it will be removed and deleted unless it has been installed or there is another copy of the screen on the stack.</p>"},{"location":"guide/screens/#action_1","title":"Action","text":"<p>You can also pop screens with the <code>\"app.pop_screen\"</code> action.</p>"},{"location":"guide/screens/#switch-screen","title":"Switch screen","text":"<p>The switch_screen method replaces the top of the stack with a new screen.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nN1cXG1T20hcdTAwMTL+nl9BcV/2qsLsTPe8btXVXHUwMDE1XHUwMDAxNlx1MDAwMVx1MDAxMpNccuH17opcdTAwMTK2bGsxsrFlXGZs5b9fjyCWLL9gg3DIKlXY1sjj1szTTz/dM8pfb1ZWVpPbTrj628pqeFNcclpRrVx1MDAxYlxmVt/689dht1x1MDAxN7VjaoL0c6/d71bTK5tJ0un99uuvl0H3XCJMOq2gXHUwMDFhsuuo11x1MDAwZlq9pF+L2qzavvw1SsLL3r/930pwXHUwMDE5/qvTvqwlXZb9yFpYi5J29/63wlZ4XHUwMDE5xkmPev9cdTAwMGZ9Xln5K/2bs65cdTAwMTZcdTAwMDWX7biWXp425MwzUDxbacepqWiElFxiKrsg6m3SjyVhjVrrZHCYtfhTq7fHrZPex6uT643+2ra4qrq7KKlmv1qPWq395LaV2tRr061kbb2k275cYo+iWtKkVlE4P+1b3Xa/0YzDXm/kO+1OUI2SWzqn+PBkXHUwMDEwN9IusjM39GlccpVgxmgrpOJSKG3VsN13IDUyY41RXHUwMDAypUGJQlx1MDAxNSzbaLdoXHUwMDFlyLJ/8PTIbDtcdTAwMGaqXHUwMDE3XHIyMK5l11xiXHUwMDE1XHUwMDA05/XsmsHD/UqnmLRcdTAwMTJN1n0zjFx1MDAxYc3Ez5DVzFx1MDAxYcFdvrVcdTAwMTemk1x1MDAwMCA5OpR22OB/sbNdS8Hwv+IoNoNu52G0Vnv+Q85ab+hWXHUwMDExSXk05eY5TCpR2N89QLt7uub0detcZuKPw75GoFx1MDAxN3S77cHqsOXbw7vMtH6nXHUwMDE23CNKaC2tdU5cIupsMltRfEGNcb/Vys61q1x1MDAxN1x1MDAxOVxi07Pf3i5cZn2Jalx1MDAxYfSFXHUwMDExllx1MDAxYm5cdTAwMTTOjf0/wi+wKW/OKp9cdTAwMGU+XHUwMDFjXHLuTreCne0vP1x1MDAxMvuCP1x1MDAwZX5pmDJGguZcXKAwelx1MDAwNPvogKHlXHUwMDFjXGJfTlx1MDAxYsefh/16cM65Klx1MDAxMftkmHBOw5LB/2Vf7Z00vsRna/31w62d/atccn5cdTAwMTmUXHUwMDAyfsdRcO2kKVx1MDAwYvxJeJNMQr6yelx1MDAxYfKNdMid4PNcdTAwMDM/6H95t3n2Z3vzc3x4dHP8YaNcIlx1MDAwZVx1MDAwZl478J1hloNBXHUwMDAx3FhrR4FvhGJIzi+ERUW+XHUwMDAxz8K9cYrXYVx1MDAxY/eC23HAXHUwMDFiUYS5UVxuLU1cdCxcdTAwMTflL0fxXHUwMDFl5dKAxlx1MDAwNVCeoalcdTAwMWQn+9FdmHLDyNnfg8uodTtcdTAwMDKJXHUwMDE0/mTgfrVcdTAwMWKG8Yr4b/xLM6rVwvif+Vx1MDAxOeuF9Pu+Qz36zfVW1PDOstpcbuujXpREpMOGzUk7N8ZVsiSg7rrbteJcdTAwMWS1u1EjioPW1+lWPc2ZXHUwMDAxi2eHYVxmOEVUoXF+bz4wx1f609ZBv9M53ZKbXHUwMDFmq+8/71x1MDAxZL52b7aOkXJDq1BobnKKNlxyYyiYoJNaodNKKlMwrFx1MDAxY29cdTAwMDbMOGTozblzXHUwMDBm3uxcZqCRSmZ38DeIWUpQzFi2N8PKL5Q2ReetcLI3g1x1MDAxYfnmkrw5b9VMb75cdTAwMWbmXHTuLCjgTPVnXHJcdTAwMTSXtMuJocf8efbML+DPxSD4gv5cZsYxdEpLZVx1MDAwNXJNideoQ2vrm41cdTAwMTDg6FJcdTAwMTC6YFo5XHUwMDFlrYk2hFBcdTAwMTKApsQ6nvHG0L9cdTAwMWRnXHUwMDE20GpDjsCdmaRRSVxccKKdJ0Tv1MxcdTAwMTn+PsMjlbJOLKJcInN2XHUwMDA03eRdXHUwMDE016K4QY1cdTAwMTmVfK8ybM9cdTAwMTElUlx1MDAxZq72vZWcXHTllPSJsybcWpVcdEs/XHUwMDE2QcdcdTAwMWLNQFhJk01aXmr/7+GKb0Ozwrj2uFGzM7CcUWucgeHcijTrp+R/kk2KQqexUjjpaO6tXHUwMDE5s6lcdTAwMTX0ko325WWU0Nh/bkdxUlx1MDAxY+N0MNe9ozfDYIxB6J7ybUVG6PhcdTAwMWVHiT17t5K5TPph+P5/bydePVx1MDAxNcv+XHUwMDE4Q3HW25v868JUZkFOT7BcdTAwMTUnW3CBPGO2XCJ9pUxmgUnUymjDSX7wQnXJSMtIXHUwMDBmWFx1MDAxNFx1MDAwMlx1MDAxMVxi/C9DZI5ZckJjuOFWTiQy5Vx1MDAxOGiN5H9cdTAwMDLISclZx5iMfIE6cFnDMojs6YnCnEQ2O3lcdTAwMWQhMs0taUhKXHRBccvR5i6651xmw1BrcjJCtsy50YIsNruGOmJcdTAwMTGXxPIkJo1cdTAwMTREU1x1MDAxM0js5+asabD1x9o4Ylx1MDAxN2StXHUwMDE5hUG0tnj2O29cdTAwMDHXXHUwMDE0yEDLjNlcdTAwMWXjrePT885e5Th+31x1MDAxZlxcRWu1TrR+dNF83Vx1MDAxOVx1MDAxNfi6oPWFXHUwMDExMFx1MDAwMimBzO72vihuXHUwMDE5+aZwzlx1MDAxMYNbmUsvn15cdTAwMTTXurzSoCNgSJJemdmlZVmPXHUwMDE1rrPg8nKFa6LGafjUToLBXFx6+Vx1MDAxODrXb+tcdTAwMDfBzqf1+LyyTTnCIN6CratS0VlcdTAwMGJ6zbBcXHgqYL5cXG2c4Vx1MDAwZYBcdTAwMTdcdTAwMTN+R0GXlI5cdTAwMDalwaJ2ZdStVYmVayFcdTAwMDWCUy+CzyFcdTAwMGJOqFx1MDAwMtTtYSVuXHUwMDFjbFx1MDAxY21tXZ9WKlx1MDAxZiuN3km/nCqAplx1MDAxMETiQC1cdTAwMDH9gtT4dFnprFEqP+WP0vOHs697h5+PzuqdXHUwMDAzPKq15Hn7Knnl9KzSlFx0lNdcdTAwMWFcblRu+S/twCGzaDSBTNNYQK75Kfi3UHVcIixz3caBXCI5vOxFS1x1MDAxYoZcdTAwMWb6XHUwMDFm7+5a56f6rI5JhLenfD70v53V77vbzul54/Bi1+3dbVx1MDAwZrqbUbR7Wi+h3+NrXHUwMDFi697B7mDQaZze1bu1qLr+R1x0/fbE+sGOXHUwMDFl3Fx1MDAwZWrrXCLYUdHazWkvLIdcdTAwMDW8KJDKubJYYFrJXHUwMDFi3dRcdTAwMDDo9Tl3Ml9Ee4xcdTAwMDFcdTAwMGX1p+jaXHUwMDFkh1eV3ubmn1j5uvm+rZ7CXHUwMDAwy0ssXHUwMDAxNVOCXCJcdTAwMWNcdTAwMTjKLa1Uo1x1MDAwYliCI6OMUyNpOGVcdTAwMTQ+s+ZccmDPw1x08kzpXHSppJxcdTAwMTDuaEpcdTAwMTRlTi9Q9J4lx5RxsFxiXHUwMDE0s1x1MDAxOc/K0mhcdTAwMTjZXHKgvVxmttqNXFwzLFJn+vd7kTrodFhvQJlb86yXVoZ/uX/BycXq3ELBMorVM6yb6Y/Ti9ZcdTAwMWPMNI90vvRHOkzM7ZCzma9cZod8XHRNqli6sMNcdH7kl06MeCRKzVxmSLBcXFhDI1JcdTAwMTRcdTAwMGLlOCQw37lUoFxyWIE4qdRjXHUwMDA1Q4da+1VlXHUwMDE0+dTtwVvRSikt8ieE5+dUeoBTQvlcdTAwMTRvnbPSM1vnreTrKs761X+Lylx1MDAxOcmlyVx1MDAxNVx1MDAxZVx1MDAxZVxuK4o5wf1FSFOluJFcdTAwMGZcdTAwMTdMKfWM3sVPVIKZjid/XHUwMDE0kZT19ib/+oRcdTAwMTWwnHuMhXdcdTAwMGUkLFx1MDAwNZ9f4M/WO6+TTYw0zO+70ki3i4iFXHUwMDA1MFx0TKVcdTAwMDOhTH7TVplUwpklia5IO5BzgsZcdFwi3zpcdTAwMDagUFJYXHUwMDE0xlx1MDAxYZlcdTAwMWKfXHUwMDA3Klx1MDAxMZo0XGKiWm7R2C836SetR5dNJWuCUTwgMVwiOWViXG5cdTAwMTByXHUwMDE33VOJZKTPNEpBI619reJvSiVrU1x1MDAwMeWPMSiVxiXcTS9cdTAwMTZcdTAwMTC1SePdaG4umZ3rvU4ukY5cdTAwMDaXK2JVXHUwMDFmzLRcdTAwMWRcdTAwMTUmNOSMa1x1MDAwZVx1MDAwNECjKVuXXHUwMDA1w8piXHUwMDEzpL7RXGItXHUwMDE1IV2bSUVcdTAwMDPHmfa0RmlcdTAwMDVcdTAwMDClNFx1MDAxM6SJcSgo21nyajrkPffHSlx1MDAxM6JcdTAwMTMgceaXRSjqar9vfTKlOO5cZo20X71cdTAwMWVfuv57UMpcZlD5Y1xmTlx1MDAwYnLKrJ3jZvqWO0cj75TUXHUwMDE57TxKKr/38fxz/Wj75FCfSLu373ai3dddgbSWM+VcdTAwMDR4tuZo5Gj5gSQzI6bn1ilcdTAwMDSH8nn7Z8tfXHUwMDFlks44Q1x1MDAxZbLkesSyloesnFx1MDAxZfJoSEg1gpj/mZ6dXHJcdTAwMGW7h4Ov8CFpVFx1MDAwNvWrvT+7W+9fOzolo2nXVlx1MDAwYidcdTAwMDGwXHUwMDEw8biXXCJCXHUwMDFiR6qMW8WfXHUwMDE38souj5NmJlx1MDAwNlEvUSxcdTAwMWJcdTAwMTLgXHUwMDEyq+NcdTAwMWLHXHUwMDFmZaRO63+Yg9v1rb3Eid8/XZRSbS7dpaZusJ7+iJyg8FwiXHSQXHUwMDBiXHUwMDE0t1x1MDAwME+qX9Q+bm13XHUwMDE0XHUwMDFjvW+a5ufaa5eQVvpcctbKbzJBa/Lrb2k6KvzOXHUwMDE3J8ibKFx1MDAxZlXuZfxcdCaloONcdTAwMWKshd/jrVx1MDAxNVx1MDAxN0t+XuLlcO6LY2ilWPrzXHUwMDEy+Cp3WOPzd1hLmPr4k/D79Ei32Pn3Jc6e+Ve5fOS0ZqBImVHex7WDwv5cdK2Ypmb/JIWw+efryvRnbVx1MDAxOGl30ipSS+B20sNQ1jFOXHUwMDEzXHUwMDAyXHUwMDAwXHUwMDBl1Eih68HXwVxuxV1+rW8ppeone+Oc+eDsXHUwMDEwMZJcdTAwMGZcbktJMeU3KFx1MDAxZFx0WpywXHUwMDA3XHUwMDEwaKa11ztaXHUwMDFhTjP+PVxyWnBb4mxcdTAwMTm4MrK5WlC+ZZVcdTAwMTbaot+GkD1dN7Rcblx1MDAxOKWupHGs81dKbse3fP9MmehULPujiOKsszf510VVicht8iqSXHUwMDE4aVx1MDAxMrA0vvPnoFti33aSRudT+6ZDaDpcYmrx2bspJNZcZqrNfjf88TpfkPDgQlxiIDCholxmf1ToXHUwMDFigcwh+ke+QPuc7zk8lnSDuNdcdLrkXHUwMDEwXHUwMDEztEkuxc20ybi058I/s/xcIlx1MDAwYuGztMmL7vuS4DRmkm9pT391w8v2dV7m/nBlktn0NF2SX+YperT0iSwp7Pk9evakL+TRS9zXXCItU9zHdK7AXHUwMDA3hsLzXHUwMDEyfl+LzzMoeZbGuGetos/0aFx1MDAwMaSB/Fx1MDAxNlNOXHUwMDFhSXOZ+48gsno1MFx1MDAwNc5vMjHoXHUwMDFmRCu6u0/wpXJmmdXq5/jjnOpkdqgoKFx1MDAwMUupo6LwbqSQOlx1MDAxYqJMnnCGXHUwMDE0XHUwMDE40Vx1MDAxMI+npamnqZPZu5hHXHUwMDE0XHUwMDEzd1xuaL6Ms1r6xYRxmyhqkDiRaK2jTFx1MDAwMIT6uZ/9mlx1MDAwZWV/rFx1MDAxNVE8TZ68efhcdTAwMDG/eWg/IcxccqeDYFx1MDAxZNVcdTAwMWWIPLvL1esoXHUwMDFjvJu0nzo9PEem4+mZKPT3+te3N9/+XHUwMDBmJe3LnyJ9        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      Screen 1(hidden)Screen 2 (visible)app.switch_screen(screen3)Screen 3 (visible)Screen 2 removed <p>Like pop_screen, if the screen being replaced is not installed it will be removed and deleted.</p>"},{"location":"guide/screens/#action_2","title":"Action","text":"<p>You can also switch screens with the <code>\"app.switch_screen\"</code> action which accepts the name of the screen to switch to.</p>"},{"location":"guide/screens/#modal-screens","title":"Modal screens","text":"<p>Screens can be used to implement modal dialogs. The following example pushes a screen when you hit the Q key to ask you if you really want to quit.</p> modal01.pymodal01.cssOutput modal01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Grid\nfrom textual.screen import Screen\nfrom textual.widgets import Static, Header, Footer, Button\nclass QuitScreen(Screen):\ndef compose(self) -&gt; ComposeResult:\nyield Grid(\nStatic(\"Are you sure you want to quit?\", id=\"question\"),\nButton(\"Quit\", variant=\"error\", id=\"quit\"),\nButton(\"Cancel\", variant=\"primary\", id=\"cancel\"),\nid=\"dialog\",\n)\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\nif event.button.id == \"quit\":\nself.app.exit()\nelse:\nself.app.pop_screen()\nclass ModalApp(App):\nCSS_PATH = \"modal01.css\"\nBINDINGS = [(\"q\", \"request_quit\", \"Quit\")]\ndef compose(self) -&gt; ComposeResult:\nyield Header()\nyield Footer()\ndef action_request_quit(self) -&gt; None:\nself.push_screen(QuitScreen())\nif __name__ == \"__main__\":\napp = ModalApp()\napp.run()\n</code></pre> modal01.css<pre><code>#dialog {\ngrid-size: 2;\ngrid-gutter: 1 2;\npadding: 1 2;\n}\n#question {\ncolumn-span: 2;\ncontent-align: center bottom;\nwidth: 100%;\nheight: 100%;\n}\nButton {\nwidth: 100%;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-4278907027-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-4278907027-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-4278907027-r1 { fill: #c5c8c6 } .terminal-4278907027-r2 { fill: #e1e1e1 } .terminal-4278907027-r3 { fill: #e76580 } .terminal-4278907027-r4 { fill: #507bb3 } .terminal-4278907027-r5 { fill: #f5e5e9;font-weight: bold } .terminal-4278907027-r6 { fill: #dde6ed;font-weight: bold } .terminal-4278907027-r7 { fill: #780028 } .terminal-4278907027-r8 { fill: #001541 }      ModalApp Are\u00a0you\u00a0sure\u00a0you\u00a0want\u00a0to\u00a0quit? \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 QuitCancel \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p> <p>Note the <code>request_quit</code> action in the app which pushes a new instance of <code>QuitScreen</code>. This makes the quit screen active. if you click cancel, the quit screen calls <code>pop_screen</code> to return the default screen. This also removes and deletes the <code>QuitScreen</code> object.</p>"},{"location":"guide/styles/","title":"Styles","text":"<p>In this chapter we will explore how you can apply styles to your application to create beautiful user interfaces.</p>"},{"location":"guide/styles/#styles-object","title":"Styles object","text":"<p>Every Textual widget class provides a <code>styles</code> object which contains a number of attributes. These attributes tell Textual how the widget should be displayed. Setting any of these attributes will update the screen accordingly.</p> <p>Note</p> <p>These docs use the term screen to describe the contents of the terminal, which will typically be a window on your desktop.</p> <p>Let's look at a simple example which sets styles on <code>screen</code> (a special widget that represents the screen).</p> screen.py<pre><code>from textual.app import App\nclass ScreenApp(App):\ndef on_mount(self) -&gt; None:\nself.screen.styles.background = \"darkblue\"\nself.screen.styles.border = (\"heavy\", \"white\")\nif __name__ == \"__main__\":\napp = ScreenApp()\napp.run()\n</code></pre> <p>The first line sets the background style to <code>\"darkblue\"</code> which will change the background color to dark blue. There are a few other ways of setting color which we will explore later.</p> <p>The second line sets border to a tuple of <code>(\"heavy\", \"white\")</code> which tells Textual to draw a white border with a style of <code>\"heavy\"</code>. Running this code will show the following:</p> <p> ScreenApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b </p>"},{"location":"guide/styles/#styling-widgets","title":"Styling widgets","text":"<p>Setting styles on screen is useful, but to create most user interfaces we will also need to apply styles to other widgets.</p> <p>The following example adds a static widget which we will apply some styles to:</p> widget.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass WidgetApp(App):\ndef compose(self) -&gt; ComposeResult:\nself.widget = Static(\"Textual\")\nyield self.widget\ndef on_mount(self) -&gt; None:\nself.widget.styles.background = \"darkblue\"\nself.widget.styles.border = (\"heavy\", \"white\")\nif __name__ == \"__main__\":\napp = WidgetApp()\napp.run()\n</code></pre> <p>The compose method stores a reference to the widget before yielding it. In the mount handler we use that reference to set the same styles on the widget as we did for the screen example. Here is the result:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-863736824-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-863736824-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-863736824-r1 { fill: #ffffff } .terminal-863736824-r2 { fill: #c5c8c6 } .terminal-863736824-r3 { fill: #ddddef } .terminal-863736824-r4 { fill: #e1e1e1 }      WidgetApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Textual\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b </p> <p>Widgets will occupy the full width of their container and as many lines as required to fit in the vertical direction.</p> <p>Note how the combined height of the widget is three rows in the terminal. This is because a border adds two rows (and two columns). If you were to remove the line that sets the border style, the widget would occupy a single row.</p> <p>Information</p> <p>Widgets will wrap text by default. If you were to replace <code>\"Textual\"</code> with a long paragraph of text, the widget will expand downwards to fit.</p>"},{"location":"guide/styles/#colors","title":"Colors","text":"<p>There are a number of style attributes which accept colors. The most commonly used are color which sets the default color of text on a widget, and background which sets the background color (beneath the text).</p> <p>You can set a color value to one of a number of pre-defined color constants, such as <code>\"crimson\"</code>, <code>\"lime\"</code>, and <code>\"palegreen\"</code>. You can find a full list in the Color API.</p> <p>Here's how you would set the screen background to lime:</p> <pre><code>self.screen.styles.background = \"lime\"\n</code></pre> <p>In addition to color names, you can also use any of the following ways of expressing a color:</p> <ul> <li>RGB hex colors starts with a <code>#</code> followed by three pairs of one or two hex digits; one for the red, green, and blue color components. For example, <code>#f00</code> is an intense red color, and <code>#9932CC</code> is dark orchid.</li> <li>RGB decimal color start with <code>rgb</code> followed by a tuple of three numbers in the range 0 to 255. For example <code>rgb(255,0,0)</code> is intense red, and <code>rgb(153,50,204)</code> is dark orchid.</li> <li>HSL colors start with <code>hsl</code> followed by a angle between 0 and 360 and two percentage values, representing Hue, Saturation and Lightness. For example <code>hsl(0,100%,50%)</code> is intense red and <code>hsl(280,60%,49%)</code> is dark orchid.</li> </ul> <p>The background and color styles also accept a Color object which can be used to create colors dynamically.</p> <p>The following example adds three widgets and sets their color styles.</p> colors01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.color import Color\nfrom textual.widgets import Static\nclass ColorApp(App):\ndef compose(self) -&gt; ComposeResult:\nself.widget1 = Static(\"Textual One\")\nyield self.widget1\nself.widget2 = Static(\"Textual Two\")\nyield self.widget2\nself.widget3 = Static(\"Textual Three\")\nyield self.widget3\ndef on_mount(self) -&gt; None:\nself.widget1.styles.background = \"#9932CC\"\nself.widget2.styles.background = \"hsl(150,42.9%,49.4%)\"\nself.widget2.styles.color = \"blue\"\nself.widget3.styles.background = Color(191, 78, 96)\nif __name__ == \"__main__\":\napp = ColorApp()\napp.run()\n</code></pre> <p>Here is the output:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-382149846-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-382149846-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-382149846-r1 { fill: #f1e4f8 } .terminal-382149846-r2 { fill: #c5c8c6 } .terminal-382149846-r3 { fill: #0000ff } .terminal-382149846-r4 { fill: #f6e7ea } .terminal-382149846-r5 { fill: #e1e1e1 }      ColorApp Textual\u00a0One Textual\u00a0Two Textual\u00a0Three </p>"},{"location":"guide/styles/#alpha","title":"Alpha","text":"<p>Textual represents color internally as a tuple of three values for the red, green, and blue components.</p> <p>Textual supports a common fourth value called alpha which can make a color translucent. If you set alpha on a background color, Textual will blend the background with the color beneath it. If you set alpha on the text color, then Textual will blend the text with the background color.</p> <p>There are a few ways you can set alpha on a color in Textual.</p> <ul> <li>You can set the alpha value of a color by adding a fourth digit or pair of digits to a hex color. The extra digits form an alpha component which ranges from 0 for completely transparent to 255 (completely opaque). Any value between 0 and 255 will be translucent. For example <code>\"#9932CC7f\"</code> is a dark orchid which is roughly 50% translucent.</li> <li>You can also set alpha with the <code>rgba</code> format, which is identical to <code>rgb</code> with the additional of a fourth value that should be between 0 and 1, where 0 is invisible and 1 is opaque. For example <code>\"rgba(192,78,96,0.5)\"</code>.</li> <li>You can add the <code>a</code> parameter on a Color object. For example <code>Color(192, 78, 96, a=0.5)</code> creates a translucent dark orchid.</li> </ul> <p>The following example shows what happens when you set alpha on background colors:</p> colors01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.color import Color\nfrom textual.widgets import Static\nclass ColorApp(App):\ndef compose(self) -&gt; ComposeResult:\nself.widgets = [Static(\"\") for n in range(10)]\nyield from self.widgets\ndef on_mount(self) -&gt; None:\nfor index, widget in enumerate(self.widgets, 1):\nalpha = index * 0.1\nwidget.update(f\"alpha={alpha:.1f}\")\nwidget.styles.background = Color(191, 78, 96, a=alpha)\nif __name__ == \"__main__\":\napp = ColorApp()\napp.run()\n</code></pre> <p>Notice that at an alpha of 0.1 the background almost matches the screen, but at 1.0 it is a solid color.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-392179516-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-392179516-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-392179516-r1 { fill: #e3e2e2 } .terminal-392179516-r2 { fill: #c5c8c6 } .terminal-392179516-r3 { fill: #e5e2e3 } .terminal-392179516-r4 { fill: #e7e3e4 } .terminal-392179516-r5 { fill: #eae4e5 } .terminal-392179516-r6 { fill: #ece4e6 } .terminal-392179516-r7 { fill: #eee5e6 } .terminal-392179516-r8 { fill: #f0e6e7 } .terminal-392179516-r9 { fill: #f2e6e8 } .terminal-392179516-r10 { fill: #f4e7e9 } .terminal-392179516-r11 { fill: #f6e7ea } .terminal-392179516-r12 { fill: #e1e1e1 }      ColorApp alpha=0.1 alpha=0.2 alpha=0.3 alpha=0.4 alpha=0.5 alpha=0.6 alpha=0.7 alpha=0.8 alpha=0.9 alpha=1.0 </p>"},{"location":"guide/styles/#dimensions","title":"Dimensions","text":"<p>Widgets occupy a rectangular region of the screen, which may be as small as a single character or as large as the screen (potentially larger if scrolling is enabled).</p>"},{"location":"guide/styles/#box-model","title":"Box Model","text":"<p>The following styles influence the dimensions of a widget.</p> <ul> <li>width and height define the size of the widget.</li> <li>padding adds optional space around the content area.</li> <li>border draws an optional rectangular border around the padding and the content area.</li> </ul> <p>Additionally, the margin style adds space around a widget's border, which isn't technically part of the widget, but provides visual separation between widgets.</p> <p>Together these styles compose the widget's box model. The following diagram shows how these settings are combined:</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1cXGtT2txcdTAwMTb+3l/h+H4tu/t+6cyZM9VqrbfWevfMO51cYlx1MDAwMaJAaFx1MDAxMlx1MDAxNHyn//2sXHUwMDFklCSERFCw6Dn50EpcdTAwMTKSxd7redaz1r78825lZTVcdTAwMWF03dWPK6tuv+q0vFrg3K6+t+dv3CD0/Fx1MDAwZVxcovHn0O9cdTAwMDXV+M5mXHUwMDE0dcOPXHUwMDFmPrSd4NqNui2n6qJcdTAwMWIv7DmtMOrVPFx1MDAxZlX99lx1MDAwNy9y2+G/7b/7Ttv9V9dv16JcdTAwMDAlL6m4NS/yg+G73JbbdjtRXGJP/1x1MDAwZnxeWfkn/jdlXeBWI6fTaLnxXHUwMDE34kuJgZzT8bP7fic2llBFleCck9FcdTAwMWRe+Fx1MDAxOd5cdTAwMTe5NbhcXFx1MDAwN5vd5Io9tTo46Tt6Y//TbvubXHUwMDFmnISHXHUwMDFkv16tJa+te63WYTRoXHKbwqk2e0HKqDBcbvxr99SrRU379rHzo+/V/MhcdTAwMWEwulx1MDAxY/i9RrPjhmHmS37XqXrRwJ7DeHR22FxmXHUwMDFmV5IzfdtcdTAwMDZYXCIhpMGYXHUwMDEwybA0cnQ5flx1MDAwMMdIY2FcYiZGKEFcdTAwMTVcdTAwMWYzbd1vQW+AaX/h+Ehsu3Sq11xyMLBTXHUwMDFi3Vx1MDAxM1x1MDAwNU4n7DpcdTAwMDH0WXLf7f2PXHUwMDE22CCmNJVUXHUwMDBiplxyS35P0/VcdTAwMWHNyFx1MDAxYUtcdMJaXHUwMDE4psTwbYmxoVx1MDAxYndcZtjJXGI8JfmR1oTu11rsI3+Pt2vTXHS69823XHUwMDFh2lx1MDAwZinzreVcdTAwMWLjXHUwMDBllnayVN9/r+v+vt5vXa5HV0dH52dVXHUwMDE11ndGz8p4pFx1MDAxM1x1MDAwNP7t6ujK7/u/XHUwMDEy03rdmjP0MlwiJSOSSo0l06PrLa9zXHJcdTAwMTc7vVYrOedXr1x1MDAxM8eMz/5+/1x1MDAwNERIZVxuXHUwMDExYYji4Fx1MDAwNFRNjYjdra+tur9f3aq3XHUwMDA3P1x1MDAxYd7N7lx1MDAwMd1cZlx1MDAwYlx1MDAxMFx1MDAxMfqA75nxMPatx+DAXHUwMDFlRYNcdTAwMDI0XHUwMDE4TVx1MDAxOVx1MDAxNVx1MDAxYyshWFx1MDAxNlxylGokJSZKXHS4R6cvj6NB1FmtykvR8Fx1MDAxN69Kty7ySGBCIS1cdTAwMDSXWok8XGKoMIhcdTAwMWFcdTAwMDNewVx1MDAxOcNU5EFAXHUwMDE5XHUwMDEzklxirl9cdTAwMTZcdTAwMDTVb7vnzbOt49rAmE5vn3RVs+a9Qlx1MDAxMHBZXGZcdTAwMDImMeVUSjE1XGKud6+u2mHw6zRw+4HZONu46PHPT1x1MDAwYlx1MDAwYrRcYlx1MDAwNjUnbM43LFxiRpFSXFxIYaiSWpAsXHUwMDBlXHUwMDE0uKDWWlx1MDAxOUOoIIqwQlx1MDAxY7hSqedEXHUwMDA18O88XHUwMDA0SMq1XHUwMDFmiJ9pXGJh0DX8pZz+wZdcIrdcdTAwMWZlvXzY8TtcdTAwMTef9k5+bW1drG1dXHUwMDA0P2818/prTsrn309+7PDLd1x1MDAwM7355Yiz3Z1+c933mt+rXHUwMDFi11+WXHUwMDEzS5nfn5Z/KZCMwchIQjhcdTAwMDeKmlx1MDAxYUU3XHUwMDFlZnzT7Kvewefq9aU52D6W3+YsrmZcZiaPg0hcdTAwMWGDuLA/lEpmtKFcdTAwMTlcdTAwMTBcdMKQ1pJcdTAwMTgjtNRcdTAwMTBNXHUwMDE2pqwkzUOIilx1MDAxY4KwkFQxiHHzR9A8nTHpdL9cdTAwMTNcdTAwMWR6d7bdKc6c3XTaXmuQ6bfYS8HSPSdoeJ10W4YuvDMmd525+1PLa1g/Xm259ayDR1x1MDAxZWQjo8uRn/rlVXi7XHUwMDAzj1x1MDAwYr7Wxn+FXHUwMDFmePBmp3WUteRJ2GKiXHUwMDEwW1x1MDAwNGSaUcDabGpwXHLCzs7hQe1qw2l+3dq9lp2Dm7D5gplcdTAwMGJ+XCK6IERRK4K0XHLLXFxk0Fx1MDAwNalcdTAwMWJcdTAwMDLgYSpccmRcdTAwMTOMXHUwMDFhtTB4pXKicngpSFxcXGZ+YVXmqeb2TXV7/etGh31yu+etSPw8mmskSdTSosH73anVvE5jXHUwMDE50PtgytNCI1bjZ1x1MDAxZuBcdTAwMGLaXHUwMDFkXHUwMDEyXFwpplx1MDAwZo2Tdcayo1cwVVwiMFx1MDAxOSdIvZDA5Fx1MDAxM1x1MDAwNCZNvW9cYl9gXHUwMDFiyLYgUL98cFxcXHUwMDE0vlhcdTAwMGVf63BcdTAwMTmsWoGmciaDzExcdTAwMDZZXHUwMDE1vuVcdTAwMDYlMGt7tVo628pcIu2xJGlcdTAwMWN8XHUwMDE5O0tcdTAwMTFYnuhpXlx1MDAwNEPCpWCCSjJ9tWPnR6O5dbm5b1x1MDAwNs2rk8b+USDO+rdcdTAwMDU4rFx1MDAwNn5cdTAwMThWmk5UbVx1MDAxNmFxvNC2OJlcdTAwMWFcdTAwMTc9tFx1MDAxMYRgI1xyIYxnsEipRJBZXHRNjZREM1lcXFx1MDAwMpyi6FGKxcdcdTAwMGJcdTAwMWaGcCzzwVVcYlxyvVx1MDAwNVx1MDAwMvZlY+vF55/O2t2nauv48MugvXf16cfBXHUwMDE1ny62lmZ/e9v9XHLj17c3RXBUOe+37rw9df3HYnYpwIbvn1x1MDAwNC4qcVx1MDAxMbooMUopkGVTg6u8pWdcdTAwMDZXYSVl7uBcdTAwMTJGIU4heGCNtVx1MDAwMcfO5oBcdTAwMTSucmhcdGIgXHUwMDAzNGRxOSAjiHJcYqZcdTAwMWNiKSeQdubxxTRcdTAwMTJcdTAwMDRMZFx1MDAxNFBuMOXjKCNYWv+RqXxyapjFpr50XHUwMDEwXGYjJ4jWvE6s1D6mkPYwcjSMPj0xOOmJdXzt4cPTtmxf3ahcdTAwMTM/XHUwMDA1N1xim9Ve7Fx1MDAwMlxiY26w4Fx1MDAxYfqCXHUwMDFhbFL3NJxu3ESIKMNcdTAwMTVcdTAwMTAp3Mah3+/vXHUwMDE4XHUwMDAxftXt1Fx1MDAxZTepPJikTKpgRDU3jFxi8DBwMS1VziiKjFx1MDAwMXMgXHSC+5SUQuWMajlhtO63257Ved99r1x1MDAxM403cdyWnyzam66Tk8fwo9LXxmmha5+YpdPkr5VcdTAwMDQy8YfR33+/n3h3oSvbo5Lz4uRx79L/z6rZ7buK+Ixhrlx1MDAxOZMzpNzlLvdcInz2RN1O49ZXoFx1MDAxNojmNFW5XHUwMDE51rQ4XHUwMDAyNU9cdTAwMTlIXHUwMDA1cDSlx+yaY00rXHT1JUm35sImXHUwMDEwL1dcdTAwMTR+ti5YQPyeJSfI59xrflBLS/s/l3LfW/I0OWL5sVxivuCwilE9vdQv12fzXHUwMDE505k7cpUmXGJcdTAwMTRcYoGMmyvKx1Q+5DqIgFx1MDAxMiFcdTAwMDRcdTAwMTBDXHUwMDE0Xdw4P1x1MDAwNCwhpVxyVMDdXFzTXHTFaWB4XHUwMDA29zCOXHUwMDE52GnrezkpXCKYYoxi/lx1MDAwNGQvg1x1MDAxNFx1MDAxOVx1MDAwZp5zUFx1MDAwNMNYr5GWXHUwMDE0Q8tcdTAwMTgsQX/wtERJaVx1MDAwNoWNVkpyyZTQkHK9akFQ6FH2qOSdaUZFUMwpjJeMXHUwMDE0K2MoVnz6Ql75JJIlZlx1MDAxNWh6XHUwMDAzv5RA2/Ox/IZhXHUwMDA0XHQ7tFx1MDAxM8EgkPi4XfNkXHUwMDE1XHTv4LFcdTAwMTZcdTAwMDbP5olcZs7QitJcdTAwMTRslWCtJFxc5jNcdTAwMWNcdTAwMDHGgqh5ylx1MDAxONjrpJXyWWsp0oCO5EZcdTAwMDCSKFFcdTAwMDI4I2m8JPl55SxS5EH2yPvOjCxcdTAwMTJrplx0JKJTXHUwMDEyepxDpGBcdTAwMDY4LTUp6zFcdTAwMGVZ29w4ucWuUP0tsbl95ZxXfTlY9nFyYFxyXHUwMDA09IHt1Cqp+Vx1MDAxOIdAXHUwMDFlh1xmqFx1MDAxMiPhXHUwMDA2I1x1MDAwNF/kXHUwMDE0RESkMpPLj1x1MDAwNI1XJlx1MDAxZkhDXHUwMDEzhTGHZPOtkUb2YfPFcubaXFyBPKFcdTAwMTftMeq/OVx1MDAwMVfIYuBqJY2tqE9fXHUwMDEwYNu/blx1MDAwZqtcdTAwMDbj3unNSbOmyMHaN7b0wIWmVpBdXHUwMDFiqZSwXHUwMDAzXGJcdTAwMTngcq3tbF3OoNlcdTAwMDEgIDdcdTAwMTdcdTAwMDZcXFx1MDAwZbJXXHUwMDEwkVx1MDAxZVx1MDAxOVx1MDAxOOFcdTAwMTYjXHUwMDE2K8NcdMDlXHUwMDAwXFyRKVP8XHUwMDFmuH9cdTAwMTC4+V60RyXpwHlcdPd0oT1cdTAwMDddyCVcdTAwMTQ1eHrofu7XpXvxq7Le9DaOf7Y/fz6+/LGx9NBVXHUwMDE0KfBHyqmiXHUwMDEyXHUwMDA0XVx1MDAwNrqMcWQ4t9OIXHUwMDE1aFx1MDAxZbLIaoBRRnHGXGJjoKxcZp9Q14PcXHUwMDAxXHSMNYeeseV3kUoj7mc8cylcdTAwMTSh4pVcdTAwMDK5SJz7Z8e7J25w1T350Vx1MDAxZmzc7eytNUNZMFxugDlcdTAwMTaMQdBRiimuVaoqnoxNUFx1MDAwMklcdTAwMWFcdTAwMTNwp5mQ879cdTAwMTiFLFTHV4pdKr6c96Z50VxuKFg2fvqBV5TClNmumZpWSO07ub08qG5+ObxsrK/fnlx1MDAwN+J4b/lphSBbeLKDUYaQ8Wk9SiNlsJ3xg+2s2MVccndcdTAwMTJkbbAlXHUwMDA3zOFl6XZcdTAwMWbRiiHgKKBbiKCaKZErXHUwMDA2KEq4XHUwMDA2J3mlsv7ZpFx1MDAwMjKaQKbLJFx1MDAwNVxmYYEpyXOKRra4Q5WhmFx1MDAxMSHMXHUwMDFi5ZRid7LHuCPNyCdFI466eFx1MDAwMoWCfrEj0dOLlPJeX1Y24Vx1MDAxY0lNtDBKXGLI/rOFXHUwMDAxxlx1MDAwNbI+Z9dCcWpSq3bmXlx1MDAxN0hcdTAwMWVdMthoQDpcdTAwMTKhzVx1MDAwYk/wLY9cdTAwMTNcdTAwMTlPm2lcdTAwMTJSuawtfe6D2y+C5Z40iLk17LWUXHUwMDAz/KlBzHtLSlx0oajiYEwhIVx1MDAxMMUhrIKomX698vlp4/i6urfryruoe0hMv1x1MDAxMX3dWnZG4DZtXHUwMDExTFPQd5ZcdTAwMDGzaVx1MDAwYsVcdTAwMDYkrq38gPbA6ULiXHUwMDAyhlx1MDAxYqC9gfCp4cD8lEzQXHUwMDE3QE9cdTAwMTiDXHUwMDEw1Vx1MDAwMi5TjXW+XHUwMDAwXHUwMDAxeZfAdsnz65RcdTAwMThvrVx1MDAwMFHcq/ao5Dt0xkhfXHUwMDA07LQ8XHUwMDFkn5sgjLaZw/TDiL1m55Z4XHUwMDBl+bV5Snb5trk46vhF85CXXHUwMDA215pcdESltPPqMNCcyuZcclx1MDAxNEtEQIcyw5nGgJrFVVx1MDAxMjHSRmktXHUwMDA1SCwstZ5Uj+B2XHUwMDE3XHUwMDAyUIFK2GXimuSHXHUwMDExJaRcdTAwMGWcavXmZie8VlxcXHUwMDE3dao9Krn+nFx1MDAxMdbFXHUwMDA1gZJcdTAwMTVcdTAwMDbUzlx1MDAxMOCQXHUwMDExT4/s5vb15UG3Ujlccu+2XHUwMDBl1ytsoPYrRZOgl1x1MDAwNtmSaGR3XHUwMDE2XHUwMDAxXHUwMDE1z5igKrtMj1x1MDAxOMu5XHUwMDE4Wt72S3pa8twrXHUwMDAyTFwiXHUwMDEwXGbA21x1MDAwNOjFpEZdUyN8QENcdTAwMWOua8ZcdTAwMTRcdTAwMDVcdJFbZc4451pcdTAwMTP6SuN1UUngSNd37i62XHUwMDFiP9yzjbWdwDn9eXjzs6DOSOxcXFx1MDAwZYhJXHUwMDEyMmHDSXqyTVJntHOMsVx1MDAxMZgzm1x1MDAxMt3f8NaKXHUwMDAylUKXXHUwMDFhXs1509xoJb1mLbdxXHUwMDExwVSotPZ9jFakS25PXHUwMDBm1k7Xe7+O62FwuH6MXbr0tGIoMsDXkFx1MDAwYmBlXGZcdTAwMWKjXHUwMDE1bZBcItb9qFLMyOLlg8+mXHUwMDE1amfcXHUwMDAxfeF4jDNN+JlcdTAwMTFIwlx0RJ94sJHp9GLke8VAiMBcdTAwMDJj/r/KLFx1MDAxOMHPl1RBXG5cdTAwMGKQsqFxwvxcIoKInZwllMKEQ7fn1zG8XHJmKXYqe1Qm+NOM1FJUclQlK1wiXHK1vjLDfMbyvl9WXrFNXHUwMDBmylx1MDAxZNI7q81otuRIlERSc6OJsfNcdTAwMWQoW1x1MDAxY7GI5NFlu1xuQMakiZb6XHS88ZyiY7lcdTAwMTTN+NpMRcfyWFT63Fx1MDAwN8dfXHUwMDA02z2p6Dh03pRcdTAwMDP8qZrj0JCnaVxyXjxVgjOioEVnmJ1YvqvR0s5wZlxiYo3dQ4RplopLw0lOQiFiXGaVIDMoXHUwMDExophcdTAwMTBcdTAwMThnXHUwMDBlf1ZlXHUwMDAyXHUwMDEzO81cdTAwMTAzXGJcdTAwMGbAw8JM2nfEqlwiXHUwMDAxYcFcdTAwMTZBIUayXFxcbmOkgUeItzdZsUiClO8tMFx1MDAxMlx1MDAxN1x1MDAxMlx1MDAxOWm1uuTSjk7zlJhP0lx1MDAxZrtcdTAwMDCUXHUwMDAw30L+w6lcdTAwMDHflzlcdTAwMDXymnRGpcSn4ut5d5pRaFx1MDAxNOcwqmRcdTAwMDcjIZmgRE5PLOWb3CwtsVDEscF2koFcdTAwMTFybPKkXHUwMDA0satBXGZcdTAwMTOFXHUwMDAxPCUrKZ/PK5rH0/ol1liI9JKqpDKikVx1MDAwNPlHIKM1oI7YhFx1MDAwNVlgpmBY0SdswbBcZrxSuD6idG+sLDdASlwiuYYkRoNOJGpCZUTYtTKScFx1MDAwNUhcdTAwMTOg3lx1MDAxZiqNby2BqVx1MDAxNDuVPfLuNCOtlG7rYkjhts5cdTAwMTRDjMaE0umzmIprjs+jy7NQRc2Ts1x1MDAwZebru79cdTAwMGVcbqhlubZ10Vx1MDAxONJlu1kpt9BMVyaG27pcdTAwMThky3eGXHRNKFBNMcM8f1tcdTAwMTeCXHUwMDE4J0VcdTAwMGIrqKCIMUj9qWRcdTAwMDVcdTAwMTO1IeBcdTAwMWFcdTAwMGXukrTEsq/jLs1yXHUwMDE2ur+LgoQwtfXmtPu7vLt/6KrT7Vx1MDAxZUbwyFx1MDAxMSlCW3u1++wneczqjeferk3Y1bhcdTAwMWVcdTAwMWbW5LhcdTAwMTEsQlxc29L//H73+7/nXHUwMDBiXHUwMDAzXCIifQ==        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      MarginPaddingContent areaBorderHeightWidth"},{"location":"guide/styles/#width-and-height","title":"Width and height","text":"<p>Setting the width restricts the number of columns used by a widget, and setting the height restricts the number of rows. Let's look at an example which sets both dimensions.</p> dimensions01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass DimensionsApp(App):\ndef compose(self) -&gt; ComposeResult:\nself.widget = Static(TEXT)\nyield self.widget\ndef on_mount(self) -&gt; None:\nself.widget.styles.background = \"purple\"\nself.widget.styles.width = 30\nself.widget.styles.height = 10\nif __name__ == \"__main__\":\napp = DimensionsApp()\napp.run()\n</code></pre> <p>This code produces the following result.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2120649383-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2120649383-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2120649383-r1 { fill: #eeddee } .terminal-2120649383-r2 { fill: #c5c8c6 } .terminal-2120649383-r3 { fill: #e1e1e1 }      DimensionsApp I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0 brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0 me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0 will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see its\u00a0path. </p> <p>Note how the text wraps in the widget, and is cropped because it doesn't fit in the space provided.</p>"},{"location":"guide/styles/#auto-dimensions","title":"Auto dimensions","text":"<p>In practice, we generally want the size of a widget to adapt to its content, which we can do by setting a dimension to <code>\"auto\"</code>.</p> <p>Let's set the height to auto and see what happens.</p> dimensions02.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass DimensionsApp(App):\ndef compose(self) -&gt; ComposeResult:\nself.widget = Static(TEXT)\nyield self.widget\ndef on_mount(self) -&gt; None:\nself.widget.styles.background = \"purple\"\nself.widget.styles.width = 30\nself.widget.styles.height = \"auto\"\nif __name__ == \"__main__\":\napp = DimensionsApp()\napp.run()\n</code></pre> <p>If you run this you will see the height of the widget now grows to accommodate the full text:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3154292342-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3154292342-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3154292342-r1 { fill: #eeddee } .terminal-3154292342-r2 { fill: #c5c8c6 } .terminal-3154292342-r3 { fill: #e1e1e1 }      DimensionsApp I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0 brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0 me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0 will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0 will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0 remain. </p>"},{"location":"guide/styles/#units","title":"Units","text":"<p>Textual offers a few different units which allow you to specify dimensions relative to the screen or container. Relative units can better make use of available space if the user resizes the terminal.</p> <ul> <li>Percentage units are given as a number followed by a percent (<code>%</code>) symbol and will set a dimension to a proportion of the widget's parent size. For instance, setting width to <code>\"50%\"</code> will cause a widget to be half the width of its parent.</li> <li>View units are similar to percentage units, but explicitly reference a dimension. The <code>vw</code> unit sets a dimension to a percentage of the terminal width, and <code>vh</code> sets a dimension to a percentage of the terminal height.</li> <li>The <code>w</code> unit sets a dimension to a percentage of the available width (which may be smaller than the terminal size if the widget is within another widget).</li> <li>The <code>h</code> unit sets a dimension to a percentage of the available height.</li> </ul> <p>The following example demonstrates applying percentage units:</p> dimensions03.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass DimensionsApp(App):\ndef compose(self) -&gt; ComposeResult:\nself.widget = Static(TEXT)\nyield self.widget\ndef on_mount(self) -&gt; None:\nself.widget.styles.background = \"purple\"\nself.widget.styles.width = \"50%\"\nself.widget.styles.height = \"80%\"\nif __name__ == \"__main__\":\napp = DimensionsApp()\napp.run()\n</code></pre> <p>With the width set to <code>\"50%\"</code> and the height set to <code>\"80%\"</code>, the widget will keep those relative dimensions when resizing the terminal window:</p> 60 x 2080 x 30120 x 40 <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-445817433-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-445817433-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-445817433-r1 { fill: #eeddee } .terminal-445817433-r2 { fill: #c5c8c6 } .terminal-445817433-r3 { fill: #e1e1e1 }      DimensionsApp I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0 brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0 me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0 will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0 will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0 remain. </p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1754805562-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1754805562-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1754805562-r1 { fill: #eeddee } .terminal-1754805562-r2 { fill: #c5c8c6 } .terminal-1754805562-r3 { fill: #e1e1e1 }      DimensionsApp I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0 total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0 through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0 the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0 nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain. </p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2592384938-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2592384938-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2592384938-r1 { fill: #eeddee } .terminal-2592384938-r2 { fill: #c5c8c6 } .terminal-2592384938-r3 { fill: #e1e1e1 }      DimensionsApp I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0 its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0 remain. </p> <p>Percentage units can be problematic for some relative values. For instance, if we want to divide the screen into thirds, we would have to set a dimension to <code>33.3333333333%</code> which is awkward. Textual supports <code>fr</code> units which are often better than percentage-based units for these situations.</p> <p>When specifying <code>fr</code> units for a given dimension, Textual will divide the available space by the sum of the <code>fr</code> units on that dimension. That space will then be divided amongst the widgets as a proportion of their individual <code>fr</code> values.</p> <p>Let's look at an example. We will create two widgets, one with a height of <code>\"2fr\"</code> and one with a height of <code>\"1fr\"</code>.</p> dimensions04.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass DimensionsApp(App):\ndef compose(self) -&gt; ComposeResult:\nself.widget1 = Static(TEXT)\nyield self.widget1\nself.widget2 = Static(TEXT)\nyield self.widget2\ndef on_mount(self) -&gt; None:\nself.widget1.styles.background = \"purple\"\nself.widget2.styles.background = \"darkgreen\"\nself.widget1.styles.height = \"2fr\"\nself.widget2.styles.height = \"1fr\"\nif __name__ == \"__main__\":\napp = DimensionsApp()\napp.run()\n</code></pre> <p>The total <code>fr</code> units for height is 3. The first widget will have a screen height of two thirds because its height style is set to <code>2fr</code>. The second widget's height style is <code>1fr</code> so its screen height will be one third. Here's what that looks like.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3235052262-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3235052262-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3235052262-r1 { fill: #eeddee } .terminal-3235052262-r2 { fill: #c5c8c6 } .terminal-3235052262-r3 { fill: #ddeadd }      DimensionsApp I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain. I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain. </p>"},{"location":"guide/styles/#maximum-and-minimums","title":"Maximum and minimums","text":"<p>The same units may also be used to set limits on a dimension. The following styles set minimum and maximum sizes and can accept any of the values used in width and height.</p> <ul> <li>min-width sets a minimum width.</li> <li>max-width sets a maximum width.</li> <li>min-height sets a minimum height.</li> <li>max-height sets a maximum height.</li> </ul>"},{"location":"guide/styles/#padding","title":"Padding","text":"<p>Padding adds space around your content which can aid readability. Setting padding to an integer will add that number additional rows and columns around the content area. The following example sets padding to 2:</p> padding01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass PaddingApp(App):\ndef compose(self) -&gt; ComposeResult:\nself.widget = Static(TEXT)\nyield self.widget\ndef on_mount(self) -&gt; None:\nself.widget.styles.background = \"purple\"\nself.widget.styles.width = 30\nself.widget.styles.padding = 2\nif __name__ == \"__main__\":\napp = PaddingApp()\napp.run()\n</code></pre> <p>Notice the additional space around the text:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3010915833-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3010915833-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3010915833-r1 { fill: #c5c8c6 } .terminal-3010915833-r2 { fill: #e1e1e1 } .terminal-3010915833-r3 { fill: #eeddee }      PaddingApp I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0 that\u00a0brings\u00a0total\u00a0 obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0 over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past, I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0 to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0 there\u00a0will\u00a0be\u00a0nothing.\u00a0 Only\u00a0I\u00a0will\u00a0remain. </p> <p>You can also set padding to a tuple of two integers which will apply padding to the top/bottom and left/right edges. The following example sets padding to <code>(2, 4)</code> which adds two rows to the top and bottom of the widget, and 4 columns to the left and right of the widget.</p> padding02.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass PaddingApp(App):\ndef compose(self) -&gt; ComposeResult:\nself.widget = Static(TEXT)\nyield self.widget\ndef on_mount(self) -&gt; None:\nself.widget.styles.background = \"purple\"\nself.widget.styles.width = 30\nself.widget.styles.padding = (2, 4)\nif __name__ == \"__main__\":\napp = PaddingApp()\napp.run()\n</code></pre> <p>Compare the output of this example to the previous example:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3556018545-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3556018545-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3556018545-r1 { fill: #c5c8c6 } .terminal-3556018545-r2 { fill: #e1e1e1 } .terminal-3556018545-r3 { fill: #eeddee }      PaddingApp I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0 mind-killer. Fear\u00a0is\u00a0the\u00a0 little-death\u00a0that\u00a0 brings\u00a0total\u00a0 obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0 pass\u00a0over\u00a0me\u00a0and\u00a0 through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0 past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0 inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0 path. Where\u00a0the\u00a0fear\u00a0has\u00a0 gone\u00a0there\u00a0will\u00a0be\u00a0 nothing.\u00a0Only\u00a0I\u00a0will\u00a0 remain. </p> <p>You can also set padding to a tuple of four values which applies padding to each edge individually. The first value is the padding for the top of the widget, followed by the right of the widget, then bottom, then left.</p>"},{"location":"guide/styles/#border","title":"Border","text":"<p>The border style draws a border around a widget. To add a border set <code>styles.border</code> to a tuple of two values. The first value is the border type, which should be a string. The second value is the border color which will accept any value that works with  color and background.</p> <p>The following example adds a border around a widget:</p> border01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass BorderApp(App):\ndef compose(self) -&gt; ComposeResult:\nself.widget = Static(TEXT)\nyield self.widget\ndef on_mount(self) -&gt; None:\nself.widget.styles.background = \"darkblue\"\nself.widget.styles.width = \"50%\"\nself.widget.styles.border = (\"heavy\", \"yellow\")\nif __name__ == \"__main__\":\napp = BorderApp()\napp.run()\n</code></pre> <p>Here is the result:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-4021769438-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-4021769438-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-4021769438-r1 { fill: #ffff00 } .terminal-4021769438-r2 { fill: #e1e1e1 } .terminal-4021769438-r3 { fill: #c5c8c6 } .terminal-4021769438-r4 { fill: #ddddef }      BorderApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503I\u00a0must\u00a0not\u00a0fear.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0\u2503 \u2503total\u00a0obliteration.\u2503 \u2503I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2503 \u2503I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0\u2503 \u2503through\u00a0me.\u2503 \u2503And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0\u2503 \u2503the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u2503 \u2503Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0\u2503 \u2503nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b </p> <p>There are many other border types. Run the following from the command prompt to preview them.</p> <pre><code>textual borders\n</code></pre>"},{"location":"guide/styles/#outline","title":"Outline","text":"<p>Outline is similar to border and is set in the same way. The difference is that outline will not change the size of the widget, and may overlap the content area. The following example sets an outline on a widget:</p> outline01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass OutlineApp(App):\ndef compose(self) -&gt; ComposeResult:\nself.widget = Static(TEXT)\nyield self.widget\ndef on_mount(self) -&gt; None:\nself.widget.styles.background = \"darkblue\"\nself.widget.styles.width = \"50%\"\nself.widget.styles.outline = (\"heavy\", \"yellow\")\nif __name__ == \"__main__\":\napp = OutlineApp()\napp.run()\n</code></pre> <p>Notice how the outline overlaps the text in the widget.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1750754037-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1750754037-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1750754037-r1 { fill: #ffff00 } .terminal-1750754037-r2 { fill: #e1e1e1 } .terminal-1750754037-r3 { fill: #c5c8c6 } .terminal-1750754037-r4 { fill: #ddddef }      OutlineApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503ear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503ear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0\u2503 \u2503otal\u00a0obliteration.\u2503 \u2503\u00a0will\u00a0face\u00a0my\u00a0fear.\u2503 \u2503\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0\u2503 \u2503hrough\u00a0me.\u2503 \u2503nd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0\u2503 \u2503he\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u2503 \u2503here\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b </p> <p>Outline can be useful to emphasize a widget, but be mindful that it may obscure your content.</p>"},{"location":"guide/styles/#box-sizing","title":"Box sizing","text":"<p>When you set padding or border it reduces the size of the widget's content area. In other words, setting padding or border won't change the width or height of the widget.</p> <p>This is generally desirable when you arrange things on screen as you can add border or padding without breaking your layout. Occasionally though you may want to keep the size of the content area constant and grow the size of the widget to fit padding and border. The box-sizing style allows you to switch between these two modes.</p> <p>If you set <code>box_sizing</code> to <code>\"content-box\"</code> then space required for padding and border will be added to the widget dimensions. The default value of <code>box_sizing</code> is <code>\"border-box\"</code>. Compare the box model diagram for <code>content-box</code> to the to the box model for <code>border-box</code>.</p> content-boxborder-box <p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1cXGlT28pcdTAwMTL9nl9Bcb/Gysz0bJ2qV6/Yl1x1MDAxMCAsXHTJq1spYVx1MDAwYizwXHUwMDE2W8bArfz31yNcdTAwMTZJliWwMY6TukpCsEaWRjN9Tp/uWf55s7CwXHUwMDE43XSCxfdcdTAwMGKLwXXVb4S1rj9YfOvOX1x1MDAwNd1e2G5RkYg/99r9bjW+slx1MDAxZUWd3vt375p+9zKIOlxyv1x1MDAxYXhXYa/vN3pRv1x1MDAxNra9arv5LoyCZu+/7ueu31xm/tNpN2tR10tcdTAwMWVSXHRqYdTu3j0raFx1MDAwNM2gXHUwMDE19eju/6PPXHUwMDBiXHUwMDBi/8Q/U7XrXHUwMDA21chvnTeC+Fx1MDAwYnFRUkGpzPDZ3XYrrqxUXFxLieyxPOyt0tOioEaFZ1TjIClxp1x1MDAxNtVJX+2Y48anXHUwMDBmK8tcdTAwMDfXjWZ40lo+Tlx1MDAxZXpcdTAwMTY2XHUwMDFhh9FN464h/Gq9301VqVx1MDAxN3Xbl8GXsFx1MDAxNtWpnFx1MDAwZp1//F6tXHUwMDFkuVxuPFx1MDAxNnfb/fN6K+j1Ml9qd/xqXHUwMDE43bhzLKn/XSO8X0jOXFzTp1xuXGJcdTAwMGa1NVxcXHUwMDFhRW9rRNIg7lx1MDAwNkJ5Qlx1MDAxYtDKMlx1MDAwYkYrXHUwMDA1Q1VbaTeoL6hqf7H4SOp26lcvz6mCrdrjNVHXb/U6fpd6LLlucP/SiqFcdTAwMDfGXG4trFx1MDAwMouQvE89XGLP65HrXHUwMDEzwT1mXHUwMDE1glF3T9NJbYK4Y1x1MDAwNENtuNaQvKWrQ2erXHUwMDE2m8jfw1xyW/e7nfv2W+y5XHUwMDBmqfq7qq9ccttX2sZSnf/j+uvG9tnJPr+48LdVyGorXHUwMDFmLlx1MDAwZVx1MDAxZe+VMUi/221cdTAwMGZcdTAwMTZcdTAwMWZLft7/llSt36n5d2bmXkRIxplcdTAwMTQqeaFG2Lqkwla/0UjOtauXiWXGZ3++nVx1MDAwMFx1MDAxMFx1MDAxYaFcdTAwMTBcdTAwMTCAXHUwMDFjJTPPR0TQ6e5o4P5t31x1MDAxZixvfP+6Jzu6WYCIXpvQPTZcdTAwMWWGvvVcdTAwMTRcdTAwMWPgKTSA8VxiXHUwMDAymlx1MDAxYq1RSc6MzKCBc/C44Fx1MDAxYYAjWSAyVYhcdTAwMDZ1XHUwMDA2taosRcNfsqqDM5VHXHUwMDAyKONZpSTBUuVBIFx1MDAxNHpcdTAwMDJcdLNMXHUwMDAyMDKMXHUwMDFjXGK4Je5ijIOdLVxiqns7X+snm8e1XHUwMDFixFZ/l3dMvVx1MDAxNv6GIJBWXHUwMDE3gYBcYlxuXGZcIpfPXHUwMDA2XHUwMDAxRqfB7sdGY1x1MDAxYsz+5kr9495BuLkxmVtcdTAwMTCFbsHv1afrXHUwMDE2XHUwMDEwPCEtKs6UloZZkcWBXHUwMDA2jyhcdTAwMThAKaG4JNdQiINAXHUwMDFi81x1MDAxMq+Q7vNHXGJwaYdtXHUwMDFlXHUwMDA01YLqNWOT34K1o5Poy97H9kmwXHUwMDFmNcLLz8fV76NNPlxurqOUxb8tu+3h0fopu8L95tGn6HJ5aXn1eFuL5yGp9L5Tr27m6rfPfeCvw32mnmmlamxcdTAwMTHkpSaq1TiG37tcdTAwMTZcdTAwMWSz/vXHSudQXpyurP6wrZrembJcdTAwMTJcdTAwMWPT8z2NeOdWUFgrNaAwRmJcdTAwMDbxgNZcdTAwMDPpXHUwMDA0IEeUWlxmU9H0ZKBcdTAwMTZ5vFx1MDAwYjVcZndcdTAwMGVcbiW5YvNcbjpvmsaYdHq7XHUwMDE1XHUwMDFkhrdBrFEzZ9f9Zti4yfRbbKVU049+9zxspduyXHUwMDE30DOD2Mdnrl5qhOfOjlx1MDAxN1x1MDAxYsFZ1sCjkFx1MDAwMqfH4qidevMqPd2n23W3asNv0e6G9GS/cZStyUTYXHUwMDAyI1xusSWsZEKq57vTpUF978dutHVzc1xm6+2br6dflr75M4yy2ITgXCLhiNJyi1JcdTAwMDCyrDtcdTAwMDVhXHR65G+F0lrSP/Nq6EpcdNoydGkjKVx1MDAxYzMptz9cdTAwMTNvurRdw9Wr3dMts1x1MDAwNlx1MDAxZjuDXHK5PMDOL1x1MDAxM5Avw+6+X6uFrfN5XHUwMDAw70NVJvOMglx1MDAwZp99QC93XHUwMDAyUY+RXCIpl1x1MDAxZvNcbl5yfSVaWFxi7YlcdTAwMTlpYTlCXHUwMDBii9Tz7tHLhdRcbq36g3wj5PC1QsVUq1x1MDAwNWorfzTIcDTIqvStoFtcdTAwMDKzZlirpVx1MDAwM8Ms0p5cbuiGwZepZylcdTAwMDLLY1IsXHUwMDE0qFxcOM/CpFx1MDAxNM9cdTAwMDZitX/bWPmxXHUwMDE0+T40XHUwMDBlj1pcdTAwMWbPw5NOrVx1MDAwMIjVbrvXq9T9qFovXHUwMDAyoyxcdTAwMDLj1FWqS9BQkIekQJXT5CqDRc6ZR1wilYFVxlpGTqxcdTAwMTCLz8jPlGLx6Vx1MDAxY1xyXHUwMDEyXHUwMDE56Lxv1Vx1MDAxNtEgn3F+ctnfq96eXW037GF7XHUwMDBm+X57U/k4hYCyxj5/qHZPbtesXHUwMDFhyNslXFw7XHK7dj5TPnfPXHUwMDFmXHUwMDA1rZLgT3AgzjdqXGYnV97UY2OrMOkzdWxxMmlkoLlLsFx1MDAxYiVTuVx1MDAxNHdcdTAwMDPJOVx1MDAxNVtcdTAwMGLUXHUwMDFhWnElhlE/PZVcbpw8LpJcdTAwMWIzXHUwMDFjJLd6xFBcdTAwMDBYj0JRbUFw61x1MDAwNLVcdTAwMWPGXHUwMDE5xalWKlx1MDAxNJMgLa7qrL1gL/K70XLYiqXa+1x1MDAxNNjIXHUwMDEzVvtxt3qMSWRKWmpdgVxmXHUwMDEznC2e+524kz1uUFx1MDAxYdTuMomJOFh4XHUwMDFjK7vzYitwc7Mp+ss7XHUwMDFi+uhi/Zj8WCNYekDnI+ZcdTAwMTeDVq20Slx1MDAxNeZRXGKHwFx1MDAxNZBp0N8kdnmslPBcdTAwMTCpOiCQrjNaK1NUqdFuKVepht+LVtrNZuiU3n47bEXDTVx1MDAxY7flklx1MDAwM3w98HP6mF4qXTbMXGZcdTAwMWR3xyyjJr8tJKCJPzz+/vfbkVdcdTAwMTeasjsqOStObvcm/f+4op2DKkxhc1x0zKF7XGZKXHUwMDFibSwzpbTJpLvlnlx1MDAxMZI4nNpfMMwltdBcdTAwMTOCsKKEJTzxYrXw4qRW0lx1MDAxYiVht+JEwZKzXHUwMDE5R90v0Fx1MDAwNq/gw8eJXG7yUfdyu1tLi/tfXHUwMDE3dN/XZDJJwpUsnJjA3aBcdTAwMWaF3qlBqqfwW67SpjNcdTAwMDY1deyCXHUwMDE0XHUwMDFlkMKnuJskPcEziVx1MDAwMe/kXGLzNLNGXHUwMDEzsIFcdTAwMWPecEJgeuAlXHUwMDE3p7R2ro34W1oxXCJBTSxPjKtBMpD0x/JcXFAuXGYyhlx1MDAwMn9TNTLsP59cdTAwMTJcdTAwMDWGoTVGS01q0VKclFx1MDAxM1x1MDAwNdazmjqOSJm5aTYyrWX+dE1QaFDuqORtaUxRUMwqXHUwMDE0y1x1MDAxNFx1MDAwNjqMXHUwMDE0PSGNP19cdTAwMTWUz3mZY1bhhFxyXHUwMDE0SiphWHaCh+SS7NJYRnJNkVx1MDAwNac4dvqsotHB06lngopMJf3TtGKssFx1MDAwNFx1MDAxMUZcdTAwMTdwqfNRXHUwMDBlt4bCXHUwMDAxnCRT/9vxXG7ziClcdTAwMTSBQ3CjiFaS5khcdTAwMDKgXCJcdTAwMWFcdTAwMTk9O+83p5FcIlx1MDAwYnJH3nbGpJFYNo1gXHUwMDExhOJMpDUomLYqueIpXHUwMDEy0cd0Tn7b3T9cdTAwMWaovY3o1lZcdTAwMDbt7mQkMruxcsmUZ610Q+HkwFxmXHUwMDFmykJq4Vx1MDAxMblQkVx1MDAxNKhcZvLXXHUwMDFizpPoWdTU4kZcbklcdTAwMDYgR1xm7zGPWSlcdTAwMDGsJDVlNaRH9Vx1MDAxZcSJdrGRSc0km1x0iVx1MDAxMM+mXHUwMDA2l16DRLI3my62M2VTXHUwMDA1dnGvuqMyokOnXHUwMDA0bVxyavjsI7RcdTAwMTGIbUhrPz/qODw+Xr3+hD++NU5cdTAwMDbtlVUxOPig+nNcdTAwMGZtLjwmjFFcdTAwMWFJXHUwMDA0gM7mQIH0gbGK2oFcdTAwMTSEpk+vlzKQpJBcdTAwMTVX6Vx1MDAxMYRcdTAwMTSkIVx1MDAxNo9mxLxcdTAwMThO6Fx1MDAxMnbWUFx1MDAxNoCQxDz/QvnhyPeiOypJXHUwMDA3Tkvbo8XhsylpT0EygHq+tF/fXGYvwP9yeHKw9v3G9PR688BuzT10XHUwMDAxPDBAYVxmMi7lkFems1x1MDAxZfltyzl55Hio/lx1MDAxNaW9Mlx1MDAwNlx1MDAxMJVcdTAwMDYg8YVyRPaPOF5cdTAwMTC9W+DGpfRVzidzelx1MDAwN6TXkDNW9lxc8pQpTWX8XCIjxPXF8vbpkeZXl37YPFx1MDAxZfRcdTAwMWHLXHUwMDExT09cdTAwMWRNZ1x1MDAxMShcdTAwMDJcdTAwMTbIKFZcdTAwMDOOViPafFx1MDAxZYFTME2UJ8m6XHUwMDE1oHrAU8FcYsZrksirav1KsU3FxTlzmlx1MDAxNq9wLorlvlx1MDAxMoxcdTAwMTGNyedrgsp1/fvR5dbFWuvbh481pj/rw09zPzVWUiylwFquSbNcIiP1lWVcdTAwMTZccp5QXHUwMDAy3ChcdTAwMGXxrFx1MDAxNq+3Ror8XHUwMDA2Z4JcZl4yN8/BwKj5fORzgOojjXGLXHUwMDE1VC5nXHUwMDAwZCDaoJpgqvyLiIXE6lxcXHUwMDEwXHUwMDBi8zhDNMqNgVx0hdqkoPSYndQgUbhoXHUwMDE2uFL4h7JKiTm5Y9iQxuSUosFJa1xus5DWcCZcdTAwMTlcdTAwMWIjXHRZ3uvzSihMeU5cdTAwMTRKaS1YJYaUikBPXHUwMDEzj1x1MDAxM4ujdvmU11MqKlx1MDAwMWTJuCRIt1x1MDAxYc6KXHRiipeMS5b7ioypjTVnqVxc3Jbe98HuS2hutuOdm3e9ljKAXzXeeV+TUkYoyjtcdTAwMTBcdTAwMWZcdTAwMTdSQiwySM2PkXhY2j483Fplllx1MDAxZKxcdTAwMWT8WGnsbKnjrVx0XHUwMDA3JmbHXHTIPa1Rc5JcdTAwMTkk45TKJlx1MDAxZVB6XHUwMDFjhdVCXHUwMDE40NrK11t/wz3rVsBcdTAwMDI9xFxyQOmU/EtcdTAwMTSG8khcdTAwMDVZXHUwMDA0i0ZKrUx+XHQquVxmdGNcdTAwMTMzjl6IU8FMgr4/PFx1MDAwZlEp7ta4ON+jYzr7XCJoW1W4+EdwXHUwMDA2XGJcIj2g/uTKOlx1MDAxZV2cXHUwMDFlX0U7387WQrH+5Wrtw+lg3pFNze2RXHUwMDE3Z8LSoVx1MDAxZIqz0HbJIGFcdTAwMTW5e+Pmmr4mtEFow9yQXHUwMDExcVxijExLMM+6OaBWaYoxOeaCh3heoeapqGI2uDYgXne88bfFdUGfxqW57lx1MDAxY1x1MDAxM9UlXHUwMDEzlFThsiDBlFx1MDAwMW7ZXHUwMDE4XHUwMDEzXGZbS2ebn7+sRlx1MDAxYqe3N7jx+Vx1MDAxY7aD02kvXGaa/nxp48JEQ3yqKebnILJcdTAwMTOUXGZRKvlrZrTlbjFcdTAwMWRcdTAwMGVVbHq4ttTLwjDDrTI8PTybXHUwMDFhMDBWulx1MDAwNFx1MDAxYVx1MDAwMFx1MDAxOIGc59bPc0GBl8suzTgrQO2X0lxi089cbny++bz27Wj95OKK0LpcdTAwMTNt3X5a2d0uSDdyQOGmlFx1MDAxOVCMJNaIqcxuzlx1MDAxOTlHaigmKTTmf2y6scik4sK8NU2NVqB4taFVaMmN4vPXXG53t0Cavf7tdme9YTe+Nb/uhLti3lnFLVx1MDAxNSbbc0pcZrQxmF1taKRHoolcdTAwMTlFP5hg/PXEgqWIg7ulZZLiLyPtiEQj97hcdTAwMTVcdTAwMWNccuNuzbKFXHUwMDE0wz2QilIxoGZMKsJcdTAwMWGchlp4MakwjyCkXGJJWjO00pr0eox7SqFWXHUwMDE0JFx1MDAwMJWhdpTMilx1MDAwN+X9p3FKoUG5o5KzpTEppSjZaIrXTYJbiWdcdTAwMTV//mSl8n6fU0LhXHUwMDE2PWDAOVx1MDAxMDzIv1x1MDAwZi3r0tTyUlPUrIxb7FaypdWLk42JPirbe4BcIiVyrVx1MDAwMFx1MDAxM0RcdTAwMTgvyTaWS9CMrY2VbSx3QqX3fTD8XHUwMDEypptttvHOeFNcdTAwMDbwq5KNd1x1MDAxNZlMY5BwK5RcdTAwMThWU4huxtjdq3yjprmdXHUwMDAzXHKeUlJQjOYmobCko+M5TtJlXCKZXHUwMDExQFElXHRcdTAwMTBePJxJN/Lli4YzyYJJSVx1MDAxMztcdItSKVx1MDAxY7U9ifBQkY7Qd9tUMsjHLmi15NJMsunjbzdcdLriVoFyt5OMdfNL2ajhS+2h5syCllTKpEzJ96yQXHUwMDE5vZdBToD8TjKjUmJUcXnensaUXHUwMDFhxdFLSnRcdTAwMGUxXHUwMDBiUiBFfTVcdTAwMDazlO+FM7fMXCI8a4lcdTAwMTZAo0tGXHLNnpTK01x1MDAxMq1LXHUwMDBmoYSS9ZYvJ1x1MDAxNivjdVx1MDAwMlx1MDAxNH0wRcH6qOjFepriSW7BXHUwMDA1llx1MDAxNvJrtrj7srRcdTAwMTNtJjtcdTAwMGa8Mpo9JDOaXkpcdTAwMTjLjeYmtfjoIVwioV5cIk/odlx1MDAwNFaotMoss8jQx+jNuHL08WfEL5Vio3JH3pzGpJXS7V+wZFx1MDAxNlx1MDAxNrqlMEaPseji5lxmev1PW8dw+vX6y/fT6569Piqa3jlX279I5lHrut0nQIGgTshcdTAwMGWluP15rZvFgi5nJYUuli4v3/+Fe6SUXGZcdTAwMTZtXHUwMDAwIzxcdTAwMDBhXHUwMDE41aFgpjZcdTAwMTlcdTAwMTEhkU8yU/vfnWCet1x1MDAxM8yb+5su+p3OYUS3fCRFauuwdlx1MDAxZv8kt1m8XG6DwfKInZrP4sNVOW5cdTAwMDSHkMC19D8/3/z8P1KdJ/cifQ==        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      MarginPaddingContent areaBorderHeightWidth </p> <p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1cXGtT28hcdTAwMTL9vr+CYr/G2nn0vFJ161x1MDAxNs9cdTAwMTBcdTAwMTJcYpCsgdzaSim2sFx1MDAwNbJlZFx1MDAxMSBb+e+3RybWw5KwjU2c7CqpXHUwMDA0NLLU1vQ5fbrn8fdva2vr8f3AW3+5tu7dtdzAb0fu7fpcdTAwMGJ7/otcdTAwMTdccv2wj00s+X1cdTAwMTjeRK3kym5cdTAwMWNcdTAwMGaGL//4o+dGV148XGLclud88Yc3bjCMb9p+6LTC3lx1MDAxZn7s9Yb/tf9cdTAwMWW6Pe8/g7DXjiMnfUjDa/txXHUwMDE4jZ7lXHUwMDA1Xs/rx0O8+//w97W1v5N/M9ZFXit2+53ASz6QNKVcdTAwMDaCkMWzh2E/MVZIXHUwMDAyyihcdTAwMTi3+8NtfFrstbHxXHUwMDAyLfbSXHUwMDE2e2r9rue/8+NmcPL57IB5XHUwMDE3LvGvXHUwMDA2nfShXHUwMDE3flx1MDAxMLyP74PRi3Bb3ZsoY9IwjsIr79Rvx11sp4Xz48+1w9hcdTAwMWEwbo7Cm06371xyh7lcdTAwMGaFXHUwMDAzt+XH9/ZcdTAwMWMh47Ojl/ByLT1zh79x7nBKtNRCcVwiOOhxq/082GaiOVx1MDAxN1xmXHUwMDE4SC5cdTAwMGKGbYVcdTAwMDH2XHUwMDA0XHUwMDFh9jtJjtSyz27rqoPm9dvja+LI7Vx1MDAwZlx1MDAwN26E/ZVed/vwlVx1MDAwNTFcdTAwMGVXmkmmXHUwMDA114an36br+Z1ubI1h1CFaXHUwMDE4rsToaVx1MDAxOWu8pFskp5wrotm4wZoweN1O/OOv4lvtutHg4eWtXHUwMDBm7S9cdTAwMTnzreU7RefKOlim51xy8TZO7k7J3edBXHUwMDEzneY0eHfahPG9ct7oRlF4uz5u+fbwU2razaDtjnyMSslcdTAwMTlcdTAwMTB8+6D5uD3w+1fY2L9cdIL0XFzYukrdMjn77cVcdTAwMWNokIZVoYFqYjRcdTAwMTDK2NR4ODm97MZcdTAwMWLhtup97Hxccj5+eCvfvb2vwMMwRGzPjIbCp1x1MDAxZVx1MDAwM1x1MDAwM39cZlx1MDAwYpSgt1x1MDAwYsZcYjFcdTAwMDZ9jGb8yH5eoP9RySRBJzXEyKJdKVx1MDAxOMRcdTAwMDVvt6BcdTAwMTZcZr9DS3pcdTAwMTdiXHUwMDEyXGJcXChHXHUwMDBiXHUwMDAxUisxiVx1MDAwMSaMw4yRmiA0XHRcdTAwMTOTXHUwMDE44JxqLkHA82Kg9e7tefds78/2vTH9m0M6UN22/1x1MDAxM2JcdTAwMDA0VGKAUMJcdTAwMDDUXGYxYftcXJxcXDc9ev9n8+xEXHUwMDBm995cdTAwMDSXXHUwMDFmTueLXHSsXG5cdTAwMDVtd9hdbEyg6GTC8jBwXHLAqVB5XHUwMDFjKOooQzlcdTAwMDEjXGZjylTiwJNKPSUooH9PQoBmYtSDzzNcboDxKXv5szj94U5M3vpcdTAwMWRcdTAwMTF/jravTuLgXCLce/Wm3Olj7y7O+PyLutteXGZOXulX/a2d/YbYi09aXHUwMDAxOT6/m1x1MDAwZUtcdTAwMTX3zVnxYtov8uMgmrMzKyiVrkInSCRFaVx1MDAxNJlcdTAwMWGcXHUwMDA3XHUwMDFmVaB29oP30cX713s3w43b1n60YME2Y4iaQq8x6TCigVx1MDAxOcWI4kJCXHUwMDBlm/hcblx1MDAxY661tGKNXHUwMDBiMLxcdTAwMTKbT1x1MDAxNWySTUKTiVwiMlx1MDAwMcMkXG6yZUSjRTpj2ulhP37vf7XvnZHc2V2351x1MDAwN/e5fku81DqSXHUwMDFidfx+9lVcdTAwMGU9fOZIN+Wu3lxi/I714/XAu8g7eOxjfjNujsPMN2/h0128XfS6XfxcdTAwMTZh5OOT3eBD3pK5sMVcdTAwMTWtwlx1MDAxNkXppylcdTAwMTAxfeR7c35w+nZn+PntznHcUTuvOifdT3NGvrmyITJcdTAwMWa6qHFAXHUwMDAxXHUwMDEwXGZrhGNOkkeX4tIxkoNAiYgvg6uloSujMWrQRVxyXHUwMDEzXHUwMDEyreR68fCqXHUwMDBiUFFHXHUwMDFlNFx1MDAwM/r5LrzqkyDUp2Hv4vCHib2ngffIbbf9fmdcdTAwMTXQ+92U+UJj5itcdTAwMTfhK4iNXHUwMDE3POMmj8G3XtmsKnyphDrhisjF5OlZhCuUXGJXllx0xlx1MDAwZvhcdTAwMDVcblx1MDAxOMzR8X+d8MgnXHUwMDEwtoXNaNVcdTAwMWG+K7dcdTAwMWNmplx1MDAxY2Yt/JRcdTAwMTfVXHUwMDAwree329k0Lo+1x7KvXCL8cnbWYrA+gzSqXHUwMDEyiEQxRtksXHUwMDE5ZGfbb59s3HXce/ewXHUwMDE37t1cZm72gFRcdTAwMDCxXHUwMDE1hcNho+vGrW5cdTAwMTVcdTAwMTihXG6MXHUwMDBiXHUwMDE3qkkxXHUwMDA1OCgjXHUwMDA0l0LlXHUwMDBii4JqR6AyJJpQplxyiEooTlFLqYXi4/VcdTAwMTSDykaWXHUwMDA0V8JcdTAwMTlVmstnriY2L11/6+p6p8ng3WB/+PngVu2cPyn7XHUwMDFi3fe8/fVi19/a273YdU9PT10uP7Y+rWaFZvT8MmwhdqrAhXxcdTAwMGWU80xF7DFs1b/pmbFVWaFZOLZcdTAwMThcdTAwMDOHalx1MDAxNKuGIbKooDxcdTAwMDcujSrWgNFcdTAwMDQ1LJGELS9cdOTUYWAoXHUwMDAzRTlQLUuq9txcdTAwMDLdSI1g0txcdTAwMTBcdTAwMDZFnKH1wsBcXCliYulzx8Bh7Ebxpt9PpNrLXGbSMFx1MDAwZbZukk51XGJKXGZMXHUwMDEwNL5cXFsqTkG23nFcdTAwMDdJXHUwMDE3O1x1MDAxNN1VXHUwMDE5aS9cdTAwMDOTdtHaeExrXHUwMDE0w+KtY3bNdjY25T5rvTmmh/y8t/1cdTAwMWSaY8Cve/12rUlccuIwXHJcdTAwMDYlXHUwMDExJ1rjX6kmjGKOMWhcdTAwMGVnXHUwMDA2r1NSXG5VZVR5UJowKnCH8VbY6/lW51x1MDAxZIV+Py6+4uRdbli0dz13Qlx1MDAxZuOXyrZcdTAwMTVpYWDvmKfT9Ke1XHUwMDE0Mskv45//elF6daUn26Mx4cTp7X7L/j+raEfXXHUwMDE3xdNjsYCRx8pYPT2hlTvLs1x1MDAxMtqcwlx1MDAxZDRihitqhLKygFx1MDAxNataysGEXFxK7Fx1MDAxZMy6dbVaeHJVK33ZdXk31cJIhO3PI1xyllx1MDAxMMJnyVxuJvPuzTBqZ8X9j0u7XHUwMDFmLJlPkVBUlpVcYmbSKIXeP/2gab1IW8yA0cLRXHUwMDBiRDtSXHUwMDEwJE4g3GiTwedIjmAzZkVcdTAwMWP9TGnk0KWhXHUwMDE3g5yQ0lx1MDAwNjdkcNCspESNPM/xXHUwMDFhjpaCLVx1MDAxM9CJpNygnVx1MDAxNNRcdTAwMWMltVWQI8VcdTAwMDD6mCpQxGilJGDXXGKt02g0Vlx1MDAwNdrRkmEqRFxmkahUICtmfnVRUOlP9mhMutKMqqCaVLjkxdNjUsHwx7iZZWZS/fyUXHUwMDE1Jlx1MDAxNVx1MDAwMIZZu1accZpGkIRTXHUwMDE4qlWCnlx1MDAwYlRcdTAwMTCioLqU93ROkYZcdTAwMTJI1LN9Xiqcc6SiNNOIXHUwMDEwNFx1MDAwNclDTiQ50tY5XHUwMDA05mT/XHUwMDAwViHYb0YgNFx1MDAxOFVcdTAwMDJJJX1cdTAwMWJp/lNFXCLlk+h+clx1MDAxMqlyIHtMus6MJJJoplx1MDAxMlx1MDAwZdGiejyAII1cdTAwMGL0yOnHynfc+91B0CHNe9o6+nIs2NZ1pz9cdTAwMWaFPN9YOShw8ItcIj2D4sJQmtclglJcdTAwMDdTPWCUXCLhSrk8XVwiMN2XmOyXliCpU6xOfs8yXHUwMDEwPVxcSzPPdMbVJo38zVx1MDAxNovlXFzbQoFcXNKL9lx1MDAxOPffgoCLwKxcdTAwMDIuYlpcYok6e2rcfo1JTM8uL4/5K7155DF+pE/C1cetclx1MDAwNFKmRKFjU6g8bJUmXHUwMDBlalx1MDAwMi2JoFx1MDAxY4XZ8opcdTAwMDGA2ldQkVx1MDAxZFx1MDAxYlx1MDAxOKOWODyRhSWwTSZcdTAwMGZgXHUwMDE2NMeg3r+wTdpcdTAwMTZcbtvJXrRHI+3ARal2wyonp1FJmJI0XHUwMDFik1x1MDAxZkNu97T1seG7uumfiNthXHUwMDE0XGbgar9q4G91kGvszFHCXGZTzNhZNPmBXHTJXHUwMDE0akOpNGWYWGUnky9etVx1MDAxYrt4g9tcdTAwMDVcdTAwMDE2PYCSup5cdTAwMWShxORBg5DKlutFxpxcdTAwMTGUNbdF2J82XHUwMDAwl2f8XHUwMDA0iOBcXFx1MDAxYqFcdTAwMTRXoFVWi49HJ1BcdTAwMTNJ4Fx1MDAxOG64ydVcdTAwMDRyYl1cXEf87O71wac+XHUwMDA0fPPr8aG5fffpkbGJZXLIUmV8o9qlkuZJb1pcdTAwMTSvUKKqS4xIYVxcIK9MX2I87X9yNztcdTAwMWJcdTAwMDfXsblcdTAwMGVft44/6aG6Wn1iUY62Yy+Gg9CSZtZtJcSiqMOMXaYkUVx1MDAxNDC+vFx1MDAxMU9MXHUwMDE5gFx1MDAxM84lXHUwMDEwUJiz8ZJygKHoKlxuXHUwMDEzXHUwMDBlwTRXYrJcdTAwMTiAmFI8y0k/O62gMqaYvFwiWVwiLlxieiOdZFx1MDAxNe1IXHUwMDBlXHUwMDE4XHUwMDE4XGYjnFxuUVlH/EexSrU72aPoSDMyStWoo1bV1UXQXHUwMDA0I7NR009cdTAwMTUs769V51x1MDAxMyRcZoxvmml0VU15fqWX5MqRQlx1MDAwM1x1MDAwM8XxXmp583xTXHUwMDE41I43XHUwMDAyp9RcdTAwMGXaz05cdTAwMThPXHUwMDE5bqyPXHUwMDE0OVebaSZSvbStve93v19cdTAwMDbNzTWMuTfqtYxcdTAwMDP8qGHMXHUwMDA3S2pcdTAwMTmhquaQXHUwMDFioyzOq1wiRlx1MDAxYqpcdTAwMTlMP1x1MDAwZmEn2N30olx1MDAwZsHB9kWjcfl+b/NAdVc+d7GpXHUwMDBiQt1cYm2IMpLnU1x1MDAxN0GoYydvUmaFs1x1MDAxMMurOlx1MDAxMEdcdTAwMTLDkPIxg0LuZ7REYYBwXGJBMapcdTAwMDU2M010SfHQ2HnFdJ6lXHUwMDAxqyAyfrUqRHWv2qMx2aEzxvoqZGeHxlxuwFaCSsblXGZcdTAwMDOJW/os+qT3z/eGTdlvXHUwMDFmeTJqbp6tOq5BMocwzKE0SClcdTAwMDXPZ1x1MDAwZWCsLtVSXHUwMDAyaFBMXHUwMDE2J0gvXHUwMDEy11x1MDAxYWWVlkJJSqTWZSVcdLA7XHUwMDFjoFxmVIKJZMnVXHUwMDA0rDm26rmUwFNRndryL6rHXHUwMDE3VPapPVx1MDAxYVx1MDAxM905I6irS1x1MDAwMjWLXGYwvbKlRlx1MDAwZdOXXHUwMDA0ro/8+y3SNedcdTAwMWa67Y7vn53e7u6t/ChcdTAwMDFcdTAwMDNwXGaVRktjXGLDfLqwdYnmXHUwMDBlxUxTKWqzTbnEcVx1MDAwMlx1MDAwNKVDsEeYpkTR7Gq8zCCf5lx1MDAwMrBdc66YoXRiXHI7xYTDUFwi5plTuFxu0C4vNqKjUtSPJNlMXHUwMDA3aHZcdTAwMDZNWmy0U42JXHUwMDExXHUwMDA0OFx1MDAxM7Sy2rjt9ptnPGTn9+JcdTAwMGJcdTAwMWKqo2PYV41ftS7QqPSpUeuEOy2MWZioLFx1MDAwZVx1MDAxOCWTXYCmXHUwMDE3XGaXYuvd61x1MDAxYlxugygkV1+uXHUwMDA2zd1ccrq/6sRiXHUwMDE3XHUwMDAxK1wiXHUwMDExiShcdTAwMDeULTlcdTAwMTaIhTmMMrthXHUwMDEyXHUwMDAzu6JrebzC7OQ7u9hYKjvJSZcsXG62w1hcdTAwMTQoXHUwMDA2ICGl0lxcZ1x1MDAwMsN3ZtHG2PDzI1KBJTFcdTAwMGJxiCDSXHUwMDBls1x1MDAwMoKEI7WUzDGiXHUwMDBlZVxcM0zXXGJcdTAwMDVM6SqXM/yjmKXaqezRKPGnXHUwMDE5qaWq6qhqJFx1MDAwYrpcdTAwMGJcdTAwMTUzTEcq77FcdTAwMTXnXHUwMDE1JoQjNJN25Vx1MDAwMFxiY1xuq7ZAXHUwMDFhh2qFnopdw1x1MDAxOC9cdTAwMWG2wKJj+uC6oqO09Icq65lcdTAwMTc51IvRnKvNVHWsj0W19/3u98sgu7mqjiPnzTjAjyo6jlxmmU9qQMbFi8NcdTAwMTBUXHUwMDE4JG0mp6851m+atLKTnFxyKjmuXHTlRmCQyqcwXG6sXHUwMDEwwVx1MDAxNIeB3dOnZoJcIlx1MDAwN+7Ck2pcdTAwMTNcdTAwMDSNtSNRo9XYwpTtP8JcdTAwMWMjXHUwMDA0hlx1MDAwNTtcdTAwMDVcdTAwMGWN5ZM5XGbmWUJcdTAwMTIxzz5cXKugNGZbPGGXeVKN6krb7TUwnGaS/1x1MDAwN1xyYreLsVwiXVx1MDAwMrZcdTAwMTKAjIovSJDSrVxuJiTIzyQ0XHUwMDFhNU6VtE/604xKozqJ0ZVFT8G5xD9meq1Rv9nNXG5cdTAwMTNcdTAwMGKVnNi1lPhfcVxupeCONFx1MDAwNLVcYv4k6qZQPp1YNCQrXHUwMDAxJNGWXHUwMDE3oIRX7PIwRmzJSlx1MDAxOM3snKtcIq/gWck5Uz9gifiySiPUQaEnQWNcdTAwMTKjqZJUlVRGhGPXXHUwMDFlUVBcYlx1MDAxZCFFblx1MDAxZEWOPco325pgj18jgWlU+5Q9Jr1pRlap3dzFsMokxqC254ZPTyyt4y+dm6NBcDxodT9s0r1cdTAwMGZfL5tVeyyt2NYu0tFcbr8tui9nupDH2G1yXHI6LbW+bZipnjzx9K1dqMOBVi2sYII5ljUsXHUwMDAzlk/VtjsoamaL88+b4vy8W7zMQoe/fb9xctN1dzB4XHUwMDFm4y3HhIjv2m8/pD7pbda/+N7tZsmGyVx1MDAxN8lhTU5egsWHZ9/0399++/Z/3Vx1MDAxNVx1MDAwZVx1MDAwMiJ9        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }      MarginPaddingContent areaBorderHeightWidth </p> <p>The following example creates two widgets with a width of 30, a height of 6, and a border and padding of 1. The first widget has the default <code>box_sizing</code> (<code>\"border-box\"</code>). The second widget sets <code>box_sizing</code> to <code>\"content-box\"</code>.</p> box_sizing01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass BoxSizing(App):\ndef compose(self) -&gt; ComposeResult:\nself.widget1 = Static(TEXT)\nyield self.widget1\nself.widget2 = Static(TEXT)\nyield self.widget2\ndef on_mount(self) -&gt; None:\nself.widget1.styles.background = \"purple\"\nself.widget2.styles.background = \"darkgreen\"\nself.widget1.styles.width = 30\nself.widget2.styles.width = 30\nself.widget2.styles.height = 6\nself.widget1.styles.height = 6\nself.widget2.styles.height = 6\nself.widget1.styles.border = (\"heavy\", \"white\")\nself.widget2.styles.border = (\"heavy\", \"white\")\nself.widget1.styles.padding = 1\nself.widget2.styles.padding = 1\nself.widget2.styles.box_sizing = \"content-box\"\nif __name__ == \"__main__\":\napp = BoxSizing()\napp.run()\n</code></pre> <p>The padding and border of the first widget is subtracted from the height leaving only 2 lines in the content area. The second widget also has a height of 6, but the padding and border adds additional height so that the content area remains 6 lines.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-4007017859-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-4007017859-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-4007017859-r1 { fill: #ffffff } .terminal-4007017859-r2 { fill: #e1e1e1 } .terminal-4007017859-r3 { fill: #c5c8c6 } .terminal-4007017859-r4 { fill: #eeddee } .terminal-4007017859-r5 { fill: #ddeadd }      BoxSizing \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503\u2503 \u2503I\u00a0must\u00a0not\u00a0fear.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503\u2503 \u2503I\u00a0must\u00a0not\u00a0fear.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0\u2503 \u2503brings\u00a0total\u00a0obliteration.\u2503 \u2503I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2503 \u2503I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b </p>"},{"location":"guide/styles/#margin","title":"Margin","text":"<p>Margin is similar to padding in that it adds space, but unlike padding, margin is outside of the widget's border. It is used to add space between widgets.</p> <p>The following example creates two widgets, each with a margin of 2.</p> margin01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass MarginApp(App):\ndef compose(self) -&gt; ComposeResult:\nself.widget1 = Static(TEXT)\nyield self.widget1\nself.widget2 = Static(TEXT)\nyield self.widget2\ndef on_mount(self) -&gt; None:\nself.widget1.styles.background = \"purple\"\nself.widget2.styles.background = \"darkgreen\"\nself.widget1.styles.border = (\"heavy\", \"white\")\nself.widget2.styles.border = (\"heavy\", \"white\")\nself.widget1.styles.margin = 2\nself.widget2.styles.margin = 2\nif __name__ == \"__main__\":\napp = MarginApp()\napp.run()\n</code></pre> <p>Notice how each widget has an additional two rows and columns around the border.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3040518129-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3040518129-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3040518129-r1 { fill: #e1e1e1 } .terminal-3040518129-r2 { fill: #c5c8c6 } .terminal-3040518129-r3 { fill: #ffffff } .terminal-3040518129-r4 { fill: #eeddee } .terminal-3040518129-r5 { fill: #ddeadd }      MarginApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503I\u00a0must\u00a0not\u00a0fear.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u2503 \u2503I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2503 \u2503I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u2503 \u2503And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u2503 \u2503Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503I\u00a0must\u00a0not\u00a0fear.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u2503 \u2503I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2503 \u2503I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u2503 \u2503And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u2503 \u2503Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b </p> <p>Note</p> <p>In the above example both widgets have a margin of 2, but there are only 2 lines of space between the widgets. This is because margins of consecutive widgets overlap. In other words when there are two widgets next to each other Textual picks the greater of the two margins.</p>"},{"location":"guide/styles/#more-styles","title":"More styles","text":"<p>We've covered the most fundamental styles used by Textual apps, but there are many more which you can use to customize many aspects of how your app looks. See the Styles reference for a comprehensive list.</p> <p>In the next chapter we will discuss Textual CSS which is a powerful way of applying styles to widgets that keeps your code free of style attributes.</p>"},{"location":"guide/widgets/","title":"Widgets","text":"<p>In this chapter we will explore widgets in more detail, and how you can create custom widgets of your own.</p>"},{"location":"guide/widgets/#what-is-a-widget","title":"What is a widget?","text":"<p>A widget is a component of your UI responsible for managing a rectangular region of the screen. Widgets may respond to events in much the same way as an app. In many respects, widgets are like mini-apps.</p> <p>Information</p> <p>Every widget runs in its own asyncio task.</p>"},{"location":"guide/widgets/#custom-widgets","title":"Custom widgets","text":"<p>There is a growing collection of builtin widgets in Textual, but you can build entirely custom widgets that work in the same way.</p> <p>The first step in building a widget is to import and extend a widget class. This can either be Widget which is the base class of all widgets, or one of its subclasses.</p> <p>Let's create a simple custom widget to display a greeting.</p> hello01.py<pre><code>from textual.app import App, ComposeResult, RenderResult\nfrom textual.widget import Widget\nclass Hello(Widget):\n\"\"\"Display a greeting.\"\"\"\ndef render(self) -&gt; RenderResult:\nreturn \"Hello, [b]World[/b]!\"\nclass CustomApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield Hello()\nif __name__ == \"__main__\":\napp = CustomApp()\napp.run()\n</code></pre> <p>The three highlighted lines define a custom widget class with just a render() method. Textual will display whatever is returned from render in the content area of your widget. We have returned a string in the code above, but there are other possible return types which we will cover later.</p> <p>Note that the text contains tags in square brackets, i.e. <code>[b]</code>. This is console markup which allows you to embed various styles within your content. If you run this you will find that <code>World</code> is in bold.</p> <p> CustomApp Hello,\u00a0World! </p> <p>This (very simple) custom widget may be styled in the same was as builtin widgets, and targeted with CSS. Let's add some CSS to this app.</p> hello02.pyhello02.css hello02.py<pre><code>from textual.app import App, ComposeResult, RenderResult\nfrom textual.widget import Widget\nclass Hello(Widget):\n\"\"\"Display a greeting.\"\"\"\ndef render(self) -&gt; RenderResult:\nreturn \"Hello, [b]World[/b]!\"\nclass CustomApp(App):\nCSS_PATH = \"hello02.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Hello()\nif __name__ == \"__main__\":\napp = CustomApp()\napp.run()\n</code></pre> hello02.css<pre><code>Screen {\nalign: center middle;\n}\nHello {\nwidth: 40;\nheight: 9;\npadding: 1 2;\nbackground: $panel;\ncolor: $text;\nborder: $secondary tall;\ncontent-align: center middle;\n}\n</code></pre> <p>The addition of the CSS has completely transformed our custom widget.</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3039259228-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3039259228-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3039259228-r1 { fill: #e1e1e1 } .terminal-3039259228-r2 { fill: #c5c8c6 } .terminal-3039259228-r3 { fill: #1e1e1e } .terminal-3039259228-r4 { fill: #fea62b } .terminal-3039259228-r5 { fill: #e2e3e3 } .terminal-3039259228-r6 { fill: #e2e3e3;font-weight: bold }      CustomApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258aHello,\u00a0World!\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p>"},{"location":"guide/widgets/#static-widget","title":"Static widget","text":"<p>While you can extend the Widget class, a subclass will typically be a better starting point. The Static class is a widget subclass which caches the result of render, and provides an update() method to update the content area.</p> <p>Let's use Static to create a widget which cycles through \"hello\" in various languages.</p> hello03.pyhello03.cssOutput hello03.py<pre><code>from itertools import cycle\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\nhellos = cycle(\n[\n\"Hola\",\n\"Bonjour\",\n\"Guten tag\",\n\"Salve\",\n\"N\u01d0n h\u01ceo\",\n\"Ol\u00e1\",\n\"Asalaam alaikum\",\n\"Konnichiwa\",\n\"Anyoung haseyo\",\n\"Zdravstvuyte\",\n\"Hello\",\n]\n)\nclass Hello(Static):\n\"\"\"Display a greeting.\"\"\"\ndef on_mount(self) -&gt; None:\nself.next_word()\ndef on_click(self) -&gt; None:\nself.next_word()\ndef next_word(self) -&gt; None:\n\"\"\"Get a new hello and update the content area.\"\"\"\nhello = next(hellos)\nself.update(f\"{hello}, [b]World[/b]!\")\nclass CustomApp(App):\nCSS_PATH = \"hello03.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Hello()\nif __name__ == \"__main__\":\napp = CustomApp()\napp.run()\n</code></pre> hello03.css<pre><code>Screen {\nalign: center middle;\n}\nHello {\nwidth: 40;\nheight: 9;\npadding: 1 2;\nbackground: $panel;\nborder: $secondary tall;\ncontent-align: center middle;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-448424460-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-448424460-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-448424460-r1 { fill: #e1e1e1 } .terminal-448424460-r2 { fill: #c5c8c6 } .terminal-448424460-r3 { fill: #1e1e1e } .terminal-448424460-r4 { fill: #fea62b } .terminal-448424460-r5 { fill: #e2e3e3 } .terminal-448424460-r6 { fill: #e2e3e3;font-weight: bold }      CustomApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258aHola,\u00a0World!\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p> <p>Note that there is no <code>render()</code> method on this widget. The Static class is handling the render for us. Instead we call <code>update()</code> when we want to update the content within the widget.</p> <p>The <code>next_word</code> method updates the greeting. We call this method from the mount handler to get the first word, and from a click handler to cycle through the greetings when we click the widget.</p>"},{"location":"guide/widgets/#default-css","title":"Default CSS","text":"<p>When building an app it is best to keep your CSS in an external file. This allows you to see all your CSS in one place, and to enable live editing. However if you intend to distribute a widget (via PyPI for instance) it can be convenient to bundle the code and CSS together. You can do this by adding a <code>DEFAULT_CSS</code> class variable inside your widget class.</p> <p>Textual's builtin widgets bundle CSS in this way, which is why you can see nicely styled widgets without having to copy any CSS code.</p> <p>Here's the Hello example again, this time the widget has embedded default CSS:</p> hello04.pyhello04.cssOutput hello04.py<pre><code>from itertools import cycle\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\nhellos = cycle(\n[\n\"Hola\",\n\"Bonjour\",\n\"Guten tag\",\n\"Salve\",\n\"N\u01d0n h\u01ceo\",\n\"Ol\u00e1\",\n\"Asalaam alaikum\",\n\"Konnichiwa\",\n\"Anyoung haseyo\",\n\"Zdravstvuyte\",\n\"Hello\",\n]\n)\nclass Hello(Static):\n\"\"\"Display a greeting.\"\"\"\nDEFAULT_CSS = \"\"\"\n    Hello {\n        width: 40;\n        height: 9;\n        padding: 1 2;\n        background: $panel;\n        border: $secondary tall;\n        content-align: center middle;\n    }\n    \"\"\"\ndef on_mount(self) -&gt; None:\nself.next_word()\ndef on_click(self) -&gt; None:\nself.next_word()\ndef next_word(self) -&gt; None:\n\"\"\"Get a new hello and update the content area.\"\"\"\nhello = next(hellos)\nself.update(f\"{hello}, [b]World[/b]!\")\nclass CustomApp(App):\nCSS_PATH = \"hello04.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Hello()\nif __name__ == \"__main__\":\napp = CustomApp()\napp.run()\n</code></pre> hello04.css<pre><code>Screen {\nalign: center middle;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-448424460-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-448424460-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-448424460-r1 { fill: #e1e1e1 } .terminal-448424460-r2 { fill: #c5c8c6 } .terminal-448424460-r3 { fill: #1e1e1e } .terminal-448424460-r4 { fill: #fea62b } .terminal-448424460-r5 { fill: #e2e3e3 } .terminal-448424460-r6 { fill: #e2e3e3;font-weight: bold }      CustomApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258aHola,\u00a0World!\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p>"},{"location":"guide/widgets/#default-specificity","title":"Default specificity","text":"<p>CSS defined within <code>DEFAULT_CSS</code> has an automatically lower specificity than CSS read from either the App's <code>CSS</code> class variable or an external stylesheet. In practice this means that your app's CSS will take precedence over any CSS bundled with widgets.</p>"},{"location":"guide/widgets/#text-links","title":"Text links","text":"<p>Text in a widget may be marked up with links which perform an action when clicked. Links in console markup use the following format:</p> <pre><code>\"Click [@click='app.bell']Me[/]\"\n</code></pre> <p>The <code>@click</code> tag introduces a click handler, which runs the <code>app.bell</code> action.</p> <p>Let's use markup links in the hello example so that the greeting becomes a link which updates the widget.</p> hello05.pyhello05.cssOutput hello05.py<pre><code>from itertools import cycle\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\nhellos = cycle(\n[\n\"Hola\",\n\"Bonjour\",\n\"Guten tag\",\n\"Salve\",\n\"N\u01d0n h\u01ceo\",\n\"Ol\u00e1\",\n\"Asalaam alaikum\",\n\"Konnichiwa\",\n\"Anyoung haseyo\",\n\"Zdravstvuyte\",\n\"Hello\",\n]\n)\nclass Hello(Static):\n\"\"\"Display a greeting.\"\"\"\ndef on_mount(self) -&gt; None:\nself.action_next_word()\ndef action_next_word(self) -&gt; None:\n\"\"\"Get a new hello and update the content area.\"\"\"\nhello = next(hellos)\nself.update(f\"[@click='next_word']{hello}[/], [b]World[/b]!\")\nclass CustomApp(App):\nCSS_PATH = \"hello05.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Hello()\nif __name__ == \"__main__\":\napp = CustomApp()\napp.run()\n</code></pre> hello05.css<pre><code>Screen {\nalign: center middle;\n}\nHello {\nwidth: 40;\nheight: 9;\npadding: 1 2;\nbackground: $panel;\nborder: $secondary tall;\ncontent-align: center middle;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1129364893-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1129364893-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1129364893-r1 { fill: #e1e1e1 } .terminal-1129364893-r2 { fill: #c5c8c6 } .terminal-1129364893-r3 { fill: #1e1e1e } .terminal-1129364893-r4 { fill: #fea62b } .terminal-1129364893-r5 { fill: #e2e3e3;text-decoration: underline; } .terminal-1129364893-r6 { fill: #e2e3e3 } .terminal-1129364893-r7 { fill: #e2e3e3;font-weight: bold }      CustomApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258aHola,\u00a0World!\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p> <p>If you run this example you will see that the greeting has been underlined, which indicates it is clickable. If you click on the greeting it will run the <code>next_word</code> action which updates the next word.</p>"},{"location":"guide/widgets/#rich-renderables","title":"Rich renderables","text":"<p>In previous examples we've set strings as content for Widgets. You can also use special objects called renderables for advanced visuals. You can use any renderable defined in Rich or third party libraries.</p> <p>Lets make a widget that uses a Rich table for its content. The following app is a solution to the classic fizzbuzz problem often used to screen software engineers in job interviews. The problem is this: Count up from 1 to 100, when the number is divisible by 3, output \"fizz\"; when the number is divisible by 5, output \"buzz\"; and when the number is divisible by both 3 and 5 output \"fizzbuzz\".</p> <p>This app will \"play\" fizz buzz by displaying a table of the first 15 numbers and columns for fizz and buzz.</p> fizzbuzz01.pyfizzbuzz01.cssOutput fizzbuzz01.py<pre><code>from rich.table import Table\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass FizzBuzz(Static):\ndef on_mount(self) -&gt; None:\ntable = Table(\"Number\", \"Fizz?\", \"Buzz?\")\nfor n in range(1, 16):\nfizz = not n % 3\nbuzz = not n % 5\ntable.add_row(\nstr(n),\n\"fizz\" if fizz else \"\",\n\"buzz\" if buzz else \"\",\n)\nself.update(table)\nclass FizzBuzzApp(App):\nCSS_PATH = \"fizzbuzz01.css\"\ndef compose(self) -&gt; ComposeResult:\nyield FizzBuzz()\nif __name__ == \"__main__\":\napp = FizzBuzzApp()\napp.run()\n</code></pre> fizzbuzz01.css<pre><code>Screen {\nalign: center middle;\n}\nFizzBuzz {\nwidth: auto;\nheight: auto;\nbackground: $primary;    color: $text;\n}\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1462933360-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1462933360-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1462933360-r1 { fill: #e1e1e1 } .terminal-1462933360-r2 { fill: #c5c8c6 } .terminal-1462933360-r3 { fill: #dde6ed } .terminal-1462933360-r4 { fill: #dde6ed;font-weight: bold }      FizzBuzzApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Number\u2503Fizz?\u2503Buzz?\u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u25021\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u25022\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u25023\u00a0\u00a0\u00a0\u00a0\u00a0\u2502fizz\u00a0\u2502\u2502 \u25024\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u25025\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502buzz\u00a0\u2502 \u25026\u00a0\u00a0\u00a0\u00a0\u00a0\u2502fizz\u00a0\u2502\u2502 \u25027\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u25028\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u25029\u00a0\u00a0\u00a0\u00a0\u00a0\u2502fizz\u00a0\u2502\u2502 \u250210\u00a0\u00a0\u00a0\u00a0\u2502\u2502buzz\u00a0\u2502 \u250211\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u250212\u00a0\u00a0\u00a0\u00a0\u2502fizz\u00a0\u2502\u2502 \u250213\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u250214\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u250215\u00a0\u00a0\u00a0\u00a0\u2502fizz\u00a0\u2502buzz\u00a0\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p>"},{"location":"guide/widgets/#content-size","title":"Content size","text":"<p>Textual will auto-detect the dimensions of the content area from rich renderables if width or height is set to <code>auto</code>. You can override auto dimensions by implementing get_content_width() or get_content_height().</p> <p>Let's modify the default width for the fizzbuzz example. By default, the table will be just wide enough to fix the columns. Let's force it to be 50 characters wide.</p> fizzbuzz02.pyfizzbuzz02.cssOutput fizzbuzz02.py<pre><code>from rich.table import Table\nfrom textual.app import App, ComposeResult\nfrom textual.geometry import Size\nfrom textual.widgets import Static\nclass FizzBuzz(Static):\ndef on_mount(self) -&gt; None:\ntable = Table(\"Number\", \"Fizz?\", \"Buzz?\", expand=True)\nfor n in range(1, 16):\nfizz = not n % 3\nbuzz = not n % 5\ntable.add_row(\nstr(n),\n\"fizz\" if fizz else \"\",\n\"buzz\" if buzz else \"\",\n)\nself.update(table)\ndef get_content_width(self, container: Size, viewport: Size) -&gt; int:\n\"\"\"Force content width size.\"\"\"\nreturn 50\nclass FizzBuzzApp(App):\nCSS_PATH = \"fizzbuzz02.css\"\ndef compose(self) -&gt; ComposeResult:\nyield FizzBuzz()\nif __name__ == \"__main__\":\napp = FizzBuzzApp()\napp.run()\n</code></pre> fizzbuzz02.css<pre><code>Screen {\nalign: center middle;\n}\nFizzBuzz {\nwidth: auto;\nheight: auto;\nbackground: $primary;\ncolor: $text;    }\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3191086047-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3191086047-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3191086047-r1 { fill: #e1e1e1 } .terminal-3191086047-r2 { fill: #c5c8c6 } .terminal-3191086047-r3 { fill: #dde6ed } .terminal-3191086047-r4 { fill: #dde6ed;font-weight: bold }      FizzBuzzApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Number\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503Fizz?\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503Buzz?\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u25021\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u25022\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u25023\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502fizz\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502 \u25024\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u25025\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502buzz\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u25026\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502fizz\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502 \u25027\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u25028\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u25029\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502fizz\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502 \u250210\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502buzz\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u250211\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u250212\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502fizz\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502 \u250213\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u250214\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502\u2502\u2502 \u250215\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502fizz\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502buzz\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <p>Note that we've added <code>expand=True</code> to tell the <code>Table</code> to expand beyond the optimal width, so that it fills the 50 characters returned by <code>get_content_width</code>.</p>"},{"location":"guide/widgets/#line-api","title":"Line API","text":"<p>A downside of widgets that return Rich renderables is that Textual will redraw the entire widget when its state is updated or it changes size. If a widget is large enough to require scrolling, or updates frequently, then this redrawing can make your app feel less responsive. Textual offers an alternative API which reduces the amount of work required to refresh a widget, and makes it possible to update portions of a widget (as small as a single character) without a full redraw. This is known as the line API.</p> <p>Note</p> <p>The Line API requires a little more work that typical Rich renderables, but can produce powerful widgets such as the builtin DataTable which can handle thousands or even millions of rows.</p>"},{"location":"guide/widgets/#render-line-method","title":"Render Line method","text":"<p>To build a widget with the line API, implement a <code>render_line</code> method rather than a <code>render</code> method. The <code>render_line</code> method takes a single integer argument <code>y</code> which is an offset from the top of the widget, and should return a Strip object containing that line's content. Textual will call this method as required to get content for every row of characters in the widget.</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1cXGtT28hcdTAwMTL9nl9BsV/2Vlx1MDAwNe109zxTtXVcdTAwMGJIIISER4BcdTAwMTBya4tcdTAwMTK2bFx1MDAxNORcdTAwMDe2eG7lv99cdTAwMWWHWPJDxjY2ce5d71x1MDAwNowk2+OZc7pPP0Z/v1haWk7vmtHyq6Xl6LZcdTAwMTQmcblcdTAwMTXeLL/0x6+jVjtu1PlcdTAwMTR2/m43rlqlzpXnadpsv/rjj1rYuojSZlx1MDAxMpai4DpuX4VJO70qx42g1Kj9XHUwMDExp1Gt/W//cyesRX82XHUwMDFitXLaXG6yXHUwMDBmWYnKcdpoff+sKIlqUT1t87v/h/9eWvq78zM3ulZUSsN6NYk6L+icylx1MDAwNqjR9Vx1MDAxZt1p1DuDtWhJkJa6e0Hcfs1cdTAwMWaXRmU+W+EhR9lcdTAwMTl/aFndXHUwMDFlnVx1MDAxY16fNnfM0d398cmhkqdlzD61XHUwMDEyJ8lBepd8n4mwdH7Vyo2pnbZcdTAwMWFcdTAwMTfRcVxcTs/5vOw73n1du8GTkL2q1biqntejtv/+0D3aaIalOL3zX0J0XHUwMDBmfp+DV0vZkVv+a0VcdTAwMDVOklx1MDAwMuuUMMZcdJd9sn89KFxurFJGgUGhrXR941pvJLxcdTAwMTI8rt9UhcolmY3sLCxdVHl49XL3mrRcdTAwMTXW282wxeuVXXfz8I3JUICCXHUwMDAwVffUeVx1MDAxNFfPU1x1MDAwZiPUgVLOKtLKOevQZMOIOstcdTAwMDFaXHUwMDFhRONM9u38hze3ylx1MDAxZGT8lZ+wevlhwupXSZKN159404+mPKJyK920Z9VduFx1MDAxMVxmiFx1MDAxOGpn764qm4er3e/UXHUwMDAzv7DVatwsd898e3iWjeiqWVx1MDAwZdOHL2GURGLgWYvd80lcXL/oXHUwMDFmbNIoXWQw7Fx1MDAxY/32clxu+IOAQvzzSljhQMmx8Z9cXLy7PD1vbev9N3uJhlx1MDAwYrmLd1x1MDAxYlx1MDAwNfgvtVx1MDAxYe32ynmYls6LOIAz4lx1MDAwMIhHSeBE4LRgiFx1MDAxYqFcdTAwMDXwXHUwMDFh9JDAuMA5XHUwMDA3vCokrdVAhSRcdTAwMTCdx/QkUFJcdTAwMDaakCRcdFx1MDAwNVx1MDAwMEOoQFpcdTAwMDRcdTAwMTaYplKTpy3qXHUwMDAxKpBTXGYkUnZmVFx1MDAxOFx1MDAwMVaDRln9LGA1aFx1MDAwYrHqnCG2XGZkx1x1MDAwNqvaxvVSZecmxNXjk1x1MDAxYqrCadIuMtZ9gPt5MIWA0JA2glx1MDAxNFx0hFx1MDAwMZhK6yRcdTAwMWFUxlhw84QpXHUwMDA1XHUwMDAytEKrXGaw0bWDOEVcdTAwMWJoLZgvWqAmxvQgTlx1MDAxZCn2KFx1MDAxYWZnslx1MDAxZsOpmVx1MDAxNU6jJImb7eGKQkNcdTAwMTFKnbcsykpcdTAwMWNcdTAwMWKk+1uV6+279t37xsV++nqrtd3ePL+cXHUwMDA2pPB8IPUwJJBsw7RcdTAwMDX2IL0gtS5QhtFAiEJYJfqFzkQg/a1cdTAwMTIqVDhcYlCgQFxuROU08i822nJcdTAwMTChgIHSWjJcbkEgXHUwMDExylx1MDAwMVEh2bxaySrwf1xuoCbnVvpcdTAwMDCK1pFGY8dcdTAwMDcolurV++Rz+aB+bj/o9kH49cRcdTAwMTS5/EVcdTAwMDGo4oVcdTAwMTdCXHUwMDFha0AjsLPsXHUwMDA1qFxyXHUwMDE4XHUwMDExvFx1MDAxNk4oyVx1MDAwMNZPXHUwMDA06JlcdTAwMTBqXlx1MDAwMCW2v0Yw1Z5ccqD2OVx1MDAwMKpcdTAwMGI1qXKs0YhyjHxcZqDHe1x1MDAxN/d7n87XXHUwMDEy8UnvbO2+PvhcdTAwMWNcdTAwMDItOEBRXHUwMDA20kipXHUwMDE0aFx1MDAwMM1cdTAwMTBQvVxiNYFcdTAwMTGCueqIp4qVwJNcdTAwMTBcbnjGmnZeXGLl8TlhrNC/XHUwMDFlQkdqUetcbr08XHUwMDAwSZBKuPFBWj7Y3CuX3lx1MDAxZlx1MDAxZX01N1dcdTAwMWZut1Vauf70XFwgXHUwMDE1U4FUXHUwMDA0QILYO3JULpSPm7BcdTAwMDekoFxcXHUwMDAw0jlEXHUwMDA2MVx1MDAxOYbIk1BqnFx1MDAxMlx1MDAxNcQhrt5cdTAwMDdEikNcdTAwMDNyUqNcdTAwMWOePtBcdTAwMWO/SZSKjFx1MDAxNPwzXHUwMDA35Vx1MDAxZoZUasPhnZ5cdTAwMDSmWVrgXHUwMDA3ZOjhyLdi9HZfMySp8PHy+uaotH178WXjrb7/fLe+d4234yVcdTAwMTVejnrfuSYrXGZcdTAwMWJkSbPiXFxcdTAwMWHdpsPohrYw9EMjrVx1MDAwNDOBSzhxXHUwMDFm31x1MDAxZidcdTAwMDdvjqp2rXK1trL1QZVcdTAwMGWnS9M9o1Mgli0sSViyoPWhXHUwMDE39NFcclx1MDAwMz5swElcdTAwMDFI4Pqj0tlcdTAwMDV/mMuOZFx1MDAxNFP9lGLyK+/DZmj650SeR0HOVoVtuppcdTAwMDDkXHUwMDE5mFx1MDAxYfX0IL7vXHUwMDAwVfRcdTAwMWPdXGJrcXLXg4dcdTAwMGX6X3Vmulx1MDAxYaVcdTAwMDFPfzlqnfKnRb/f/Sn+lV+yduRcdTAwMGb7V9uel68mcdVcdTAwMTNmOYkqvUxK41KYdE+njWZ2tsTDXHT57Vpb5f6v1WjF1bhcdTAwMWUmh49cZm0qVlNxqFxmXHUwMDFjXHUwMDBikdMwfvJRXHUwMDFklsT2znFsWnt2o11cdTAwMGJ33ea7rV+C1Up4SrNzXCKle4NlNq1cdTAwMDEosFx1MDAxNkmwi2NcdTAwMTU2P1ZcdTAwMGZLNlx1MDAwZbKa1Vx1MDAxY0p2o5l5mSepL0vr7urg8qDkbPJ2O6xcXGxdfjibXHUwMDE5qVnTimzZflxuqWFxSVxyU5JajojehHLkI5qxSZ2YKt6n+9H1p9219fhzJV7Zw5tfgNQqQMGKmONcdTAwMTFcdTAwMTamprekhopcdTAwMDJhQLP168R4pm9gs/TUQ2K2IZ6anOPh2GdcInWj9CVsnVTfXHUwMDFlxXs7d+5g/8Jd7u/OjtSan/1cXFLj4pJcdTAwMWFcdTAwMWYh9fdcdFx1MDAxZsJqsLk0Wb+vJiU5XG5cdTAwMTg/aThaqy0qq1lWM29cdTAwMWRcdTAwMWFAzf6YSd6rwDWfVtrn45RcdTAwMDUgnJ9cdTAwMDJcdTAwMDewgVWGPOJRO8rlKLPUXGZcdTAwMDRoXHUwMDA1x2eWQ3Difznp8KNkzr5cdTAwMWOJ9CS0XHUwMDFmXGZ68eHIiKB3XHUwMDE0X0lLmspcdLfTsJWuxfVyXFyv9lx1MDAwZeyhJWRrjGCvw/DSlVx1MDAxZuWKXGKUlZJNtjI8JG0zseVnJmzyNTqwqKzzVXOSzFxioVx1MDAwNr480+3xQX1U5eZXiCvq6HiXPtRcdTAwMGWqq9VwtWBQXHUwMDA2wPB/1pLjNVdcdTAwMDNjXHUwMDAyXG5cYqWUwvjAz6EzXHUwMDAzY0rCdrreqNXilOd+r1x1MDAxMdfT/jnuTOaqJ/95XHUwMDE0XHUwMDBlmFx1MDAxNv5O+XP9VqLp37HX7GfPljJcdTAwMWF1/ug+/+vl0KuLsf39bD+qs/d7kf89uYFcdTAwMTNS9Fx1MDAxZv5h4CRcdTAwMThfUp+guDxauC6uhbNcdTAwMDFLe9ZcdTAwMDO+PFwiOf7qXHUwMDE1LiBcdTAwMDOn0WhpNIl8d8LMXHJcdTAwMWPKwFdg0DphhVOZQ8/6IJitvCp8gXS+ijOsJUghaWEmalx0mrl94zHgJL08k9q30WFvzpSIXHUwMDAwhFx1MDAwNuGs9Wl9XHUwMDBlrVx1MDAxNeSu+m5LePk77S+KULMxXHUwMDE5/OpjWbeTnd23qzWx6u7bZ7T1+vBetdebw4eEmlx1MDAxOExaW7Ik+HPNwJBAXHUwMDA0JFx1MDAxNS8w+1XprFx1MDAwNPdrm7dcImT7x8ogqGdm3vKxwEDzXGbrXHUwMDE29M1EY9u30Vx1MDAxYX5x7Vx1MDAxYrJEQ1x1MDAwNGRWSqFtb1x1MDAwZVx1MDAxNTXbN+NcdTAwMWJalCAgkvOLzNin+5KEVk5LadlMXHLpoFx1MDAwMVx1MDAxNVx1MDAwMFx1MDAwM1x1MDAwNSQrXHUwMDEydJZoiIWz1lxuMmaSTq+ZW7ipI64xLdzoXHUwMDFjQI85YelGzCpjkWWEM4NcdTAwMDbO16TYhnhcdTAwMDPoW+zUYMVmLFx1MDAwYrd1e5rcrVSPcUW3PsLnzXfNK7k3fEhsctF6YUasZyzpIUNcIoau0lxuoNP++ovbt0Jg+8fKIKYnNHCFWSco7lxyRI7IWDVOXHUwMDEyoI7U51x1MDAxM5m3wu7Actg+j2bZyc3YXHUwMDE2qHjWmY/ev/dFp8h+lGkhnWKZl/dcdTAwMDYzzzrl2oeyrFM21q7xXHUwMDEyXGZcdTAwMDRHM+yu6mJptkXQl6Ped751J2JdlKVTp8tmge452s1mZaWGXHUwMDFm2ayDtFx1MDAxNTd//087qvopfbnUfVx1MDAxMlx1MDAwNMFfXHUwMDA1SS3d8y7zTmo9MsKRpmNkP4fLtSn221x1MDAwZtZGPvKewH7EryVtv0nCS6rJXHUwMDBioq9cdTAwMWI3t7VcInm0IP1cdTAwMWMrXCKQaIT1qlx1MDAxM1xmWtvfXHUwMDE3XHUwMDA3Tlx1MDAwN1xuXHUwMDA0XHUwMDBiVO8/zdOa4Ofdz+FNvlx1MDAwNtLuacroiVxyXHUwMDFk8yxfkW9cdTAwMDM3z9PsxIFjYfLXi+lOz8H4RZ1K+0vdnF9cXH84PLtf+1irt+tuM1l4dqBwznI4L1x1MDAxOXhGqL6aXHUwMDBlSfa+TivB/6N4Ws/onLnB4ouv6Nm18Vx1MDAxM7gxzypcdTAwMTD5lqBcXNpnTk1JJFx1MDAwYiud2vq9RGqCRurRSZNcdTAwMDWVnDogjUL4rVNWXHSw/d1cdTAwMGJcIjDo87iW8WjNXHUwMDFjXHUwMDBinWNKTuLoz29cdTAwMTN6XHUwMDE2xTlX62+F31fzjzKciTIs7k8q7jpcdTAwMTSKpFx1MDAxNdaNnzNcdTAwMWKdNFhQhqtcdTAwMDBcdTAwMTUq0dnAxXymfrdnXHUwMDAyXHJW++SF1ajnV1x1MDAxMVx1MDAxOJPhljQoXprniSnn6sNcdTAwMThcXEr/XHUwMDEz+82X4a44Ka6N76PNV8dcdTAwMWYjOJhcdTAwMWS92fq0cXK11npT3r9d/bJn381U146i9zBh+yi9/T5O5dCXu5Umlvn9/Fx1MDAwZVgtXHUwMDEyKVx1MDAwZfeU0UZcdTAwMTdcdTAwMGLbMbb/j1x1MDAxMLaghm0hXHUwMDFk7FRija2cmSysW9Rd/lJcdTAwMTgzVWVwqk6l90yypdW9raXjTl/QXCJ0KPVcdTAwMGZpJINcdTAwMGIrW7r4XHUwMDBlXHUwMDA2KKRcdTAwMDSfa1x1MDAxZb+LePSSz3lX+FRcdTAwMTT2XHJcdTAwMTOGY0Gyxlx1MDAxN4Ogd1x1MDAxYlx1MDAwZVx1MDAwN4zOXHUwMDE3iDhe1Fx1MDAxMmGEh35cdTAwMWGBpVx1MDAwYoS0vqeRQ1x1MDAwMVx1MDAxNlx1MDAwNEPobGWgrZagJZtcdTAwMTOgXFz+6MF3I1x1MDAwN21mlvtcdTAwMDVGsk/lXHUwMDBiXHUwMDAys69ajXZcdTAwMDZLPUVwYVx00Vx1MDAxOFx1MDAxMKT81FHuqodcIjhcdTAwMDbGMZitXHUwMDAzniRp7WCPz1h1q9H7zHpcdTAwMDYloNM6gdJcdTAwMDdcdTAwMWHo01x1MDAxZYOjooC1oUFeclx1MDAwNpiU4tcuXVx1MDAxNULYP/rBm73Zi/zv6dJrVHxjXHUwMDBi35BmnZ5AhVT3bk72t1blUUlhfFgtl0qfP5ZnqkImtGDqUVx1MDAwYlx1MDAxNiAozfAxvu8kn9TsaFx1MDAxMCNcdTAwMDLpXHUwMDA0XHUwMDBiXHUwMDE0R8hRRv+wZpZbU96OknWK/OpcdTAwMDNcZuudfjS5ZslqY1xyPq2ncpFza7xcdTAwMDIzvOFLkTBXuW6HPkpcdTAwMTAvgGOvP75T39i5rq2vJPK02Tyrne5v7X51Z5s/OfKWj0rzwJBjny4sXHUwMDE4Ry5/XHUwMDAzle+0kFx1MDAwMet2sEjOXGIj5rjfb9x6rtTkd8o9z81cYizHXHUwMDAyk2w7/Sc6ntY7gSws/liw3v+Pn1x1MDAwM/uyefYubFx1MDAxZdy//Xik11x1MDAwZeMvd9vVm2e7XHUwMDFiw1TOybeFS/Y9yMFcdTAwMDSgXHUwMDEykEv6d7BcInRgWFx1MDAxM1xinlx1MDAwN806ySx0XVx1MDAxNFhnWpA0/43uI6sz/j4z8/YgUlx1MDAxNXpcdTAwMTDQYNCx3lx1MDAxON+FvK9cdTAwMWbbo1J8vH5v65XD083W12azseguhFx1MDAwMoaLUuyzfVecXHUwMDEzvVx1MDAxYlZcYjj08Dd11PyDr/rpXHUwMDBlRFx1MDAxOVL+plGz24Y20oFImKhE+I9cdTAwMDOZ2oFcdTAwMTTfY1x1MDAxNaThZfftx2MzcVVUrrd0RUNyrfZKXHUwMDFm4q9n9rqojPIsLuRRXHUwMDFh+lx1MDAxNFxmXGJGtkO/P6xv31x1MDAxOElcdTAwMGWjjXaC40q0+Z7kXHUwMDA19Fx1MDAxZlx1MDAxY4uSr3z9XFz34UvN83dcdTAwMWaFXHJhKCx6XHUwMDFkYMbXPXftjav7hjsyNqkmZXO6oe7fvVl098FoIHKotZ9vwVx1MDAxZaJcdTAwMWa4Olx1MDAxMP5mR75Q5XdcdTAwMGL99Po+XG7lt1SoXHUwMDE5llx1MDAwN0Z6XHUwMDEwjrqeelOQ/ztcdTAwMGby4iG5sFx1MDAxYzabXHUwMDA3Kc9o10LwWsXlh2nJPmf5Oo5u1obdWa/z8O/aobbnUNQxN99efPsvXHUwMDFht7uQIn0=        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Cascadia.woff2\");       }      widget.render_line(y=0)widget.render_line(y=1)widget.render_line(y=2)Strip([segment, segment, ...])Strip([segment, segment, ...])Strip([segment, segment, ...])Line API WidgetStrip([segment, segment, ...])Strip([segment, segment, ...])Strip([segment, segment, ...]) <p>Let's look at an example before we go in to the details. The following Textual app implements a widget with the line API that renders a checkerboard pattern. This might form the basis of a chess / checkers game. Here's the code:</p> checker01.pyOutput checker01.py<pre><code>from rich.segment import Segment\nfrom rich.style import Style\nfrom textual.app import App, ComposeResult\nfrom textual.strip import Strip\nfrom textual.widget import Widget\nclass CheckerBoard(Widget):\n\"\"\"Render an 8x8 checkerboard.\"\"\"\ndef render_line(self, y: int) -&gt; Strip:\n\"\"\"Render a line of the widget. y is relative to the top of the widget.\"\"\"\nrow_index = y // 4  # A checkerboard square consists of 4 rows\nif row_index &gt;= 8:  # Generate blank lines when we reach the end\nreturn Strip.blank(self.size.width)\nis_odd = row_index % 2  # Used to alternate the starting square on each row\nwhite = Style.parse(\"on white\")  # Get a style object for a white background\nblack = Style.parse(\"on black\")  # Get a style object for a black background\n# Generate a list of segments with alternating black and white space characters\nsegments = [\nSegment(\" \" * 8, black if (column + is_odd) % 2 else white)\nfor column in range(8)\n]\nstrip = Strip(segments, 8 * 8)\nreturn strip\nclass BoardApp(App):\n\"\"\"A simple app to show our widget.\"\"\"\ndef compose(self) -&gt; ComposeResult:\nyield CheckerBoard()\nif __name__ == \"__main__\":\napp = BoardApp()\napp.run()\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1790215104-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1790215104-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1790215104-r1 { fill: #c5c8c6 }      BoardApp </p> <p>The <code>render_line</code> method above calculates a <code>Strip</code> for every row of characters in the widget. Each strip contains alternating black and white space characters which form the squares in the checkerboard.</p> <p>You may have noticed that the checkerboard widget makes use of some objects we haven't covered before. Let's explore those.</p>"},{"location":"guide/widgets/#segment-and-style","title":"Segment and Style","text":"<p>A Segment is a class borrowed from the Rich project. It is small object (actually a named tuple) which bundles a string to be displayed and a Style which tells Textual how the text should look (color, bold, italic etc).</p> <p>Let's look at a simple segment which would produce the text \"Hello, World!\" in bold.</p> <pre><code>greeting = Segment(\"Hello, World!\", Style(bold=True))\n</code></pre> <p>This would create the following object:</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nN1aW1PbRlx1MDAxOH3nVzDuSztcdTAwMTM2e790ptOhJFx1MDAxNEIuUEJoaTuMsNa2gixcdTAwMTlJ5pJO/nu/XHUwMDE1RpIl7CBjUqd+XHUwMDAwe3el/Xb3nPNdpH/W1tc72c3Idn5cXO/Y665cdTAwMTdcdTAwMDZ+4l11nrn2S5ukQVx1MDAxY0FcdTAwMTfNf6fxOOnmI1x1MDAwN1k2Sn98/nzoJec2XHUwMDFihV7XossgXHUwMDFke2Gajf0gRt14+DzI7DD92f1961xy7U+jeOhnXHQqJ9mwfpDFye1cXDa0Q1x1MDAxYmUp3P1P+L2+/k/+t2JdYruZXHUwMDE39UObX5B3lVx1MDAwNirJ661v4yg3lkhFhGRcdTAwMWHLYkSQvoD5MutDd1x1MDAwZmy2ZY9r6vAjuvlhK+7ffPQvtlx1MDAwZcJNSo7CP8ppe0FcdTAwMThcdTAwMWVmN+HtVnjdwTipXHUwMDE4lWZJfG6PXHUwMDAzP1x1MDAxYrjZa+3Fdb6XXHUwMDBlwICiO4nH/UFkU7dcdTAwMDO4aI1HXjfIbtyNcNl6u1xy1XHX7pBcZkZSca41Zsatueh11zNKXHUwMDExx0ZLyZRcdTAwMTCMypphW3FcYmdcdTAwMDGGfYfzT2nZmdc974N5kV+MyVx1MDAxMi9KR15cdTAwMDInVo67miyZXHUwMDBiiqQglCqMXHKunszAXHUwMDA2/UHmjosgho1SynDMsJCiNMbmp0JcZnN2XHUwMDEyo4tcdTAwMWVnwmjXz1x1MDAxMfJ3ddtcIn+ybXeQKUHDJi2fy8W48S/rYKtcdTAwMDKugoN3e0dXxmNDtn/iXHUwMDFk7uyeblx1MDAxZqTvVLHgKXR6SVx1MDAxMl91ip7Pk2+loeOR791cIlx1MDAwZVx1MDAwMCk4XHUwMDExWlFDTdFcdTAwMWZcdTAwMDbROXRG4zAs2+LueVx00rXKStqxg1a2scZcdTAwMGVcdTAwMDBcdTAwMGLRilx1MDAxOf5gclxcnrw7vd5S9rV93dvjsYjt/lx0WYxcdTAwMWN0XHUwMDE2OdJcdTAwMTgk4n5ukFx1MDAwNblhkFwiXFxzXHUwMDAw1TQtXHUwMDE4QVhSMZNcclpSa7qLs4FiiaQhXHUwMDFjJuHGfVSTXHUwMDBlgiFtpm2744HEmlxuzivn80Q8mIdUXHUwMDAxu8SWhdTMXmf3gnQmRlx1MDAwNTVcZnSLPlxcwI9Aen57b7btx4R9XHUwMDE0Nt7ZXHUwMDBlg8GSXHUwMDA1fOlcdTAwMThlRFwirakmtFx1MDAwNlH+dFpNKtJbwJHyOlxmXHKmXHUwMDA0XHUwMDBiptqgcFxuXHUwMDFmrWT3evx7cPkq+nBp9/ax2Lu+Or5cdTAwMWPsLUl2OWfaXHUwMDE40lx1MDAwMswlauIoO1xmPtmc1FOt294wXGLzoyqac5SDgX91dmxcdTAwMTjGz9aP4yT0/+pUjyq1MHvtdu66zTDoO0Z0QtubpkpcdTAwMTZA8FR0Z/Go7O2CXHUwMDFkXHUwMDFl3C7Z9evriZOgXHUwMDFmRF74fpZNi3tcdTAwMTbGVL31jrWGXHUwMDEwIK3hXHUwMDBmZ+3u3ubbbSrVxYuD991cdTAwMWXTn3x/J5jB2lx1MDAxYfv+K79cIihGVIBCmqZjwVxiT7XWucsk73XVIzxcdTAwMGJhSNx5ldaeRTpBxZqV6/m/XHUwMDA1WMYwgkvFelwit0VmM4AoyjGRpEVwdfM2ftU/O9u/XHUwMDEx4uJ0g1x1MDAxZI9e71x1MDAxZmyuuuNcdTAwMTJMI6yVXHUwMDEyhlPnKNg0XHUwMDExuECSc8HInCjr0X5Mmyb4m35MSaG5Ulx1MDAxNU16Sj/2q/fJo3tcdTAwMDO6uSuOduTxsWTnLy+Wlj5cdTAwMTjNOG2B7sf5sVx1MDAxYz3fn8Wh/9P7ZGx/WFx1MDAwNT/WsGmxuLNidZ3AnEHKXHUwMDAwaWhcdTAwMTmafonAL0/UwcvRfnK+8bt9dbQpe1x1MDAxYofh6apcdTAwMTOYUYYoJNzwMVxuXHUwMDEy93K57nouOVx1MDAwMvpSXHUwMDE3PHHYjbp3XVwii+k9Low2XFyXkka6QK6N61rNaFRcdTAwMTBcdTAwMTBF9lQsJlNsdFx1MDAwNvZcdTAwMTNrsyDqo2kyVChcXIH616DwtEGL8Vx1MDAxN8/kL/gjXHR7rMpcdTAwMDFfou9V/8Ppm1x1MDAxNyPpXHUwMDFmvtl68UZEoThcdTAwMWOfrDp9hYJA0HBiZO6AWZ2+XG5RIDV0XHUwMDAwezWresVl87dCyTn8hWReSY1L2H+zTphcdTAwMTCBK1x1MDAxOfRXo2+aY2mV+Htr0VxcXHUwMDAy327vfUlkpVxmWvfAWlx1MDAwYlx1MDAwMVx1MDAxOU5cdTAwMGJcdTAwMGY8X69XlMJMXHUwMDBiJFx1MDAwNGR04Fx1MDAwZaRcdTAwMDF/PFx1MDAxZENzSZCmmFNtnthcdTAwMDVcdTAwMWKkQElcXKFEaqOwvqc8pDRSICXmLlx1MDAxY6hcdTAwMThzV7yXcFx1MDAwM6ZcdTAwMWVXu6eTlsVqlos71jTzkuyXIPJcdTAwMDHW04ZNnlHtPiDQy7ncXHUwMDFkOys3MMJcXFx1MDAxMVc9g3CSUWp4+WjG7Y03cqtFkuWlv8aqbeR/2Zr5XHUwMDA1z4o1YFxmwVx1MDAwNsPeMEyoNIRy1TCGMMjn8pJGw5rQS7OteDhcZjLY7v04iLL6tub7t+m4PrBeQ0BgNdW+uiiM3Fx1MDAxZKc1vfy2XpIm/1F8//vZvaNnYtl9Nlx1MDAxYTAub7dW/d9azqiaWclcdTAwMDYh4EJcYqVcdTAwMWUuZ/P914rKmWRcdTAwMWNcdTAwMTmqMVMu6IDMoaFmsFx1MDAwNdJhzEUkrGbX8tRcZuJcIsyNUkZcdTAwMGLIb4SsJP6lnCmEXHUwMDFkXHUwMDE1INOrXHUwMDE5M1EzJjXRXHUwMDFjyzZFg2XL2eLZ/lx1MDAwM+VsfuBblzNcdTAwMDaUYiBoXHUwMDEwVzqK8cq4W1x1MDAwNVx1MDAxMYgzdr+CPEjP5tfBpvWMXG7KNVx1MDAwMVx1MDAwNitOsKaGNawhXHUwMDAykVx1MDAxOer6LenZxmw45911JLdcdTAwMTS0WVx0lmGi3lokWFxmpuK0zZO5M9zt9a8hXHUwMDFhXHUwMDFkXHUwMDFmXnw8+qN38mv8epFcdTAwMWH/XCJitth7XHUwMDE1Tq5cdTAwMDTPdUxgXHUwMDAzwVlZpHA3oJQh8KJGXHUwMDEy6TA/O7tcdTAwMDLn7/H5YvZdr9drqph6UFWEQOKHtWStdGrxvOqJS/dSV6pQXyuvWqWMasFcXIpSQurNRfRcdTAwMDFbXHUwMDBiQCUtkqn5p7ySj+S4XHUwMDExiCqmlVCUS1x1MDAxMMKSkTldhUBaQSxuXHUwMDA0eHZiKq/GLI2wXHUwMDEwP3NcZiqtJOdcdTAwMWFCoEq4Vz6ZI65mg4VDPDZcdTAwMTJX9GzygFx1MDAwZbSVske+XHUwMDAw9aioQ2JcdTAwMTeutnlFqW3UMd9cdTAwMWJMuXnKMVx1MDAwM99GKTbCbUwz5lBIuUhAaYWpXHUwMDE0RuNcdTAwMDVjj/lv/9ViXHUwMDBmLMDlau5cdTAwMWVwSaFpwyhcdTAwMDKBMNPgrImGMFx1MDAxMoY0n5h+SyHIbGS7T1x1MDAwM9OzXCKQtclcdTAwMDRcdTAwMWRvNDrMXHUwMDAwdMVxXHUwMDAwylx1MDAwM39cIuDlKjuXgb365X76OVx1MDAwNq5N9tNcdJLNmfB57fO/MTl+mCJ9        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Cascadia.woff2\");       }      \"Hello, World\"Style(bold=True)greeting.textgreeting.stylegreeting <p>Both Rich and Textual work with segments to generate content. A Textual app is the result of combining hundreds, or perhaps thousands, of segments,</p>"},{"location":"guide/widgets/#strips","title":"Strips","text":"<p>A Strip is a container for a number of segments covering a single line (or row) in the Widget. A Strip will contain at least one segment, but often many more.</p> <p>A <code>Strip</code> is constructed from a list of <code>Segment</code> objects. Here's now you might construct a strip that displays the text \"Hello, World!\", but with the second word in bold:</p> <pre><code>segments = [\nSegment(\"Hello, \"),\nSegment(\"World\", Style(bold=True)),\nSegment(\"!\")\n]\nstrip = Strip(segments)\n</code></pre> <p>The first and third <code>Segment</code> omit a style, which results in the widget's default style being used. The second segment has a style object which applies bold to the text \"World\". If this were part of a widget it would produce the text: <code>Hello, World!</code></p> <p>The <code>Strip</code> constructor has an optional second parameter, which should be the cell length of the strip. The strip above has a length of 13, so we could have constructed it like this:</p> <pre><code>strip = Strip(segments, 13)\n</code></pre> <p>Note that the cell length parameter is not the total number of characters in the string. It is the number of terminal \"cells\". Some characters (such as Asian language characters and certain emoji) take up the space of two Western alphabet characters. If you don't know in advance the number of cells your segments will occupy, it is best to omit the length parameter so that Textual calculates it automatically.</p>"},{"location":"guide/widgets/#component-classes","title":"Component classes","text":"<p>When applying styles to widgets we can use CSS to select the child widgets. Widgets rendered with the line API don't have children per-se, but we can still use CSS to apply styles to parts of our widget by defining component classes. Component classes are associated with a widget by defining a <code>COMPONENT_CLASSES</code> class variable which should be a <code>set</code> of strings containing CSS class names.</p> <p>In the checkerboard example above we hard-coded the color of the squares to \"white\" and \"black\". But what if we want to create a checkerboard with different colors? We can do this by defining two component classes, one for the \"white\" squares and one for the \"dark\" squares. This will allow us to change the colors with CSS.</p> <p>The following example replaces our hard-coded colors with component classes.</p> checker02.pyOutput checker02.py<pre><code>from rich.segment import Segment\nfrom textual.app import App, ComposeResult\nfrom textual.strip import Strip\nfrom textual.widget import Widget\nclass CheckerBoard(Widget):\n\"\"\"Render an 8x8 checkerboard.\"\"\"\nCOMPONENT_CLASSES = {\n\"checkerboard--white-square\",\n\"checkerboard--black-square\",\n}\nDEFAULT_CSS = \"\"\"\n    CheckerBoard .checkerboard--white-square {\n        background: #A5BAC9;\n    }\n    CheckerBoard .checkerboard--black-square {\n        background: #004578;\n    }\n    \"\"\"\ndef render_line(self, y: int) -&gt; Strip:\n\"\"\"Render a line of the widget. y is relative to the top of the widget.\"\"\"\nrow_index = y // 4  # four lines per row\nif row_index &gt;= 8:\nreturn Strip.blank(self.size.width)\nis_odd = row_index % 2\nwhite = self.get_component_rich_style(\"checkerboard--white-square\")\nblack = self.get_component_rich_style(\"checkerboard--black-square\")\nsegments = [\nSegment(\" \" * 8, black if (column + is_odd) % 2 else white)\nfor column in range(8)\n]\nstrip = Strip(segments, 8 * 8)\nreturn strip\nclass BoardApp(App):\n\"\"\"A simple app to show our widget.\"\"\"\ndef compose(self) -&gt; ComposeResult:\nyield CheckerBoard()\nif __name__ == \"__main__\":\napp = BoardApp()\napp.run()\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2623001711-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2623001711-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2623001711-r1 { fill: #f3f6f7 } .terminal-2623001711-r2 { fill: #dde6ed } .terminal-2623001711-r3 { fill: #c5c8c6 }      BoardApp </p> <p>The <code>COMPONENT_CLASSES</code> class variable above adds two class names: <code>checkerboard--white-square</code> and <code>checkerboard--black-square</code>. These are set in the <code>DEFAULT_CSS</code> but can modified in the app's <code>CSS</code> class variable or external CSS.</p> <p>Tip</p> <p>Component classes typically begin with the name of the widget followed by two hyphens. This is a convention to avoid potential name clashes.</p> <p>The <code>render_line</code> method calls get_component_rich_style to get <code>Style</code> objects from the CSS, which we apply to the segments to create a more colorful looking checkerboard.</p>"},{"location":"guide/widgets/#scrolling","title":"Scrolling","text":"<p>A Line API widget can be made to scroll by extending the ScrollView class (rather than <code>Widget</code>). The <code>ScrollView</code> class will do most of the work, but we will need to manage the following details:</p> <ol> <li>The <code>ScrollView</code> class requires a virtual size, which is the size of the scrollable content and should be set via the <code>virtual_size</code> property. If this is larger than the widget then Textual will add scrollbars.</li> <li>We need to update the <code>render_line</code> method to generate strips for the visible area of the widget, taking into account the current position of the scrollbars.</li> </ol> <p>Let's add scrolling to our checkerboard example. A standard 8 x 8 board isn't sufficient to demonstrate scrolling so we will make the size of the board configurable and set it to 100 x 100, for a total of 10,000 squares.</p> checker03.pyOutput checker03.py<pre><code>from __future__ import annotations\nfrom textual.app import App, ComposeResult\nfrom textual.geometry import Size\nfrom textual.strip import Strip\nfrom textual.scroll_view import ScrollView\nfrom rich.segment import Segment\nclass CheckerBoard(ScrollView):\nCOMPONENT_CLASSES = {\n\"checkerboard--white-square\",\n\"checkerboard--black-square\",\n}\nDEFAULT_CSS = \"\"\"\n    CheckerBoard .checkerboard--white-square {\n        background: #A5BAC9;\n    }\n    CheckerBoard .checkerboard--black-square {\n        background: #004578;\n    }\n    \"\"\"\ndef __init__(self, board_size: int) -&gt; None:\nsuper().__init__()\nself.board_size = board_size\n# Each square is 4 rows and 8 columns\nself.virtual_size = Size(board_size * 8, board_size * 4)\ndef render_line(self, y: int) -&gt; Strip:\n\"\"\"Render a line of the widget. y is relative to the top of the widget.\"\"\"\nscroll_x, scroll_y = self.scroll_offset  # The current scroll position\ny += scroll_y  # The line at the top of the widget is now `scroll_y`, not zero!\nrow_index = y // 4  # four lines per row\nwhite = self.get_component_rich_style(\"checkerboard--white-square\")\nblack = self.get_component_rich_style(\"checkerboard--black-square\")\nif row_index &gt;= self.board_size:\nreturn Strip.blank(self.size.width)\nis_odd = row_index % 2\nsegments = [\nSegment(\" \" * 8, black if (column + is_odd) % 2 else white)\nfor column in range(self.board_size)\n]\nstrip = Strip(segments, self.board_size * 8)\n# Crop the strip so that is covers the visible area\nstrip = strip.crop(scroll_x, scroll_x + self.size.width)\nreturn strip\nclass BoardApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield CheckerBoard(100)\nif __name__ == \"__main__\":\napp = BoardApp()\napp.run()\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3397410538-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3397410538-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3397410538-r1 { fill: #f3f6f7 } .terminal-3397410538-r2 { fill: #dde6ed } .terminal-3397410538-r3 { fill: #e1e1e1 } .terminal-3397410538-r4 { fill: #c5c8c6 } .terminal-3397410538-r5 { fill: #14191f } .terminal-3397410538-r6 { fill: #23568b }      BoardApp \u2585\u2585 \u258b </p> <p>The virtual size is set in the constructor to match the total size of the board, which will enable scrollbars (unless you have your terminal zoomed out very far). You can update the <code>virtual_size</code> attribute dynamically as required, but our checkerboard isn't going to change size so we only need to set it once.</p> <p>The <code>render_line</code> method gets the scroll offset which is an Offset containing the current position of the scrollbars. We add <code>scroll_offset.y</code> to the <code>y</code> argument because <code>y</code> is relative to the top of the widget, and we need a Y coordinate relative to the scrollable content.</p> <p>We also need to compensate for the position of the horizontal scrollbar. This is done in the call to <code>strip.crop</code> which crops the strip to the visible area between <code>scroll_x</code> and <code>scroll_x + self.size.width</code>.</p> <p>Tip</p> <p>Strip objects are immutable, so methods will return a new Strip rather than modifying the original.</p>         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Cascadia.woff2\");       }      virtual_size.heightvirtual_size.widthself.scroll_offsety = scroll_yx = scroll_xx = scroll_x +self.size.widthBoardApp"},{"location":"guide/widgets/#region-updates","title":"Region updates","text":"<p>The Line API makes it possible to refresh parts of a widget, as small as a single character. Refreshing smaller regions makes updates more efficient, and keeps your widget feeling responsive.</p> <p>To demonstrate this we will update the checkerboard to highlight the square under the mouse pointer. Here's the code:</p> checker04.pyOutput checker04.py<pre><code>from __future__ import annotations\nfrom textual import events\nfrom textual.app import App, ComposeResult\nfrom textual.geometry import Offset, Region, Size\nfrom textual.reactive import var\nfrom textual.strip import Strip\nfrom textual.scroll_view import ScrollView\nfrom rich.segment import Segment\nfrom rich.style import Style\nclass CheckerBoard(ScrollView):\nCOMPONENT_CLASSES = {\n\"checkerboard--white-square\",\n\"checkerboard--black-square\",\n\"checkerboard--cursor-square\",\n}\nDEFAULT_CSS = \"\"\"\n    CheckerBoard &gt; .checkerboard--white-square {\n        background: #A5BAC9;\n    }\n    CheckerBoard &gt; .checkerboard--black-square {\n        background: #004578;\n    }\n    CheckerBoard &gt; .checkerboard--cursor-square {\n        background: darkred;\n    }\n    \"\"\"\ncursor_square = var(Offset(0, 0))\ndef __init__(self, board_size: int) -&gt; None:\nsuper().__init__()\nself.board_size = board_size\n# Each square is 4 rows and 8 columns\nself.virtual_size = Size(board_size * 8, board_size * 4)\ndef on_mouse_move(self, event: events.MouseMove) -&gt; None:\n\"\"\"Called when the user moves the mouse over the widget.\"\"\"\nmouse_position = event.offset + self.scroll_offset\nself.cursor_square = Offset(mouse_position.x // 8, mouse_position.y // 4)\ndef watch_cursor_square(\nself, previous_square: Offset, cursor_square: Offset\n) -&gt; None:\n\"\"\"Called when the cursor square changes.\"\"\"\ndef get_square_region(square_offset: Offset) -&gt; Region:\n\"\"\"Get region relative to widget from square coordinate.\"\"\"\nx, y = square_offset\nregion = Region(x * 8, y * 4, 8, 4)\n# Move the region in to the widgets frame of reference\nregion = region.translate(-self.scroll_offset)\nreturn region\n# Refresh the previous cursor square\nself.refresh(get_square_region(previous_square))\n# Refresh the new cursor square\nself.refresh(get_square_region(cursor_square))\ndef render_line(self, y: int) -&gt; Strip:\n\"\"\"Render a line of the widget. y is relative to the top of the widget.\"\"\"\nscroll_x, scroll_y = self.scroll_offset  # The current scroll position\ny += scroll_y  # The line at the top of the widget is now `scroll_y`, not zero!\nrow_index = y // 4  # four lines per row\nwhite = self.get_component_rich_style(\"checkerboard--white-square\")\nblack = self.get_component_rich_style(\"checkerboard--black-square\")\ncursor = self.get_component_rich_style(\"checkerboard--cursor-square\")\nif row_index &gt;= self.board_size:\nreturn Strip.blank(self.size.width)\nis_odd = row_index % 2\ndef get_square_style(column: int, row: int) -&gt; Style:\n\"\"\"Get the cursor style at the given position on the checkerboard.\"\"\"\nif self.cursor_square == Offset(column, row):\nsquare_style = cursor\nelse:\nsquare_style = black if (column + is_odd) % 2 else white\nreturn square_style\nsegments = [\nSegment(\" \" * 8, get_square_style(column, row_index))\nfor column in range(self.board_size)\n]\nstrip = Strip(segments, self.board_size * 8)\n# Crop the strip so that is covers the visible area\nstrip = strip.crop(scroll_x, scroll_x + self.size.width)\nreturn strip\nclass BoardApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield CheckerBoard(100)\nif __name__ == \"__main__\":\napp = BoardApp()\napp.run()\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1514822454-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1514822454-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1514822454-r1 { fill: #efdddd } .terminal-1514822454-r2 { fill: #dde6ed } .terminal-1514822454-r3 { fill: #f3f6f7 } .terminal-1514822454-r4 { fill: #e1e1e1 } .terminal-1514822454-r5 { fill: #c5c8c6 } .terminal-1514822454-r6 { fill: #14191f } .terminal-1514822454-r7 { fill: #23568b }      BoardApp \u2585\u2585 \u258b </p> <p>We've added a style to the checkerboard which is the color of the highlighted square, with a default of \"darkred\". We will need this when we come to render the highlighted square.</p> <p>We've also added a reactive variable called <code>cursor_square</code> which will hold the coordinate of the square underneath the mouse. Note that we have used var which gives us reactive superpowers but won't automatically refresh the whole widget, because we want to update only the squares under the cursor.</p> <p>The <code>on_mouse_move</code> handler takes the mouse coordinates from the MouseMove object and calculates the coordinate of the square underneath the mouse. There's a little math here, so let's break it down.</p> <ul> <li>The event contains the coordinates of the mouse relative to the top left of the widget, but we need the coordinate relative to the top left of board which depends on the position of the scrollbars. We can perform this conversion by adding <code>self.scroll_offset</code> to <code>event.offset</code>.</li> <li>Once we have the board coordinate underneath the mouse we divide the x coordinate by 8 and divide the y coordinate by 4 to give us the coordinate of a square.</li> </ul> <p>If the cursor square coordinate calculated in <code>on_mouse_move</code> changes, Textual will call <code>watch_cursor_square</code> with the previous coordinate and new coordinate of the square. This method works out the regions of the widget to update and essentially does the reverse of the steps we took to go from mouse coordinates to square coordinates. The <code>get_square_region</code> function calculates a Region object for each square and uses them as a positional argument in a call to refresh. Passing Region objects to <code>refresh</code> tells Textual to update only the cells underneath those regions, and not the entire widget.</p> <p>Note</p> <p>Textual is smart about performing updates. If you refresh multiple regions, Textual will combine them into as few non-overlapping regions as possible.</p> <p>The final step is to update the <code>render_line</code> method to use the cursor style when rendering the square underneath the mouse.</p> <p>You should find that if you move the mouse over the widget now, it will highlight the square underneath the mouse pointer in red.</p>"},{"location":"guide/widgets/#line-api-examples","title":"Line API examples","text":"<p>The following builtin widgets use the Line API. If you are building advanced widgets, it may be worth looking through the code for inspiration!</p> <ul> <li>DataTable</li> <li>TextLog</li> <li>Tree</li> </ul>"},{"location":"guide/widgets/#compound-widgets","title":"Compound widgets","text":"<p>Widgets may be combined to create new widgets with additional features. Such widgets are known as compound widgets. The stopwatch in the tutorial is an example of a compound widget.</p> <p>A compound widget can be used like any other widget. The only thing that differs is that when you build a compound widget, you write a <code>compose()</code> method which yields child widgets, rather than implement a <code>render</code> or <code>render_line</code> method.</p> <p>The following is an example of a compound widget.</p> compound01.pyOutput compound01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widget import Widget\nfrom textual.widgets import Input, Label\nclass InputWithLabel(Widget):\n\"\"\"An input with a label.\"\"\"\nDEFAULT_CSS = \"\"\"\n    InputWithLabel {\n        layout: horizontal;\n        height: auto;\n    }\n    InputWithLabel Label {\n        padding: 1;\n        width: 12;\n        text-align: right;\n    }\n    InputWithLabel Input {\n        width: 1fr;\n    }\n    \"\"\"\ndef __init__(self, input_label: str) -&gt; None:\nself.input_label = input_label\nsuper().__init__()\ndef compose(self) -&gt; ComposeResult:  # (1)!\nyield Label(self.input_label)\nyield Input()\nclass CompoundApp(App):\nCSS = \"\"\"\n    Screen {\n        align: center middle;\n    }\n    InputWithLabel {\n        width: 80%;\n        margin: 1;\n    }\n    \"\"\"\ndef compose(self) -&gt; ComposeResult:\nyield InputWithLabel(\"First Name\")\nyield InputWithLabel(\"Last Name\")\nyield InputWithLabel(\"Email\")\nif __name__ == \"__main__\":\napp = CompoundApp()\napp.run()\n</code></pre> <ol> <li>The <code>compose</code> method makes this widget a compound widget.</li> </ol> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-967489258-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-967489258-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-967489258-r1 { fill: #e1e1e1 } .terminal-967489258-r2 { fill: #c5c8c6 } .terminal-967489258-r3 { fill: #1e1e1e } .terminal-967489258-r4 { fill: #121212 } .terminal-967489258-r5 { fill: #e2e2e2 }      CompoundApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e First\u00a0Name\u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u00a0Last\u00a0Name\u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u00a0\u00a0\u00a0\u00a0\u00a0Email\u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p> <p>The <code>InputWithLabel</code> class bundles an Input with a Label to create a new widget that displays a right-aligned label next to an input control. You can re-use this <code>InputWithLabel</code> class anywhere in a Textual app, including in other widgets.</p>"},{"location":"guide/widgets/#coordinating-widgets","title":"Coordinating widgets","text":"<p>Widgets rarely exist in isolation, and often need to communicate or exchange data with other parts of your app. This is not difficult to do, but there is a risk that widgets can become dependant on each other, making it impossible to reuse a widget without copying a lot of dependant code.</p> <p>In this section we will show how to design and build a fully-working app, while keeping widgets reusable.</p>"},{"location":"guide/widgets/#designing-the-app","title":"Designing the app","text":"<p>We are going to build a byte editor which allows you to enter a number in both decimal and binary. You could use this a teaching aid for binary numbers.</p> <p>Here's a sketch of what the app should ultimately look like:</p> <p>Tip</p> <p>There are plenty of resources on the web, such as this excellent video from Khan Academy if you want to brush up on binary numbers.</p>         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Cascadia.woff2\");       }       901245673Input()Switch()Label() <p>There are three types of built-in widget in the sketch, namely (Input, Label, and Switch). Rather than manage these as a single collection of widgets, we can arrange them in to logical groups with compound widgets. This will make our app easier to work with.</p>"},{"location":"guide/widgets/#identifying-components","title":"Identifying components","text":"<p>We will divide this UI into three compound widgets:</p> <ol> <li><code>BitSwitch</code> for a switch with a numeric label.</li> <li><code>ByteInput</code> which contains 8 <code>BitSwitch</code> widgets.</li> <li><code>ByteEditor</code> which contains a <code>ByteInput</code> and an Input to show the decimal value.</li> </ol> <p>This is not the only way we could implement our design with compound widgets. So why these three widgets? As a rule of thumb, a widget should handle one piece of data, which is why we have an independent widget for a bit, a byte, and the decimal value.</p>         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Cascadia.woff2\");       }       901245673BitSwitch()ByteInput()ByteEditor() <p>In the following code we will implement the three widgets. There will be no functionality yet, but it should look like our design.</p> byte01.pyOutput byte01.py<pre><code>from __future__ import annotations\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.widget import Widget\nfrom textual.widgets import Input, Label, Switch\nclass BitSwitch(Widget):\n\"\"\"A Switch with a numeric label above it.\"\"\"\nDEFAULT_CSS = \"\"\"\n    BitSwitch {\n        layout: vertical;\n        width: auto;\n        height: auto;\n    }\n    BitSwitch &gt; Label {\n        text-align: center;\n        width: 1fr;\n    }\n    \"\"\"\ndef __init__(self, bit: int) -&gt; None:\nself.bit = bit\nsuper().__init__()\ndef compose(self) -&gt; ComposeResult:\nyield Label(str(self.bit))\nyield Switch()\nclass ByteInput(Widget):\n\"\"\"A compound widget with 8 switches.\"\"\"\nDEFAULT_CSS = \"\"\"\n    ByteInput {\n        width: auto;\n        height: auto;\n        border: blank;\n        layout: horizontal;\n    }\n    ByteInput:focus-within {\n        border: heavy $secondary;\n    }\n    \"\"\"\ndef compose(self) -&gt; ComposeResult:\nfor bit in reversed(range(8)):\nyield BitSwitch(bit)\nclass ByteEditor(Widget):\nDEFAULT_CSS = \"\"\"\n    ByteEditor &gt; Container {\n        height: 1fr;\n        align: center middle;\n    }\n    ByteEditor &gt; Container.top {\n        background: $boost;\n    }\n    ByteEditor Input {\n        width: 16;\n    }\n    \"\"\"\ndef compose(self) -&gt; ComposeResult:\nwith Container(classes=\"top\"):\nyield Input(placeholder=\"byte\")\nwith Container():\nyield ByteInput()\nclass ByteInputApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield ByteEditor()\nif __name__ == \"__main__\":\napp = ByteInputApp()\napp.run()\n</code></pre> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-308031377-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-308031377-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-308031377-r1 { fill: #e2e2e2 } .terminal-308031377-r2 { fill: #c5c8c6 } .terminal-308031377-r3 { fill: #262626 } .terminal-308031377-r4 { fill: #121212 } .terminal-308031377-r5 { fill: #7d7d7d } .terminal-308031377-r6 { fill: #e3e3e3 } .terminal-308031377-r7 { fill: #e1e1e1 } .terminal-308031377-r8 { fill: #00ff00 } .terminal-308031377-r9 { fill: #1e1e1e } .terminal-308031377-r10 { fill: #e2e3e3 }      ByteInputApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258abyte\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u00a0\u00a0\u00a0\u00a07\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a06\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a05\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0 \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p> <p>Note the <code>compose()</code> methods of each of the widgets.</p> <ul> <li> <p>The <code>BitSwitch</code> yields a Label which displays the bit number, and a Switch control for that bit. The default CSS for <code>BitSwitch</code> aligns its children vertically, and sets the label's text-align to center.</p> </li> <li> <p>The <code>ByteInput</code> yields 8 <code>BitSwitch</code> widgets and arranges them horizontally. It also adds a <code>focus-within</code> style in its CSS to draw an accent border when any of the switches are focused.</p> </li> <li> <p>The <code>ByteEditor</code> yields a <code>ByteInput</code> and an <code>Input</code> control. The default CSS stacks the two controls on top of each other to divide the screen in to two parts.</p> </li> </ul> <p>With these three widgets, the DOM for our app will look like this:</p>         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Cascadia.woff2\");       }      ByteEditor()Container(    classes=\"top\")ByteInput()BitSwitch(0)Input(    placeholder=\"bytes\")Container()Label(\"0\") Switch() BitSwitch(7)Label(\"7\") Switch() ...(1 thru 6) <p>Now that we have the design in place, we can implement the behavior.</p>"},{"location":"guide/widgets/#data-flow","title":"Data flow","text":"<p>We want to ensure that our widgets are re-usable, which we can do by following the guideline of \"attributes down, messages up\". This means that a widget can update a child by setting its attributes or calling its methods, but widgets should only ever send messages to their parent (or other ancestors).</p> <p>Info</p> <p>This pattern of only setting attributes in one direction and using messages for the opposite direction is known as uni-directional data flow.</p> <p>In practice, this means that to update a child widget you get a reference to it and use it like any other Python object. Here's an example of an action that updates a child widget:</p> <pre><code>def action_set_true(self):\nself.query_one(Switch).value = 1\n</code></pre> <p>If a child needs to update a parent, it should send a message with post_message.</p> <p>Here's an example of posting message:</p> <pre><code>def on_click(self):\nself.post_message(MyWidget.Change(active=True))\n</code></pre> <p>Note that attributes down and messages up means that you can't modify widgets on the same level directly. If you want to modify a sibling, you will need to send a message to the parent, and the parent would make the changes.</p> <p>The following diagram illustrates this concept:</p> eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1bbU/byFx1MDAxNv7eX4HYL3uljTtvZ14qXV1cdTAwMTHabmm7QFx1MDAwYrS3vVpVJjHEJYmzjlx1MDAwM6Wr/vd9xkDsxHFcYmkoUF1LpYk9XHUwMDFlXHUwMDFmz5znec45M/n70draenY+iNafrK1HX1phN26n4dn6b/78aZRcdTAwMGXjpI9LXCL/PkxGaStv2cmywfDJ48e9MD2JskE3bEXBaTxcdTAwMWOF3WE2asdJ0Ep6j+Ms6lxy/+P/boe96N+DpNfO0qB4SCNqx1mSXjwr6ka9qJ9cctH7//B9be3v/G/JujRqZWH/uFx1MDAxYuU35Jdcblx1MDAwM6W2bPr0dtLPreWGXHUwMDE5LomsXHUwMDFht4iHT/HALGrj8lx1MDAxMYyOiiv+1Hp7I1x1MDAxOVxmXlx1MDAxZf4uP71qXHUwMDFldk5cdTAwMWJCfNz5XFw89yjudvey8+7FWIStzigtWTXM0uQkelx1MDAxZrezztXQlc6P71x1MDAxYiZcdTAwMTiG4q40XHUwMDE5XHUwMDFkd/rR0I9cdTAwMDBcdTAwMWafTVx1MDAwNmErzs79OVa84MUwPFkrznzBN6VYwPFHSSdcdTAwMWOXjunxZd9cdTAwMDHOXHUwMDA2TFx1MDAxMmdCa+Gc4VOGbSZdTFx1MDAwNlxm+4WOZLulXG7TXHUwMDBlw9bJMezrt8dtsjTsXHUwMDBmXHUwMDA3YYopK9qdXb4yJ1x1MDAxYmjmpOKKlDFE41x1MDAxNp0oPu5kaGJN4Egz6yRcdO6kdoUxUT4rVlx1MDAxYiVcdTAwMWOZYvi8XHUwMDA1g6127iF/loet375cdTAwMWO2/qjbLYz2XHUwMDE3nk17VdmzJrwri75cdTAwMTRvUvKEdCdcdTAwMWWdb1Bz1Njdf7v59Vlj820nXlx1MDAxZrf79tvsbi9ubkafs99Pn37gpn9+4I6V2Op3pp5y9fwwTZOzRftcdTAwMWQ4+vzcbDe/dj+yNOp8lVx1MDAwM2lcdTAwMGZW0O+zt9m2ftE8dPZsZ1s8c3uvKVmFve+fvZJvXHUwMDA3XHUwMDFmtYuy5qe9/us/WKPXWazfy0/FhI9cdTAwMDbt8Fx1MDAwMrhcXFx1MDAxYsuEs0qRLlxcvVx1MDAxYvdPpn2hm7ROXG6sPypcdTAwMTlcXGGZXHQ/KFx1MDAxM4w1NH16TDDWOSGVYHZhgpntVktcdTAwMTHMNI5vkWBcZlx1MDAwYpSyhitNmoQuXtffr7hccpzj3Fx0xom70mCsml9cXNH1mFCo8IBLXHUwMDA2IW1cdTAwMTiXJTO+l0BW6YPFTCf9bC/+6lx1MDAwN1vIwFx1MDAxOKOc0lJcdTAwMTitmJto9Dzsxd3zibnLfVx1MDAxNYO1m4/Tr/8qj+gwglx1MDAxMb5XZSfab3TjY+/P6y3cXHUwMDEypVx1MDAxM66exZDmcYPDJMuSXtGgXHUwMDA1I0L0mW4tXCKRSVx1MDAxYVx1MDAxZsf9sLs/beNcXPTN1XjFLK+FoDRcbjOxOFx1MDAwMF80P785y87Tk8M/PvRenGyop6/l2d1cdTAwMDLQXFyHP2FUoJ0w0mjOlZN8UuDJWK//Vlx1MDAwYoDTcuFqXHUwMDAxyPLjblx1MDAwNVx1MDAxZfZJRCpOr1xmn8tcdPxr2j7/LyUv9ejAfvncO2Bb7tPxzyrwbz5svd9I3iE0fNVP4iMxXHUwMDE4ZsasSIitI0xp4di3JMSIXG51XHUwMDFkXHUwMDBiQJtcdTAwMDRBf1x1MDAxNmaB2ZN/v1lAQmeVM2BDKa21JZnwt2tGXHUwMDAxlFx1MDAxY3PBXHUwMDE4Mabp1kiglEDMUWEr4Gyal7Kz25NheKDmdyfDm5242/7BKnyNjE2r8JWJ3yHC4PNaXHUwMDExhi44y1x1MDAxMFx1MDAwMS5cZkDqf+2evmxcdTAwMWOIvZPPO/uHZ+HWwba551x1MDAwMNRcdTAwMDJcdTAwMTCDe8DhhFx1MDAxNFx1MDAxNVx1MDAxMTZwXHUwMDFmidRVO01GqlvD30pEWCHFdkqy1cFzOVx1MDAxNY7C072NdP9Mmv2/tt8kfGh3mns/QNV+wnSYXHUwMDE0XHUwMDE38tZVXHUwMDE42VUtXHIwqaWU7lx1MDAwNvW22dN/z2lA+3zXh+NETDNpJnhAM1x1MDAxNVx1MDAxOMRDllx1MDAxOKJcdTAwMTI9p9r2Y3TYOKRcdTAwMDZCKLUyoK/SXHUwMDA3XHUwMDFmvFx1MDAwZV+jY0vp8Fx1MDAwNfZngE9oUa/BllxmyF6oxVPh+UnMfS12W1x1MDAxNzhcco+2UivLidRcdTAwMDT8oGtcdTAwMTBH4sxoq1x1MDAxOLPThlx1MDAxNfDjVqvw8DuKUSpAXHUwMDFjYJhcdTAwMDLtcTzRVNFoRIDQXHUwMDE00TozTlx1MDAxMKeKXGZjvlx1MDAxMFCQpZtUu1x1MDAwYmG58lx1MDAxOHF55ttyoF26hjXMwjRrxv123D+eNOxyVWeRilGO69bIW9lggVx1MDAxMFx1MDAxY1x1MDAxY8KJWbJWXCKyLzU7XHUwMDBlXHUwMDA3efhcdTAwMTNoLlx1MDAxZIfN1nKjuKy8fdRvX2/V/FxietIqXHUwMDEwkZPge8hcdTAwMWLhqFx1MDAxYeVcdTAwMDKtlOKwyFx1MDAxMUlesahcdTAwMWJcdTAwMGWzzaTXizNcZv1uXHUwMDEy97PpIc7HcsMjv1x1MDAxM4Xt6at4o/K1aYpcdTAwMTj4XHUwMDFlJ6Ow4tNagaD8y/jzn7/NbN2QNmCOw3G5VVx1MDAwZTGk1OX7XHUwMDE1hoOUVYj3cZVLc21/tUjxR1x1MDAwNSNFd4/K/9+YLJWoXHJUyFxi6Vx1MDAwNWbxOGV+pLlcdTAwMWGqbCfeOVx1MDAxNudKupYqSVx1MDAwNcz4ckH+skpPZiyai0AppoEgXHUwMDAxPiUzZdgqM1x1MDAxNlxuYIxcdTAwMTKet5mRZlx1MDAwNlfCXHJcZlx1MDAxN4asYX6lUlbL+iSVsfpuqXLp+GZBqrxcdClcdJJcZrNmpDbMKWZLsLpkJcFcdTAwMDLIoCGlreRcdTAwMDaR6XJMOT/GKVx1MDAxOcWCXHUwMDFj4dxIJpnmXG6onknfXHUwMDFhyavQxLWDUfSgybLetf1RcepcdTAwMWKSW1x1MDAxZbzO4DZuarnNK1x1MDAxMIaWXHUwMDE3VYHruK3RODxcdTAwMTl0e413nz703n462uc7NnyzXHUwMDFjt01cdTAwMTc9bi9cZoRPXHUwMDA3ym92IORcYkK5qWJcZiSHXHSGLFxmLlxi4qintpZcdTAwMTOhXGKXpzZJXHUwMDAxQWl8XHUwMDFjKiGYppSAjalccnpqXHUwMDEwqXCutJLWQVx1MDAwMitxoECw6inmzrhccjKAaEtcdTAwMTdcdTAwMTO4PLdNY7HmyopRPnFtxfFQ7Vx1MDAxY/ujOrsrXHUwMDAyuWD1q57EuGWalVxue9eh/JXZ33p3tN//a3evXHUwMDExd3Y/7vY2yzi+pyjnXGahKHNcdTAwMWF6XCJcdTAwMWSjyVJcdTAwMGI5XHUwMDFl+HqTXHUwMDE2mlx05Ma3XHUwMDA3cul11GJCuJRCilx1MDAxOeFcdTAwMGLoXGJcdTAwMTk4poWk1UaUmlxcVVxckUEohqt3inFokSpM+z/Gr47aXHUwMDE59kdlbm9cYvD6XHUwMDE0xcnps+NcdTAwMTRFwFuM0IunKPOXju9pNUdqXHUwMDFiKM9kklx1MDAxY1x1MDAxM0pNXHUwMDE2c0grjDyzSmryy1x1MDAxOfVrKpE25nsyXHUwMDE0K1x1MDAwMzyFM1x1MDAwYiVcdTAwMTZOmFx1MDAxOWsqXHUwMDA2TSxcdTAwMTfqosTNbaWY44zz+UkxXHUwMDEwP2Ep5yb5XHT32039tjHpk49S4lbkXHUwMDAy0pfymN9GZ1x1MDAwNMPs28rbL5Sg3KjAhEArz4c1hEXzqk0skPA0MLVcdTAwMGaJyIxcdTAwMGJcdTAwMTJcdTAwMGYzP/HFdMF93VxuaVwiXHUwMDFj1JXvbihcdTAwMTko5vNIvKt23OrruqvFSd5dXHUwMDA1XCKrXCJKcHLtJkxcdTAwMTCHVCRcdTAwMTYve89fhbunREkqr0JcdTAwMTJcdTAwMTG3xu+PniBK5D+B4yRcdTAwMTTmXHUwMDA1woHxqGXK7y17I71Hwmu19lm8sULPqnv7QoBcdTAwMTVcdTAwMDC+c1x1MDAwNKtLw3RcdTAwMTlcZjGEyoIxW9j5XHUwMDEzXHUwMDE2c1x1MDAxNqYlsJIzoCUlXHL+Icx1pVxm44qXMMPgLtKCIVx1MDAxM1x1MDAxMXrJqvdccmo5/udcdTAwMDJKYKqM407MsIhcdTAwMDXgUWNcdTAwMTCngDyMIFMx6SExpVx1MDAxNFx1MDAwMahcdTAwMTDqIJj0xepcdGqTKlBcdTAwMDZcdTAwMTFcYsf0cKmEvK63epj4o1x1MDAwMpBVXHUwMDExJWZrzs9hpDQgS7Z4TDl/I8Q9pUptKPDcXCKl31x1MDAxZlOiwjykJFx1MDAxYvhanZXI11x1MDAxOVx1MDAxOODWQkpHgfNLQlpcdTAwMTE8h5XixTFPalx1MDAwM6+CjVx1MDAxMpE+VNNUat7cec1G9Fvc/Fx1MDAxM/LkTerLXG40o1x1MDAwNVx1MDAwNtRxSZzPiCldQIjsuEDCRuAtW2Wl1caULIBNiLBcdTAwMWPYm/zCs6pcdTAwMTbiPVU643dDglx1MDAxMrhGXvOgqbIhXHUwMDFj0mXn02XwpCPi5dtcdTAwMWKKw/MtoCfhv1baa8myUYuV/GpcdTAwMDUmN2TLur1Mtv6HPbBcdTAwMDQxp6XC7a+jyk7nTTM92n16MNJnh9REYrT//PzeUyVcdTAwMDZcdTAwMWUyZIB0+G15xfTqh4O+oCm130RcYlx1MDAwN741ruRyxi97RKVMzpGpSFx1MDAwZeYuLLm1zUxcYscs5Hupgnh5M1x1MDAxM5s4O2f3Ulx1MDAwZuaGx9Fw7dfRYPZcdTAwMWUmXrOHqVx1MDAxYlx1MDAxZE369+RcdTAwMGWmLFx1MDAxOdRtX5p4mem9SpNcdTAwMDYthTBobFx1MDAxZMSQYlvos1i8gp18jJ/2qdGmdCS2XHUwMDA2zVx1MDAxZGaH2+9cdTAwMWVcdTAwMDLCXHUwMDA09EprST66nMrbiFx1MDAwN2SsX1xi9Vx1MDAwYqeO32LeZtRCXHUwMDEw035DkrP6x0DMr1UuVY9eXG5iYZal8eEo8z7dTs7691x1MDAwMmZVoy6g9uhSLtfDwWAvw7iNg1x1MDAxNcxI3L58+aLr9dM4OmtWveKXo/zwvebw9UCJ8jjx26Nv/1x1MDAwMC2LavoifQ==        @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Cascadia.woff2\");       }      Parent()Child()Child()messages (up)attributes (down)"},{"location":"guide/widgets/#messages-up","title":"Messages up","text":"<p>Let's extend the <code>ByteEditor</code> so that clicking any of the 8 <code>BitSwitch</code> widgets updates the decimal value. To do this we will add a custom message to <code>BitSwitch</code> that we catch in the <code>ByteEditor</code>.</p> byte02.pyOutput byte02.py<pre><code>from __future__ import annotations\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.messages import Message\nfrom textual.reactive import reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Input, Label, Switch\nclass BitSwitch(Widget):\n\"\"\"A Switch with a numeric label above it.\"\"\"\nDEFAULT_CSS = \"\"\"\n    BitSwitch {\n        layout: vertical;\n        width: auto;\n        height: auto;\n    }\n    BitSwitch &gt; Label {\n        text-align: center;\n        width: 1fr;\n    }\n    \"\"\"\nclass BitChanged(Message):\n\"\"\"Sent when the 'bit' changes.\"\"\"\ndef __init__(self, bit: int, value: bool) -&gt; None:\nsuper().__init__()\nself.bit = bit\nself.value = value\nvalue = reactive(0)  # (1)!\ndef __init__(self, bit: int) -&gt; None:\nself.bit = bit\nsuper().__init__()\ndef compose(self) -&gt; ComposeResult:\nyield Label(str(self.bit))\nyield Switch()\ndef on_switch_changed(self, event: Switch.Changed) -&gt; None:  # (2)!\n\"\"\"When the switch changes, notify the parent via a message.\"\"\"\nevent.stop()  # (3)!\nself.value = event.value  # (4)!\nself.post_message(self.BitChanged(self.bit, event.value))\nclass ByteInput(Widget):\n\"\"\"A compound widget with 8 switches.\"\"\"\nDEFAULT_CSS = \"\"\"\n    ByteInput {\n        width: auto;\n        height: auto;\n        border: blank;\n        layout: horizontal;\n    }\n    ByteInput:focus-within {\n        border: heavy $secondary;\n    }\n    \"\"\"\ndef compose(self) -&gt; ComposeResult:\nfor bit in reversed(range(8)):\nyield BitSwitch(bit)\nclass ByteEditor(Widget):\nDEFAULT_CSS = \"\"\"\n    ByteEditor &gt; Container {\n        height: 1fr;\n        align: center middle;\n    }\n    ByteEditor &gt; Container.top {\n        background: $boost;\n    }\n    ByteEditor Input {\n        width: 16;\n    }\n    \"\"\"\ndef compose(self) -&gt; ComposeResult:\nwith Container(classes=\"top\"):\nyield Input(placeholder=\"byte\")\nwith Container():\nyield ByteInput()\ndef on_bit_switch_bit_changed(self, event: BitSwitch.BitChanged) -&gt; None:\n\"\"\"When a switch changes, update the value.\"\"\"\nvalue = 0\nfor switch in self.query(BitSwitch):\nvalue |= switch.value &lt;&lt; switch.bit\nself.query_one(Input).value = str(value)\nclass ByteInputApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield ByteEditor()\nif __name__ == \"__main__\":\napp = ByteInputApp()\napp.run()\n</code></pre> <ol> <li>This will store the value of the \"bit\".</li> <li>This is sent by the builtin <code>Switch</code> widgets, when it changes state.</li> <li>Stop the event, because we don't want it to go to the parent.</li> <li>Store the new value of the \"bit\".</li> </ol> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2381412523-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2381412523-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2381412523-r1 { fill: #e2e2e2 } .terminal-2381412523-r2 { fill: #c5c8c6 } .terminal-2381412523-r3 { fill: #262626 } .terminal-2381412523-r4 { fill: #121212 } .terminal-2381412523-r5 { fill: #e3e3e3 } .terminal-2381412523-r6 { fill: #e1e1e1 } .terminal-2381412523-r7 { fill: #fea62b } .terminal-2381412523-r8 { fill: #1e1e1e } .terminal-2381412523-r9 { fill: #0178d4 } .terminal-2381412523-r10 { fill: #e2e3e3 }      ByteInputApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a32\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503\u00a0\u00a0\u00a0\u00a07\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a06\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a05\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u2503 \u2503\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u2503 \u2503\u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e\u2503 \u2503\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b </p> <ul> <li>The <code>BitSwitch</code> widget now has an <code>on_switch_changed</code> method which will handle a <code>Switch.Changed</code> message, sent when the user clicks a switch. We use this to store the new value of the bit, and sent a new custom message, <code>BitSwitch.BitChanged</code>.</li> <li>The <code>ByteEditor</code> widget handles the <code>BitSwitch.Changed</code> message by calculating the decimal value and setting it on the input.</li> </ul> <p>The following is a (simplified) DOM diagram to show how the new message is processed:</p>         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.14.1/dist/excalidraw-assets/Cascadia.woff2\");       }      ByteEditor()BitSwitch(7)Label(\"7\") Switch() Switch.Changed(    value=True)ByteEditor()BitSwitch(7)Label(\"7\") Switch() BitSwitch.Changed(    value=True)BitSwitch.Changed(    value=True)Switch.Changed(    value=True)A. Switch sends Switch.Changed messageB. BitSwitch responds by sending BitSwitch.Changedto its parent"},{"location":"guide/widgets/#attributes-down","title":"Attributes down","text":"<p>We also want the switches to update if the user edits the decimal value.</p> <p>Since the switches are children of <code>ByteEditor</code> we can update them by setting their attributes directly. This is an example of \"attributes down\".</p> byte02.pyOutput byte03.py<pre><code>from __future__ import annotations\nfrom textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.geometry import clamp\nfrom textual.messages import Message\nfrom textual.reactive import reactive\nfrom textual.widget import Widget\nfrom textual.widgets import Input, Label, Switch\nclass BitSwitch(Widget):\n\"\"\"A Switch with a numeric label above it.\"\"\"\nDEFAULT_CSS = \"\"\"\n    BitSwitch {\n        layout: vertical;\n        width: auto;\n        height: auto;\n    }\n    BitSwitch &gt; Label {\n        text-align: center;\n        width: 1fr;\n    }\n    \"\"\"\nclass BitChanged(Message):\n\"\"\"Sent when the 'bit' changes.\"\"\"\ndef __init__(self, bit: int, value: bool) -&gt; None:\nsuper().__init__()\nself.bit = bit\nself.value = value\nvalue = reactive(0)\ndef __init__(self, bit: int) -&gt; None:\nself.bit = bit\nsuper().__init__()\ndef compose(self) -&gt; ComposeResult:\nyield Label(str(self.bit))\nyield Switch()\ndef watch_value(self, value: bool) -&gt; None:  # (1)!\n\"\"\"When the value changes we want to set the switch accordingly.\"\"\"\nself.query_one(Switch).value = value\ndef on_switch_changed(self, event: Switch.Changed) -&gt; None:\n\"\"\"When the switch changes, notify the parent via a message.\"\"\"\nevent.stop()\nself.value = event.value\nself.post_message(self.BitChanged(self.bit, event.value))\nclass ByteInput(Widget):\n\"\"\"A compound widget with 8 switches.\"\"\"\nDEFAULT_CSS = \"\"\"\n    ByteInput {\n        width: auto;\n        height: auto;\n        border: blank;\n        layout: horizontal;\n    }\n    ByteInput:focus-within {\n        border: heavy $secondary;\n    }\n    \"\"\"\ndef compose(self) -&gt; ComposeResult:\nfor bit in reversed(range(8)):\nyield BitSwitch(bit)\nclass ByteEditor(Widget):\nDEFAULT_CSS = \"\"\"\n    ByteEditor &gt; Container {\n        height: 1fr;\n        align: center middle;\n    }\n    ByteEditor &gt; Container.top {\n        background: $boost;\n    }\n    ByteEditor Input {\n        width: 16;\n    }\n    \"\"\"\nvalue = reactive(0)\ndef validate_value(self, value: int) -&gt; int:  # (2)!\n\"\"\"Ensure value is between 0 and 255.\"\"\"\nreturn clamp(value, 0, 255)\ndef compose(self) -&gt; ComposeResult:\nwith Container(classes=\"top\"):\nyield Input(placeholder=\"byte\")\nwith Container():\nyield ByteInput()\ndef on_bit_switch_bit_changed(self, event: BitSwitch.BitChanged) -&gt; None:\n\"\"\"When a switch changes, update the value.\"\"\"\nvalue = 0\nfor switch in self.query(BitSwitch):\nvalue |= switch.value &lt;&lt; switch.bit\nself.query_one(Input).value = str(value)\ndef on_input_changed(self, event: Input.Changed) -&gt; None:  # (3)!\n\"\"\"When the text changes, set the value of the byte.\"\"\"\ntry:\nself.value = int(event.value or \"0\")\nexcept ValueError:\npass\ndef watch_value(self, value: int) -&gt; None:  # (4)!\n\"\"\"When self.value changes, update switches.\"\"\"\nfor switch in self.query(BitSwitch):\nwith switch.prevent(BitSwitch.BitChanged):  # (5)!\nswitch.value = bool(value &amp; (1 &lt;&lt; switch.bit))  # (6)!\nclass ByteInputApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield ByteEditor()\nif __name__ == \"__main__\":\napp = ByteInputApp()\napp.run()\n</code></pre> <ol> <li>When the <code>BitSwitch</code>'s value changed, we want to update the builtin <code>Switch</code> to match.</li> <li>Ensure the value is in a the range of a byte.</li> <li>Handle the <code>Input.Changed</code> event when the user modified the value in the input.</li> <li>When the <code>ByteEditor</code> value changes, update all the switches to match.</li> <li>Prevent the <code>BitChanged</code> message from being sent.</li> <li>Because <code>switch</code> is a child, we can set its attributes directly.</li> </ol> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-466188766-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-466188766-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-466188766-r1 { fill: #e2e2e2 } .terminal-466188766-r2 { fill: #c5c8c6 } .terminal-466188766-r3 { fill: #262626 } .terminal-466188766-r4 { fill: #0178d4 } .terminal-466188766-r5 { fill: #e3e3e3 } .terminal-466188766-r6 { fill: #1e1e1e } .terminal-466188766-r7 { fill: #e1e1e1 } .terminal-466188766-r8 { fill: #00ff00 } .terminal-466188766-r9 { fill: #e2e3e3 }      ByteInputApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a100\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u00a0\u00a0\u00a0\u00a07\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a06\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a05\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0 \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e\u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p> <ul> <li>When the user edits the input, the Input widget sends a <code>Changed</code> event, which we handle with <code>on_input_changed</code> by setting <code>self.value</code>, which is a reactive value we added to <code>ByteEditor</code>.</li> <li>If the value has changed, Textual will call <code>watch_value</code> which sets the value of each of the eight switches. Because we are working with children of the <code>ByteEditor</code>, we can set attributes directly without going via a message.</li> </ul>"},{"location":"reference/","title":"Reference","text":"<p>Welcome to the Textual Reference.</p> <ul> <li> <p> CSS Types</p> <p>CSS Types are the data types that CSS styles accept in their rules.</p> <p> CSS Types Reference</p> </li> <li> <p> Events</p> <p>Events are how Textual communicates with your application.</p> <p> Events Reference</p> </li> <li> <p> Styles</p> <p>All the styles you can use to take your Textual app to the next level.</p> <p> Styles Reference</p> </li> <li> <p> Widgets</p> <p>How to use the many widgets builtin to Textual.</p> <p> Widgets Reference</p> </li> </ul>"},{"location":"snippets/syntax_block_end/","title":"Syntax block end","text":""},{"location":"snippets/syntax_block_start/","title":"Syntax block start","text":"<pre>"},{"location":"styles/","title":"Styles","text":"<p>A reference to Widget styles.  </p> <p>See the links to the left of the page, or in the hamburger menu (three horizontal bars, top left).</p>"},{"location":"styles/align/","title":"Align","text":"<p>The <code>align</code> style aligns children within a container.</p>"},{"location":"styles/align/#syntax","title":"Syntax","text":"<pre>\nalign: &lt;horizontal&gt; &lt;vertical&gt;;\n\nalign-horizontal: &lt;horizontal&gt;;\nalign-vertical: &lt;vertical&gt;;\n</pre> <p>The style <code>align</code> takes a <code>&lt;horizontal&gt;</code> followed by a <code>&lt;vertical&gt;</code>.</p> <p>You can specify the alignment of children on both the horizontal and vertical axes at the same time, or on each of the axis separately. To specify alignment on a single axis, use the respective style and type:</p> <ul> <li><code>align-horizontal</code> takes a <code>&lt;horizontal&gt;</code> and does alignment along the horizontal axis; and</li> <li><code>align-vertical</code> takes a <code>&lt;vertical&gt;</code> and does alignment along the vertical axis.</li> </ul>"},{"location":"styles/align/#examples","title":"Examples","text":""},{"location":"styles/align/#basic-usage","title":"Basic usage","text":"<p>This example contains a simple app with two labels centered on the screen with <code>align: center middle;</code>:</p> Outputalign.pyalign.css <p> AlignApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503\u2503 \u2503Vertical\u00a0alignment\u00a0with\u00a0Textual\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503\u2503 \u2503Take\u00a0note,\u00a0browsers.\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass AlignApp(App):\ndef compose(self):\nyield Label(\"Vertical alignment with [b]Textual[/]\", classes=\"box\")\nyield Label(\"Take note, browsers.\", classes=\"box\")\napp = AlignApp(css_path=\"align.css\")\n</code></pre> <pre><code>Screen {\nalign: center middle;\n}\n.box {\nwidth: 40;\nheight: 5;\nmargin: 1;\npadding: 1;\nbackground: green;\ncolor: white 90%;\nborder: heavy white;\n}\n</code></pre>"},{"location":"styles/align/#all-alignments","title":"All alignments","text":"<p>The next example shows a 3 by 3 grid of containers with text labels. Each label has been aligned differently inside its container, and its text shows its <code>align: ...</code> value.</p> Outputalign_all.pyalign_all.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1331556511-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1331556511-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1331556511-r1 { fill: #808080 } .terminal-1331556511-r2 { fill: #e1e1e1 } .terminal-1331556511-r3 { fill: #c5c8c6 } .terminal-1331556511-r4 { fill: #ddedf9 } .terminal-1331556511-r5 { fill: #e2e2e2 }      AlignAllApp \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502left\u00a0top\u2502\u2502center\u00a0top\u2502\u2502right\u00a0top\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502left\u00a0middle\u2502\u2502center\u00a0middle\u2502\u2502right\u00a0middle\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502 \u2502left\u00a0bottom\u2502\u2502center\u00a0bottom\u2502\u2502right\u00a0bottom\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Container\nfrom textual.widgets import Label\nclass AlignAllApp(App):\n\"\"\"App that illustrates all alignments.\"\"\"\nCSS_PATH = \"align_all.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Container(Label(\"left top\"), id=\"left-top\")\nyield Container(Label(\"center top\"), id=\"center-top\")\nyield Container(Label(\"right top\"), id=\"right-top\")\nyield Container(Label(\"left middle\"), id=\"left-middle\")\nyield Container(Label(\"center middle\"), id=\"center-middle\")\nyield Container(Label(\"right middle\"), id=\"right-middle\")\nyield Container(Label(\"left bottom\"), id=\"left-bottom\")\nyield Container(Label(\"center bottom\"), id=\"center-bottom\")\nyield Container(Label(\"right bottom\"), id=\"right-bottom\")\n</code></pre> <pre><code>#left-top {\n/* align: left top; this is the default value and is implied. */\n}\n#center-top {\nalign: center top;\n}\n#right-top {\nalign: right top;\n}\n#left-middle {\nalign: left middle;\n}\n#center-middle {\nalign: center middle;\n}\n#right-middle {\nalign: right middle;\n}\n#left-bottom {\nalign: left bottom;\n}\n#center-bottom {\nalign: center bottom;\n}\n#right-bottom {\nalign: right bottom;\n}\nScreen {\nlayout: grid;\ngrid-size: 3 3;\ngrid-gutter: 1;\n}\nContainer {\nbackground: $boost;\nborder: solid gray;\nheight: 100%;\n}\nLabel {\nwidth: auto;\nheight: 1;\nbackground: $accent;\n}\n</code></pre>"},{"location":"styles/align/#css","title":"CSS","text":"<pre><code>/* Align child widgets to the center. */\nalign: center middle;\n/* Align child widget to the top right */\nalign: right top;\n/* Change the horizontal alignment of the children of a widget */\nalign-horizontal: right;\n/* Change the vertical alignment of the children of a widget */\nalign-vertical: middle;\n</code></pre>"},{"location":"styles/align/#python","title":"Python","text":"<pre><code># Align child widgets to the center\nwidget.styles.align = (\"center\", \"middle\")\n# Align child widgets to the top right\nwidget.styles.align = (\"right\", \"top\")\n# Change the horizontal alignment of the children of a widget\nwidget.styles.align_horizontal = \"right\"\n# Change the vertical alignment of the children of a widget\nwidget.styles.align_vertical = \"middle\"\n</code></pre>"},{"location":"styles/align/#see-also","title":"See also","text":"<ul> <li><code>content-align</code> to set the alignment of content inside a widget.</li> <li><code>text-align</code> to set the alignment of text in a widget.</li> </ul>"},{"location":"styles/background/","title":"Background","text":"<p>The <code>background</code> rule sets the background color of a widget.</p>"},{"location":"styles/background/#syntax","title":"Syntax","text":"<pre>\nbackground: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p>The style <code>background</code> needs a <code>&lt;color&gt;</code> followed by an optional <code>&lt;percentage&gt;</code> to specify the color transparency (clamped between <code>0%</code> and <code>100%</code>).</p>"},{"location":"styles/background/#examples","title":"Examples","text":""},{"location":"styles/background/#basic-usage","title":"Basic usage","text":"<p>This example creates three widgets and applies a different background to each.</p> Outputbackground.pybackground.css <p> BackgroundApp Widget\u00a01 Widget\u00a02 Widget\u00a03 </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass BackgroundApp(App):\ndef compose(self):\nyield Label(\"Widget 1\", id=\"static1\")\nyield Label(\"Widget 2\", id=\"static2\")\nyield Label(\"Widget 3\", id=\"static3\")\napp = BackgroundApp(css_path=\"background.css\")\n</code></pre> <pre><code>Label {\nwidth: 100%;\nheight: 1fr;\ncontent-align: center middle;\ncolor: white;\n}\n#static1 {\nbackground: red;\n}\n#static2 {\nbackground: rgb(0, 255, 0);\n}\n#static3 {\nbackground: hsl(240, 100%, 50%);\n}\n</code></pre>"},{"location":"styles/background/#different-transparency-settings","title":"Different transparency settings","text":"<p>The next example creates ten widgets layed out side by side to show the effect of setting different percentages for the transparency of the background color.</p> Outputbackground_transparency.pybackground_transparency.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-4087461672-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-4087461672-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-4087461672-r1 { fill: #c5c8c6 } .terminal-4087461672-r2 { fill: #e4e1e1 } .terminal-4087461672-r3 { fill: #e7e0e0 } .terminal-4087461672-r4 { fill: #eae0e0 } .terminal-4087461672-r5 { fill: #ede0e0 } .terminal-4087461672-r6 { fill: #f0dfdf } .terminal-4087461672-r7 { fill: #f3dfdf } .terminal-4087461672-r8 { fill: #f6dfdf } .terminal-4087461672-r9 { fill: #f9dede } .terminal-4087461672-r10 { fill: #fcdede } .terminal-4087461672-r11 { fill: #ffdddd }      BackgroundTransparencyApp 10%20%30%40%50%60%70%80%90%100% </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass BackgroundTransparencyApp(App):\n\"\"\"Simple app to exemplify different transparency settings.\"\"\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"10%\", id=\"t10\")\nyield Static(\"20%\", id=\"t20\")\nyield Static(\"30%\", id=\"t30\")\nyield Static(\"40%\", id=\"t40\")\nyield Static(\"50%\", id=\"t50\")\nyield Static(\"60%\", id=\"t60\")\nyield Static(\"70%\", id=\"t70\")\nyield Static(\"80%\", id=\"t80\")\nyield Static(\"90%\", id=\"t90\")\nyield Static(\"100%\", id=\"t100\")\napp = BackgroundTransparencyApp(css_path=\"background_transparency.css\")\n</code></pre> <pre><code>#t10 {\nbackground: red 10%;\n}\n#t20 {\nbackground: red 20%;\n}\n#t30 {\nbackground: red 30%;\n}\n#t40 {\nbackground: red 40%;\n}\n#t50 {\nbackground: red 50%;\n}\n#t60 {\nbackground: red 60%;\n}\n#t70 {\nbackground: red 70%;\n}\n#t80 {\nbackground: red 80%;\n}\n#t90 {\nbackground: red 90%;\n}\n#t100 {\nbackground: red 100%;\n}\nScreen {\nlayout: horizontal;\n}\nStatic {\nheight: 100%;\nwidth: 1fr;\ncontent-align: center middle;\n}\n</code></pre>"},{"location":"styles/background/#css","title":"CSS","text":"<pre><code>/* Blue background */\nbackground: blue;\n/* 20% red background */\nbackground: red 20%;\n/* RGB color */\nbackground: rgb(100, 120, 200);\n/* HSL color */\nbackground: hsl(290, 70%, 80%);\n</code></pre>"},{"location":"styles/background/#python","title":"Python","text":"<p>You can use the same syntax as CSS, or explicitly set a <code>Color</code> object for finer-grained control.</p> <pre><code># Set blue background\nwidget.styles.background = \"blue\"\n# Set through HSL model\nwidget.styles.background = \"hsl(351,32%,89%)\"\nfrom textual.color import Color\n# Set with a color object by parsing a string\nwidget.styles.background = Color.parse(\"pink\")\nwidget.styles.background = Color.parse(\"#FF00FF\")\n# Set with a color object instantiated directly\nwidget.styles.background = Color(120, 60, 100)\n</code></pre>"},{"location":"styles/background/#see-also","title":"See also","text":"<ul> <li><code>color</code> to set the color of text in a widget.</li> </ul>"},{"location":"styles/border/","title":"Border","text":"<p>The <code>border</code> rule enables the drawing of a box around a widget.</p> <p>Note</p> <p>Due to a Textual limitation, <code>border</code> and <code>outline</code> cannot coexist in the same edge of a widget.</p>"},{"location":"styles/border/#syntax","title":"Syntax","text":"<pre>\nborder: [&lt;border&gt;] [&lt;color&gt;] [&lt;percentage&gt;];\n\nborder-top: [&lt;border&gt;] [&lt;color&gt;] [&lt;percentage&gt;];\nborder-right: [&lt;border&gt;] [&lt;color&gt; [&lt;percentage&gt;]];\nborder-bottom: [&lt;border&gt;] [&lt;color&gt; [&lt;percentage&gt;]];\nborder-left: [&lt;border&gt;] [&lt;color&gt; [&lt;percentage&gt;]];\n</pre> <p>The style <code>border</code> accepts an optional <code>&lt;border&gt;</code> that sets the visual style of the widget border, an optional <code>&lt;color&gt;</code> to set the color of the border, and an optional <code>&lt;percentage&gt;</code> to specify the color transparency.</p> <p>Borders may also be set individually for the four edges of a widget with the <code>border-top</code>, <code>border-right</code>, <code>border-bottom</code> and <code>border-left</code> rules.</p>"},{"location":"styles/border/#multiple-edge-rules","title":"Multiple edge rules","text":"<p>If multiple border rules target the same edge, the last rule that targets a specific edge is the one that is applied to that edge. For example, consider the CSS below:</p> <pre><code>Static {\nborder-top: dashed red;\nborder: solid green;  /* overrides the border-top rule above */\n/* Change the border but just for the bottom edge: */\nborder-bottom: double blue;\n}\n</code></pre> <p>The CSS snippet above will add a solid green border around <code>Static</code> widgets, except for the bottom edge, which will be double blue.</p>"},{"location":"styles/border/#defaults","title":"Defaults","text":"<p>If <code>&lt;color&gt;</code> is specified but <code>&lt;border&gt;</code> is not, it defaults to <code>\"solid\"</code>. If <code>&lt;border&gt;</code> is specified but <code>&lt;color&gt;</code>is not, it defaults to green (RGB color <code>\"#00FF00\"</code>). If <code>&lt;percentage&gt;</code> is not specified it defaults to <code>100%</code>.</p>"},{"location":"styles/border/#border-command","title":"Border command","text":"<p>The <code>textual</code> CLI has a subcommand which will let you explore the various border types interactively:</p> <pre><code>textual borders\n</code></pre> <p>Alternatively, you can see the examples below.</p>"},{"location":"styles/border/#examples","title":"Examples","text":""},{"location":"styles/border/#basic-usage","title":"Basic usage","text":"<p>This examples shows three widgets with different border styles.</p> Outputborder.pyborder.css <p> BorderApp \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502 \u2502My\u00a0border\u00a0is\u00a0solid\u00a0red\u2502 \u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250f\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u2513 \u254f\u254f \u254fMy\u00a0border\u00a0is\u00a0dashed\u00a0green\u254f \u254f\u254f \u2517\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u251b \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e \u258aMy\u00a0border\u00a0is\u00a0tall\u00a0blue\u258e \u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass BorderApp(App):\ndef compose(self):\nyield Label(\"My border is solid red\", id=\"label1\")\nyield Label(\"My border is dashed green\", id=\"label2\")\nyield Label(\"My border is tall blue\", id=\"label3\")\napp = BorderApp(css_path=\"border.css\")\n</code></pre> <pre><code>#label1 {\nbackground: red 20%;\ncolor: red;\nborder: solid red;\n}\n#label2 {\nbackground: green 20%;\ncolor: green;\nborder: dashed green;\n}\n#label3 {\nbackground: blue 20%;\ncolor: blue;\nborder: tall blue;\n}\nScreen {\nbackground: white;\n}\nScreen &gt; Label {\nwidth: 100%;\nheight: 5;\ncontent-align: center middle;\ncolor: white;\nmargin: 1;\nbox-sizing: border-box;\n}\n</code></pre>"},{"location":"styles/border/#all-border-types","title":"All border types","text":"<p>The next example shows a grid with all the available border types.</p> Outputborder_all.pyborder_all.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1700294531-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1700294531-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1700294531-r1 { fill: #c5c8c6 } .terminal-1700294531-r2 { fill: #0178d4 } .terminal-1700294531-r3 { fill: #e1e1e1 } .terminal-1700294531-r4 { fill: #121212 } .terminal-1700294531-r5 { fill: #1e1e1e }      AllBordersApp +------------------+\u250f\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u2513 |ascii|blank\u254fdashed\u254f +------------------+\u2517\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u251b \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2551double\u2551\u2503heavy\u2503hidden/none \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2597\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2596 hkey\u2590inner\u258cnone \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u259d\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2598 \u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u258couter\u2590\u2502round\u2502\u2502solid\u2502 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258f\u2595\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258atall\u258e\u258fvkey\u2595\u258ewide\u258b \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258f\u2595\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 </p> <pre><code>from textual.app import App\nfrom textual.containers import Grid\nfrom textual.widgets import Label\nclass AllBordersApp(App):\ndef compose(self):\nyield Grid(\nLabel(\"ascii\", id=\"ascii\"),\nLabel(\"blank\", id=\"blank\"),\nLabel(\"dashed\", id=\"dashed\"),\nLabel(\"double\", id=\"double\"),\nLabel(\"heavy\", id=\"heavy\"),\nLabel(\"hidden/none\", id=\"hidden\"),\nLabel(\"hkey\", id=\"hkey\"),\nLabel(\"inner\", id=\"inner\"),\nLabel(\"none\", id=\"none\"),\nLabel(\"outer\", id=\"outer\"),\nLabel(\"round\", id=\"round\"),\nLabel(\"solid\", id=\"solid\"),\nLabel(\"tall\", id=\"tall\"),\nLabel(\"vkey\", id=\"vkey\"),\nLabel(\"wide\", id=\"wide\"),\n)\napp = AllBordersApp(css_path=\"border_all.css\")\n</code></pre> <pre><code>#ascii {\nborder: ascii $accent;\n}\n#blank {\nborder: blank $accent;\n}\n#dashed {\nborder: dashed $accent;\n}\n#double {\nborder: double $accent;\n}\n#heavy {\nborder: heavy $accent;\n}\n#hidden {\nborder: hidden $accent;\n}\n#hkey {\nborder: hkey $accent;\n}\n#inner {\nborder: inner $accent;\n}\n#none {\nborder: none $accent;\n}\n#outer {\nborder: outer $accent;\n}\n#round {\nborder: round $accent;\n}\n#solid {\nborder: solid $accent;\n}\n#tall {\nborder: tall $accent;\n}\n#vkey {\nborder: vkey $accent;\n}\n#wide {\nborder: wide $accent;\n}\nGrid {\ngrid-size: 3 5;\nalign: center middle;\ngrid-gutter: 1 2;\n}\nLabel {\nwidth: 20;\nheight: 3;\ncontent-align: center middle;\n}\n</code></pre>"},{"location":"styles/border/#borders-and-outlines","title":"Borders and outlines","text":"<p>The next example makes the difference between <code>border</code> and <code>outline</code> clearer by having three labels side-by-side. They contain the same text, have the same width and height, and are styled exactly the same up to their <code>outline</code> and <code>border</code> rules.</p> <p>This example also shows that a widget cannot contain both a <code>border</code> and an <code>outline</code>:</p> Outputoutline_vs_border.pyoutline_vs_border.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1454950069-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1454950069-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1454950069-r1 { fill: #b93c5b } .terminal-1454950069-r2 { fill: #e1e1e1 } .terminal-1454950069-r3 { fill: #c5c8c6 } .terminal-1454950069-r4 { fill: #4ebf71 }      OutlineBorderApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502ear\u00a0is\u00a0the\u00a0mind-killer.\u2502 \u2502ear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u2502 \u2502\u00a0will\u00a0face\u00a0my\u00a0fear.\u2502 \u2502\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u2502 \u2502nd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path\u2502 \u2502here\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503I\u00a0must\u00a0not\u00a0fear.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u2503 \u2503I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2503 \u2503I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u2503 \u2503And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502I\u00a0must\u00a0not\u00a0fear.\u2502 \u2502Fear\u00a0is\u00a0the\u00a0mind-killer.\u2502 \u2502Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u2502 \u2502I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2502 \u2502I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u2502 \u2502And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass OutlineBorderApp(App):\ndef compose(self):\nyield Label(TEXT, classes=\"outline\")\nyield Label(TEXT, classes=\"border\")\nyield Label(TEXT, classes=\"outline border\")\napp = OutlineBorderApp(css_path=\"outline_vs_border.css\")\n</code></pre> <pre><code>Label {\nheight: 8;\n}\n.outline {\noutline: $error round;\n}\n.border {\nborder: $success heavy;\n}\n</code></pre>"},{"location":"styles/border/#css","title":"CSS","text":"<pre><code>/* Set a heavy white border */\nborder: heavy white;\n/* Set a red border on the left */\nborder-left: outer red;\n/* Set a rounded orange border, 50% transparency. */\nborder: round orange 50%;\n</code></pre>"},{"location":"styles/border/#python","title":"Python","text":"<pre><code># Set a heavy white border\nwidget.styles.border = (\"heavy\", \"white\")\n# Set a red border on the left\nwidget.styles.border_left = (\"outer\", \"red\")\n</code></pre>"},{"location":"styles/border/#see-also","title":"See also","text":"<ul> <li><code>box-sizing</code> to specify how to account for the border in a widget's dimensions.</li> <li><code>outline</code> to add an outline around the content of a widget.</li> </ul>"},{"location":"styles/box_sizing/","title":"Box-sizing","text":"<p>The <code>box-sizing</code> property determines how the width and height of a widget are calculated.</p>"},{"location":"styles/box_sizing/#syntax","title":"Syntax","text":"<pre><code>box-sizing: border-box | content-box;\n</code></pre>"},{"location":"styles/box_sizing/#values","title":"Values","text":"Value Description <code>border-box</code> (default) Padding and border are included in the width and height. If you add padding and/or border the widget will not change in size, but you will have less space for content. <code>content-box</code> Padding and border will increase the size of the widget, leaving the content area unaffected."},{"location":"styles/box_sizing/#example","title":"Example","text":"<p>Both widgets in this example have the same height (5). The top widget has <code>box-sizing: border-box</code> which means that padding and border reduce the space for content. The bottom widget has <code>box-sizing: content-box</code> which increases the size of the widget to compensate for padding and border.</p> Outputbox_sizing.pybox_sizing.css <p> BoxSizingApp \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258e\u258b \u258eI'm\u00a0using\u00a0border-box!\u258b \u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258e\u258b \u258eI'm\u00a0using\u00a0content-box!\u258b \u258e\u258b \u258e\u258b \u258e\u258b \u258e\u258b \u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 </p> <pre><code>from textual.app import App\nfrom textual.widgets import Static\nclass BoxSizingApp(App):\ndef compose(self):\nyield Static(\"I'm using border-box!\", id=\"static1\")\nyield Static(\"I'm using content-box!\", id=\"static2\")\napp = BoxSizingApp(css_path=\"box_sizing.css\")\n</code></pre> <pre><code>#static1 {\nbox-sizing: border-box;\n}\n#static2 {\nbox-sizing: content-box;\n}\nScreen {\nbackground: white;\ncolor: black;\n}\nApp Static {\nbackground: blue 20%;\nheight: 5;\nmargin: 2;\npadding: 1;\nborder: wide black;\n}\n</code></pre>"},{"location":"styles/box_sizing/#css","title":"CSS","text":"<pre><code>/* Set box sizing to border-box (default) */\nbox-sizing: border-box;\n/* Set box sizing to content-box */\nbox-sizing: content-box;\n</code></pre>"},{"location":"styles/box_sizing/#python","title":"Python","text":"<pre><code># Set box sizing to border-box (default)\nwidget.box_sizing = \"border-box\"\n# Set box sizing to content-box\nwidget.box_sizing = \"content-box\"\n</code></pre>"},{"location":"styles/box_sizing/#see-also","title":"See also","text":"<ul> <li><code>border</code> to add a border around a widget.</li> <li><code>padding</code> to add spacing around the content of a widget.</li> </ul>"},{"location":"styles/color/","title":"Color","text":"<p>The <code>color</code> rule sets the text color of a widget.</p>"},{"location":"styles/color/#syntax","title":"Syntax","text":"<pre>\ncolor: (&lt;color&gt; | auto) [&lt;percentage&gt;];\n</pre> <p>The style <code>color</code> needs a <code>&lt;color&gt;</code> followed by an optional <code>&lt;percentage&gt;</code> to specify the color transparency.</p> <p>Instead of a <code>&lt;color&gt;</code>, one can use the special value <code>\"auto\"</code> to choose automatically the color with the best contrast for readability purposes.</p>"},{"location":"styles/color/#examples","title":"Examples","text":""},{"location":"styles/color/#basic-usage","title":"Basic usage","text":"<p>This example sets a different text color for each of three different widgets.</p> Outputcolor.pycolor.css <p> ColorApp I'm\u00a0red! I'm\u00a0rgb(0,\u00a0255,\u00a00)! I'm\u00a0hsl(240,\u00a0100%,\u00a050%)! </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass ColorApp(App):\ndef compose(self):\nyield Label(\"I'm red!\", id=\"label1\")\nyield Label(\"I'm rgb(0, 255, 0)!\", id=\"label2\")\nyield Label(\"I'm hsl(240, 100%, 50%)!\", id=\"label3\")\napp = ColorApp(css_path=\"color.css\")\n</code></pre> <pre><code>Label {\nheight: 1fr;\ncontent-align: center middle;\nwidth: 100%;\n}\n#label1 {\ncolor: red;\n}\n#label2 {\ncolor: rgb(0, 255, 0);\n}\n#label3 {\ncolor: hsl(240, 100%, 50%);\n}\n</code></pre>"},{"location":"styles/color/#auto","title":"Auto","text":"<p>The next example shows how <code>auto</code> chooses between a lighter or a darker text color to increase the contrast and improve readability.</p> Outputcolor_auto.pycolor_auto.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-334364861-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-334364861-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-334364861-r1 { fill: #c5c8c6 } .terminal-334364861-r2 { fill: #f6cdcd } .terminal-334364861-r3 { fill: #2a2a01 } .terminal-334364861-r4 { fill: #cdcdf6 } .terminal-334364861-r5 { fill: #2a1f21 } .terminal-334364861-r6 { fill: #cde1cd }      ColorApp The\u00a0quick\u00a0brown\u00a0fox\u00a0jumps\u00a0over\u00a0the\u00a0lazy\u00a0dog! The\u00a0quick\u00a0brown\u00a0fox\u00a0jumps\u00a0over\u00a0the\u00a0lazy\u00a0dog! The\u00a0quick\u00a0brown\u00a0fox\u00a0jumps\u00a0over\u00a0the\u00a0lazy\u00a0dog! The\u00a0quick\u00a0brown\u00a0fox\u00a0jumps\u00a0over\u00a0the\u00a0lazy\u00a0dog! The\u00a0quick\u00a0brown\u00a0fox\u00a0jumps\u00a0over\u00a0the\u00a0lazy\u00a0dog! </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass ColorApp(App):\ndef compose(self):\nyield Label(\"The quick brown fox jumps over the lazy dog!\", id=\"lbl1\")\nyield Label(\"The quick brown fox jumps over the lazy dog!\", id=\"lbl2\")\nyield Label(\"The quick brown fox jumps over the lazy dog!\", id=\"lbl3\")\nyield Label(\"The quick brown fox jumps over the lazy dog!\", id=\"lbl4\")\nyield Label(\"The quick brown fox jumps over the lazy dog!\", id=\"lbl5\")\napp = ColorApp(css_path=\"color_auto.css\")\n</code></pre> <pre><code>Label {\ncolor: auto 80%;\ncontent-align: center middle;\nheight: 1fr;\nwidth: 100%;\n}\n#lbl1 {\nbackground: red 80%;\n}\n#lbl2 {\nbackground: yellow 80%;\n}\n#lbl3 {\nbackground: blue 80%;\n}\n#lbl4 {\nbackground: pink 80%;\n}\n#lbl5 {\nbackground: green 80%;\n}\n</code></pre>"},{"location":"styles/color/#css","title":"CSS","text":"<pre><code>/* Blue text */\ncolor: blue;\n/* 20% red text */\ncolor: red 20%;\n/* RGB color */\ncolor: rgb(100, 120, 200);\n/* Automatically choose color with suitable contrast for readability */\ncolor: auto;\n</code></pre>"},{"location":"styles/color/#python","title":"Python","text":"<p>You can use the same syntax as CSS, or explicitly set a <code>Color</code> object.</p> <pre><code># Set blue text\nwidget.styles.color = \"blue\"\nfrom textual.color import Color\n# Set with a color object\nwidget.styles.color = Color.parse(\"pink\")\n</code></pre>"},{"location":"styles/color/#see-also","title":"See also","text":"<ul> <li><code>background</code> to set the background color in a widget.</li> </ul>"},{"location":"styles/content_align/","title":"Content-align","text":"<p>The <code>content-align</code> style aligns content inside a widget.</p>"},{"location":"styles/content_align/#syntax","title":"Syntax","text":"<pre>\ncontent-align: &lt;horizontal&gt; &lt;vertical&gt;;\n\ncontent-align-horizontal: &lt;horizontal&gt;;\ncontent-align-vertical: &lt;vertical&gt;;\n</pre> <p>The style <code>content-align</code> takes a <code>&lt;horizontal&gt;</code> followed by a <code>&lt;vertical&gt;</code>.</p> <p>You can specify the alignment of content on both the horizontal and vertical axes at the same time, or on each of the axis separately. To specify content alignment on a single axis, use the respective style and type:</p> <ul> <li><code>content-align-horizontal</code> takes a <code>&lt;horizontal&gt;</code> and does alignment along the horizontal axis; and</li> <li><code>content-align-vertical</code> takes a <code>&lt;vertical&gt;</code> and does alignment along the vertical axis.</li> </ul>"},{"location":"styles/content_align/#examples","title":"Examples","text":""},{"location":"styles/content_align/#basic-usage","title":"Basic usage","text":"<p>This first example shows three labels stacked vertically, each with different content alignments.</p> Outputcontent_align.pycontent_align.css <p> ContentAlignApp With\u00a0content-align\u00a0you\u00a0can... ...Easily\u00a0align\u00a0content... ...Horizontally\u00a0and\u00a0vertically! </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass ContentAlignApp(App):\ndef compose(self):\nyield Label(\"With [i]content-align[/] you can...\", id=\"box1\")\nyield Label(\"...[b]Easily align content[/]...\", id=\"box2\")\nyield Label(\"...Horizontally [i]and[/] vertically!\", id=\"box3\")\napp = ContentAlignApp(css_path=\"content_align.css\")\n</code></pre> <pre><code>#box1 {\ncontent-align: left top;\nbackground: red;\n}\n#box2 {\ncontent-align-horizontal: center;\ncontent-align-vertical: middle;\nbackground: green;\n}\n#box3 {\ncontent-align: right bottom;\nbackground: blue;\n}\nLabel {\nwidth: 100%;\nheight: 1fr;\npadding: 1;\ncolor: white;\n}\n</code></pre>"},{"location":"styles/content_align/#all-content-alignments","title":"All content alignments","text":"<p>The next example shows a 3 by 3 grid of labels. Each label has its text aligned differently.</p> Outputcontent_align_all.pycontent_align_all.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-269337742-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-269337742-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-269337742-r1 { fill: #dde6ed } .terminal-269337742-r2 { fill: #c5c8c6 } .terminal-269337742-r3 { fill: #e1e1e1 }      AllContentAlignApp left\u00a0topcenter\u00a0topright\u00a0top left\u00a0middlecenter\u00a0middleright\u00a0middle left\u00a0bottomcenter\u00a0bottomright\u00a0bottom </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass AllContentAlignApp(App):\ndef compose(self):\nyield Label(\"left top\", id=\"left-top\")\nyield Label(\"center top\", id=\"center-top\")\nyield Label(\"right top\", id=\"right-top\")\nyield Label(\"left middle\", id=\"left-middle\")\nyield Label(\"center middle\", id=\"center-middle\")\nyield Label(\"right middle\", id=\"right-middle\")\nyield Label(\"left bottom\", id=\"left-bottom\")\nyield Label(\"center bottom\", id=\"center-bottom\")\nyield Label(\"right bottom\", id=\"right-bottom\")\napp = AllContentAlignApp(css_path=\"content_align_all.css\")\n</code></pre> <pre><code>#left-top {\n/* content-align: left top; this is the default implied value. */\n}\n#center-top {\ncontent-align: center top;\n}\n#right-top {\ncontent-align: right top;\n}\n#left-middle {\ncontent-align: left middle;\n}\n#center-middle {\ncontent-align: center middle;\n}\n#right-middle {\ncontent-align: right middle;\n}\n#left-bottom {\ncontent-align: left bottom;\n}\n#center-bottom {\ncontent-align: center bottom;\n}\n#right-bottom {\ncontent-align: right bottom;\n}\nScreen {\nlayout: grid;\ngrid-size: 3 3;\ngrid-gutter: 1;\n}\nLabel {\nwidth: 100%;\nheight: 100%;\nbackground: $primary;\n}\n</code></pre>"},{"location":"styles/content_align/#css","title":"CSS","text":"<pre><code>/* Align content in the very center of a widget */\ncontent-align: center middle;\n/* Align content at the top right of a widget */\ncontent-align: right top;\n/* Change the horizontal alignment of the content of a widget */\ncontent-align-horizontal: right;\n/* Change the vertical alignment of the content of a widget */\ncontent-align-vertical: middle;\n</code></pre>"},{"location":"styles/content_align/#python","title":"Python","text":"<pre><code># Align content in the very center of a widget\nwidget.styles.content_align = (\"center\", \"middle\")\n# Align content at the top right of a widget\nwidget.styles.content_align = (\"right\", \"top\")\n# Change the horizontal alignment of the content of a widget\nwidget.styles.content_align_horizontal = \"right\"\n# Change the vertical alignment of the content of a widget\nwidget.styles.content_align_vertical = \"middle\"\n</code></pre>"},{"location":"styles/content_align/#see-also","title":"See also","text":"<ul> <li><code>align</code> to set the alignment of children widgets inside a container.</li> <li><code>text-align</code> to set the alignment of text in a widget.</li> </ul>"},{"location":"styles/display/","title":"Display","text":"<p>The <code>display</code> property defines whether a widget is displayed or not.</p>"},{"location":"styles/display/#syntax","title":"Syntax","text":"<pre><code>display: block | none;\n</code></pre>"},{"location":"styles/display/#values","title":"Values","text":"Value Description <code>block</code> (default) Display the widget as normal. <code>none</code> The widget is not displayed and space will no longer be reserved for it."},{"location":"styles/display/#example","title":"Example","text":"<p>Note that the second widget is hidden by adding the <code>\"remove\"</code> class which sets the display style to <code>none</code>.</p> Outputdisplay.pydisplay.css <p> DisplayApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Widget\u00a01\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Widget\u00a03\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b </p> <pre><code>from textual.app import App\nfrom textual.widgets import Static\nclass DisplayApp(App):\ndef compose(self):\nyield Static(\"Widget 1\")\nyield Static(\"Widget 2\", classes=\"remove\")\nyield Static(\"Widget 3\")\napp = DisplayApp(css_path=\"display.css\")\n</code></pre> <pre><code>Screen {\nbackground: green;\n}\nStatic {\nheight: 5;\nbackground: white;\ncolor: blue;\nborder: heavy blue;\n}\nStatic.remove {\ndisplay: none;\n}\n</code></pre>"},{"location":"styles/display/#css","title":"CSS","text":"<pre><code>/* Widget is shown */\ndisplay: block;\n/* Widget is not shown */\ndisplay: none;\n</code></pre>"},{"location":"styles/display/#python","title":"Python","text":"<pre><code># Hide the widget\nself.styles.display = \"none\"\n# Show the widget again\nself.styles.display = \"block\"\n</code></pre> <p>There is also a shortcut to show / hide a widget. The <code>display</code> property on <code>Widget</code> may be set to <code>True</code> or <code>False</code> to show or hide the widget.</p> <pre><code># Hide the widget\nwidget.display = False\n# Show the widget\nwidget.display = True\n</code></pre>"},{"location":"styles/display/#see-also","title":"See also","text":"<ul> <li><code>visibility</code> to specify whether a widget is visible or not.</li> </ul>"},{"location":"styles/dock/","title":"Dock","text":"<p>The <code>dock</code> property is used to fix a widget to the edge of a container (which may be the entire terminal window).</p>"},{"location":"styles/dock/#syntax","title":"Syntax","text":"<pre><code>dock: bottom | left | right | top;\n</code></pre> <p>The option chosen determines the edge to which the widget is docked.</p>"},{"location":"styles/dock/#examples","title":"Examples","text":""},{"location":"styles/dock/#basic-usage","title":"Basic usage","text":"<p>The example below shows a <code>left</code> docked sidebar. Notice that even though the content is scrolled, the sidebar remains fixed.</p> Outputdock_layout1_sidebar.pydock_layout1_sidebar.css <p> DockLayoutExample Sidebarfor\u00a0sticky\u00a0headers,\u00a0footers,\u00a0and\u00a0sidebars. Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0fixes\u00a0its\u00a0 position,\u00a0aligned\u00a0to\u00a0either\u00a0the\u00a0top,\u00a0right,\u00a0bottom,\u00a0or\u00a0left\u00a0 edges\u00a0of\u00a0a\u00a0container. Docked\u00a0widgets\u00a0will\u00a0not\u00a0scroll\u00a0out\u00a0of\u00a0view,\u00a0making\u00a0them\u00a0ideal\u00a0 for\u00a0sticky\u00a0headers,\u00a0footers,\u00a0and\u00a0sidebars. \u2582\u2582 Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0fixes\u00a0its\u00a0 position,\u00a0aligned\u00a0to\u00a0either\u00a0the\u00a0top,\u00a0right,\u00a0bottom,\u00a0or\u00a0left\u00a0 edges\u00a0of\u00a0a\u00a0container. Docked\u00a0widgets\u00a0will\u00a0not\u00a0scroll\u00a0out\u00a0of\u00a0view,\u00a0making\u00a0them\u00a0ideal\u00a0 for\u00a0sticky\u00a0headers,\u00a0footers,\u00a0and\u00a0sidebars. Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0fixes\u00a0its\u00a0\u2581\u2581 position,\u00a0aligned\u00a0to\u00a0either\u00a0the\u00a0top,\u00a0right,\u00a0bottom,\u00a0or\u00a0left\u00a0 edges\u00a0of\u00a0a\u00a0container. Docked\u00a0widgets\u00a0will\u00a0not\u00a0scroll\u00a0out\u00a0of\u00a0view,\u00a0making\u00a0them\u00a0ideal\u00a0 for\u00a0sticky\u00a0headers,\u00a0footers,\u00a0and\u00a0sidebars. Docking\u00a0a\u00a0widget\u00a0removes\u00a0it\u00a0from\u00a0the\u00a0layout\u00a0and\u00a0fixes\u00a0its\u00a0 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"\\\nDocking a widget removes it from the layout and fixes its position, aligned to either the top, right, bottom, or left edges of a container.\nDocked widgets will not scroll out of view, making them ideal for sticky headers, footers, and sidebars.\n\"\"\"\nclass DockLayoutExample(App):\nCSS_PATH = \"dock_layout1_sidebar.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"Sidebar\", id=\"sidebar\")\nyield Static(TEXT * 10, id=\"body\")\nif __name__ == \"__main__\":\napp = DockLayoutExample()\napp.run()\n</code></pre> <pre><code>#sidebar {\ndock: left;\nwidth: 15;\nheight: 100%;\ncolor: #0f2b41;\nbackground: dodgerblue;\n}\n</code></pre>"},{"location":"styles/dock/#advanced-usage","title":"Advanced usage","text":"<p>The second example shows how one can use full-width or full-height containers to dock labels to the edges of a larger container. The labels will remain in that position (docked) even if the container they are in scrolls horizontally and/or vertically.</p> Outputdock_all.pydock_all.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1840966081-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1840966081-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1840966081-r1 { fill: #e1e1e1 } .terminal-1840966081-r2 { fill: #c5c8c6 } .terminal-1840966081-r3 { fill: #ffffff }      DockAllApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502top\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502leftright\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502bottom\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App\nfrom textual.containers import Container\nfrom textual.widgets import Label\nclass DockAllApp(App):\ndef compose(self):\nyield Container(\nContainer(Label(\"left\"), id=\"left\"),\nContainer(Label(\"top\"), id=\"top\"),\nContainer(Label(\"right\"), id=\"right\"),\nContainer(Label(\"bottom\"), id=\"bottom\"),\nid=\"big_container\",\n)\napp = DockAllApp(css_path=\"dock_all.css\")\n</code></pre> <pre><code>#left {\ndock: left;\nheight: 100%;\nwidth: auto;\nalign-vertical: middle;\n}\n#top {\ndock: top;\nheight: auto;\nwidth: 100%;\nalign-horizontal: center;\n}\n#right {\ndock: right;\nheight: 100%;\nwidth: auto;\nalign-vertical: middle;\n}\n#bottom {\ndock: bottom;\nheight: auto;\nwidth: 100%;\nalign-horizontal: center;\n}\nScreen {\nalign: center middle;\n}\n#big_container {\nwidth: 75%;\nheight: 75%;\nborder: round white;\n}\n</code></pre>"},{"location":"styles/dock/#css","title":"CSS","text":"<pre><code>dock: bottom;  /* Docks on the bottom edge of the parent container. */\ndock: left;    /* Docks on the   left edge of the parent container. */\ndock: right;   /* Docks on the  right edge of the parent container. */\ndock: top;     /* Docks on the    top edge of the parent container. */\n</code></pre>"},{"location":"styles/dock/#python","title":"Python","text":"<pre><code>widget.styles.dock = \"bottom\"  # Dock bottom.\nwidget.styles.dock = \"left\"    # Dock   left.\nwidget.styles.dock = \"right\"   # Dock  right.\nwidget.styles.dock = \"top\"     # Dock    top.\n</code></pre>"},{"location":"styles/dock/#see-also","title":"See also","text":"<ul> <li>The layout guide section on docking.</li> </ul>"},{"location":"styles/height/","title":"Height","text":"<p>The <code>height</code> rule sets a widget's height.</p>"},{"location":"styles/height/#syntax","title":"Syntax","text":"<pre>\nheight: &lt;scalar&gt;;\n</pre> <p>The style <code>height</code> needs a <code>&lt;scalar&gt;</code> to determine the vertical length of the widget. By default, it sets the height of the content area, but if <code>box-sizing</code> is set to <code>border-box</code> it sets the height of the border area.</p>"},{"location":"styles/height/#examples","title":"Examples","text":""},{"location":"styles/height/#basic-usage","title":"Basic usage","text":"<p>This examples creates a widget with a height of 50% of the screen.</p> Outputheight.pyheight.css <p> HeightApp Widget </p> <pre><code>from textual.app import App\nfrom textual.widget import Widget\nclass HeightApp(App):\ndef compose(self):\nyield Widget()\napp = HeightApp(css_path=\"height.css\")\n</code></pre> <pre><code>Screen &gt; Widget {\nbackground: green;\nheight: 50%;\ncolor: white;\n}\n</code></pre>"},{"location":"styles/height/#all-height-formats","title":"All height formats","text":"<p>The next example creates a series of wide widgets with heights set with different units. Open the CSS file tab to see the comments that explain how each height is computed. (The output includes a vertical ruler on the right to make it easier to check the height of each widget.)</p> Outputheight_comparison.pyheight_comparison.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3573285936-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3573285936-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3573285936-r1 { fill: #c5c8c6 } .terminal-3573285936-r2 { fill: #e8e0e7 } .terminal-3573285936-r3 { fill: #ddedf9 } .terminal-3573285936-r4 { fill: #eae3e5 } .terminal-3573285936-r5 { fill: #ede6e6 } .terminal-3573285936-r6 { fill: #efe9e4 } .terminal-3573285936-r7 { fill: #efeedf } .terminal-3573285936-r8 { fill: #e9eee5 } .terminal-3573285936-r9 { fill: #e4eee8 } .terminal-3573285936-r10 { fill: #e2edeb } .terminal-3573285936-r11 { fill: #dfebed }      HeightComparisonApp #cells\u00b7 \u00b7 \u00b7 #percent\u00b7 \u2022 \u00b7 #w\u00b7 \u00b7 \u00b7 \u2022 #h\u00b7 \u00b7 \u00b7 \u00b7 #vw\u2022 \u00b7 \u00b7 \u00b7 #vh\u00b7 \u2022 #auto\u00b7 #fr1\u00b7 #fr2\u00b7 \u00b7 </p> <pre><code>from textual.app import App\nfrom textual.containers import VerticalScroll\nfrom textual.widgets import Label, Placeholder, Static\nclass Ruler(Static):\ndef compose(self):\nruler_text = \"\u00b7\\n\u00b7\\n\u00b7\\n\u00b7\\n\u2022\\n\" * 100\nyield Label(ruler_text)\nclass HeightComparisonApp(App):\ndef compose(self):\nyield VerticalScroll(\nPlaceholder(id=\"cells\"),  # (1)!\nPlaceholder(id=\"percent\"),\nPlaceholder(id=\"w\"),\nPlaceholder(id=\"h\"),\nPlaceholder(id=\"vw\"),\nPlaceholder(id=\"vh\"),\nPlaceholder(id=\"auto\"),\nPlaceholder(id=\"fr1\"),\nPlaceholder(id=\"fr2\"),\n)\nyield Ruler()\napp = HeightComparisonApp(css_path=\"height_comparison.css\")\n</code></pre> <ol> <li>The id of the placeholder identifies which unit will be used to set the height of the widget.</li> </ol> <pre><code>#cells {\nheight: 2;       /* (1)! */\n}\n#percent {\nheight: 12.5%;   /* (2)! */\n}\n#w {\nheight: 5w;      /* (3)! */\n}\n#h {\nheight: 12.5h;   /* (4)! */\n}\n#vw {\nheight: 6.25vw;  /* (5)! */\n}\n#vh {\nheight: 12.5vh;  /* (6)! */\n}\n#auto {\nheight: auto;    /* (7)! */\n}\n#fr1 {\nheight: 1fr;     /* (8)! */\n}\n#fr2 {\nheight: 2fr;     /* (9)! */\n}\nScreen {\nlayers: ruler;\noverflow: hidden;\n}\nRuler {\nlayer: ruler;\ndock: right;\nwidth: 1;\nbackground: $accent;\n}\n</code></pre> <ol> <li>This sets the height to 2 lines.</li> <li>This sets the height to 12.5% of the space made available by the container. The container is 24 lines tall, so 12.5% of 24 is 3.</li> <li>This sets the height to 5% of the width of the direct container, which is the <code>VerticalScroll</code> container. Because it expands to fit all of the terminal, the width of the <code>VerticalScroll</code> is 80 and 5% of 80 is 4.</li> <li>This sets the height to 12.5% of the height of the direct container, which is the <code>VerticalScroll</code> container. Because it expands to fit all of the terminal, the height of the <code>VerticalScroll</code> is 24 and 12.5% of 24 is 3.</li> <li>This sets the height to 6.25% of the viewport width, which is 80. 6.25% of 80 is 5.</li> <li>This sets the height to 12.5% of the viewport height, which is 24. 12.5% of 24 is 3.</li> <li>This sets the height of the placeholder to be the optimal size that fits the content without scrolling. Because the content only spans one line, the placeholder has its height set to 1.</li> <li>This sets the height to <code>1fr</code>, which means this placeholder will have half the height of a placeholder with <code>2fr</code>.</li> <li>This sets the height to <code>2fr</code>, which means this placeholder will have twice the height of a placeholder with <code>1fr</code>.</li> </ol>"},{"location":"styles/height/#css","title":"CSS","text":"<pre><code>/* Explicit cell height */\nheight: 10;\n/* Percentage height */\nheight: 50%;\n/* Automatic height */\nheight: auto\n</code></pre>"},{"location":"styles/height/#python","title":"Python","text":"<pre><code>self.styles.height = 10  # Explicit cell height can be an int\nself.styles.height = \"50%\"\nself.styles.height = \"auto\"\n</code></pre>"},{"location":"styles/height/#see-also","title":"See also","text":"<ul> <li><code>max-height</code> and <code>min-height</code> to limit the height of a widget.</li> <li><code>width</code> to set the width of a widget.</li> </ul>"},{"location":"styles/layer/","title":"Layer","text":"<p>The <code>layer</code> property defines the layer a widget belongs to.</p>"},{"location":"styles/layer/#syntax","title":"Syntax","text":"<pre>\nlayer: &lt;name&gt;;\n</pre> <p>The <code>layer</code> rule accepts a <code>&lt;name&gt;</code> that defines the layer this widget belongs to. This <code>&lt;name&gt;</code> must correspond to a <code>&lt;name&gt;</code> that has been defined in a <code>layers</code> rule by an ancestor of this widget.</p> <p>More information on layers can be found in the guide.</p> <p>Warning</p> <p>Using a <code>&lt;name&gt;</code> that hasn't been defined in a <code>layers</code> declaration of an ancestor of this widget has no effect.</p>"},{"location":"styles/layer/#example","title":"Example","text":"<p>In the example below, <code>#box1</code> is yielded before <code>#box2</code>. However, since <code>#box1</code> is on the higher layer, it is drawn on top of <code>#box2</code>.</p> Outputlayers.pylayers.css <p> LayersExample box1\u00a0(layer\u00a0=\u00a0above) box2\u00a0(layer\u00a0=\u00a0below) </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass LayersExample(App):\nCSS_PATH = \"layers.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"box1 (layer = above)\", id=\"box1\")\nyield Static(\"box2 (layer = below)\", id=\"box2\")\nif __name__ == \"__main__\":\napp = LayersExample()\napp.run()\n</code></pre> <pre><code>Screen {\nalign: center middle;\nlayers: below above;\n}\nStatic {\nwidth: 28;\nheight: 8;\ncolor: auto;\ncontent-align: center middle;\n}\n#box1 {\nlayer: above;\nbackground: darkcyan;\n}\n#box2 {\nlayer: below;\nbackground: orange;\noffset: 12 6;\n}\n</code></pre>"},{"location":"styles/layer/#css","title":"CSS","text":"<pre><code>/* Draw the widget on the layer called 'below' */\nlayer: below;\n</code></pre>"},{"location":"styles/layer/#python","title":"Python","text":"<pre><code># Draw the widget on the layer called 'below'\nwidget.styles.layer = \"below\"\n</code></pre>"},{"location":"styles/layer/#see-also","title":"See also","text":"<ul> <li>The layout guide section on layers.</li> <li><code>layers</code> to define an ordered set of layers.</li> </ul>"},{"location":"styles/layers/","title":"Layers","text":"<p>The <code>layers</code> property allows you to define an ordered set of layers.</p>"},{"location":"styles/layers/#syntax","title":"Syntax","text":"<pre>\nlayers: &lt;name&gt;+;\n</pre> <p>The <code>layers</code> rule accepts one or more <code>&lt;name&gt;</code> that define the layers that the widget is aware of, and the order in which they will be painted on the screen.</p> <p>The values used here can later be referenced using the <code>layer</code> property. The layers defined first in the list are drawn under the layers that are defined later in the list.</p> <p>More information on layers can be found in the guide.</p>"},{"location":"styles/layers/#example","title":"Example","text":"<p>In the example below, <code>#box1</code> is yielded before <code>#box2</code>. However, since <code>#box1</code> is on the higher layer, it is drawn on top of <code>#box2</code>.</p> Outputlayers.pylayers.css <p> LayersExample box1\u00a0(layer\u00a0=\u00a0above) box2\u00a0(layer\u00a0=\u00a0below) </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass LayersExample(App):\nCSS_PATH = \"layers.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"box1 (layer = above)\", id=\"box1\")\nyield Static(\"box2 (layer = below)\", id=\"box2\")\nif __name__ == \"__main__\":\napp = LayersExample()\napp.run()\n</code></pre> <pre><code>Screen {\nalign: center middle;\nlayers: below above;\n}\nStatic {\nwidth: 28;\nheight: 8;\ncolor: auto;\ncontent-align: center middle;\n}\n#box1 {\nlayer: above;\nbackground: darkcyan;\n}\n#box2 {\nlayer: below;\nbackground: orange;\noffset: 12 6;\n}\n</code></pre>"},{"location":"styles/layers/#css","title":"CSS","text":"<pre><code>/* Bottom layer is called 'below', layer above it is called 'above' */\nlayers: below above;\n</code></pre>"},{"location":"styles/layers/#python","title":"Python","text":"<pre><code># Bottom layer is called 'below', layer above it is called 'above'\nwidget.style.layers = (\"below\", \"above\")\n</code></pre>"},{"location":"styles/layers/#see-also","title":"See also","text":"<ul> <li>The layout guide section on layers.</li> <li><code>layer</code> to set the layer a widget belongs to.</li> </ul>"},{"location":"styles/layout/","title":"Layout","text":"<p>The <code>layout</code> property defines how a widget arranges its children.</p>"},{"location":"styles/layout/#syntax","title":"Syntax","text":"<pre>\nlayout: grid | horizontal | vertical;\n</pre> <p>The <code>layout</code> style takes an option that defines how child widgets will be arranged, as per the table shown below.</p>"},{"location":"styles/layout/#values","title":"Values","text":"Value Description <code>grid</code> Child widgets will be arranged in a grid. <code>horizontal</code> Child widgets will be arranged along the horizontal axis, from left to right. <code>vertical</code> (default) Child widgets will be arranged along the vertical axis, from top to bottom. <p>See the layout guide for more information.</p>"},{"location":"styles/layout/#example","title":"Example","text":"<p>Note how the <code>layout</code> property affects the arrangement of widgets in the example below. To learn more about the grid layout, you can see the layout guide or the grid reference.</p> Outputlayout.pylayout.css <p> LayoutApp Layout Is Vertical LayoutIsHorizontal </p> <pre><code>from textual.app import App\nfrom textual.containers import Container\nfrom textual.widgets import Label\nclass LayoutApp(App):\ndef compose(self):\nyield Container(\nLabel(\"Layout\"),\nLabel(\"Is\"),\nLabel(\"Vertical\"),\nid=\"vertical-layout\",\n)\nyield Container(\nLabel(\"Layout\"),\nLabel(\"Is\"),\nLabel(\"Horizontal\"),\nid=\"horizontal-layout\",\n)\napp = LayoutApp(css_path=\"layout.css\")\n</code></pre> <pre><code>#vertical-layout {\nlayout: vertical;\nbackground: darkmagenta;\nheight: auto;\n}\n#horizontal-layout {\nlayout: horizontal;\nbackground: darkcyan;\nheight: auto;\n}\nLabel {\nmargin: 1;\nwidth: 12;\ncolor: black;\nbackground: yellowgreen;\n}\n</code></pre>"},{"location":"styles/layout/#css","title":"CSS","text":"<pre><code>layout: horizontal;\n</code></pre>"},{"location":"styles/layout/#python","title":"Python","text":"<pre><code>widget.styles.layout = \"horizontal\"\n</code></pre>"},{"location":"styles/layout/#see-also","title":"See also","text":"<ul> <li>Layout guide.</li> <li>Grid reference.</li> </ul>"},{"location":"styles/margin/","title":"Margin","text":"<p>The <code>margin</code> rule specifies spacing around a widget.</p>"},{"location":"styles/margin/#syntax","title":"Syntax","text":"<pre>\nmargin: &lt;integer&gt;\n      # one value for all edges\n      | &lt;integer&gt; &lt;integer&gt;\n      # top/bot   left/right\n      | &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt;;\n      # top       right     bot       left\n\nmargin-top: &lt;integer&gt;;\nmargin-right: &lt;integer&gt;;\nmargin-bottom: &lt;integer&gt;;\nmargin-left: &lt;integer&gt;;\n</pre> <p>The <code>margin</code> specifies spacing around the four edges of the widget equal to the <code>&lt;integer&gt;</code> specified. The number of values given defines what edges get what margin:</p> <ul> <li>1 <code>&lt;integer&gt;</code> sets the same margin for the four edges of the widget;</li> <li>2 <code>&lt;integer&gt;</code> set margin for top/bottom and left/right edges, respectively.</li> <li>4 <code>&lt;integer&gt;</code> set margin for the top, right, bottom, and left edges, respectively.</li> </ul> <p>Tip</p> <p>To remember the order of the edges affected by the rule <code>margin</code> when it has 4 values, think of a clock. Its hand starts at the top and the goes clockwise: top, right, bottom, left.</p> <p>Alternatively, margin can be set for each edge individually through the rules <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code>, respectively.</p>"},{"location":"styles/margin/#examples","title":"Examples","text":""},{"location":"styles/margin/#basic-usage","title":"Basic usage","text":"<p>In the example below we add a large margin to a label, which makes it move away from the top-left corner of the screen.</p> Outputmargin.pymargin.css <p> MarginApp \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258eI\u00a0must\u00a0not\u00a0fear.\u258b \u258eFear\u00a0is\u00a0the\u00a0mind-killer.\u258b \u258eFear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u258b \u258eI\u00a0will\u00a0face\u00a0my\u00a0fear.\u258b \u258eI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u258b \u258eAnd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0\u258b \u258eits\u00a0path.\u258b \u258eWhere\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0\u258b \u258eremain.\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass MarginApp(App):\ndef compose(self):\nyield Label(TEXT)\napp = MarginApp(css_path=\"margin.css\")\n</code></pre> <pre><code>Screen {\nbackground: white;\ncolor: black;\n}\nLabel {\nmargin: 4 8;\nbackground: blue 20%;\nborder: blue wide;\nwidth: 100%;\n}\n</code></pre>"},{"location":"styles/margin/#all-margin-settings","title":"All margin settings","text":"<p>The next example shows a grid. In each cell, we have a placeholder that has its margins set in different ways.</p> Outputmargin_all.pymargin_all.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-869776295-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-869776295-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-869776295-r1 { fill: #ffffff } .terminal-869776295-r2 { fill: #c5c8c6 } .terminal-869776295-r3 { fill: #e0e0e0 } .terminal-869776295-r4 { fill: #e5e2e8 } .terminal-869776295-r5 { fill: #e7e0e6 } .terminal-869776295-r6 { fill: #dfe8ec } .terminal-869776295-r7 { fill: #e2e5eb } .terminal-869776295-r8 { fill: #eee8e3 } .terminal-869776295-r9 { fill: #ece5e5 } .terminal-869776295-r10 { fill: #eeeddf } .terminal-869776295-r11 { fill: #eae2e4 }      MarginAllApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502margin\u2502\u2502margin:\u00a01\u00a0\u2502 \u2502no\u00a0margin\u2502\u2502margin:\u00a01\u2502\u2502:\u00a01\u00a05\u2502\u25021\u00a02\u00a06\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502margin-bottom:\u00a04\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502margin-right:\u00a0\u2502\u2502\u2502\u2502margin-left:\u00a03\u2502 \u2502\u2502\u25023\u2502\u2502\u2502\u2502\u2502 \u2502margin-top:\u00a04\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App\nfrom textual.containers import Container, Grid\nfrom textual.widgets import Placeholder\nclass MarginAllApp(App):\ndef compose(self):\nyield Grid(\nContainer(Placeholder(\"no margin\", id=\"p1\"), classes=\"bordered\"),\nContainer(Placeholder(\"margin: 1\", id=\"p2\"), classes=\"bordered\"),\nContainer(Placeholder(\"margin: 1 5\", id=\"p3\"), classes=\"bordered\"),\nContainer(Placeholder(\"margin: 1 1 2 6\", id=\"p4\"), classes=\"bordered\"),\nContainer(Placeholder(\"margin-top: 4\", id=\"p5\"), classes=\"bordered\"),\nContainer(Placeholder(\"margin-right: 3\", id=\"p6\"), classes=\"bordered\"),\nContainer(Placeholder(\"margin-bottom: 4\", id=\"p7\"), classes=\"bordered\"),\nContainer(Placeholder(\"margin-left: 3\", id=\"p8\"), classes=\"bordered\"),\n)\napp = MarginAllApp(css_path=\"margin_all.css\")\n</code></pre> <pre><code>Screen {\nbackground: $background;\n}\nGrid {\ngrid-size: 4;\ngrid-gutter: 1 2;\n}\nPlaceholder {\nwidth: 100%;\nheight: 100%;\n}\nContainer {\nwidth: 100%;\nheight: 100%;\n}\n.bordered {\nborder: white round;\n}\n#p1 {\n/* default is no margin */\n}\n#p2 {\nmargin: 1;\n}\n#p3 {\nmargin: 1 5;\n}\n#p4 {\nmargin: 1 1 2 6;\n}\n#p5 {\nmargin-top: 4;\n}\n#p6 {\nmargin-right: 3;\n}\n#p7 {\nmargin-bottom: 4;\n}\n#p8 {\nmargin-left: 3;\n}\n</code></pre>"},{"location":"styles/margin/#css","title":"CSS","text":"<pre><code>/* Set margin of 1 around all edges */\nmargin: 1;\n/* Set margin of 2 on the top and bottom edges, and 4 on the left and right */\nmargin: 2 4;\n/* Set margin of 1 on the top, 2 on the right,\n3 on the bottom, and 4 on the left */\nmargin: 1 2 3 4;\nmargin-top: 1;\nmargin-right: 2;\nmargin-bottom: 3;\nmargin-left: 4;\n</code></pre>"},{"location":"styles/margin/#python","title":"Python","text":"<p>In Python, you cannot set any of the individual <code>margin</code> rules <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code>.</p> <p>However, you can set margin to a single integer, a tuple of 2 integers, or a tuple of 4 integers:</p> <pre><code># Set margin of 1 around all edges\nwidget.styles.margin = 1\n# Set margin of 2 on the top and bottom edges, and 4 on the left and right\nwidget.styles.margin = (2, 4)\n# Set margin of 1 on top, 2 on the right, 3 on the bottom, and 4 on the left\nwidget.styles.margin = (1, 2, 3, 4)\n</code></pre>"},{"location":"styles/margin/#see-also","title":"See also","text":"<ul> <li><code>padding</code> to add spacing around the content of a widget.</li> </ul>"},{"location":"styles/max_height/","title":"Max-height","text":"<p>The <code>max-height</code> rule sets a maximum height for a widget.</p>"},{"location":"styles/max_height/#syntax","title":"Syntax","text":"<pre>\nmax-height: &lt;scalar&gt;;\n</pre> <p>The <code>max-height</code> rule accepts a <code>&lt;scalar&gt;</code> that defines an upper bound for the <code>height</code> of a widget. That is, the height of a widget is never allowed to exceed <code>max-height</code>.</p>"},{"location":"styles/max_height/#example","title":"Example","text":"<p>The example below shows some placeholders that were defined to span vertically from the top edge of the terminal to the bottom edge. Then, we set <code>max-height</code> individually on each placeholder.</p> Outputmax_height.pymax_height.css <p> MaxHeightApp max-height:\u00a010w max-height:\u00a010 max-height:\u00a050% max-height:\u00a0999 </p> <pre><code>from textual.app import App\nfrom textual.containers import Horizontal\nfrom textual.widgets import Placeholder\nclass MaxHeightApp(App):\ndef compose(self):\nyield Horizontal(\nPlaceholder(\"max-height: 10w\", id=\"p1\"),\nPlaceholder(\"max-height: 999\", id=\"p2\"),\nPlaceholder(\"max-height: 50%\", id=\"p3\"),\nPlaceholder(\"max-height: 10\", id=\"p4\"),\n)\napp = MaxHeightApp(css_path=\"max_height.css\")\n</code></pre> <pre><code>Horizontal {\nheight: 100%;\nwidth: 100%;\n}\nPlaceholder {\nheight: 100%;\nwidth: 1fr;\n}\n#p1 {\nmax-height: 10w;\n}\n#p2 {\nmax-height: 999;  /* (1)! */\n}\n#p3 {\nmax-height: 50%;\n}\n#p4 {\nmax-height: 10;\n}\n</code></pre> <ol> <li>This won't affect the placeholder because its height is less than the maximum height.</li> </ol>"},{"location":"styles/max_height/#css","title":"CSS","text":"<pre><code>/* Set the maximum height to 10 rows */\nmax-height: 10;\n/* Set the maximum height to 25% of the viewport height */\nmax-height: 25vh;\n</code></pre>"},{"location":"styles/max_height/#python","title":"Python","text":"<pre><code># Set the maximum height to 10 rows\nwidget.styles.max_height = 10\n# Set the maximum height to 25% of the viewport height\nwidget.styles.max_height = \"25vh\"\n</code></pre>"},{"location":"styles/max_height/#see-also","title":"See also","text":"<ul> <li><code>min-height</code> to set a lower bound on the height of a widget.</li> <li><code>height</code> to set the height of a widget.</li> </ul>"},{"location":"styles/max_width/","title":"Max-width","text":"<p>The <code>max-width</code> rule sets a maximum width for a widget.</p>"},{"location":"styles/max_width/#syntax","title":"Syntax","text":"<pre>\nmax-width: &lt;scalar&gt;;\n</pre> <p>The <code>max-width</code> rule accepts a <code>&lt;scalar&gt;</code> that defines an upper bound for the <code>width</code> of a widget. That is, the width of a widget is never allowed to exceed <code>max-width</code>.</p>"},{"location":"styles/max_width/#example","title":"Example","text":"<p>The example below shows some placeholders that were defined to span horizontally from the top edge of the terminal to the bottom edge. Then, we set <code>max-width</code> individually on each placeholder.</p> Outputmax_width.pymax_width.css <p> MaxWidthApp max-width:\u00a0 50h max-width:\u00a0999 max-width:\u00a050% max-width:\u00a030 </p> <pre><code>from textual.app import App\nfrom textual.containers import VerticalScroll\nfrom textual.widgets import Placeholder\nclass MaxWidthApp(App):\ndef compose(self):\nyield VerticalScroll(\nPlaceholder(\"max-width: 50h\", id=\"p1\"),\nPlaceholder(\"max-width: 999\", id=\"p2\"),\nPlaceholder(\"max-width: 50%\", id=\"p3\"),\nPlaceholder(\"max-width: 30\", id=\"p4\"),\n)\napp = MaxWidthApp(css_path=\"max_width.css\")\n</code></pre> <pre><code>Horizontal {\nheight: 100%;\nwidth: 100%;\n}\nPlaceholder {\nwidth: 100%;\nheight: 1fr;\n}\n#p1 {\nmax-width: 50h;\n}\n#p2 {\nmax-width: 999;  /* (1)! */\n}\n#p3 {\nmax-width: 50%;\n}\n#p4 {\nmax-width: 30;\n}\n</code></pre> <ol> <li>This won't affect the placeholder because its width is less than the maximum width.</li> </ol>"},{"location":"styles/max_width/#css","title":"CSS","text":"<pre><code>/* Set the maximum width to 10 rows */\nmax-width: 10;\n/* Set the maximum width to 25% of the viewport width */\nmax-width: 25vh;\n</code></pre>"},{"location":"styles/max_width/#python","title":"Python","text":"<pre><code># Set the maximum width to 10 rows\nwidget.styles.max_width = 10\n# Set the maximum width to 25% of the viewport width\nwidget.styles.max_width = \"25vh\"\n</code></pre>"},{"location":"styles/max_width/#see-also","title":"See also","text":"<ul> <li><code>min-width</code> to set a lower bound on the width of a widget.</li> <li><code>width</code> to set the width of a widget.</li> </ul>"},{"location":"styles/min_height/","title":"Min-height","text":"<p>The <code>min-height</code> rule sets a minimum height for a widget.</p>"},{"location":"styles/min_height/#syntax","title":"Syntax","text":"<pre>\nmin-height: &lt;scalar&gt;;\n</pre> <p>The <code>min-height</code> rule accepts a <code>&lt;scalar&gt;</code> that defines a lower bound for the <code>height</code> of a widget. That is, the height of a widget is never allowed to be under <code>min-height</code>.</p>"},{"location":"styles/min_height/#example","title":"Example","text":"<p>The example below shows some placeholders with their height set to <code>50%</code>. Then, we set <code>min-height</code> individually on each placeholder.</p> Outputmin_height.pymin_height.css <p> MinHeightApp min-height:\u00a025% min-height:\u00a075% min-height:\u00a030 min-height:\u00a040w \u2583\u2583 </p> <pre><code>from textual.app import App\nfrom textual.containers import Horizontal\nfrom textual.widgets import Placeholder\nclass MinHeightApp(App):\ndef compose(self):\nyield Horizontal(\nPlaceholder(\"min-height: 25%\", id=\"p1\"),\nPlaceholder(\"min-height: 75%\", id=\"p2\"),\nPlaceholder(\"min-height: 30\", id=\"p3\"),\nPlaceholder(\"min-height: 40w\", id=\"p4\"),\n)\napp = MinHeightApp(css_path=\"min_height.css\")\n</code></pre> <pre><code>Horizontal {\nheight: 100%;\nwidth: 100%;\noverflow-y: auto;\n}\nPlaceholder {\nwidth: 1fr;\nheight: 50%;\n}\n#p1 {\nmin-height: 25%;  /* (1)! */\n}\n#p2 {\nmin-height: 75%;\n}\n#p3 {\nmin-height: 30;\n}\n#p4 {\nmin-height: 40w;\n}\n</code></pre> <ol> <li>This won't affect the placeholder because its height is larger than the minimum height.</li> </ol>"},{"location":"styles/min_height/#css","title":"CSS","text":"<pre><code>/* Set the minimum height to 10 rows */\nmin-height: 10;\n/* Set the minimum height to 25% of the viewport height */\nmin-height: 25vh;\n</code></pre>"},{"location":"styles/min_height/#python","title":"Python","text":"<pre><code># Set the minimum height to 10 rows\nwidget.styles.min_height = 10\n# Set the minimum height to 25% of the viewport height\nwidget.styles.min_height = \"25vh\"\n</code></pre>"},{"location":"styles/min_height/#see-also","title":"See also","text":"<ul> <li><code>max-height</code> to set an upper bound on the height of a widget.</li> <li><code>height</code> to set the height of a widget.</li> </ul>"},{"location":"styles/min_width/","title":"Min-width","text":"<p>The <code>min-width</code> rule sets a minimum width for a widget.</p>"},{"location":"styles/min_width/#syntax","title":"Syntax","text":"<pre>\nmin-width: &lt;scalar&gt;;\n</pre> <p>The <code>min-width</code> rule accepts a <code>&lt;scalar&gt;</code> that defines a lower bound for the <code>width</code> of a widget. That is, the width of a widget is never allowed to be under <code>min-width</code>.</p>"},{"location":"styles/min_width/#example","title":"Example","text":"<p>The example below shows some placeholders with their width set to <code>50%</code>. Then, we set <code>min-width</code> individually on each placeholder.</p> Outputmin_width.pymin_width.css <p> MinWidthApp min-width:\u00a025% min-width:\u00a075% min-width:\u00a0100 min-width:\u00a0400h </p> <pre><code>from textual.app import App\nfrom textual.containers import VerticalScroll\nfrom textual.widgets import Placeholder\nclass MinWidthApp(App):\ndef compose(self):\nyield VerticalScroll(\nPlaceholder(\"min-width: 25%\", id=\"p1\"),\nPlaceholder(\"min-width: 75%\", id=\"p2\"),\nPlaceholder(\"min-width: 100\", id=\"p3\"),\nPlaceholder(\"min-width: 400h\", id=\"p4\"),\n)\napp = MinWidthApp(css_path=\"min_width.css\")\n</code></pre> <pre><code>VerticalScroll {\nheight: 100%;\nwidth: 100%;\noverflow-x: auto;\n}\nPlaceholder {\nheight: 1fr;\nwidth: 50%;\n}\n#p1 {\nmin-width: 25%;\n/* (1)! */\n}\n#p2 {\nmin-width: 75%;\n}\n#p3 {\nmin-width: 100;\n}\n#p4 {\nmin-width: 400h;\n}\n</code></pre> <ol> <li>This won't affect the placeholder because its width is larger than the minimum width.</li> </ol>"},{"location":"styles/min_width/#css","title":"CSS","text":"<pre><code>/* Set the minimum width to 10 rows */\nmin-width: 10;\n/* Set the minimum width to 25% of the viewport width */\nmin-width: 25vh;\n</code></pre>"},{"location":"styles/min_width/#python","title":"Python","text":"<pre><code># Set the minimum width to 10 rows\nwidget.styles.min_width = 10\n# Set the minimum width to 25% of the viewport width\nwidget.styles.min_width = \"25vh\"\n</code></pre>"},{"location":"styles/min_width/#see-also","title":"See also","text":"<ul> <li><code>max-width</code> to set an upper bound on the width of a widget.</li> <li><code>width</code> to set the width of a widget.</li> </ul>"},{"location":"styles/offset/","title":"Offset","text":"<p>The <code>offset</code> rule defines an offset for the position of the widget.</p>"},{"location":"styles/offset/#syntax","title":"Syntax","text":"<pre>\noffset: &lt;scalar&gt; &lt;scalar&gt;;\n\noffset-x: &lt;scalar&gt;;\noffset-y: &lt;scalar&gt; \n</pre> <p>The two <code>&lt;scalar&gt;</code> in the <code>offset</code> define, respectively, the offsets in the horizontal and vertical axes for the widget.</p> <p>To specify an offset along a single axis, you can use <code>offset-x</code> and <code>offset-y</code>.</p>"},{"location":"styles/offset/#example","title":"Example","text":"<p>In this example, we have 3 widgets with differing offsets.</p> Outputoffset.pyoffset.css <p> OffsetApp \u258c\u2590 \u258cChani\u00a0(offset\u00a00\u00a0\u2590 \u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c\u258c-3)\u2590 \u258c\u2590\u258c\u2590 \u258c\u2590\u258c\u2590 \u258c\u2590\u258c\u2590 \u258cPaul\u00a0(offset\u00a08\u00a02)\u2590\u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f \u258c\u2590 \u258c\u2590 \u258c\u2590 \u258c\u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u258c\u2590 \u258c\u2590 \u258c\u2590 \u258cDuncan\u00a0(offset\u00a04\u00a0\u2590 \u258c10)\u2590 \u258c\u2590 \u258c\u2590 \u258c\u2590 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass OffsetApp(App):\ndef compose(self):\nyield Label(\"Paul (offset 8 2)\", classes=\"paul\")\nyield Label(\"Duncan (offset 4 10)\", classes=\"duncan\")\nyield Label(\"Chani (offset 0 -3)\", classes=\"chani\")\napp = OffsetApp(css_path=\"offset.css\")\n</code></pre> <pre><code>Screen {\nbackground: white;\ncolor: black;\nlayout: horizontal;\n}\nLabel {\nwidth: 20;\nheight: 10;\ncontent-align: center middle;\n}\n.paul {\noffset: 8 2;\nbackground: red 20%;\nborder: outer red;\ncolor: red;\n}\n.duncan {\noffset: 4 10;\nbackground: green 20%;\nborder: outer green;\ncolor: green;\n}\n.chani {\noffset: 0 -3;\nbackground: blue 20%;\nborder: outer blue;\ncolor: blue;\n}\n</code></pre>"},{"location":"styles/offset/#css","title":"CSS","text":"<pre><code>/* Move the widget 8 cells in the x direction and 2 in the y direction */\noffset: 8 2;\n/* Move the widget 4 cells in the x direction\noffset-x: 4;\n/* Move the widget -3 cells in the y direction\noffset-y: -3;\n</code></pre>"},{"location":"styles/offset/#python","title":"Python","text":"<p>You cannot change programmatically the offset for a single axis. You have to set the two axes at the same time.</p> <pre><code># Move the widget 2 cells in the x direction, and 4 in the y direction.\nwidget.styles.offset = (2, 4)\n</code></pre>"},{"location":"styles/offset/#see-also","title":"See also","text":"<ul> <li>The layout guide section on offsets.</li> </ul>"},{"location":"styles/opacity/","title":"Opacity","text":"<p>The <code>opacity</code> property sets the opacity/transparency of a widget.</p>"},{"location":"styles/opacity/#syntax","title":"Syntax","text":"<pre>\nopacity: &lt;number&gt; | &lt;percentage&gt;;\n</pre> <p>The opacity of a widget can be set as a <code>&lt;number&gt;</code>  or a <code>&lt;percentage&gt;</code>. <code>0</code>/<code>0%</code> means no opacity, which is equivalent to full transparency. Conversely, <code>1</code>/<code>100%</code> means full opacity, which is equivalent to no transparency. Values outside of these ranges will be clamped.</p>"},{"location":"styles/opacity/#example","title":"Example","text":"<p>This example shows, from top to bottom, increasing opacity values for a label with a border and some text. When the opacity is zero, all we see is the (black) background.</p> Outputopacity.pyopacity.css <p> OpacityApp \u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c \u258c\u2590 \u258copacity:\u00a025%\u2590 \u258c\u2590 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f \u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c \u258c\u2590 \u258copacity:\u00a050%\u2590 \u258c\u2590 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f \u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c \u258c\u2590 \u258copacity:\u00a075%\u2590 \u258c\u2590 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f \u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c \u258c\u2590 \u258copacity:\u00a0100%\u2590 \u258c\u2590 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass OpacityApp(App):\ndef compose(self):\nyield Label(\"opacity: 0%\", id=\"zero-opacity\")\nyield Label(\"opacity: 25%\", id=\"quarter-opacity\")\nyield Label(\"opacity: 50%\", id=\"half-opacity\")\nyield Label(\"opacity: 75%\", id=\"three-quarter-opacity\")\nyield Label(\"opacity: 100%\", id=\"full-opacity\")\napp = OpacityApp(css_path=\"opacity.css\")\n</code></pre> <pre><code>#zero-opacity {\nopacity: 0%;\n}\n#quarter-opacity {\nopacity: 25%;\n}\n#half-opacity {\nopacity: 50%;\n}\n#three-quarter-opacity {\nopacity: 75%;\n}\n#full-opacity {\nopacity: 100%;\n}\nScreen {\nbackground: black;\n}\nLabel {\nwidth: 100%;\nheight: 1fr;\nborder: outer dodgerblue;\nbackground: lightseagreen;\ncontent-align: center middle;\ntext-style: bold;\n}\n</code></pre>"},{"location":"styles/opacity/#css","title":"CSS","text":"<pre><code>/* Fade the widget to 50% against its parent's background */\nopacity: 50%;\n</code></pre>"},{"location":"styles/opacity/#python","title":"Python","text":"<pre><code># Fade the widget to 50% against its parent's background\nwidget.styles.opacity = \"50%\"\n</code></pre>"},{"location":"styles/opacity/#see-also","title":"See also","text":"<ul> <li><code>text-opacity</code> to blend the color of a widget's content with its background color.</li> </ul>"},{"location":"styles/outline/","title":"Outline","text":"<p>The <code>outline</code> rule enables the drawing of a box around the content of a widget, which means the outline is drawn over the content area.</p> <p>Note</p> <p>Due to a Textual limitation, <code>border</code> and <code>outline</code> cannot coexist in the same edge of a widget.</p>"},{"location":"styles/outline/#syntax","title":"Syntax","text":"<pre>\noutline: [&lt;border&gt;] [&lt;color&gt;];\n\noutline-top: [&lt;border&gt;] [&lt;color&gt;];\noutline-right: [&lt;border&gt;] [&lt;color&gt;];\noutline-bottom: [&lt;border&gt;] [&lt;color&gt;];\noutline-left: [&lt;border&gt;] [&lt;color&gt;];\n</pre> <p>The style <code>outline</code> accepts an optional <code>&lt;border&gt;</code> that sets the visual style of the widget outline and an optional <code>&lt;color&gt;</code> to set the color of the outline.</p> <p>Unlike the style <code>border</code>, the frame of the outline is drawn over the content area of the widget. This rule can be useful for temporary emphasis of the content of a widget, if you want to draw the user's attention to it.</p>"},{"location":"styles/outline/#border-command","title":"Border command","text":"<p>The <code>textual</code> CLI has a subcommand which will let you explore the various border types interactively, when applied to the CSS rule <code>border</code>:</p> <pre><code>textual borders\n</code></pre>"},{"location":"styles/outline/#examples","title":"Examples","text":""},{"location":"styles/outline/#basic-usage","title":"Basic usage","text":"<p>This example shows a widget with an outline. Note how the outline occludes the text area.</p> Outputoutline.pyoutline.css <p> OutlineApp \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258eear\u00a0is\u00a0the\u00a0mind-killer.\u258b \u258eear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u258b \u258e\u00a0will\u00a0face\u00a0my\u00a0fear.\u258b \u258e\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u258b \u258end\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u258b \u258eath.\u258b \u258ehere\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass OutlineApp(App):\ndef compose(self):\nyield Label(TEXT)\napp = OutlineApp(css_path=\"outline.css\")\n</code></pre> <pre><code>Screen {\nbackground: white;\ncolor: black;\n}\nLabel {\nmargin: 4 8;\nbackground: green 20%;\noutline: wide green;\nwidth: 100%;\n}\n</code></pre>"},{"location":"styles/outline/#all-outline-types","title":"All outline types","text":"<p>The next example shows a grid with all the available outline types.</p> Outputoutline_all.pyoutline_all.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3596709893-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3596709893-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3596709893-r1 { fill: #c5c8c6 } .terminal-3596709893-r2 { fill: #0178d4 } .terminal-3596709893-r3 { fill: #e1e1e1 } .terminal-3596709893-r4 { fill: #121212 } .terminal-3596709893-r5 { fill: #1e1e1e }      AllOutlinesApp +------------------+\u250f\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u2513 |ascii|blank\u254fdashed\u254f +------------------+\u2517\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u251b \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2551double\u2551\u2503heavy\u2503hidden/none \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2597\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2596 hkey\u2590inner\u258cnone \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u259d\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2598 \u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u258couter\u2590\u2502round\u2502\u2502solid\u2502 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u258f\u2595\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258atall\u258e\u258fvkey\u2595\u258ewide\u258b \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u258f\u2595\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 </p> <pre><code>from textual.app import App\nfrom textual.containers import Grid\nfrom textual.widgets import Label\nclass AllOutlinesApp(App):\ndef compose(self):\nyield Grid(\nLabel(\"ascii\", id=\"ascii\"),\nLabel(\"blank\", id=\"blank\"),\nLabel(\"dashed\", id=\"dashed\"),\nLabel(\"double\", id=\"double\"),\nLabel(\"heavy\", id=\"heavy\"),\nLabel(\"hidden/none\", id=\"hidden\"),\nLabel(\"hkey\", id=\"hkey\"),\nLabel(\"inner\", id=\"inner\"),\nLabel(\"none\", id=\"none\"),\nLabel(\"outer\", id=\"outer\"),\nLabel(\"round\", id=\"round\"),\nLabel(\"solid\", id=\"solid\"),\nLabel(\"tall\", id=\"tall\"),\nLabel(\"vkey\", id=\"vkey\"),\nLabel(\"wide\", id=\"wide\"),\n)\napp = AllOutlinesApp(css_path=\"outline_all.css\")\n</code></pre> <pre><code>#ascii {\noutline: ascii $accent;\n}\n#blank {\noutline: blank $accent;\n}\n#dashed {\noutline: dashed $accent;\n}\n#double {\noutline: double $accent;\n}\n#heavy {\noutline: heavy $accent;\n}\n#hidden {\noutline: hidden $accent;\n}\n#hkey {\noutline: hkey $accent;\n}\n#inner {\noutline: inner $accent;\n}\n#none {\noutline: none $accent;\n}\n#outer {\noutline: outer $accent;\n}\n#round {\noutline: round $accent;\n}\n#solid {\noutline: solid $accent;\n}\n#tall {\noutline: tall $accent;\n}\n#vkey {\noutline: vkey $accent;\n}\n#wide {\noutline: wide $accent;\n}\nGrid {\ngrid-size: 3 5;\nalign: center middle;\ngrid-gutter: 1 2;\n}\nLabel {\nwidth: 20;\nheight: 3;\ncontent-align: center middle;\n}\n</code></pre>"},{"location":"styles/outline/#borders-and-outlines","title":"Borders and outlines","text":"<p>The next example makes the difference between <code>border</code> and <code>outline</code> clearer by having three labels side-by-side. They contain the same text, have the same width and height, and are styled exactly the same up to their <code>outline</code> and <code>border</code> rules.</p> <p>This example also shows that a widget cannot contain both a <code>border</code> and an <code>outline</code>:</p> Outputoutline_vs_border.pyoutline_vs_border.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1454950069-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1454950069-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1454950069-r1 { fill: #b93c5b } .terminal-1454950069-r2 { fill: #e1e1e1 } .terminal-1454950069-r3 { fill: #c5c8c6 } .terminal-1454950069-r4 { fill: #4ebf71 }      OutlineBorderApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502ear\u00a0is\u00a0the\u00a0mind-killer.\u2502 \u2502ear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u2502 \u2502\u00a0will\u00a0face\u00a0my\u00a0fear.\u2502 \u2502\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u2502 \u2502nd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path\u2502 \u2502here\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503I\u00a0must\u00a0not\u00a0fear.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u2503 \u2503I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2503 \u2503I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u2503 \u2503And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502I\u00a0must\u00a0not\u00a0fear.\u2502 \u2502Fear\u00a0is\u00a0the\u00a0mind-killer.\u2502 \u2502Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u2502 \u2502I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2502 \u2502I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u2502 \u2502And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass OutlineBorderApp(App):\ndef compose(self):\nyield Label(TEXT, classes=\"outline\")\nyield Label(TEXT, classes=\"border\")\nyield Label(TEXT, classes=\"outline border\")\napp = OutlineBorderApp(css_path=\"outline_vs_border.css\")\n</code></pre> <pre><code>Label {\nheight: 8;\n}\n.outline {\noutline: $error round;\n}\n.border {\nborder: $success heavy;\n}\n</code></pre>"},{"location":"styles/outline/#css","title":"CSS","text":"<pre><code>/* Set a heavy white outline */\noutline:heavy white;\n/* set a red outline on the left */\noutline-left:outer red;\n</code></pre>"},{"location":"styles/outline/#python","title":"Python","text":"<pre><code># Set a heavy white outline\nwidget.outline = (\"heavy\", \"white\")\n# Set a red outline on the left\nwidget.outline_left = (\"outer\", \"red\")\n</code></pre>"},{"location":"styles/outline/#see-also","title":"See also","text":"<ul> <li><code>border</code> to add a border around a widget.</li> </ul>"},{"location":"styles/overflow/","title":"Overflow","text":"<p>The <code>overflow</code> rule specifies if and when scrollbars should be displayed.</p>"},{"location":"styles/overflow/#syntax","title":"Syntax","text":"<pre>\noverflow: &lt;overflow&gt; &lt;overflow&gt;;\n\noverflow-x: &lt;overflow&gt;;\noverflow-y: &lt;overflow&gt;;\n</pre> <p>The style <code>overflow</code> accepts two values that determine when to display scrollbars in a container widget. The two values set the overflow for the horizontal and vertical axes, respectively.</p> <p>Overflow may also be set individually for each axis:</p> <ul> <li><code>overflow-x</code> sets the overflow for the horizontal axis; and</li> <li><code>overflow-y</code> sets the overflow for the vertical axis.</li> </ul>"},{"location":"styles/overflow/#defaults","title":"Defaults","text":"<p>The default setting for containers is <code>overflow: auto auto</code>.</p> <p>Warning</p> <p>Some built-in containers like <code>Horizontal</code> and <code>VerticalScroll</code> override these defaults.</p>"},{"location":"styles/overflow/#example","title":"Example","text":"<p>Here we split the screen into left and right sections, each with three vertically scrolling widgets that do not fit into the height of the terminal.</p> <p>The left side has <code>overflow-y: auto</code> (the default) and will automatically show a scrollbar. The right side has <code>overflow-y: hidden</code> which will prevent a scrollbar from being shown.</p> Outputoverflow.pyoverflow.css <p> OverflowApp \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258eI\u00a0must\u00a0not\u00a0fear.\u258b\u258eI\u00a0must\u00a0not\u00a0fear.\u258b \u258eFear\u00a0is\u00a0the\u00a0mind-killer.\u258b\u258eFear\u00a0is\u00a0the\u00a0mind-killer.\u258b \u258eFear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0\u258b\u258eFear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0\u258b \u258ebrings\u00a0total\u00a0obliteration.\u258b\u258ebrings\u00a0total\u00a0obliteration.\u258b \u258eI\u00a0will\u00a0face\u00a0my\u00a0fear.\u258b\u258eI\u00a0will\u00a0face\u00a0my\u00a0fear.\u258b \u258eI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u258b\u258eI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0\u258b \u258eand\u00a0through\u00a0me.\u258b\u258eand\u00a0through\u00a0me.\u258b \u258eAnd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0\u258b\u258eAnd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0\u258b \u258ewill\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0\u258b\u258eturn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0\u258b \u258eits\u00a0path.\u258b\u2581\u2581\u258epath.\u258b \u258eWhere\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0\u258b\u258eWhere\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u258b \u258ewill\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0\u258b\u258ebe\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\u258b \u258eremain.\u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258eI\u00a0must\u00a0not\u00a0fear.\u258b \u258eI\u00a0must\u00a0not\u00a0fear.\u258b\u258eFear\u00a0is\u00a0the\u00a0mind-killer.\u258b \u258eFear\u00a0is\u00a0the\u00a0mind-killer.\u258b\u258eFear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0\u258b \u258eFear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0\u258b\u258ebrings\u00a0total\u00a0obliteration.\u258b \u258ebrings\u00a0total\u00a0obliteration.\u258b\u258eI\u00a0will\u00a0face\u00a0my\u00a0fear.\u258b \u258eI\u00a0will\u00a0face\u00a0my\u00a0fear.\u258b\u258eI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0\u258b \u258eI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u258b\u258eand\u00a0through\u00a0me.\u258b </p> <pre><code>from textual.app import App\nfrom textual.containers import Horizontal, VerticalScroll\nfrom textual.widgets import Static\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass OverflowApp(App):\ndef compose(self):\nyield Horizontal(\nVerticalScroll(Static(TEXT), Static(TEXT), Static(TEXT), id=\"left\"),\nVerticalScroll(Static(TEXT), Static(TEXT), Static(TEXT), id=\"right\"),\n)\napp = OverflowApp(css_path=\"overflow.css\")\n</code></pre> <pre><code>Screen {\nbackground: $background;\ncolor: black;\n}\nVerticalScroll {\nwidth: 1fr;\n}\nStatic {\nmargin: 1 2;\nbackground: green 80%;\nborder: green wide;\ncolor: white 90%;\nheight: auto;\n}\n#right {\noverflow-y: hidden;\n}\n</code></pre>"},{"location":"styles/overflow/#css","title":"CSS","text":"<pre><code>/* Automatic scrollbars on both axes (the default) */\noverflow: auto auto;\n/* Hide the vertical scrollbar */\noverflow-y: hidden;\n/* Always show the horizontal scrollbar */\noverflow-x: scroll;\n</code></pre>"},{"location":"styles/overflow/#python","title":"Python","text":"<p>Overflow cannot be programmatically set for both axes at the same time.</p> <pre><code># Hide the vertical scrollbar\nwidget.styles.overflow_y = \"hidden\"\n# Always show the horizontal scrollbar\nwidget.styles.overflow_x = \"scroll\"\n</code></pre>"},{"location":"styles/padding/","title":"Padding","text":"<p>The <code>padding</code> rule specifies spacing around the content of a widget.</p>"},{"location":"styles/padding/#syntax","title":"Syntax","text":"<pre>\npadding: &lt;integer&gt; # one value for all edges\n       | &lt;integer&gt; &lt;integer&gt;\n       # top/bot   left/right\n       | &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt;;\n       # top       right     bot       left\n\npadding-top: &lt;integer&gt;;\npadding-right: &lt;integer&gt;;\npadding-bottom: &lt;integer&gt;;\npadding-left: &lt;integer&gt;;\n</pre> <p>The <code>padding</code> specifies spacing around the content of a widget, thus this spacing is added inside the widget. The values of the <code>&lt;integer&gt;</code> determine how much spacing is added and the number of values define what edges get what padding:</p> <ul> <li>1 <code>&lt;integer&gt;</code> sets the same padding for the four edges of the widget;</li> <li>2 <code>&lt;integer&gt;</code> set padding for top/bottom and left/right edges, respectively.</li> <li>4 <code>&lt;integer&gt;</code> set padding for the top, right, bottom, and left edges, respectively.</li> </ul> <p>Tip</p> <p>To remember the order of the edges affected by the rule <code>padding</code> when it has 4 values, think of a clock. Its hand starts at the top and the goes clockwise: top, right, bottom, left.</p> <p>Alternatively, padding can be set for each edge individually through the rules <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code>, respectively.</p>"},{"location":"styles/padding/#example","title":"Example","text":""},{"location":"styles/padding/#basic-usage","title":"Basic usage","text":"<p>This example adds padding around some text.</p> Outputpadding.pypadding.css <p> PaddingApp I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0 path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0 remain. </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass PaddingApp(App):\ndef compose(self):\nyield Label(TEXT)\napp = PaddingApp(css_path=\"padding.css\")\n</code></pre> <pre><code>Screen {\nbackground: white;\ncolor: blue;\n}\nLabel {\npadding: 4 8;\nbackground: blue 20%;\nwidth: 100%;\n}\n</code></pre>"},{"location":"styles/padding/#all-padding-settings","title":"All padding settings","text":"<p>The next example shows a grid. In each cell, we have a placeholder that has its padding set in different ways. The effect of each padding setting is noticeable in the colored background around the text of each placeholder.</p> Outputpadding_all.pypadding_all.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2356939055-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2356939055-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2356939055-r1 { fill: #c5c8c6 } .terminal-2356939055-r2 { fill: #dfe8ec } .terminal-2356939055-r3 { fill: #e2e5eb } .terminal-2356939055-r4 { fill: #e5e2e8 } .terminal-2356939055-r5 { fill: #e7e0e6 } .terminal-2356939055-r6 { fill: #ece5e5 } .terminal-2356939055-r7 { fill: #eee8e3 } .terminal-2356939055-r8 { fill: #eeeddf } .terminal-2356939055-r9 { fill: #eae2e4 }      PaddingAllApp no\u00a0padding padding:\u00a01padding:padding:\u00a01\u00a01 1\u00a052\u00a06 padding-right:\u00a03padding-bottom:\u00a04padding-left:\u00a03 padding-top:\u00a04 </p> <pre><code>from textual.app import App\nfrom textual.containers import Container, Grid\nfrom textual.widgets import Placeholder\nclass PaddingAllApp(App):\ndef compose(self):\nyield Grid(\nPlaceholder(\"no padding\", id=\"p1\"),\nPlaceholder(\"padding: 1\", id=\"p2\"),\nPlaceholder(\"padding: 1 5\", id=\"p3\"),\nPlaceholder(\"padding: 1 1 2 6\", id=\"p4\"),\nPlaceholder(\"padding-top: 4\", id=\"p5\"),\nPlaceholder(\"padding-right: 3\", id=\"p6\"),\nPlaceholder(\"padding-bottom: 4\", id=\"p7\"),\nPlaceholder(\"padding-left: 3\", id=\"p8\"),\n)\napp = PaddingAllApp(css_path=\"padding_all.css\")\n</code></pre> <pre><code>Screen {\nbackground: $background;\n}\nGrid {\ngrid-size: 4;\ngrid-gutter: 1 2;\n}\nPlaceholder {\nwidth: auto;\nheight: auto;\n}\n#p1 {\n/* default is no padding */\n}\n#p2 {\npadding: 1;\n}\n#p3 {\npadding: 1 5;\n}\n#p4 {\npadding: 1 1 2 6;\n}\n#p5 {\npadding-top: 4;\n}\n#p6 {\npadding-right: 3;\n}\n#p7 {\npadding-bottom: 4;\n}\n#p8 {\npadding-left: 3;\n}\n</code></pre>"},{"location":"styles/padding/#css","title":"CSS","text":"<pre><code>/* Set padding of 1 around all edges */\npadding: 1;\n/* Set padding of 2 on the top and bottom edges, and 4 on the left and right */\npadding: 2 4;\n/* Set padding of 1 on the top, 2 on the right,\n3 on the bottom, and 4 on the left */\npadding: 1 2 3 4;\npadding-top: 1;\npadding-right: 2;\npadding-bottom: 3;\npadding-left: 4;\n</code></pre>"},{"location":"styles/padding/#python","title":"Python","text":"<p>In Python, you cannot set any of the individual <code>padding</code> rules <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code>.</p> <p>However, you can set padding to a single integer, a tuple of 2 integers, or a tuple of 4 integers:</p> <pre><code># Set padding of 1 around all edges\nwidget.styles.padding = 1\n# Set padding of 2 on the top and bottom edges, and 4 on the left and right\nwidget.styles.padding = (2, 4)\n# Set padding of 1 on top, 2 on the right, 3 on the bottom, and 4 on the left\nwidget.styles.padding = (1, 2, 3, 4)\n</code></pre>"},{"location":"styles/padding/#see-also","title":"See also","text":"<ul> <li><code>box-sizing</code> to specify how to account for padding in a widget's dimensions.</li> <li><code>padding</code> to add spacing around a widget.</li> </ul>"},{"location":"styles/scrollbar_gutter/","title":"Scrollbar-gutter","text":"<p>The <code>scrollbar-gutter</code> rule allows reserving space for a vertical scrollbar.</p>"},{"location":"styles/scrollbar_gutter/#syntax","title":"Syntax","text":"<pre>\nscrollbar-gutter: auto | stable;\n</pre>"},{"location":"styles/scrollbar_gutter/#values","title":"Values","text":"Value Description <code>auto</code> (default) No space is reserved for a vertical scrollbar. <code>stable</code> Space is reserved for a vertical scrollbar. <p>Setting the value to <code>stable</code> prevents unwanted layout changes when the scrollbar becomes visible, whereas the default value of <code>auto</code> means that the layout of your application is recomputed when a vertical scrollbar becomes needed.</p>"},{"location":"styles/scrollbar_gutter/#example","title":"Example","text":"<p>In the example below, notice the gap reserved for the scrollbar on the right side of the terminal window.</p> Outputscrollbar_gutter.pyscrollbar_gutter.css <p> ScrollbarGutterApp I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain. </p> <pre><code>from textual.app import App\nfrom textual.widgets import Static\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass ScrollbarGutterApp(App):\ndef compose(self):\nyield Static(TEXT, id=\"text-box\")\napp = ScrollbarGutterApp(css_path=\"scrollbar_gutter.css\")\n</code></pre> <pre><code>Screen {\nscrollbar-gutter: stable;\n}\n#text-box {\ncolor: floralwhite;\nbackground: darkmagenta;\n}\n</code></pre>"},{"location":"styles/scrollbar_gutter/#css","title":"CSS","text":"<pre><code>scrollbar-gutter: auto;    /* Don't reserve space for a vertical scrollbar. */\nscrollbar-gutter: stable;  /* Reserve space for a vertical scrollbar. */\n</code></pre>"},{"location":"styles/scrollbar_gutter/#python","title":"Python","text":"<pre><code>self.styles.scrollbar_gutter = \"auto\"    # Don't reserve space for a vertical scrollbar.\nself.styles.scrollbar_gutter = \"stable\"  # Reserve space for a vertical scrollbar.\n</code></pre>"},{"location":"styles/scrollbar_size/","title":"Scrollbar-size","text":"<p>The <code>scrollbar-size</code> rule defines the width of the scrollbars.</p>"},{"location":"styles/scrollbar_size/#syntax","title":"Syntax","text":"<pre>\nscrollbar-size: &lt;integer&gt; &lt;integer&gt;;\n              # horizontal vertical\n\nscrollbar-size-horizontal: &lt;integer&gt;;\nscrollbar-size-vertical: &lt;integer&gt;;\n</pre> <p>The <code>scrollbar-size</code> rule takes two <code>&lt;integer&gt;</code> to set the horizontal and vertical scrollbar sizes, respectively. This customisable size is the width of the scrollbar, given that its length will always be 100% of the container.</p> <p>The scrollbar widths may also be set individually with <code>scrollbar-size-horizontal</code> and <code>scrollbar-size-vertical</code>.</p>"},{"location":"styles/scrollbar_size/#examples","title":"Examples","text":""},{"location":"styles/scrollbar_size/#basic-usage","title":"Basic usage","text":"<p>In this example we modify the size of the widget's scrollbar to be much larger than usual.</p> Outputscrollbar_size.pyscrollbar_size.css <p> ScrollbarApp I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u2581\u2581\u2581\u2581 I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain. I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. </p> <pre><code>from textual.app import App\nfrom textual.containers import Container\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\n\"\"\"\nclass ScrollbarApp(App):\ndef compose(self):\nyield Container(Label(TEXT * 5), classes=\"panel\")\napp = ScrollbarApp(css_path=\"scrollbar_size.css\")\n</code></pre> <pre><code>Screen {\nbackground: white;\ncolor: blue 80%;\nlayout: horizontal;\n}\nLabel {\npadding: 1 2;\nwidth: 200;\n}\n.panel {\nscrollbar-size: 10 4;\npadding: 1 2;        }  </code></pre>"},{"location":"styles/scrollbar_size/#scrollbar-sizes-comparison","title":"Scrollbar sizes comparison","text":"<p>In the next example we show three containers with differently sized scrollbars.</p> Outputscrollbar_size2.pyscrollbar_size2.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3197611591-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3197611591-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3197611591-r1 { fill: #e7e0e0 } .terminal-3197611591-r2 { fill: #c5c8c6 } .terminal-3197611591-r3 { fill: #e0e4e0 } .terminal-3197611591-r4 { fill: #e0e0e7 } .terminal-3197611591-r5 { fill: #14191f } .terminal-3197611591-r6 { fill: #23568b }      ScrollbarApp I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0tFear\u00a0is\u00a0the\u00a0little-death\u00a0 I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0oI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0 And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0pastAnd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0tWhere\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0thWhere\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0t I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0tFear\u00a0is\u00a0the\u00a0little-death\u00a0 I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2587I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2587\u2587 I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0oI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0 And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0pastAnd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0tWhere\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0thWhere\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0t I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear.\u2582I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0tFear\u00a0is\u00a0the\u00a0little-death\u00a0 I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0oI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0 \u258fAnd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u258f \u258fWhere\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0th\u258f \u258fI\u00a0must\u00a0not\u00a0fear.\u258f \u258fFear\u00a0is\u00a0the\u00a0mind-killer.\u258f \u258f\u2589\u258f </p> <pre><code>from textual.app import App\nfrom textual.containers import Horizontal, Container\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\n\"\"\"\nclass ScrollbarApp(App):\ndef compose(self):\nyield Horizontal(\nContainer(Label(TEXT * 5), id=\"v1\"),\nContainer(Label(TEXT * 5), id=\"v2\"),\nContainer(Label(TEXT * 5), id=\"v3\"),\n)\napp = ScrollbarApp(css_path=\"scrollbar_size2.css\")\n</code></pre> <pre><code>Container {\nwidth: 1fr;\n}\n#v1 {\nscrollbar-size: 5 1;\nbackground: red 20%;\n}\n#v2 {\nscrollbar-size-vertical: 1;\nbackground: green 20%;\n}\n#v3 {\nscrollbar-size-horizontal: 5;\nbackground: blue 20%;\n}\n</code></pre>"},{"location":"styles/scrollbar_size/#css","title":"CSS","text":"<pre><code>/* Set horizontal scrollbar to 10, and vertical scrollbar to 4 */\nscrollbar-size: 10 4;\n/* Set horizontal scrollbar to 10 */\nscrollbar-size-horizontal: 10;\n/* Set vertical scrollbar to 4 */\nscrollbar-size-vertical: 4;\n</code></pre>"},{"location":"styles/scrollbar_size/#python","title":"Python","text":"<p>The rule <code>scrollbar-size</code> has no Python equivalent. The scrollbar sizes must be set independently:</p> <pre><code># Set horizontal scrollbar to 10:\nwidget.styles.scrollbar_size_horizontal = 10\n# Set vertical scrollbar to 4:\nwidget.styles.scrollbar_size_vertical = 4\n</code></pre>"},{"location":"styles/text_align/","title":"Text-align","text":"<p>The <code>text-align</code> rule sets the text alignment in a widget.</p>"},{"location":"styles/text_align/#syntax","title":"Syntax","text":"<pre>\ntext-align: &lt;text-align&gt;;\n</pre> <p>The <code>text-align</code> rule accepts a value of the type <code>&lt;text-align&gt;</code> that defines how text is aligned inside the widget.</p>"},{"location":"styles/text_align/#defaults","title":"Defaults","text":"<p>The default value is <code>start</code>.</p>"},{"location":"styles/text_align/#example","title":"Example","text":"<p>This example shows, from top to bottom: <code>left</code>, <code>center</code>, <code>right</code>, and <code>justify</code> text alignments.</p> Outputtext_align.pytext_align.css <p> TextAlign Left\u00a0alignedCenter\u00a0aligned I\u00a0must\u00a0not\u00a0fear.\u00a0Fear\u00a0is\u00a0the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0I\u00a0must\u00a0not\u00a0fear.\u00a0Fear\u00a0is\u00a0the\u00a0\u00a0\u00a0\u00a0 mind-killer.\u00a0Fear\u00a0is\u00a0the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mind-killer.\u00a0Fear\u00a0is\u00a0the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 little-death\u00a0that\u00a0brings\u00a0total\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0\u00a0\u00a0 obliteration.\u00a0I\u00a0will\u00a0face\u00a0my\u00a0fear.\u00a0Iobliteration.\u00a0I\u00a0will\u00a0face\u00a0my\u00a0fear.\u00a0I will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0\u00a0\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0 through\u00a0me.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0through\u00a0me.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Right\u00a0alignedJustified \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0I\u00a0must\u00a0not\u00a0fear.\u00a0Fear\u00a0is\u00a0theI\u00a0\u00a0must\u00a0\u00a0not\u00a0\u00a0fear.\u00a0\u00a0Fear\u00a0\u00a0\u00a0is\u00a0\u00a0\u00a0the \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mind-killer.\u00a0Fear\u00a0is\u00a0themind-killer.\u00a0\u00a0\u00a0\u00a0\u00a0Fear\u00a0\u00a0\u00a0\u00a0\u00a0is\u00a0\u00a0\u00a0\u00a0\u00a0the \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0little-death\u00a0that\u00a0brings\u00a0totallittle-death\u00a0\u00a0\u00a0that\u00a0\u00a0\u00a0brings\u00a0\u00a0\u00a0total obliteration.\u00a0I\u00a0will\u00a0face\u00a0my\u00a0fear.\u00a0Iobliteration.\u00a0I\u00a0will\u00a0face\u00a0my\u00a0fear.\u00a0I \u00a0\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0andwill\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0\u00a0me\u00a0\u00a0and \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0through\u00a0me.through\u00a0me. </p> <pre><code>from textual.app import App\nfrom textual.containers import Grid\nfrom textual.widgets import Label\nTEXT = (\n\"I must not fear. Fear is the mind-killer. Fear is the little-death that \"\n\"brings total obliteration. I will face my fear. I will permit it to pass over \"\n\"me and through me.\"\n)\nclass TextAlign(App):\ndef compose(self):\nyield Grid(\nLabel(\"[b]Left aligned[/]\\n\" + TEXT, id=\"one\"),\nLabel(\"[b]Center aligned[/]\\n\" + TEXT, id=\"two\"),\nLabel(\"[b]Right aligned[/]\\n\" + TEXT, id=\"three\"),\nLabel(\"[b]Justified[/]\\n\" + TEXT, id=\"four\"),\n)\napp = TextAlign(css_path=\"text_align.css\")\n</code></pre> <pre><code>#one {\ntext-align: left;\nbackground: lightblue;\n}\n#two {\ntext-align: center;\nbackground: indianred;\n}\n#three {\ntext-align: right;\nbackground: palegreen;\n}\n#four {\ntext-align: justify;\nbackground: palevioletred;\n}\nLabel {\npadding: 1 2;\nheight: 100%;\ncolor: auto;\n}\nGrid {\ngrid-size: 2 2;\n}\n</code></pre>"},{"location":"styles/text_align/#css","title":"CSS","text":"<pre><code>/* Set text in the widget to be right aligned */\ntext-align: right;\n</code></pre>"},{"location":"styles/text_align/#python","title":"Python","text":"<pre><code># Set text in the widget to be right aligned\nwidget.styles.text_align = \"right\"\n</code></pre>"},{"location":"styles/text_align/#see-also","title":"See also","text":"<ul> <li><code>align</code> to set the alignment of children widgets inside a container.</li> <li><code>content-align</code> to set the alignment of content inside a widget.</li> </ul>"},{"location":"styles/text_opacity/","title":"Text-opacity","text":"<p>The <code>text-opacity</code> blends the color of the content of a widget with the color of the background.</p>"},{"location":"styles/text_opacity/#syntax","title":"Syntax","text":"<pre>\ntext-opacity: &lt;number&gt; | &lt;percentage&gt;;\n</pre> <p>The text opacity can be set as a <code>&lt;number&gt;</code> or a <code>&lt;percentage&gt;</code>. <code>0</code>/<code>0%</code> means no opacity, which is equivalent to full transparency. Conversely, <code>1</code>/<code>100%</code> means full opacity, which is equivalent to no transparency. Values outside of these ranges will be clamped.</p>"},{"location":"styles/text_opacity/#example","title":"Example","text":"<p>This example shows, from top to bottom, increasing <code>text-opacity</code> values.</p> Outputtext_opacity.pytext_opacity.css <p> TextOpacityApp \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text-opacity:\u00a025%\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text-opacity:\u00a050%\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text-opacity:\u00a075%\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text-opacity:\u00a0100%\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass TextOpacityApp(App):\ndef compose(self):\nyield Label(\"text-opacity: 0%\", id=\"zero-opacity\")\nyield Label(\"text-opacity: 25%\", id=\"quarter-opacity\")\nyield Label(\"text-opacity: 50%\", id=\"half-opacity\")\nyield Label(\"text-opacity: 75%\", id=\"three-quarter-opacity\")\nyield Label(\"text-opacity: 100%\", id=\"full-opacity\")\napp = TextOpacityApp(css_path=\"text_opacity.css\")\n</code></pre> <pre><code>#zero-opacity {\ntext-opacity: 0%;\n}\n#quarter-opacity {\ntext-opacity: 25%;\n}\n#half-opacity {\ntext-opacity: 50%;\n}\n#three-quarter-opacity {\ntext-opacity: 75%;\n}\n#full-opacity {\ntext-opacity: 100%;\n}\nLabel {\nheight: 1fr;\nwidth: 100%;\ntext-align: center;\ntext-style: bold;\n}\n</code></pre>"},{"location":"styles/text_opacity/#css","title":"CSS","text":"<pre><code>/* Set the text to be \"half-faded\" against the background of the widget */\ntext-opacity: 50%;\n</code></pre>"},{"location":"styles/text_opacity/#python","title":"Python","text":"<pre><code># Set the text to be \"half-faded\" against the background of the widget\nwidget.styles.text_opacity = \"50%\"\n</code></pre>"},{"location":"styles/text_opacity/#see-also","title":"See also","text":"<ul> <li><code>opacity</code> to specify the transparency of a whole widget.</li> </ul>"},{"location":"styles/text_style/","title":"Text-style","text":"<p>The <code>text-style</code> sets the style for the text in a widget.</p>"},{"location":"styles/text_style/#syntax","title":"Syntax","text":"<pre>\ntext-style: &lt;text-style&gt;;\n</pre> <p><code>text-style</code> will take all the values specified and will apply that styling combination to the text in the widget.</p>"},{"location":"styles/text_style/#examples","title":"Examples","text":""},{"location":"styles/text_style/#basic-usage","title":"Basic usage","text":"<p>Each of the three text panels has a different text style, respectively <code>bold</code>, <code>italic</code>, and <code>reverse</code>, from left to right.</p> Outputtext_style.pytext_style.css <p> TextStyleApp I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0 that\u00a0brings\u00a0total\u00a0that\u00a0brings\u00a0total\u00a0that\u00a0brings\u00a0total\u00a0 obliteration.obliteration.obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0 over\u00a0me\u00a0and\u00a0through\u00a0me.over\u00a0me\u00a0and\u00a0through\u00a0me.over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0 I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0 to\u00a0see\u00a0its\u00a0path.to\u00a0see\u00a0its\u00a0path.to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0 there\u00a0will\u00a0be\u00a0nothing.\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Onlythere\u00a0will\u00a0be\u00a0nothing.\u00a0Only Only\u00a0I\u00a0will\u00a0remain.I\u00a0will\u00a0remain.I\u00a0will\u00a0remain. </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass TextStyleApp(App):\ndef compose(self):\nyield Label(TEXT, id=\"lbl1\")\nyield Label(TEXT, id=\"lbl2\")\nyield Label(TEXT, id=\"lbl3\")\napp = TextStyleApp(css_path=\"text_style.css\")\n</code></pre> <pre><code>Screen {\nlayout: horizontal;    }\nLabel {\nwidth: 1fr;\n}    #lbl1 {\nbackground: red 30%;\ntext-style: bold;\n}\n#lbl2 {\nbackground: green 30%;\ntext-style: italic;\n}\n#lbl3 {\nbackground: blue 30%;\ntext-style: reverse;\n}\n</code></pre>"},{"location":"styles/text_style/#all-text-styles","title":"All text styles","text":"<p>The next example shows all different styles on their own, as well as some combinations of styles in a single widget.</p> Outputtext_style_all.pytext_style_all.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1979075264-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1979075264-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1979075264-r1 { fill: #e1e1e1 } .terminal-1979075264-r2 { fill: #c5c8c6 } .terminal-1979075264-r3 { fill: #e1e1e1;font-weight: bold } .terminal-1979075264-r4 { fill: #e1e1e1;font-style: italic; } .terminal-1979075264-r5 { fill: #1e1e1e } .terminal-1979075264-r6 { fill: #e1e1e1;text-decoration: line-through; } .terminal-1979075264-r7 { fill: #e1e1e1;text-decoration: underline; } .terminal-1979075264-r8 { fill: #e1e1e1;font-weight: bold;font-style: italic; } .terminal-1979075264-r9 { fill: #1e1e1e;text-decoration: line-through; }      AllTextStyleApp nonebolditalicreverse I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0Fear\u00a0is\u00a0the\u00a0Fear\u00a0is\u00a0the\u00a0Fear\u00a0is\u00a0the\u00a0 mind-killer.mind-killer.mind-killer.mind-killer. Fear\u00a0is\u00a0the\u00a0Fear\u00a0is\u00a0the\u00a0Fear\u00a0is\u00a0the\u00a0Fear\u00a0is\u00a0the\u00a0 little-death\u00a0thatlittle-death\u00a0that\u00a0little-death\u00a0thatlittle-death\u00a0that\u00a0 brings\u00a0total\u00a0brings\u00a0total\u00a0brings\u00a0total\u00a0brings\u00a0total\u00a0 obliteration.obliteration.obliteration.obliteration. I\u00a0will\u00a0face\u00a0my\u00a0I\u00a0will\u00a0face\u00a0my\u00a0I\u00a0will\u00a0face\u00a0my\u00a0I\u00a0will\u00a0face\u00a0my\u00a0 fear.fear.fear.fear. strikeunderlinebold\u00a0italicreverse\u00a0strike I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0Fear\u00a0is\u00a0the\u00a0Fear\u00a0is\u00a0the\u00a0Fear\u00a0is\u00a0the\u00a0 mind-killer.mind-killer.mind-killer.mind-killer. Fear\u00a0is\u00a0the\u00a0Fear\u00a0is\u00a0the\u00a0Fear\u00a0is\u00a0the\u00a0Fear\u00a0is\u00a0the\u00a0 little-death\u00a0thatlittle-death\u00a0that\u00a0little-death\u00a0thatlittle-death\u00a0that\u00a0 brings\u00a0total\u00a0brings\u00a0total\u00a0brings\u00a0total\u00a0brings\u00a0total\u00a0 obliteration.obliteration.obliteration.obliteration. I\u00a0will\u00a0face\u00a0my\u00a0I\u00a0will\u00a0face\u00a0my\u00a0I\u00a0will\u00a0face\u00a0my\u00a0I\u00a0will\u00a0face\u00a0my\u00a0 fear.fear.fear.fear. I\u00a0will\u00a0permit\u00a0it\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0 </p> <pre><code>from textual.app import App\nfrom textual.containers import Grid\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\nclass AllTextStyleApp(App):\ndef compose(self):\nyield Grid(\nLabel(\"none\\n\" + TEXT, id=\"lbl1\"),\nLabel(\"bold\\n\" + TEXT, id=\"lbl2\"),\nLabel(\"italic\\n\" + TEXT, id=\"lbl3\"),\nLabel(\"reverse\\n\" + TEXT, id=\"lbl4\"),\nLabel(\"strike\\n\" + TEXT, id=\"lbl5\"),\nLabel(\"underline\\n\" + TEXT, id=\"lbl6\"),\nLabel(\"bold italic\\n\" + TEXT, id=\"lbl7\"),\nLabel(\"reverse strike\\n\" + TEXT, id=\"lbl8\"),\n)\napp = AllTextStyleApp(css_path=\"text_style_all.css\")\n</code></pre> <pre><code>#lbl1 {\ntext-style: none;\n}\n#lbl2 {\ntext-style: bold;\n}\n#lbl3 {\ntext-style: italic;\n}\n#lbl4 {\ntext-style: reverse;\n}\n#lbl5 {\ntext-style: strike;\n}\n#lbl6 {\ntext-style: underline;\n}\n#lbl7 {\ntext-style: bold italic;\n}\n#lbl8 {\ntext-style: reverse strike;\n}\nGrid {\ngrid-size: 4;\ngrid-gutter: 1 2;\nmargin: 1 2;\nheight: 100%;\n}\nLabel {\nheight: 100%;\n}\n</code></pre>"},{"location":"styles/text_style/#css","title":"CSS","text":"<pre><code>text-style: italic;\n</code></pre>"},{"location":"styles/text_style/#python","title":"Python","text":"<pre><code>widget.styles.text_style = \"italic\"\n</code></pre>"},{"location":"styles/tint/","title":"Tint","text":"<p>The <code>tint</code> rule blends a color with the whole widget.</p>"},{"location":"styles/tint/#syntax","title":"Syntax","text":"<pre>\ntint: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p>The tint rule blends a <code>&lt;color&gt;</code> with the widget. The color should likely have an alpha component (specified directly in the color used or by the optional <code>&lt;percentage&gt;</code>), otherwise the end result will obscure the widget content.</p>"},{"location":"styles/tint/#example","title":"Example","text":"<p>This examples shows a green tint with gradually increasing alpha.</p> Outputtint.pytint.css <p> TintApp tint:\u00a0green\u00a00%; tint:\u00a0green\u00a010%; tint:\u00a0green\u00a020%; tint:\u00a0green\u00a030%; tint:\u00a0green\u00a040%; tint:\u00a0green\u00a050%; \u2584\u2584 tint:\u00a0green\u00a060%; tint:\u00a0green\u00a070%; </p> <pre><code>from textual.app import App\nfrom textual.color import Color\nfrom textual.widgets import Label\nclass TintApp(App):\ndef compose(self):\ncolor = Color.parse(\"green\")\nfor tint_alpha in range(0, 101, 10):\nwidget = Label(f\"tint: green {tint_alpha}%;\")\nwidget.styles.tint = color.with_alpha(tint_alpha / 100)  # (1)!\nyield widget\napp = TintApp(css_path=\"tint.css\")\n</code></pre> <ol> <li>We set the tint to a <code>Color</code> instance with varying levels of transparency, set through the method <code>.with_alpha</code>.</li> </ol> <pre><code>Label {\nheight: 3;\nwidth: 100%;\ntext-style: bold;\nbackground: white;\ncolor: black;\ncontent-align: center middle;\n}\n</code></pre>"},{"location":"styles/tint/#css","title":"CSS","text":"<pre><code>/* A red tint (could indicate an error) */\ntint: red 20%;\n/* A green tint */\ntint: rgba(0, 200, 0, 0.3);\n</code></pre>"},{"location":"styles/tint/#python","title":"Python","text":"<pre><code># A red tint\nfrom textual.color import Color\nwidget.styles.tint = Color.parse(\"red\").with_alpha(0.2);\n# A green tint\nwidget.styles.tint = \"rgba(0, 200, 0, 0.3)\"\n</code></pre>"},{"location":"styles/visibility/","title":"Visibility","text":"<p>The <code>visibility</code> rule determines whether a widget is visible or not.</p>"},{"location":"styles/visibility/#syntax","title":"Syntax","text":"<pre>\nvisibility: hidden | visible;\n</pre> <p><code>visibility</code> takes one of two values to set the visibility of a widget.</p>"},{"location":"styles/visibility/#values","title":"Values","text":"Value Description <code>hidden</code> The widget will be invisible. <code>visible</code> (default) The widget will be displayed as normal."},{"location":"styles/visibility/#visibility-inheritance","title":"Visibility inheritance","text":"<p>Note</p> <p>Children of an invisible container can be visible.</p> <p>By default, children inherit the visibility of their parents. So, if a container is set to be invisible, its children widgets will also be invisible by default. However, those widgets can be made visible if their visibility is explicitly set to <code>visibility: visible</code>. This is shown in the second example below.</p>"},{"location":"styles/visibility/#examples","title":"Examples","text":""},{"location":"styles/visibility/#basic-usage","title":"Basic usage","text":"<p>Note that the second widget is hidden, while leaving a space where it would have been rendered.</p> Outputvisibility.pyvisibility.css <p> VisibilityApp \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Widget\u00a01\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Widget\u00a03\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass VisibilityApp(App):\ndef compose(self):\nyield Label(\"Widget 1\")\nyield Label(\"Widget 2\", classes=\"invisible\")\nyield Label(\"Widget 3\")\napp = VisibilityApp(css_path=\"visibility.css\")\n</code></pre> <pre><code>Screen {\nbackground: green;\n}\nLabel {\nheight: 5;\nwidth: 100%;\nbackground: white;\ncolor: blue;\nborder: heavy blue;\n}\nLabel.invisible {\nvisibility: hidden;\n}\n</code></pre>"},{"location":"styles/visibility/#overriding-container-visibility","title":"Overriding container visibility","text":"<p>The next example shows the interaction of the <code>visibility</code> rule with invisible containers that have visible children. The app below has three rows with a <code>Horizontal</code> container per row and three placeholders per row. The containers all have a white background, and then:</p> <ul> <li>the top container is visible by default (we can see the white background around the placeholders);</li> <li>the middle container is invisible and the children placeholders inherited that setting;</li> <li>the bottom container is invisible but the children placeholders are visible because they were set to be visible.</li> </ul> Outputvisibility_containers.pyvisibility_containers.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-315321689-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-315321689-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-315321689-r1 { fill: #c5c8c6 } .terminal-315321689-r2 { fill: #1a1e16 } .terminal-315321689-r3 { fill: #141e19 } .terminal-315321689-r4 { fill: #121d1c } .terminal-315321689-r5 { fill: #17131a } .terminal-315321689-r6 { fill: #191118 } .terminal-315321689-r7 { fill: #1b1316 }      VisibilityContainersApp PlaceholderPlaceholderPlaceholder PlaceholderPlaceholderPlaceholder </p> <pre><code>from textual.app import App\nfrom textual.containers import Horizontal, VerticalScroll\nfrom textual.widgets import Placeholder\nclass VisibilityContainersApp(App):\ndef compose(self):\nyield VerticalScroll(\nHorizontal(\nPlaceholder(),\nPlaceholder(),\nPlaceholder(),\nid=\"top\",\n),\nHorizontal(\nPlaceholder(),\nPlaceholder(),\nPlaceholder(),\nid=\"middle\",\n),\nHorizontal(\nPlaceholder(),\nPlaceholder(),\nPlaceholder(),\nid=\"bot\",\n),\n)\napp = VisibilityContainersApp(css_path=\"visibility_containers.css\")\n</code></pre> <pre><code>Horizontal {\npadding: 1 2;     /* (1)! */\nbackground: white;\n}\n#top {}               /* (2)! */\n#middle {             /* (3)! */\nvisibility: hidden;\n}\n#bot {                /* (4)! */\nvisibility: hidden;\n}\n#bot &gt; Placeholder {  /* (5)! */\nvisibility: visible;\n}\nPlaceholder {\nwidth: 1fr;\n}\n</code></pre> <ol> <li>The padding and the white background let us know when the <code>Horizontal</code> is visible.</li> <li>The top <code>Horizontal</code> is visible by default, and so are its children.</li> <li>The middle <code>Horizontal</code> is made invisible and its children will inherit that setting.</li> <li>The bottom <code>Horizontal</code> is made invisible...</li> <li>... but its children override that setting and become visible.</li> </ol>"},{"location":"styles/visibility/#css","title":"CSS","text":"<pre><code>/* Widget is invisible */\nvisibility: hidden;\n/* Widget is visible */\nvisibility: visible;\n</code></pre>"},{"location":"styles/visibility/#python","title":"Python","text":"<pre><code># Widget is invisible\nself.styles.visibility = \"hidden\"\n# Widget is visible\nself.styles.visibility = \"visible\"\n</code></pre> <p>There is also a shortcut to set a Widget's visibility. The <code>visible</code> property on <code>Widget</code> may be set to <code>True</code> or <code>False</code>.</p> <pre><code># Make a widget invisible\nwidget.visible = False\n# Make the widget visible again\nwidget.visible = True\n</code></pre>"},{"location":"styles/visibility/#see-also","title":"See also","text":"<ul> <li><code>display</code> to specify whether a widget is displayed or not.</li> </ul>"},{"location":"styles/width/","title":"Width","text":"<p>The <code>width</code> rule sets a widget's width.</p>"},{"location":"styles/width/#syntax","title":"Syntax","text":"<pre>\nwidth: &lt;scalar&gt;;\n</pre> <p>The style <code>width</code> needs a <code>&lt;scalar&gt;</code> to determine the horizontal length of the width. By default, it sets the width of the content area, but if <code>box-sizing</code> is set to <code>border-box</code> it sets the width of the border area.</p>"},{"location":"styles/width/#examples","title":"Examples","text":""},{"location":"styles/width/#basic-usage","title":"Basic usage","text":"<p>This example adds a widget with 50% width of the screen.</p> Outputwidth.pywidth.css <p> WidthApp Widget </p> <pre><code>from textual.app import App\nfrom textual.widget import Widget\nclass WidthApp(App):\ndef compose(self):\nyield Widget()\napp = WidthApp(css_path=\"width.css\")\n</code></pre> <pre><code>Screen &gt; Widget {     background: green;\nwidth: 50%;\ncolor: white;\n}\n</code></pre>"},{"location":"styles/width/#all-width-formats","title":"All width formats","text":"Outputwidth_comparison.pywidth_comparison.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2293600653-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2293600653-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2293600653-r1 { fill: #c5c8c6 } .terminal-2293600653-r2 { fill: #ede6e6 } .terminal-2293600653-r3 { fill: #efe9e4 } .terminal-2293600653-r4 { fill: #efeedf } .terminal-2293600653-r5 { fill: #e9eee5 } .terminal-2293600653-r6 { fill: #e4eee8 } .terminal-2293600653-r7 { fill: #e2edeb } .terminal-2293600653-r8 { fill: #dfebed } .terminal-2293600653-r9 { fill: #dfe9ed } .terminal-2293600653-r10 { fill: #e3e6eb } .terminal-2293600653-r11 { fill: #ddedf9 }      HeightComparisonApp #cells#percent#w#h#vw#vh#auto#fr1#fr3 \u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022\u00b7\u00b7\u00b7\u00b7\u2022 </p> <pre><code>from textual.app import App\nfrom textual.containers import Horizontal\nfrom textual.widgets import Placeholder, Label, Static\nclass Ruler(Static):\ndef compose(self):\nruler_text = \"\u00b7\u00b7\u00b7\u00b7\u2022\" * 100\nyield Label(ruler_text)\nclass HeightComparisonApp(App):\ndef compose(self):\nyield Horizontal(\nPlaceholder(id=\"cells\"),  # (1)!\nPlaceholder(id=\"percent\"),\nPlaceholder(id=\"w\"),\nPlaceholder(id=\"h\"),\nPlaceholder(id=\"vw\"),\nPlaceholder(id=\"vh\"),\nPlaceholder(id=\"auto\"),\nPlaceholder(id=\"fr1\"),\nPlaceholder(id=\"fr3\"),\n)\nyield Ruler()\napp = HeightComparisonApp(css_path=\"width_comparison.css\")\n</code></pre> <ol> <li>The id of the placeholder identifies which unit will be used to set the width of the widget.</li> </ol> <pre><code>#cells {\nwidth: 9;      /* (1)! */\n}\n#percent {\nwidth: 12.5%;  /* (2)! */\n}\n#w {\nwidth: 10w;    /* (3)! */\n}\n#h {\nwidth: 25h;    /* (4)! */\n}\n#vw {\nwidth: 15vw;   /* (5)! */\n}\n#vh {\nwidth: 25vh;   /* (6)! */\n}\n#auto {\nwidth: auto;   /* (7)! */\n}\n#fr1 {\nwidth: 1fr;    /* (8)! */\n}\n#fr3 {\nwidth: 3fr;    /* (9)! */\n}\nScreen {\nlayers: ruler;\n}\nRuler {\nlayer: ruler;\ndock: bottom;\noverflow: hidden;\nheight: 1;\nbackground: $accent;\n}\n</code></pre> <ol> <li>This sets the width to 9 columns.</li> <li>This sets the width to 12.5% of the space made available by the container. The container is 80 columns wide, so 12.5% of 80 is 10.</li> <li>This sets the width to 10% of the width of the direct container, which is the <code>Horizontal</code> container. Because it expands to fit all of the terminal, the width of the <code>Horizontal</code> is 80 and 10% of 80 is 8.</li> <li>This sets the width to 25% of the height of the direct container, which is the <code>Horizontal</code> container. Because it expands to fit all of the terminal, the height of the <code>Horizontal</code> is 24 and 25% of 24 is 6.</li> <li>This sets the width to 15% of the viewport width, which is 80. 15% of 80 is 12.</li> <li>This sets the width to 25% of the viewport height, which is 24. 25% of 24 is 6.</li> <li>This sets the width of the placeholder to be the optimal size that fits the content without scrolling. Because the content is the string <code>\"#auto\"</code>, the placeholder has its width set to 5.</li> <li>This sets the width to <code>1fr</code>, which means this placeholder will have a third of the width of a placeholder with <code>3fr</code>.</li> <li>This sets the width to <code>3fr</code>, which means this placeholder will have triple the width of a placeholder with <code>1fr</code>.</li> </ol>"},{"location":"styles/width/#css","title":"CSS","text":"<pre><code>/* Explicit cell width */\nwidth: 10;\n/* Percentage width */\nwidth: 50%;\n/* Automatic width */\nwidth: auto;\n</code></pre>"},{"location":"styles/width/#python","title":"Python","text":"<pre><code>widget.styles.width = 10\nwidget.styles.width = \"50%\nwidget.styles.width = \"auto\"\n</code></pre>"},{"location":"styles/width/#see-also","title":"See also","text":"<ul> <li><code>max-width</code> and <code>min-width</code> to limit the width of a widget.</li> <li><code>height</code> to set the height of a widget.</li> </ul>"},{"location":"styles/grid/","title":"Grid","text":"<p>There are a number of properties relating to the Textual <code>grid</code> layout.</p> <p>For an in-depth look at the grid layout, visit the grid guide.</p> Property Description <code>column-span</code> Number of columns a cell spans. <code>grid-columns</code> Width of grid columns. <code>grid-gutter</code> Spacing between grid cells. <code>grid-rows</code> Height of grid rows. <code>grid-size</code> Number of columns and rows in the grid layout. <code>row-span</code> Number of rows a cell spans."},{"location":"styles/grid/#syntax","title":"Syntax","text":"<pre>\ncolumn-span: &lt;integer&gt;;\n\ngrid-columns: &lt;scalar&gt;+;\n\ngrid-gutter: &lt;scalar&gt; [&lt;scalar&gt;];\n\ngrid-rows: &lt;scalar&gt;+;\n\ngrid-size: &lt;integer&gt; [&lt;integer&gt;];\n\nrow-span: &lt;integer&gt;;\n</pre> <p>Visit each style's reference page to learn more about how the values are used.</p>"},{"location":"styles/grid/#example","title":"Example","text":"<p>The example below shows all the properties above in action. The <code>grid-size: 3 4;</code> declaration sets the grid to 3 columns and 4 rows. The first cell of the grid, tinted magenta, shows a cell spanning multiple rows and columns. The spacing between grid cells is because of the <code>grid-gutter</code> declaration.</p> Outputgrid.pygrid.css <p> GridApp Grid\u00a0cell\u00a01Grid\u00a0cell\u00a02 row-span:\u00a03; column-span:\u00a02; Grid\u00a0cell\u00a03 Grid\u00a0cell\u00a04 Grid\u00a0cell\u00a05Grid\u00a0cell\u00a06Grid\u00a0cell\u00a07 </p> <pre><code>from textual.app import App\nfrom textual.widgets import Static\nclass GridApp(App):\ndef compose(self):\nyield Static(\"Grid cell 1\\n\\nrow-span: 3;\\ncolumn-span: 2;\", id=\"static1\")\nyield Static(\"Grid cell 2\", id=\"static2\")\nyield Static(\"Grid cell 3\", id=\"static3\")\nyield Static(\"Grid cell 4\", id=\"static4\")\nyield Static(\"Grid cell 5\", id=\"static5\")\nyield Static(\"Grid cell 6\", id=\"static6\")\nyield Static(\"Grid cell 7\", id=\"static7\")\napp = GridApp(css_path=\"grid.css\")\n</code></pre> <pre><code>Screen {\nlayout: grid;\ngrid-size: 3 4;\ngrid-rows: 1fr;\ngrid-columns: 1fr;\ngrid-gutter: 1;\n}\nStatic {\ncolor: auto;\nbackground: lightblue;\nheight: 100%;\npadding: 1 2;\n}\n#static1 {\ntint: magenta 40%;\nrow-span: 3;\ncolumn-span: 2;\n}\n</code></pre> <p>Warning</p> <p>The properties listed on this page will only work when the layout is <code>grid</code>.</p>"},{"location":"styles/grid/#see-also","title":"See also","text":"<ul> <li>The grid layout guide.</li> </ul>"},{"location":"styles/grid/column_span/","title":"Column-span","text":"<p>The <code>column-span</code> style specifies how many columns a widget will span in a grid layout.</p> <p>Note</p> <p>This style only affects widgets that are direct children of a widget with <code>layout: grid</code>.</p>"},{"location":"styles/grid/column_span/#syntax","title":"Syntax","text":"<pre>\ncolumn-span: &lt;integer&gt;;\n</pre> <p>The style <code>column-span</code> accepts a single non-negative <code>&lt;integer&gt;</code> that quantifies how many columns the given widget spans.</p>"},{"location":"styles/grid/column_span/#example","title":"Example","text":"<p>The example below shows a 4 by 4 grid where many placeholders span over several columns.</p> Outputcolumn_span.pycolumn_span.css <p> MyApp #p1 #p2#p3 #p4#p5 #p6#p7 </p> <pre><code>from textual.app import App\nfrom textual.containers import Grid\nfrom textual.widgets import Placeholder\nclass MyApp(App):\ndef compose(self):\nyield Grid(\nPlaceholder(id=\"p1\"),\nPlaceholder(id=\"p2\"),\nPlaceholder(id=\"p3\"),\nPlaceholder(id=\"p4\"),\nPlaceholder(id=\"p5\"),\nPlaceholder(id=\"p6\"),\nPlaceholder(id=\"p7\"),\n)\napp = MyApp(css_path=\"column_span.css\")\n</code></pre> <pre><code>#p1 {\ncolumn-span: 4;\n}\n#p2 {\ncolumn-span: 3;\n}\n#p3 {\ncolumn-span: 1;  /* Didn't need to be set explicitly. */\n}\n#p4 {\ncolumn-span: 2;\n}\n#p5 {\ncolumn-span: 2;\n}\n#p6 {\n/* Default value is 1. */\n}\n#p7 {\ncolumn-span: 3;\n}\nGrid {\ngrid-size: 4 4;\ngrid-gutter: 1 2;\n}\nPlaceholder {\nheight: 100%;\n}\n</code></pre>"},{"location":"styles/grid/column_span/#css","title":"CSS","text":"<pre><code>column-span: 3;\n</code></pre>"},{"location":"styles/grid/column_span/#python","title":"Python","text":"<pre><code>widget.styles.column_span = 3\n</code></pre>"},{"location":"styles/grid/column_span/#see-also","title":"See also","text":"<ul> <li><code>row-span</code> to specify how many rows a widget spans.</li> </ul>"},{"location":"styles/grid/grid_columns/","title":"Grid-columns","text":"<p>The <code>grid-columns</code> style allows to define the width of the columns of the grid.</p> <p>Note</p> <p>This style only affects widgets with <code>layout: grid</code>.</p>"},{"location":"styles/grid/grid_columns/#syntax","title":"Syntax","text":"<pre>\ngrid-columns: &lt;scalar&gt;+;\n</pre> <p>The style <code>grid-columns</code> takes one or more <code>&lt;scalar&gt;</code> that specify the length of the columns of the grid.</p> <p>If there are more columns in the grid than scalars specified in <code>grid-columns</code>, they are reused cyclically. If the number of <code>&lt;scalar&gt;</code> is in excess, the excess is ignored.</p>"},{"location":"styles/grid/grid_columns/#example","title":"Example","text":"<p>The example below shows a grid with 10 labels laid out in a grid with 2 rows and 5 columns.</p> <p>We set <code>grid-columns: 1fr 16 2fr</code>. Because there are more rows than scalars in the style rule, the scalars will be reused:</p> <ul> <li>columns 1 and 4 have width <code>1fr</code>;</li> <li>columns 2 and 5 have width <code>16</code>; and</li> <li>column 3 has width <code>2fr</code>.</li> </ul> Outputgrid_columns.pygrid_columns.css <p> MyApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u25021fr\u2502\u2502width\u00a0=\u00a016\u2502\u25022fr\u2502\u25021fr\u2502\u2502width\u00a0=\u00a016\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u25021fr\u2502\u2502width\u00a0=\u00a016\u2502\u25022fr\u2502\u25021fr\u2502\u2502width\u00a0=\u00a016\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App\nfrom textual.containers import Grid\nfrom textual.widgets import Label\nclass MyApp(App):\ndef compose(self):\nyield Grid(\nLabel(\"1fr\"),\nLabel(\"width = 16\"),\nLabel(\"2fr\"),\nLabel(\"1fr\"),\nLabel(\"width = 16\"),\nLabel(\"1fr\"),\nLabel(\"width = 16\"),\nLabel(\"2fr\"),\nLabel(\"1fr\"),\nLabel(\"width = 16\"),\n)\napp = MyApp(css_path=\"grid_columns.css\")\n</code></pre> <pre><code>Grid {\ngrid-size: 5 2;\ngrid-columns: 1fr 16 2fr;\n}\nLabel {\nborder: round white;\ncontent-align-horizontal: center;\nwidth: 100%;\nheight: 100%;\n}\n</code></pre>"},{"location":"styles/grid/grid_columns/#css","title":"CSS","text":"<pre><code>/* Set all columns to have 50% width */\ngrid-columns: 50%;\n/* Every other column is twice as wide as the first one */\ngrid-columns: 1fr 2fr;\n</code></pre>"},{"location":"styles/grid/grid_columns/#python","title":"Python","text":"<pre><code>grid.styles.grid_columns = \"50%\"\ngrid.styles.grid_columns = \"1fr 2fr\"\n</code></pre>"},{"location":"styles/grid/grid_columns/#see-also","title":"See also","text":"<ul> <li><code>grid-rows</code> to specify the height of the grid rows.</li> </ul>"},{"location":"styles/grid/grid_gutter/","title":"Grid-gutter","text":"<p>The <code>grid-gutter</code> style sets the size of the gutter in the grid layout. That is, it sets the space between adjacent cells in the grid.</p> <p>Gutter is only applied between the edges of cells. No spacing is added between the edges of cells and the edges of the container.</p> <p>Note</p> <p>This style only affects widgets with <code>layout: grid</code>.</p>"},{"location":"styles/grid/grid_gutter/#syntax","title":"Syntax","text":"<pre>\ngrid-gutter: &lt;scalar&gt; [&lt;scalar&gt;];\n</pre> <p>The style <code>grid-gutter</code> takes one or two <code>&lt;scalar&gt;</code> that set the length of the gutter along the vertical and horizontal axes. If only one <code>&lt;scalar&gt;</code> is supplied, it sets the vertical and horizontal gutters. If two are supplied, they set the vertical and horizontal gutters, respectively.</p>"},{"location":"styles/grid/grid_gutter/#example","title":"Example","text":"<p>The example below employs a common trick to apply visually consistent spacing around all grid cells.</p> Outputgrid_gutter.pygrid_gutter.css <p> MyApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502\u2502\u2502 \u25021\u2502\u25022\u2502 \u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502\u2502\u2502 \u25023\u2502\u25024\u2502 \u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502\u2502\u2502 \u25025\u2502\u25026\u2502 \u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502\u2502\u2502 \u25027\u2502\u25028\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App\nfrom textual.containers import Grid\nfrom textual.widgets import Label\nclass MyApp(App):\ndef compose(self):\nyield Grid(\nLabel(\"1\"),\nLabel(\"2\"),\nLabel(\"3\"),\nLabel(\"4\"),\nLabel(\"5\"),\nLabel(\"6\"),\nLabel(\"7\"),\nLabel(\"8\"),\n)\napp = MyApp(css_path=\"grid_gutter.css\")\n</code></pre> <pre><code>Grid {\ngrid-size: 2 4;\ngrid-gutter: 1 2;  /* (1)! */\n}\nLabel {\nborder: round white;\ncontent-align: center middle;\nwidth: 100%;\nheight: 100%;\n}\n</code></pre> <ol> <li>We set the horizontal gutter to be double the vertical gutter because terminal cells are typically two times taller than they are wide. Thus, the result shows visually consistent spacing around grid cells.</li> </ol>"},{"location":"styles/grid/grid_gutter/#css","title":"CSS","text":"<pre><code>/* Set vertical and horizontal gutters to be the same */\ngrid-gutter: 5%;\n/* Set vertical and horizontal gutters separately */\ngrid-gutter: 1 2;\n</code></pre>"},{"location":"styles/grid/grid_gutter/#python","title":"Python","text":"<p>Vertical and horizontal gutters correspond to different Python properties, so they must be set separately:</p> <pre><code>widget.styles.grid_gutter_vertical = \"1\"\nwidget.styles.grid_gutter_horizontal = \"2\"\n</code></pre>"},{"location":"styles/grid/grid_rows/","title":"Grid-rows","text":"<p>The <code>grid-rows</code> style allows to define the height of the rows of the grid.</p> <p>Note</p> <p>This style only affects widgets with <code>layout: grid</code>.</p>"},{"location":"styles/grid/grid_rows/#syntax","title":"Syntax","text":"<pre>\ngrid-rows: &lt;scalar&gt;+;\n</pre> <p>The style <code>grid-rows</code> takes one or more <code>&lt;scalar&gt;</code> that specify the length of the rows of the grid.</p> <p>If there are more rows in the grid than scalars specified in <code>grid-rows</code>, they are reused cyclically. If the number of <code>&lt;scalar&gt;</code> is in excess, the excess is ignored.</p>"},{"location":"styles/grid/grid_rows/#example","title":"Example","text":"<p>The example below shows a grid with 10 labels laid out in a grid with 5 rows and 2 columns.</p> <p>We set <code>grid-rows: 1fr 6 25%</code>. Because there are more rows than scalars in the style rule, the scalars will be reused:</p> <ul> <li>rows 1 and 4 have height <code>1fr</code>;</li> <li>rows 2 and 5 have height <code>6</code>; and</li> <li>row 3 has height <code>25%</code>.</li> </ul> Outputgrid_rows.pygrid_rows.css <p> MyApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u25021fr\u2502\u25021fr\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502\u2502\u2502 \u2502height\u00a0=\u00a06\u2502\u2502height\u00a0=\u00a06\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502\u2502\u2502 \u250225%\u2502\u250225%\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u25021fr\u2502\u25021fr\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502\u2502\u2502 \u2502height\u00a0=\u00a06\u2502\u2502height\u00a0=\u00a06\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App\nfrom textual.containers import Grid\nfrom textual.widgets import Label\nclass MyApp(App):\ndef compose(self):\nyield Grid(\nLabel(\"1fr\"),\nLabel(\"1fr\"),\nLabel(\"height = 6\"),\nLabel(\"height = 6\"),\nLabel(\"25%\"),\nLabel(\"25%\"),\nLabel(\"1fr\"),\nLabel(\"1fr\"),\nLabel(\"height = 6\"),\nLabel(\"height = 6\"),\n)\napp = MyApp(css_path=\"grid_rows.css\")\n</code></pre> <pre><code>Grid {\ngrid-size: 2 5;\ngrid-rows: 1fr 6 25%;\n}\nLabel {\nborder: round white;\ncontent-align: center middle;\nwidth: 100%;\nheight: 100%;\n}\n</code></pre>"},{"location":"styles/grid/grid_rows/#css","title":"CSS","text":"<pre><code>/* Set all rows to have 50% height */\ngrid-rows: 50%;\n/* Every other row is twice as tall as the first one */\ngrid-rows: 1fr 2fr;\n</code></pre>"},{"location":"styles/grid/grid_rows/#python","title":"Python","text":"<pre><code>grid.styles.grid_rows = \"50%\"\ngrid.styles.grid_rows = \"1fr 2fr\"\n</code></pre>"},{"location":"styles/grid/grid_rows/#see-also","title":"See also","text":"<ul> <li><code>grid-columns</code> to specify the width of the grid columns.</li> </ul>"},{"location":"styles/grid/grid_size/","title":"Grid-size","text":"<p>The <code>grid-size</code> style sets the number of columns and rows in a grid layout.</p> <p>The number of rows can be left unspecified and it will be computed automatically.</p> <p>Note</p> <p>This style only affects widgets with <code>layout: grid</code>.</p>"},{"location":"styles/grid/grid_size/#syntax","title":"Syntax","text":"<pre>\ngrid-size: &lt;integer&gt; [&lt;integer&gt;];\n</pre> <p>The style <code>grid-size</code> takes one or two non-negative <code>&lt;integer&gt;</code>. The first defines how many columns there are in the grid. If present, the second one sets the number of rows \u2013 regardless of the number of children of the grid \u2013, otherwise the number of rows is computed automatically.</p>"},{"location":"styles/grid/grid_size/#examples","title":"Examples","text":""},{"location":"styles/grid/grid_size/#columns-and-rows","title":"Columns and rows","text":"<p>In the first example, we create a grid with 2 columns and 5 rows, regardless of the fact that we do not have enough labels to fill in the whole grid:</p> Outputgrid_size_both.pygrid_size_both.css <p> MyApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502\u2502\u2502 \u25021\u2502\u25022\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502\u2502\u2502 \u25023\u2502\u25024\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502 \u25025\u2502 \u2502\u2502 \u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App\nfrom textual.containers import Grid\nfrom textual.widgets import Label\nclass MyApp(App):\ndef compose(self):\nyield Grid(\nLabel(\"1\"),\nLabel(\"2\"),\nLabel(\"3\"),\nLabel(\"4\"),\nLabel(\"5\"),\n)\napp = MyApp(css_path=\"grid_size_both.css\")\n</code></pre> <pre><code>Grid {\ngrid-size: 2 4;  /* (1)! */\n}\nLabel {\nborder: round white;\ncontent-align: center middle;\nwidth: 100%;\nheight: 100%;\n}\n</code></pre> <ol> <li>Create a grid with 2 columns and 4 rows.</li> </ol>"},{"location":"styles/grid/grid_size/#columns-only","title":"Columns only","text":"<p>In the second example, we create a grid with 2 columns and however many rows are needed to display all of the grid children:</p> Outputgrid_size_columns.pygrid_size_columns.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-42281693-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-42281693-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-42281693-r1 { fill: #ffffff } .terminal-42281693-r2 { fill: #c5c8c6 } .terminal-42281693-r3 { fill: #e1e1e1 }      MyApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u25021\u2502\u25022\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u25023\u2502\u25024\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502 \u2502\u2502 \u25025\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App\nfrom textual.containers import Grid\nfrom textual.widgets import Label\nclass MyApp(App):\ndef compose(self):\nyield Grid(\nLabel(\"1\"),\nLabel(\"2\"),\nLabel(\"3\"),\nLabel(\"4\"),\nLabel(\"5\"),\n)\napp = MyApp(css_path=\"grid_size_columns.css\")\n</code></pre> <pre><code>Grid {\ngrid-size: 2;  /* (1)! */\n}\nLabel {\nborder: round white;\ncontent-align: center middle;\nwidth: 100%;\nheight: 100%;\n}\n</code></pre> <ol> <li>Create a grid with 2 columns and however many rows.</li> </ol>"},{"location":"styles/grid/grid_size/#css","title":"CSS","text":"<pre><code>/* Grid with 3 rows and 5 columns */\ngrid-size: 3 5;\n/* Grid with 4 columns and as many rows as needed */\ngrid-size: 4;\n</code></pre>"},{"location":"styles/grid/grid_size/#python","title":"Python","text":"<p>To programmatically change the grid size, the number of rows and columns must be specified separately:</p> <pre><code>widget.styles.grid_size_rows = 3\nwidget.styles.grid_size_columns = 6\n</code></pre>"},{"location":"styles/grid/row_span/","title":"Row-span","text":"<p>The <code>row-span</code> style specifies how many rows a widget will span in a grid layout.</p> <p>Note</p> <p>This style only affects widgets that are direct children of a widget with <code>layout: grid</code>.</p>"},{"location":"styles/grid/row_span/#syntax","title":"Syntax","text":"<pre>\nrow-span: &lt;integer&gt;;\n</pre> <p>The style <code>row-span</code> accepts a single non-negative <code>&lt;integer&gt;</code> that quantifies how many rows the given widget spans.</p>"},{"location":"styles/grid/row_span/#example","title":"Example","text":"<p>The example below shows a 4 by 4 grid where many placeholders span over several rows.</p> <p>Notice that grid cells are filled from left to right, top to bottom. After placing the placeholders <code>#p1</code>, <code>#p2</code>, <code>#p3</code>, and <code>#p4</code>, the next available cell is in the second row, fourth column, which is where the top of <code>#p5</code> is.</p> Outputrow_span.pyrow_span.css <p> MyApp #p4 #p3 #p2 #p1 #p5 #p6 #p7 </p> <pre><code>from textual.app import App\nfrom textual.containers import Grid\nfrom textual.widgets import Placeholder\nclass MyApp(App):\ndef compose(self):\nyield Grid(\nPlaceholder(id=\"p1\"),\nPlaceholder(id=\"p2\"),\nPlaceholder(id=\"p3\"),\nPlaceholder(id=\"p4\"),\nPlaceholder(id=\"p5\"),\nPlaceholder(id=\"p6\"),\nPlaceholder(id=\"p7\"),\n)\napp = MyApp(css_path=\"row_span.css\")\n</code></pre> <pre><code>#p1 {\nrow-span: 4;\n}\n#p2 {\nrow-span: 3;\n}\n#p3 {\nrow-span: 2;\n}\n#p4 {\nrow-span: 1;  /* Didn't need to be set explicitly. */\n}\n#p5 {\nrow-span: 3;\n}\n#p6 {\nrow-span: 2;\n}\n#p7 {\n/* Default value is 1. */\n}\nGrid {\ngrid-size: 4 4;\ngrid-gutter: 1 2;\n}\nPlaceholder {\nheight: 100%;\n}\n</code></pre>"},{"location":"styles/grid/row_span/#css","title":"CSS","text":"<pre><code>row-span: 3\n</code></pre>"},{"location":"styles/grid/row_span/#python","title":"Python","text":"<pre><code>widget.styles.row_span = 3\n</code></pre>"},{"location":"styles/grid/row_span/#see-also","title":"See also","text":"<ul> <li><code>column-span</code> to specify how many columns a widget spans.</li> </ul>"},{"location":"styles/links/","title":"Links","text":"<p>Textual supports the concept of inline \"links\" embedded in text which trigger an action when pressed. There are a number of styles which influence the appearance of these links within a widget.</p> <p>Note</p> <p>These CSS rules only target Textual action links. Internet hyperlinks are not affected by these CSS rules.</p> Property Description <code>link-background</code> The background color of the link text. <code>link-color</code> The color of the link text. <code>link-hover-background</code> The background color of the link text when the cursor is over it. <code>link-hover-color</code> The color of the link text when the cursor is over it. <code>link-hover-style</code> The style of the link text when the cursor is over it. <code>link-style</code> The style of the link text (e.g. underline)."},{"location":"styles/links/#syntax","title":"Syntax","text":"<pre>\nlink-background: &lt;color&gt; [&lt;percentage&gt;];\n\nlink-color: &lt;color&gt; [&lt;percentage&gt;];\n\nlink-style: &lt;text-style&gt;;\n\nlink-hover-background: &lt;color&gt; [&lt;percentage&gt;];\n\nlink-hover-color: &lt;color&gt; [&lt;percentage&gt;];\n\nlink-hover-style: &lt;text-style&gt;;\n</pre> <p>Visit each style's reference page to learn more about how the values are used.</p>"},{"location":"styles/links/#example","title":"Example","text":"<p>In the example below, the first label illustrates default link styling. The second label uses CSS to customize the link color, background, and style.</p> Outputlinks.pylinks.css <p> LinksApp Here\u00a0is\u00a0a\u00a0link\u00a0which\u00a0you\u00a0can\u00a0click! Here\u00a0is\u00a0a\u00a0link\u00a0which\u00a0you\u00a0can\u00a0click! </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nTEXT = \"\"\"\\\nHere is a [@click='app.bell']link[/] which you can click!\n\"\"\"\nclass LinksApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield Static(TEXT)\nyield Static(TEXT, id=\"custom\")\napp = LinksApp(css_path=\"links.css\")\n</code></pre> <pre><code>#custom {\nlink-color: black 90%;\nlink-background: dodgerblue;\nlink-style: bold italic underline;\n}\n</code></pre>"},{"location":"styles/links/#additional-notes","title":"Additional Notes","text":"<ul> <li>Inline links are not widgets, and thus cannot be focused.</li> </ul>"},{"location":"styles/links/#see-also","title":"See Also","text":"<ul> <li>An introduction to links in the Actions guide.</li> </ul>"},{"location":"styles/links/link_background/","title":"Link-background","text":"<p>The <code>link-background</code> sets the background color of the link.</p> <p>Note</p> <p><code>link-background</code> only applies to Textual action links as described in the actions guide and not to regular hyperlinks.</p>"},{"location":"styles/links/link_background/#syntax","title":"Syntax","text":"<pre>\nlink-background: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p><code>link-background</code> accepts a <code>&lt;color&gt;</code> (with an optional transparency level defined by a <code>&lt;percentage&gt;</code>) that is used to define the background color of text enclosed in Textual action links.</p>"},{"location":"styles/links/link_background/#example","title":"Example","text":"<p>The example below shows some links with their background color changed. It also shows that <code>link-background</code> does not affect hyperlinks.</p> Outputlink_background.pylink_background.css <p> LinkBackgroundApp Visit\u00a0the\u00a0Textualize\u00a0website. Click\u00a0here\u00a0for\u00a0the\u00a0bell\u00a0sound. You\u00a0can\u00a0also\u00a0click\u00a0here\u00a0for\u00a0the\u00a0bell\u00a0sound. Exit\u00a0this\u00a0application. </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass LinkBackgroundApp(App):\ndef compose(self):\nyield Label(\n\"Visit the [link=https://textualize.io]Textualize[/link] website.\",\nid=\"lbl1\",  # (1)!\n)\nyield Label(\n\"Click [@click=app.bell]here[/] for the bell sound.\",\nid=\"lbl2\",  # (2)!\n)\nyield Label(\n\"You can also click [@click=app.bell]here[/] for the bell sound.\",\nid=\"lbl3\",  # (3)!\n)\nyield Label(\n\"[@click=app.quit]Exit this application.[/]\",\nid=\"lbl4\",  # (4)!\n)\napp = LinkBackgroundApp(css_path=\"link_background.css\")\n</code></pre> <ol> <li>This label has an hyperlink so it won't be affected by the <code>link-background</code> rule.</li> <li>This label has an \"action link\" that can be styled with <code>link-background</code>.</li> <li>This label has an \"action link\" that can be styled with <code>link-background</code>.</li> <li>This label has an \"action link\" that can be styled with <code>link-background</code>.</li> </ol> <pre><code>#lbl1, #lbl2 {\nlink-background: red;  /* (1)! */\n}\n#lbl3 {\nlink-background: hsl(60,100%,50%) 50%;\n}\n#lbl4 {\nlink-background: $accent;\n}\n</code></pre> <ol> <li>This will only affect one of the labels because action links are the only links that this rule affects.</li> </ol>"},{"location":"styles/links/link_background/#css","title":"CSS","text":"<pre><code>link-background: red 70%;\nlink-background: $accent;\n</code></pre>"},{"location":"styles/links/link_background/#python","title":"Python","text":"<pre><code>widget.styles.link_background = \"red 70%\"\nwidget.styles.link_background = \"$accent\"\n# You can also use a `Color` object directly:\nwidget.styles.link_background = Color(100, 30, 173)\n</code></pre>"},{"location":"styles/links/link_background/#see-also","title":"See also","text":"<ul> <li><code>link-color</code> to set the color of link text.</li> <li>`link-hover-background to set the background color of link text when the mouse pointer is over it.</li> </ul>"},{"location":"styles/links/link_color/","title":"Link-color","text":"<p>The <code>link-color</code> sets the color of the link text.</p> <p>Note</p> <p><code>link-color</code> only applies to Textual action links as described in the actions guide and not to regular hyperlinks.</p>"},{"location":"styles/links/link_color/#syntax","title":"Syntax","text":"<pre>\nlink-color: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p><code>link-color</code> accepts a <code>&lt;color&gt;</code> (with an optional transparency level defined by a <code>&lt;percentage&gt;</code>) that is used to define the color of text enclosed in Textual action links.</p>"},{"location":"styles/links/link_color/#example","title":"Example","text":"<p>The example below shows some links with their color changed. It also shows that <code>link-color</code> does not affect hyperlinks.</p> Outputlink_color.pylink_color.css <p> LinkColorApp Visit\u00a0the\u00a0Textualize\u00a0website. Click\u00a0here\u00a0for\u00a0the\u00a0bell\u00a0sound. You\u00a0can\u00a0also\u00a0click\u00a0here\u00a0for\u00a0the\u00a0bell\u00a0sound. Exit\u00a0this\u00a0application. </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass LinkColorApp(App):\ndef compose(self):\nyield Label(\n\"Visit the [link=https://textualize.io]Textualize[/link] website.\",\nid=\"lbl1\",  # (1)!\n)\nyield Label(\n\"Click [@click=app.bell]here[/] for the bell sound.\",\nid=\"lbl2\",  # (2)!\n)\nyield Label(\n\"You can also click [@click=app.bell]here[/] for the bell sound.\",\nid=\"lbl3\",  # (3)!\n)\nyield Label(\n\"[@click=app.quit]Exit this application.[/]\",\nid=\"lbl4\",  # (4)!\n)\napp = LinkColorApp(css_path=\"link_color.css\")\n</code></pre> <ol> <li>This label has an hyperlink so it won't be affected by the <code>link-color</code> rule.</li> <li>This label has an \"action link\" that can be styled with <code>link-color</code>.</li> <li>This label has an \"action link\" that can be styled with <code>link-color</code>.</li> <li>This label has an \"action link\" that can be styled with <code>link-color</code>.</li> </ol> <pre><code>#lbl1, #lbl2 {\nlink-color: red;  /* (1)! */\n}\n#lbl3 {\nlink-color: hsl(60,100%,50%) 50%;\n}\n#lbl4 {\nlink-color: $accent;\n}\n</code></pre> <ol> <li>This will only affect one of the labels because action links are the only links that this rule affects.</li> </ol>"},{"location":"styles/links/link_color/#css","title":"CSS","text":"<pre><code>link-color: red 70%;\nlink-color: $accent;\n</code></pre>"},{"location":"styles/links/link_color/#python","title":"Python","text":"<pre><code>widget.styles.link_color = \"red 70%\"\nwidget.styles.link_color = \"$accent\"\n# You can also use a `Color` object directly:\nwidget.styles.link_color = Color(100, 30, 173)\n</code></pre>"},{"location":"styles/links/link_color/#see-also","title":"See also","text":"<ul> <li><code>link-background</code> to set the background color of link text.</li> <li>`link-hover-color to set the color of link text when the mouse pointer is over it.</li> </ul>"},{"location":"styles/links/link_hover_background/","title":"Link-hover-background","text":"<p>The <code>link-hover-background</code> sets the background color of the link when the mouse cursor is over the link.</p> <p>Note</p> <p><code>link-hover-background</code> only applies to Textual action links as described in the actions guide and not to regular hyperlinks.</p>"},{"location":"styles/links/link_hover_background/#syntax","title":"Syntax","text":"<pre>\nlink-hover-background: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p><code>link-hover-background</code> accepts a <code>&lt;color&gt;</code> (with an optional transparency level defined by a <code>&lt;percentage&gt;</code>) that is used to define the background color of text enclosed in Textual action links when the mouse pointer is over it.</p>"},{"location":"styles/links/link_hover_background/#defaults","title":"Defaults","text":"<p>If not provided, a Textual action link will have <code>link-hover-background</code> set to <code>$accent</code>.</p>"},{"location":"styles/links/link_hover_background/#example","title":"Example","text":"<p>The example below shows some links that have their background colour changed when the mouse moves over it and it shows that there is a default color for <code>link-hover-background</code>.</p> <p>It also shows that <code>link-hover-background</code> does not affect hyperlinks.</p> Outputlink_hover_background.pylink_hover_background.css <p></p> <p>Note</p> <p>The GIF has reduced quality to make it easier to load in the documentation. Try running the example yourself with <code>textual run docs/examples/styles/link_hover_background.py</code>.</p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass LinkHoverBackgroundApp(App):\ndef compose(self):\nyield Label(\n\"Visit the [link=https://textualize.io]Textualize[/link] website.\",\nid=\"lbl1\",  # (1)!\n)\nyield Label(\n\"Click [@click=app.bell]here[/] for the bell sound.\",\nid=\"lbl2\",  # (2)!\n)\nyield Label(\n\"You can also click [@click=app.bell]here[/] for the bell sound.\",\nid=\"lbl3\",  # (3)!\n)\nyield Label(\n\"[@click=app.quit]Exit this application.[/]\",\nid=\"lbl4\",  # (4)!\n)\napp = LinkHoverBackgroundApp(css_path=\"link_hover_background.css\")\n</code></pre> <ol> <li>This label has an hyperlink so it won't be affected by the <code>link-hover-background</code> rule.</li> <li>This label has an \"action link\" that can be styled with <code>link-hover-background</code>.</li> <li>This label has an \"action link\" that can be styled with <code>link-hover-background</code>.</li> <li>This label has an \"action link\" that can be styled with <code>link-hover-background</code>.</li> </ol> <pre><code>#lbl1, #lbl2 {\nlink-hover-background: red;  /* (1)! */\n}\n#lbl3 {\nlink-hover-background: hsl(60,100%,50%) 50%;\n}\n#lbl4 {\n/* Empty to show the default hover background */ /* (2)! */\n}\n</code></pre> <ol> <li>This will only affect one of the labels because action links are the only links that this rule affects.</li> <li>The default behavior for links on hover is to change to a different background color, so we don't need to change anything if all we want is to add emphasis to the link under the mouse.</li> </ol>"},{"location":"styles/links/link_hover_background/#css","title":"CSS","text":"<pre><code>link-hover-background: red 70%;\nlink-hover-background: $accent;\n</code></pre>"},{"location":"styles/links/link_hover_background/#python","title":"Python","text":"<pre><code>widget.styles.link_hover_background = \"red 70%\"\nwidget.styles.link_hover_background = \"$accent\"\n# You can also use a `Color` object directly:\nwidget.styles.link_hover_background = Color(100, 30, 173)\n</code></pre>"},{"location":"styles/links/link_hover_background/#see-also","title":"See also","text":"<ul> <li><code>link-background</code> to set the background color of link text.</li> <li>`link-hover-color to set the color of link text when the mouse pointer is over it.</li> <li>`link-hover-style to set the style of link text when the mouse pointer is over it.</li> </ul>"},{"location":"styles/links/link_hover_color/","title":"Link-hover-color","text":"<p>The <code>link-hover-color</code> sets the color of the link text when the mouse cursor is over the link.</p> <p>Note</p> <p><code>link-hover-color</code> only applies to Textual action links as described in the actions guide and not to regular hyperlinks.</p>"},{"location":"styles/links/link_hover_color/#syntax","title":"Syntax","text":"<pre>\nlink-hover-color: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p><code>link-hover-color</code> accepts a <code>&lt;color&gt;</code> (with an optional transparency level defined by a <code>&lt;percentage&gt;</code>) that is used to define the color of text enclosed in Textual action links when the mouse pointer is over it.</p>"},{"location":"styles/links/link_hover_color/#defaults","title":"Defaults","text":"<p>If not provided, a Textual action link will have <code>link-hover-color</code> set to <code>white</code>.</p>"},{"location":"styles/links/link_hover_color/#example","title":"Example","text":"<p>The example below shows some links that have their colour changed when the mouse moves over it. It also shows that <code>link-hover-color</code> does not affect hyperlinks.</p> Outputlink_hover_color.pylink_hover_color.css <p></p> <p>Note</p> <p>The background color also changes when the mouse moves over the links because that is the default behavior. That can be customised by setting <code>link-hover-background</code> but we haven't done so in this example.</p> <p>Note</p> <p>The GIF has reduced quality to make it easier to load in the documentation. Try running the example yourself with <code>textual run docs/examples/styles/link_hover_color.py</code>.</p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass LinkHoverColorApp(App):\ndef compose(self):\nyield Label(\n\"Visit the [link=https://textualize.io]Textualize[/link] website.\",\nid=\"lbl1\",  # (1)!\n)\nyield Label(\n\"Click [@click=app.bell]here[/] for the bell sound.\",\nid=\"lbl2\",  # (2)!\n)\nyield Label(\n\"You can also click [@click=app.bell]here[/] for the bell sound.\",\nid=\"lbl3\",  # (3)!\n)\nyield Label(\n\"[@click=app.quit]Exit this application.[/]\",\nid=\"lbl4\",  # (4)!\n)\napp = LinkHoverColorApp(css_path=\"link_hover_color.css\")\n</code></pre> <ol> <li>This label has an hyperlink so it won't be affected by the <code>link-hover-color</code> rule.</li> <li>This label has an \"action link\" that can be styled with <code>link-hover-color</code>.</li> <li>This label has an \"action link\" that can be styled with <code>link-hover-color</code>.</li> <li>This label has an \"action link\" that can be styled with <code>link-hover-color</code>.</li> </ol> <pre><code>#lbl1, #lbl2 {\nlink-hover-color: red;  /* (1)! */\n}\n#lbl3 {\nlink-hover-color: hsl(60,100%,50%) 50%;\n}\n#lbl4 {\nlink-hover-color: black;\n}\n</code></pre> <ol> <li>This will only affect one of the labels because action links are the only links that this rule affects.</li> </ol>"},{"location":"styles/links/link_hover_color/#css","title":"CSS","text":"<pre><code>link-hover-color: red 70%;\nlink-hover-color: black;\n</code></pre>"},{"location":"styles/links/link_hover_color/#python","title":"Python","text":"<pre><code>widget.styles.link_hover_color = \"red 70%\"\nwidget.styles.link_hover_color = \"black\"\n# You can also use a `Color` object directly:\nwidget.styles.link_hover_color = Color(100, 30, 173)\n</code></pre>"},{"location":"styles/links/link_hover_color/#see-also","title":"See also","text":"<ul> <li><code>link-color</code> to set the color of link text.</li> <li>`link-hover-background to set the background color of link text when the mouse pointer is over it.</li> <li>`link-hover-style to set the style of link text when the mouse pointer is over it.</li> </ul>"},{"location":"styles/links/link_hover_style/","title":"Link-hover-style","text":"<p>The <code>link-hover-style</code> sets the text style for the link text when the mouse cursor is over the link.</p> <p>Note</p> <p><code>link-hover-style</code> only applies to Textual action links as described in the actions guide and not to regular hyperlinks.</p>"},{"location":"styles/links/link_hover_style/#syntax","title":"Syntax","text":"<pre>\nlink-hover-style: &lt;text-style&gt;;\n</pre> <p><code>link-hover-style</code> applies its <code>&lt;text-style&gt;</code> to the text of Textual action links when the mouse pointer is over them.</p>"},{"location":"styles/links/link_hover_style/#defaults","title":"Defaults","text":"<p>If not provided, a Textual action link will have <code>link-hover-style</code> set to <code>bold</code>.</p>"},{"location":"styles/links/link_hover_style/#example","title":"Example","text":"<p>The example below shows some links that have their colour changed when the mouse moves over it. It also shows that <code>link-hover-style</code> does not affect hyperlinks.</p> Outputlink_hover_style.pylink_hover_style.css <p></p> <p>Note</p> <p>The background color also changes when the mouse moves over the links because that is the default behavior. That can be customised by setting <code>link-hover-background</code> but we haven't done so in this example.</p> <p>Note</p> <p>The GIF has reduced quality to make it easier to load in the documentation. Try running the example yourself with <code>textual run docs/examples/styles/link_hover_style.py</code>.</p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass LinkHoverStyleApp(App):\ndef compose(self):\nyield Label(\n\"Visit the [link=https://textualize.io]Textualize[/link] website.\",\nid=\"lbl1\",  # (1)!\n)\nyield Label(\n\"Click [@click=app.bell]here[/] for the bell sound.\",\nid=\"lbl2\",  # (2)!\n)\nyield Label(\n\"You can also click [@click=app.bell]here[/] for the bell sound.\",\nid=\"lbl3\",  # (3)!\n)\nyield Label(\n\"[@click=app.quit]Exit this application.[/]\",\nid=\"lbl4\",  # (4)!\n)\napp = LinkHoverStyleApp(css_path=\"link_hover_style.css\")\n</code></pre> <ol> <li>This label has an hyperlink so it won't be affected by the <code>link-hover-style</code> rule.</li> <li>This label has an \"action link\" that can be styled with <code>link-hover-style</code>.</li> <li>This label has an \"action link\" that can be styled with <code>link-hover-style</code>.</li> <li>This label has an \"action link\" that can be styled with <code>link-hover-style</code>.</li> </ol> <pre><code>#lbl1, #lbl2 {\nlink-hover-style: bold italic;  /* (1)! */\n}\n#lbl3 {\nlink-hover-style: reverse strike;\n}\n#lbl4 {\nlink-hover-style: bold;\n}\n</code></pre> <ol> <li>This will only affect one of the labels because action links are the only links that this rule affects.</li> <li>The default behavior for links on hover is to change to a different text style, so we don't need to change anything if all we want is to add emphasis to the link under the mouse.</li> </ol>"},{"location":"styles/links/link_hover_style/#css","title":"CSS","text":"<pre><code>link-hover-style: bold;\nlink-hover-style: bold italic reverse;\n</code></pre>"},{"location":"styles/links/link_hover_style/#python","title":"Python","text":"<pre><code>widget.styles.link_hover_style = \"bold\"\nwidget.styles.link_hover_style = \"bold italic reverse\"\n</code></pre>"},{"location":"styles/links/link_hover_style/#see-also","title":"See also","text":"<ul> <li>`link-hover-background to set the background color of link text when the mouse pointer is over it.</li> <li>`link-hover-color to set the color of link text when the mouse pointer is over it.</li> <li><code>link-style</code> to set the style of link text.</li> <li><code>text-style</code> to set the style of text in a widget.</li> </ul>"},{"location":"styles/links/link_style/","title":"Link-style","text":"<p>The <code>link-style</code> sets the text style for the link text.</p> <p>Note</p> <p><code>link-style</code> only applies to Textual action links as described in the actions guide and not to regular hyperlinks.</p>"},{"location":"styles/links/link_style/#syntax","title":"Syntax","text":"<pre>\nlink-style: &lt;text-style&gt;;\n</pre> <p><code>link-style</code> will take all the values specified and will apply that styling to text that is enclosed by a Textual action link.</p>"},{"location":"styles/links/link_style/#defaults","title":"Defaults","text":"<p>If not provided, a Textual action link will have <code>link-style</code> set to <code>underline</code>.</p>"},{"location":"styles/links/link_style/#example","title":"Example","text":"<p>The example below shows some links with different styles applied to their text. It also shows that <code>link-style</code> does not affect hyperlinks.</p> Outputlink_style.pylink_style.css <p> LinkStyleApp Visit\u00a0the\u00a0Textualize\u00a0website. Click\u00a0here\u00a0for\u00a0the\u00a0bell\u00a0sound. You\u00a0can\u00a0also\u00a0click\u00a0here\u00a0for\u00a0the\u00a0bell\u00a0sound. Exit\u00a0this\u00a0application. </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nclass LinkStyleApp(App):\ndef compose(self):\nyield Label(\n\"Visit the [link=https://textualize.io]Textualize[/link] website.\",\nid=\"lbl1\",  # (1)!\n)\nyield Label(\n\"Click [@click=app.bell]here[/] for the bell sound.\",\nid=\"lbl2\",  # (2)!\n)\nyield Label(\n\"You can also click [@click=app.bell]here[/] for the bell sound.\",\nid=\"lbl3\",  # (3)!\n)\nyield Label(\n\"[@click=app.quit]Exit this application.[/]\",\nid=\"lbl4\",  # (4)!\n)\napp = LinkStyleApp(css_path=\"link_style.css\")\n</code></pre> <ol> <li>This label has an hyperlink so it won't be affected by the <code>link-style</code> rule.</li> <li>This label has an \"action link\" that can be styled with <code>link-style</code>.</li> <li>This label has an \"action link\" that can be styled with <code>link-style</code>.</li> <li>This label has an \"action link\" that can be styled with <code>link-style</code>.</li> </ol> <pre><code>#lbl1, #lbl2 {\nlink-style: bold italic;  /* (1)! */\n}\n#lbl3 {\nlink-style: reverse strike;\n}\n#lbl4 {\nlink-style: bold;\n}\n</code></pre> <ol> <li>This will only affect one of the labels because action links are the only links that this rule affects.</li> </ol>"},{"location":"styles/links/link_style/#css","title":"CSS","text":"<pre><code>link-style: bold;\nlink-style: bold italic reverse;\n</code></pre>"},{"location":"styles/links/link_style/#python","title":"Python","text":"<pre><code>widget.styles.link_style = \"bold\"\nwidget.styles.link_style = \"bold italic reverse\"\n</code></pre>"},{"location":"styles/links/link_style/#see-also","title":"See also","text":"<ul> <li>`link-hover-style to set the style of link text when the mouse pointer is over it.</li> <li><code>text-style</code> to set the style of text in a widget.</li> </ul>"},{"location":"styles/scrollbar_colors/","title":"Scrollbar colors","text":"<p>There are a number of rules to set the colors used in Textual scrollbars. You won't typically need to do this, as the default themes have carefully chosen colors, but you can if you want to.</p> Rule Applies to <code>scrollbar-background</code> Scrollbar background. <code>scrollbar-background-active</code> Scrollbar background when the thumb is being dragged. <code>scrollbar-background-hover</code> Scrollbar background when the mouse is hovering over it. <code>scrollbar-color</code> Scrollbar \"thumb\" (movable part). <code>scrollbar-color-active</code> Scrollbar thumb when it is active (being dragged). <code>scrollbar-color-hover</code> Scrollbar thumb when the mouse is hovering over it. <code>scrollbar-corner-color</code> The gap between the horizontal and vertical scrollbars."},{"location":"styles/scrollbar_colors/#syntax","title":"Syntax","text":"<pre>\nscrollbar-background: &lt;color&gt; [&lt;percentage&gt;];\n\nscrollbar-background-active: &lt;color&gt; [&lt;percentage&gt;];\n\nscrollbar-background-hover: &lt;color&gt; [&lt;percentage&gt;];\n\nscrollbar-color: &lt;color&gt; [&lt;percentage&gt;];\n\nscrollbar-color-active: &lt;color&gt; [&lt;percentage&gt;];\n\nscrollbar-color-hover: &lt;color&gt; [&lt;percentage&gt;];\n\nscrollbar-corner-color: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p>Visit each style's reference page to learn more about how the values are used.</p>"},{"location":"styles/scrollbar_colors/#example","title":"Example","text":"<p>This example shows two planels that contain oversized text. The right panel sets <code>scrollbar-background</code>, <code>scrollbar-color</code>, and <code>scrollbar-corner-color</code>, and the left panel shows the default colors for comparison.</p> Outputscrollbars.pyscrollbars.css <p> ScrollbarApp I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0tFear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0t I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0tI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0t And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turnAnd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn see\u00a0its\u00a0path.see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0 will\u00a0remain.will\u00a0remain. I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0tFear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0t I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0tI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0t And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turnAnd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn see\u00a0its\u00a0path.\u2583\u2583see\u00a0its\u00a0path.\u2583\u2583 Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0 will\u00a0remain.will\u00a0remain. I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0tFear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0t I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0tI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0t \u258d\u258d </p> <pre><code>from textual.app import App\nfrom textual.containers import Horizontal, Container\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\n\"\"\"\nclass ScrollbarApp(App):\ndef compose(self):\nyield Horizontal(\nContainer(Label(TEXT * 10)),\nContainer(Label(TEXT * 10), classes=\"right\"),\n)\napp = ScrollbarApp(css_path=\"scrollbars.css\")\n</code></pre> <pre><code>Label {\nwidth: 150%;\nheight: 150%;\n}\n.right {\nscrollbar-background: red;\nscrollbar-color: green;\nscrollbar-corner-color: blue;\n}\nHorizontal &gt; Container {\nwidth: 50%;\n}\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_background/","title":"Scrollbar-background","text":"<p>The <code>scrollbar-background</code> sets the background color of the scrollbar.</p>"},{"location":"styles/scrollbar_colors/scrollbar_background/#syntax","title":"Syntax","text":"<pre>\nscrollbar-background: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p><code>scrollbar-background</code> accepts a <code>&lt;color&gt;</code> (with an optional transparency level defined by a <code>&lt;percentage&gt;</code>) that is used to define the background color of a scrollbar.</p>"},{"location":"styles/scrollbar_colors/scrollbar_background/#example","title":"Example","text":"Outputscrollbars2.pyscrollbars2.css <p>Note</p> <p>The GIF above has reduced quality to make it easier to load in the documentation. Try running the example yourself with <code>textual run docs/examples/styles/scrollbars2.py</code>.</p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\n\"\"\"\nclass Scrollbar2App(App):\ndef compose(self):\nyield Label(TEXT * 10)\napp = Scrollbar2App(css_path=\"scrollbars2.css\")\n</code></pre> <pre><code>Screen {\nscrollbar-background: blue;\nscrollbar-background-active: red;\nscrollbar-background-hover: purple;\nscrollbar-color: cyan;\nscrollbar-color-active: yellow;\nscrollbar-color-hover: pink;\n}\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_background/#css","title":"CSS","text":"<pre><code>scrollbar-backround: blue;\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_background/#python","title":"Python","text":"<pre><code>widget.styles.scrollbar_background = \"blue\"\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_background/#see-also","title":"See also","text":"<ul> <li><code>scrollbar-bakcground-active</code> to set the scrollbar bakcground color when the scrollbar is being dragged.</li> <li><code>scrollbar-bakcground-hover</code> to set the scrollbar bakcground color when the mouse pointer is over it.</li> <li><code>scrollbar-color</code> to set the color of scrollbars.</li> <li><code>scrollbar-corner-color</code> to set the color of the corner where horizontal and vertical scrollbars meet.</li> </ul>"},{"location":"styles/scrollbar_colors/scrollbar_background_active/","title":"Scrollbar-background-active","text":"<p>The <code>scrollbar-background-active</code> sets the background color of the scrollbar when the thumb is being dragged.</p>"},{"location":"styles/scrollbar_colors/scrollbar_background_active/#syntax","title":"Syntax","text":"<pre>\nscrollbar-background-active: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p><code>scrollbar-background-active</code> accepts a <code>&lt;color&gt;</code> (with an optional transparency level defined by a <code>&lt;percentage&gt;</code>) that is used to define the background color of a scrollbar when its thumb is being dragged.</p>"},{"location":"styles/scrollbar_colors/scrollbar_background_active/#example","title":"Example","text":"Outputscrollbars2.pyscrollbars2.css <p>Note</p> <p>The GIF above has reduced quality to make it easier to load in the documentation. Try running the example yourself with <code>textual run docs/examples/styles/scrollbars2.py</code>.</p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\n\"\"\"\nclass Scrollbar2App(App):\ndef compose(self):\nyield Label(TEXT * 10)\napp = Scrollbar2App(css_path=\"scrollbars2.css\")\n</code></pre> <pre><code>Screen {\nscrollbar-background: blue;\nscrollbar-background-active: red;\nscrollbar-background-hover: purple;\nscrollbar-color: cyan;\nscrollbar-color-active: yellow;\nscrollbar-color-hover: pink;\n}\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_background_active/#css","title":"CSS","text":"<pre><code>scrollbar-backround-active: red;\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_background_active/#python","title":"Python","text":"<pre><code>widget.styles.scrollbar_background_active = \"red\"\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_background_active/#see-also","title":"See also","text":"<ul> <li><code>scrollbar-background</code> to set the background color of scrollbars.</li> <li><code>scrollbar-bakcground-hover</code> to set the scrollbar bakcground color when the mouse pointer is over it.</li> <li><code>scrollbar-color-active</code> to set the scrollbar color when the scrollbar is being dragged.</li> </ul>"},{"location":"styles/scrollbar_colors/scrollbar_background_hover/","title":"Scrollbar-background-hover","text":"<p>The <code>scrollbar-background-hover</code> sets the background color of the scrollbar when the cursor is over it.</p>"},{"location":"styles/scrollbar_colors/scrollbar_background_hover/#syntax","title":"Syntax","text":"<pre>\nscrollbar-background-hover: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p><code>scrollbar-background-hover</code> accepts a <code>&lt;color&gt;</code> (with an optional transparency level defined by a <code>&lt;percentage&gt;</code>) that is used to define the background color of a scrollbar when the cursor is over it.</p>"},{"location":"styles/scrollbar_colors/scrollbar_background_hover/#example","title":"Example","text":"Outputscrollbars2.pyscrollbars2.css <p>Note</p> <p>The GIF above has reduced quality to make it easier to load in the documentation. Try running the example yourself with <code>textual run docs/examples/styles/scrollbars2.py</code>.</p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\n\"\"\"\nclass Scrollbar2App(App):\ndef compose(self):\nyield Label(TEXT * 10)\napp = Scrollbar2App(css_path=\"scrollbars2.css\")\n</code></pre> <pre><code>Screen {\nscrollbar-background: blue;\nscrollbar-background-active: red;\nscrollbar-background-hover: purple;\nscrollbar-color: cyan;\nscrollbar-color-active: yellow;\nscrollbar-color-hover: pink;\n}\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_background_hover/#css","title":"CSS","text":"<pre><code>scrollbar-background-hover: purple;\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_background_hover/#python","title":"Python","text":"<pre><code>widget.styles.scrollbar_background_hover = \"purple\"\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_background_hover/#see-also","title":"See also","text":""},{"location":"styles/scrollbar_colors/scrollbar_background_hover/#see-also_1","title":"See also","text":"<ul> <li><code>scrollbar-background</code> to set the background color of scrollbars.</li> <li><code>scrollbar-bakcground-active</code> to set the scrollbar bakcground color when the scrollbar is being dragged.</li> <li><code>scrollbar-color-hover</code> to set the scrollbar color when the mouse pointer is over it.</li> </ul>"},{"location":"styles/scrollbar_colors/scrollbar_color/","title":"Scrollbar-color","text":"<p>The <code>scrollbar-color</code> sets the color of the scrollbar.</p>"},{"location":"styles/scrollbar_colors/scrollbar_color/#syntax","title":"Syntax","text":"<pre>\nscrollbar-color: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p><code>scrollbar-color</code> accepts a <code>&lt;color&gt;</code> (with an optional transparency level defined by a <code>&lt;percentage&gt;</code>) that is used to define the color of a scrollbar.</p>"},{"location":"styles/scrollbar_colors/scrollbar_color/#example","title":"Example","text":"Outputscrollbars2.pyscrollbars2.css <p>Note</p> <p>The GIF above has reduced quality to make it easier to load in the documentation. Try running the example yourself with <code>textual run docs/examples/styles/scrollbars2.py</code>.</p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\n\"\"\"\nclass Scrollbar2App(App):\ndef compose(self):\nyield Label(TEXT * 10)\napp = Scrollbar2App(css_path=\"scrollbars2.css\")\n</code></pre> <pre><code>Screen {\nscrollbar-background: blue;\nscrollbar-background-active: red;\nscrollbar-background-hover: purple;\nscrollbar-color: cyan;\nscrollbar-color-active: yellow;\nscrollbar-color-hover: pink;\n}\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_color/#css","title":"CSS","text":"<pre><code>scrollbar-color: cyan;\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_color/#python","title":"Python","text":"<pre><code>widget.styles.scrollbar_color = \"cyan\"\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_color/#see-also","title":"See also","text":"<ul> <li><code>scrollbar-background</code> to set the background color of scrollbars.</li> <li><code>scrollbar-color-active</code> to set the scrollbar color when the scrollbar is being dragged.</li> <li><code>scrollbar-color-hover</code> to set the scrollbar color when the mouse pointer is over it.</li> <li><code>scrollbar-corner-color</code> to set the color of the corner where horizontal and vertical scrollbars meet.</li> </ul>"},{"location":"styles/scrollbar_colors/scrollbar_color_active/","title":"Scrollbar-color-active","text":"<p>The <code>scrollbar-color-active</code> sets the color of the scrollbar when the thumb is being dragged.</p>"},{"location":"styles/scrollbar_colors/scrollbar_color_active/#syntax","title":"Syntax","text":"<pre>\nscrollbar-color-active: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p><code>scrollbar-color-active</code> accepts a <code>&lt;color&gt;</code> (with an optional transparency level defined by a <code>&lt;percentage&gt;</code>) that is used to define the color of a scrollbar when its thumb is being dragged.</p>"},{"location":"styles/scrollbar_colors/scrollbar_color_active/#example","title":"Example","text":"Outputscrollbars2.pyscrollbars2.css <p>Note</p> <p>The GIF above has reduced quality to make it easier to load in the documentation. Try running the example yourself with <code>textual run docs/examples/styles/scrollbars2.py</code>.</p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\n\"\"\"\nclass Scrollbar2App(App):\ndef compose(self):\nyield Label(TEXT * 10)\napp = Scrollbar2App(css_path=\"scrollbars2.css\")\n</code></pre> <pre><code>Screen {\nscrollbar-background: blue;\nscrollbar-background-active: red;\nscrollbar-background-hover: purple;\nscrollbar-color: cyan;\nscrollbar-color-active: yellow;\nscrollbar-color-hover: pink;\n}\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_color_active/#css","title":"CSS","text":"<pre><code>scrollbar-color-active: yellow;\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_color_active/#python","title":"Python","text":"<pre><code>widget.styles.scrollbar_color_active = \"yellow\"\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_color_active/#see-also","title":"See also","text":"<ul> <li><code>scrollbar-bakcground-active</code> to set the scrollbar bakcground color when the scrollbar is being dragged.</li> <li><code>scrollbar-color</code> to set the color of scrollbars.</li> <li><code>scrollbar-color-hover</code> to set the scrollbar color when the mouse pointer is over it.</li> </ul>"},{"location":"styles/scrollbar_colors/scrollbar_color_hover/","title":"Scrollbar-color-hover","text":"<p>The <code>scrollbar-color-hover</code> sets the color of the scrollbar when the cursor is over it.</p>"},{"location":"styles/scrollbar_colors/scrollbar_color_hover/#syntax","title":"Syntax","text":"<pre>\nscrollbar-color-hover: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p><code>scrollbar-color-hover</code> accepts a <code>&lt;color&gt;</code> (with an optional transparency level defined by a <code>&lt;percentage&gt;</code>) that is used to define the color of a scrollbar when the cursor is over it.</p>"},{"location":"styles/scrollbar_colors/scrollbar_color_hover/#example","title":"Example","text":"Outputscrollbars2.pyscrollbars2.css <p>Note</p> <p>The GIF above has reduced quality to make it easier to load in the documentation. Try running the example yourself with <code>textual run docs/examples/styles/scrollbars2.py</code>.</p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\n\"\"\"\nclass Scrollbar2App(App):\ndef compose(self):\nyield Label(TEXT * 10)\napp = Scrollbar2App(css_path=\"scrollbars2.css\")\n</code></pre> <pre><code>Screen {\nscrollbar-background: blue;\nscrollbar-background-active: red;\nscrollbar-background-hover: purple;\nscrollbar-color: cyan;\nscrollbar-color-active: yellow;\nscrollbar-color-hover: pink;\n}\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_color_hover/#css","title":"CSS","text":"<pre><code>scrollbar-color-hover: pink;\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_color_hover/#python","title":"Python","text":"<pre><code>widget.styles.scrollbar_color_hover = \"pink\"\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_color_hover/#see-also","title":"See also","text":"<ul> <li><code>scrollbar-bakcground-hover</code> to set the scrollbar bakcground color when the mouse pointer is over it.</li> <li><code>scrollbar-color</code> to set the color of scrollbars.</li> <li><code>scrollbar-color-active</code> to set the scrollbar color when the scrollbar is being dragged.</li> </ul>"},{"location":"styles/scrollbar_colors/scrollbar_corner_color/","title":"Scrollbar-corner-color","text":"<p>The <code>scrollbar-corner-color</code> sets the color of the gap between the horizontal and vertical scrollbars.</p>"},{"location":"styles/scrollbar_colors/scrollbar_corner_color/#syntax","title":"Syntax","text":"<pre>\nscrollbar-corner-color: &lt;color&gt; [&lt;percentage&gt;];\n</pre> <p><code>scrollbar-corner-color</code> accepts a <code>&lt;color&gt;</code> (with an optional transparency level defined by a <code>&lt;percentage&gt;</code>) that is used to define the color of the gap between the horizontal and vertical scrollbars of a widget.</p>"},{"location":"styles/scrollbar_colors/scrollbar_corner_color/#example","title":"Example","text":"<p>The example below sets the scrollbar corner (bottom-right corner of the screen) to white.</p> Outputscrollbar_corner_color.pyscrollbar_corner_color.css <p> ScrollbarCornerColorApp I\u00a0must\u00a0not\u00a0fear.\u00a0Fear\u00a0is\u00a0the\u00a0mind-killer.\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. </p> <pre><code>from textual.app import App\nfrom textual.widgets import Label\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\n\"\"\"\nclass ScrollbarCornerColorApp(App):\ndef compose(self):\nyield Label(TEXT.replace(\"\\n\", \" \") + \"\\n\" + TEXT * 10)\napp = ScrollbarCornerColorApp(css_path=\"scrollbar_corner_color.css\")\n</code></pre> <pre><code>Screen {\noverflow: auto auto;\nscrollbar-corner-color: white;\n}\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_corner_color/#css","title":"CSS","text":"<pre><code>scrollbar-corner-color: white;\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_corner_color/#python","title":"Python","text":"<pre><code>widget.styles.scrollbar_corner_color = \"white\"\n</code></pre>"},{"location":"styles/scrollbar_colors/scrollbar_corner_color/#see-also","title":"See also","text":"<ul> <li><code>scrollbar-background</code> to set the background color of scrollbars.</li> <li><code>scrollbar-color</code> to set the color of scrollbars.</li> </ul>"},{"location":"widgets/","title":"Widgets","text":"<p>A reference to the builtin widgets.</p> <p>See the links to the left of the page, or in the hamburger menu (three horizontal bars, top left).</p>"},{"location":"widgets/button/","title":"Button","text":"<p>A simple button widget which can be pressed using a mouse click or by pressing Enter when it has focus.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/button/#example","title":"Example","text":"<p>The example below shows each button variant, and its disabled equivalent. Clicking any of the non-disabled buttons in the example app below will result in the app exiting and the details of the selected button being printed to the console.</p> Outputbutton.pybutton.css <p> ButtonsApp Standard\u00a0ButtonsDisabled\u00a0Buttons \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 DefaultDefault \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Primary!Primary! \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Success!Success! \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Warning!Warning! \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Error!Error! \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Horizontal, VerticalScroll\nfrom textual.widgets import Button, Static\nclass ButtonsApp(App[str]):\nCSS_PATH = \"button.css\"\ndef compose(self) -&gt; ComposeResult:\nyield Horizontal(\nVerticalScroll(\nStatic(\"Standard Buttons\", classes=\"header\"),\nButton(\"Default\"),\nButton(\"Primary!\", variant=\"primary\"),\nButton.success(\"Success!\"),\nButton.warning(\"Warning!\"),\nButton.error(\"Error!\"),\n),\nVerticalScroll(\nStatic(\"Disabled Buttons\", classes=\"header\"),\nButton(\"Default\", disabled=True),\nButton(\"Primary!\", variant=\"primary\", disabled=True),\nButton.success(\"Success!\", disabled=True),\nButton.warning(\"Warning!\", disabled=True),\nButton.error(\"Error!\", disabled=True),\n),\n)\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\nself.exit(str(event.button))\nif __name__ == \"__main__\":\napp = ButtonsApp()\nprint(app.run())\n</code></pre> <pre><code>Button {\nmargin: 1 2;\n}\nHorizontal &gt; VerticalScroll {\nwidth: 24;\n}\n.header {\nmargin: 1 0 0 2;\ntext-style: bold;\n}\n</code></pre>"},{"location":"widgets/button/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>label</code> <code>str</code> <code>\"\"</code> The text that appears inside the button. <code>variant</code> <code>str</code> <code>\"default\"</code> Semantic styling variant. One of <code>default</code>, <code>primary</code>, <code>success</code>, <code>warning</code>, <code>error</code>. <code>disabled</code> <code>bool</code> <code>False</code> Whether the button is disabled or not. Disabled buttons cannot be focused or clicked, and are styled in a way that suggests this."},{"location":"widgets/button/#messages","title":"Messages","text":""},{"location":"widgets/button/#textual.widgets._button.Button.Pressed","title":"<code>Pressed</code>","text":"<p>         Bases: <code>Message</code></p> <p>Event sent when a <code>Button</code> is pressed.</p> <p>Can be handled using <code>on_button_pressed</code> in a subclass of <code>Button</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>button</code> <p>The button that was pressed.</p>"},{"location":"widgets/button/#textual.widgets._button.Button.Pressed.control","title":"<code>control: Button</code>  <code>property</code>","text":"<p>Alias for the button.</p>"},{"location":"widgets/button/#additional-notes","title":"Additional Notes","text":"<ul> <li>The spacing between the text and the edges of a button are due to border, not padding. To create a button with zero visible padding, use the <code>border: none;</code> declaration.</li> </ul>"},{"location":"widgets/button/#see-also","title":"See Also","text":"<ul> <li>Button code reference</li> </ul>"},{"location":"widgets/checkbox/","title":"Checkbox","text":"<p>A simple checkbox widget which stores a boolean value.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/checkbox/#example","title":"Example","text":"<p>The example below shows check boxes in various states.</p> Outputcheckbox.pycheckbox.css <p> CheckboxApp \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502 \u2502\u2502 \u2502\u2590X\u258cArrakis\u00a0\ud83d\ude13\u2502 \u2502\u2590X\u258cCaladan\u2502 \u2502\u2590X\u258cChusuk\u2502 \u2502\u2590X\u258cGiedi\u00a0Prime\u2502 \u2502\u2590X\u258cGinaz\u2502 \u2502\u2590X\u258cGrumman\u2502 \u2502\u2590X\u258cKaitain\u2502 \u2502\u2590X\u258cNovebruns\u2502 \u2502\u2502 \u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import VerticalScroll\nfrom textual.widgets import Checkbox\nclass CheckboxApp(App[None]):\nCSS_PATH = \"checkbox.css\"\ndef compose(self) -&gt; ComposeResult:\nwith VerticalScroll():\nyield Checkbox(\"Arrakis :sweat:\")\nyield Checkbox(\"Caladan\")\nyield Checkbox(\"Chusuk\")\nyield Checkbox(\"[b]Giedi Prime[/b]\")\nyield Checkbox(\"[magenta]Ginaz[/]\")\nyield Checkbox(\"Grumman\", True)\nyield Checkbox(\"Kaitain\", id=\"initial_focus\")\nyield Checkbox(\"Novebruns\", True)\ndef on_mount(self):\nself.query_one(\"#initial_focus\", Checkbox).focus()\nif __name__ == \"__main__\":\nCheckboxApp().run()\n</code></pre> <pre><code>Screen {\nalign: center middle;\n}\nVerticalScroll {\nwidth: auto;\nheight: auto;\nborder: solid $primary;\nbackground: $panel;\npadding: 2;\n}\n</code></pre>"},{"location":"widgets/checkbox/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>value</code> <code>bool</code> <code>False</code> The value of the checkbox."},{"location":"widgets/checkbox/#bindings","title":"Bindings","text":"<p>The checkbox widget defines directly the following bindings:</p> Key(s) Description enter, space Toggle the value."},{"location":"widgets/checkbox/#component-classes","title":"Component Classes","text":"<p>The checkbox widget provides the following component classes:</p> Class Description <code>toggle--button</code> Targets the toggle button itself. <code>toggle--label</code> Targets the text label of the toggle button."},{"location":"widgets/checkbox/#messages","title":"Messages","text":""},{"location":"widgets/checkbox/#textual.widgets._checkbox.Checkbox.Changed","title":"<code>Changed</code>","text":"<p>         Bases: <code>ToggleButton.Changed</code></p> <p>Posted when the value of the checkbox changes.</p> <p>This message can be handled using an <code>on_checkbox_changed</code> method.</p>"},{"location":"widgets/checkbox/#textual.widgets._checkbox.Checkbox.Changed.checkbox","title":"<code>checkbox: Checkbox</code>  <code>property</code>","text":"<p>The checkbox that was changed.</p>"},{"location":"widgets/checkbox/#textual.widgets._checkbox.Checkbox.Changed.control","title":"<code>control: Checkbox</code>  <code>property</code>","text":"<p>An alias for self.checkbox</p>"},{"location":"widgets/checkbox/#see-also","title":"See Also","text":"<ul> <li>Checkbox code reference</li> </ul>"},{"location":"widgets/content_switcher/","title":"ContentSwitcher","text":"<p>A widget for containing and switching display between multiple child widgets.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/content_switcher/#example","title":"Example","text":"<p>The example below uses a <code>ContentSwitcher</code> in combination with two <code>Button</code>s to create a simple tabbed view. Note how each <code>Button</code> has an ID set, and how each child of the <code>ContentSwitcher</code> has a corresponding ID; then a <code>Button.Clicked</code> handler is used to set <code>ContentSwitcher.current</code> to switch between the different views.</p> Outputcontent_switcher.pycontent_switcher.css <p> ContentSwitcherApp \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 DataTableMarkdown \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u00a0Book\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Year\u00a0\u2502 \u2502\u00a0Dune\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01965\u00a0\u2502 \u2502\u00a0Dune\u00a0Messiah\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01969\u00a0\u2502 \u2502\u00a0Children\u00a0of\u00a0Dune\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01976\u00a0\u2502 \u2502\u00a0God\u00a0Emperor\u00a0of\u00a0Dune\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01981\u00a0\u2502 \u2502\u00a0Heretics\u00a0of\u00a0Dune\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01984\u00a0\u2502 \u2502\u00a0Chapterhouse:\u00a0Dune\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01985\u00a0\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Horizontal\nfrom textual.widgets import Button, ContentSwitcher, DataTable, Markdown\nMARKDOWN_EXAMPLE = \"\"\"# Three Flavours Cornetto\nThe Three Flavours Cornetto trilogy is an anthology series of British\ncomedic genre films directed by Edgar Wright.\n## Shaun of the Dead\n| Flavour | UK Release Date | Director |\n| -- | -- | -- |\n| Strawberry | 2004-04-09 | Edgar Wright |\n## Hot Fuzz\n| Flavour | UK Release Date | Director |\n| -- | -- | -- |\n| Classico | 2007-02-17 | Edgar Wright |\n## The World's End\n| Flavour | UK Release Date | Director |\n| -- | -- | -- |\n| Mint | 2013-07-19 | Edgar Wright |\n\"\"\"\nclass ContentSwitcherApp(App[None]):\nCSS_PATH = \"content_switcher.css\"\ndef compose(self) -&gt; ComposeResult:\nwith Horizontal(id=\"buttons\"):  # (1)!\nyield Button(\"DataTable\", id=\"data-table\")  # (2)!\nyield Button(\"Markdown\", id=\"markdown\")  # (3)!\nwith ContentSwitcher(initial=\"data-table\"):  # (4)!\nyield DataTable(id=\"data-table\")\nyield Markdown(MARKDOWN_EXAMPLE, id=\"markdown\")\ndef on_button_pressed(self, event: Button.Pressed) -&gt; None:\nself.query_one(ContentSwitcher).current = event.button.id  # (5)!\ndef on_mount(self) -&gt; None:\ntable = self.query_one(DataTable)\ntable.add_columns(\"Book\", \"Year\")\ntable.add_rows(\n[\n(title.ljust(35), year)\nfor title, year in (\n(\"Dune\", 1965),\n(\"Dune Messiah\", 1969),\n(\"Children of Dune\", 1976),\n(\"God Emperor of Dune\", 1981),\n(\"Heretics of Dune\", 1984),\n(\"Chapterhouse: Dune\", 1985),\n)\n]\n)\nif __name__ == \"__main__\":\nContentSwitcherApp().run()\n</code></pre> <ol> <li>A <code>Horizontal</code> to hold the buttons, each with a unique ID.</li> <li>This button will select the <code>DataTable</code> in the <code>ContentSwitcher</code>.</li> <li>This button will select the <code>Markdown</code> in the <code>ContentSwitcher</code>.</li> <li>Note that the intial visible content is set by its ID, see below.</li> <li>When a button is pressed, its ID is used to switch to a different widget in the <code>ContentSwitcher</code>. Remember that IDs are unique within parent, so the buttons and the widgets in the <code>ContentSwitcher</code> can share IDs.</li> </ol> <pre><code>Screen {\nalign: center middle;\n}\n#buttons {\nmargin-top: 1;\nheight: 3;\nwidth: auto;\n}\nContentSwitcher {\nbackground: $panel;\nborder: round $primary;\nwidth: 90%;\nheight: 80%;\n}\nDataTable {\nbackground: $panel;\n}\nMarkdownH2 {\nbackground: $primary;\ncolor: yellow;\nborder: none;\npadding: 0;\n}\n</code></pre> <p>When the user presses the \"Markdown\" button the view is switched:</p> <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3689893118-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3689893118-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3689893118-r1 { fill: #e1e1e1 } .terminal-3689893118-r2 { fill: #c5c8c6 } .terminal-3689893118-r3 { fill: #454a50 } .terminal-3689893118-r4 { fill: #05080f } .terminal-3689893118-r5 { fill: #e2e3e3;font-weight: bold } .terminal-3689893118-r6 { fill: #1e2226;font-weight: bold } .terminal-3689893118-r7 { fill: #000000 } .terminal-3689893118-r8 { fill: #35393d } .terminal-3689893118-r9 { fill: #004578 } .terminal-3689893118-r10 { fill: #121212 } .terminal-3689893118-r11 { fill: #0053aa } .terminal-3689893118-r12 { fill: #dde8f3;font-weight: bold } .terminal-3689893118-r13 { fill: #e2e3e3 } .terminal-3689893118-r14 { fill: #ffff00;font-weight: bold } .terminal-3689893118-r15 { fill: #dde6ed;font-weight: bold } .terminal-3689893118-r16 { fill: #dde6ed } .terminal-3689893118-r17 { fill: #e1e3e5 }      ContentSwitcherApp \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 DataTableMarkdown \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2502 \u2502\u258e\u258b\u2502 \u2502\u258eThree\u00a0Flavours\u00a0Cornetto\u258b\u2502 \u2502\u258e\u258b\u2502 \u2502\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2502 \u2502The\u00a0Three\u00a0Flavours\u00a0Cornetto\u00a0trilogy\u00a0is\u00a0an\u00a0anthology\u00a0series\u00a0of\u00a0\u2502 \u2502Britishcomedic\u00a0genre\u00a0films\u00a0directed\u00a0by\u00a0Edgar\u00a0Wright.\u2502 \u2502\u2502 \u2502Shaun\u00a0of\u00a0the\u00a0Dead\u2502 \u2502\u2502 \u2502\u00a0Flavour\u00a0\u00a0\u00a0\u00a0\u00a0UK\u00a0Release\u00a0Date\u00a0\u00a0Director\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u2502\u00a0Strawberry\u00a0\u00a02004-04-09\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Edgar\u00a0Wright\u00a0\u2502 \u2502\u2502 \u2502Hot\u00a0Fuzz\u2502 \u2502\u2502 \u2502\u00a0Flavour\u00a0\u00a0\u00a0UK\u00a0Release\u00a0Date\u00a0\u00a0Director\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u2502\u00a0Classico\u00a0\u00a02007-02-17\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Edgar\u00a0Wright\u00a0\u2502 \u2502\u2502 \u2502The\u00a0World's\u00a0End\u2502 \u2502\u2502 \u2502\u00a0Flavour\u00a0\u00a0UK\u00a0Release\u00a0Date\u00a0\u00a0Director\u00a0\u00a0\u00a0\u00a0\u00a0\u2502 \u2502\u00a0Mint\u00a0\u00a0\u00a0\u00a0\u00a02013-07-19\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Edgar\u00a0Wright\u00a0\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p>"},{"location":"widgets/content_switcher/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>current</code> <code>str</code> | <code>None</code> <code>None</code> The ID of the currently-visible child. <code>None</code> means nothing is visible."},{"location":"widgets/content_switcher/#see-also","title":"See Also","text":"<ul> <li>ContentSwitcher code reference</li> </ul>"},{"location":"widgets/data_table/","title":"DataTable","text":"<p>A table widget optimized for displaying a lot of data.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/data_table/#example","title":"Example","text":"<p>The example below populates a table with CSV data.</p> Outputdata_table.py <p> TableApp \u00a0lane\u00a0\u00a0swimmer\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0country\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time\u00a0\u00a0 \u00a04\u00a0\u00a0\u00a0\u00a0\u00a0Joseph\u00a0Schooling\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Singapore\u00a0\u00a0\u00a0\u00a0\u00a0\u00a050.39\u00a0 \u00a02\u00a0\u00a0\u00a0\u00a0\u00a0Michael\u00a0Phelps\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0United\u00a0States\u00a0\u00a051.14\u00a0 \u00a05\u00a0\u00a0\u00a0\u00a0\u00a0Chad\u00a0le\u00a0Clos\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0South\u00a0Africa\u00a0\u00a0\u00a051.14\u00a0 \u00a06\u00a0\u00a0\u00a0\u00a0\u00a0L\u00e1szl\u00f3\u00a0Cseh\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Hungary\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a051.14\u00a0 \u00a03\u00a0\u00a0\u00a0\u00a0\u00a0Li\u00a0Zhuhao\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0China\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a051.26\u00a0 \u00a08\u00a0\u00a0\u00a0\u00a0\u00a0Mehdy\u00a0Metella\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0France\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a051.58\u00a0 \u00a07\u00a0\u00a0\u00a0\u00a0\u00a0Tom\u00a0Shields\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0United\u00a0States\u00a0\u00a051.73\u00a0 \u00a01\u00a0\u00a0\u00a0\u00a0\u00a0Aleksandr\u00a0Sadovnikov\u00a0\u00a0Russia\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a051.84\u00a0 \u00a010\u00a0\u00a0\u00a0\u00a0Darren\u00a0Burns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Scotland\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a051.84\u00a0 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import DataTable\nROWS = [\n(\"lane\", \"swimmer\", \"country\", \"time\"),\n(4, \"Joseph Schooling\", \"Singapore\", 50.39),\n(2, \"Michael Phelps\", \"United States\", 51.14),\n(5, \"Chad le Clos\", \"South Africa\", 51.14),\n(6, \"L\u00e1szl\u00f3 Cseh\", \"Hungary\", 51.14),\n(3, \"Li Zhuhao\", \"China\", 51.26),\n(8, \"Mehdy Metella\", \"France\", 51.58),\n(7, \"Tom Shields\", \"United States\", 51.73),\n(1, \"Aleksandr Sadovnikov\", \"Russia\", 51.84),\n(10, \"Darren Burns\", \"Scotland\", 51.84),\n]\nclass TableApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield DataTable()\ndef on_mount(self) -&gt; None:\ntable = self.query_one(DataTable)\nrows = iter(ROWS)\ntable.add_columns(*next(rows))\ntable.add_rows(rows)\napp = TableApp()\nif __name__ == \"__main__\":\napp.run()\n</code></pre>"},{"location":"widgets/data_table/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>show_header</code> <code>bool</code> <code>True</code> Show the table header <code>fixed_rows</code> <code>int</code> <code>0</code> Number of fixed rows (rows which do not scroll) <code>fixed_columns</code> <code>int</code> <code>0</code> Number of fixed columns (columns which do not scroll) <code>zebra_stripes</code> <code>bool</code> <code>False</code> Display alternating colors on rows <code>header_height</code> <code>int</code> <code>1</code> Height of header row <code>show_cursor</code> <code>bool</code> <code>True</code> Show the cursor <code>cursor_type</code> <code>str</code> <code>\"cell\"</code> One of <code>\"cell\"</code>, <code>\"row\"</code>, <code>\"column\"</code>, or <code>\"none\"</code> <code>cursor_coordinate</code> Coordinate <code>Coordinate(0, 0)</code> The current coordinate of the cursor <code>hover_coordinate</code> Coordinate <code>Coordinate(0, 0)</code> The coordinate the mouse cursor is above"},{"location":"widgets/data_table/#messages","title":"Messages","text":""},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.CellHighlighted","title":"<code>CellHighlighted</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when the cursor moves to highlight a new cell.</p> <p>This is only relevant when the <code>cursor_type</code> is <code>\"cell\"</code>. It's also posted when the cell cursor is re-enabled (by setting <code>show_cursor=True</code>), and when the cursor type is changed to <code>\"cell\"</code>. Can be handled using <code>on_data_table_cell_highlighted</code> in a subclass of <code>DataTable</code> or in a parent widget in the DOM.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.CellHighlighted.cell_key","title":"<code>cell_key: CellKey</code>  <code>instance-attribute</code>","text":"<p>The key for the highlighted cell.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.CellHighlighted.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.CellHighlighted.coordinate","title":"<code>coordinate: Coordinate</code>  <code>instance-attribute</code>","text":"<p>The coordinate of the highlighted cell.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.CellHighlighted.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.CellHighlighted.value","title":"<code>value: CellType</code>  <code>instance-attribute</code>","text":"<p>The value in the highlighted cell.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.CellSelected","title":"<code>CellSelected</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted by the <code>DataTable</code> widget when a cell is selected.</p> <p>This is only relevant when the <code>cursor_type</code> is <code>\"cell\"</code>. Can be handled using <code>on_data_table_cell_selected</code> in a subclass of <code>DataTable</code> or in a parent widget in the DOM.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.CellSelected.cell_key","title":"<code>cell_key: CellKey</code>  <code>instance-attribute</code>","text":"<p>The key for the selected cell.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.CellSelected.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.CellSelected.coordinate","title":"<code>coordinate: Coordinate</code>  <code>instance-attribute</code>","text":"<p>The coordinate of the cell that was selected.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.CellSelected.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.CellSelected.value","title":"<code>value: CellType</code>  <code>instance-attribute</code>","text":"<p>The value in the cell that was selected.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.RowHighlighted","title":"<code>RowHighlighted</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a row is highlighted.</p> <p>This message is only posted when the <code>cursor_type</code> is set to <code>\"row\"</code>. Can be handled using <code>on_data_table_row_highlighted</code> in a subclass of <code>DataTable</code> or in a parent widget in the DOM.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.RowHighlighted.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.RowHighlighted.cursor_row","title":"<code>cursor_row: int</code>  <code>instance-attribute</code>","text":"<p>The y-coordinate of the cursor that highlighted the row.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.RowHighlighted.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.RowHighlighted.row_key","title":"<code>row_key: RowKey</code>  <code>instance-attribute</code>","text":"<p>The key of the row that was highlighted.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.RowSelected","title":"<code>RowSelected</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a row is selected.</p> <p>This message is only posted when the <code>cursor_type</code> is set to <code>\"row\"</code>. Can be handled using <code>on_data_table_row_selected</code> in a subclass of <code>DataTable</code> or in a parent widget in the DOM.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.RowSelected.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.RowSelected.cursor_row","title":"<code>cursor_row: int</code>  <code>instance-attribute</code>","text":"<p>The y-coordinate of the cursor that made the selection.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.RowSelected.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.RowSelected.row_key","title":"<code>row_key: RowKey</code>  <code>instance-attribute</code>","text":"<p>The key of the row that was selected.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.ColumnHighlighted","title":"<code>ColumnHighlighted</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a column is highlighted.</p> <p>This message is only posted when the <code>cursor_type</code> is set to <code>\"column\"</code>. Can be handled using <code>on_data_table_column_highlighted</code> in a subclass of <code>DataTable</code> or in a parent widget in the DOM.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.ColumnHighlighted.column_key","title":"<code>column_key</code>  <code>instance-attribute</code>","text":"<p>The key of the column that was highlighted.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.ColumnHighlighted.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.ColumnHighlighted.cursor_column","title":"<code>cursor_column: int</code>  <code>instance-attribute</code>","text":"<p>The x-coordinate of the column that was highlighted.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.ColumnHighlighted.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.ColumnSelected","title":"<code>ColumnSelected</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a column is selected.</p> <p>This message is only posted when the <code>cursor_type</code> is set to <code>\"column\"</code>. Can be handled using <code>on_data_table_column_selected</code> in a subclass of <code>DataTable</code> or in a parent widget in the DOM.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.ColumnSelected.column_key","title":"<code>column_key</code>  <code>instance-attribute</code>","text":"<p>The key of the column that was selected.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.ColumnSelected.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.ColumnSelected.cursor_column","title":"<code>cursor_column: int</code>  <code>instance-attribute</code>","text":"<p>The x-coordinate of the column that was selected.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.ColumnSelected.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.HeaderSelected","title":"<code>HeaderSelected</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a column header/label is clicked.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.HeaderSelected.column_index","title":"<code>column_index</code>  <code>instance-attribute</code>","text":"<p>The index for the column.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.HeaderSelected.column_key","title":"<code>column_key</code>  <code>instance-attribute</code>","text":"<p>The key for the column.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.HeaderSelected.control","title":"<code>control: DataTable</code>  <code>property</code>","text":"<p>Alias for the data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.HeaderSelected.data_table","title":"<code>data_table</code>  <code>instance-attribute</code>","text":"<p>The data table.</p>"},{"location":"widgets/data_table/#textual.widgets._data_table.DataTable.HeaderSelected.label","title":"<code>label</code>  <code>instance-attribute</code>","text":"<p>The text of the label.</p>"},{"location":"widgets/data_table/#bindings","title":"Bindings","text":"<p>The data table widget defines directly the following bindings:</p> Key(s) Description enter Select cells under the cursor. up Move the cursor up. down Move the cursor down. right Move the cursor right. left Move the cursor left."},{"location":"widgets/data_table/#component-classes","title":"Component Classes","text":"<p>The data table widget provides the following component classes:</p> Class Description <code>datatable--cursor</code> Target the cursor. <code>datatable--hover</code> Target the cells under the hover cursor. <code>datatable--fixed</code> Target fixed columns and fixed rows. <code>datatable--fixed-cursor</code> Target highlighted and fixed columns or header. <code>datatable--header</code> Target the header of the data table. <code>datatable--header-cursor</code> Target cells highlighted by the cursor. <code>datatable--header-hover</code> Target hovered header or row label cells. <code>datatable--even-row</code> Target even rows (row indices start at 0). <code>datatable--odd-row</code> Target odd rows (row indices start at 0)."},{"location":"widgets/data_table/#see-also","title":"See Also","text":"<ul> <li>DataTable code reference</li> </ul>"},{"location":"widgets/directory_tree/","title":"DirectoryTree","text":"<p>A tree control to navigate the contents of your filesystem.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/directory_tree/#example","title":"Example","text":"<p>The example below creates a simple tree to navigate the current working directory.</p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import DirectoryTree\nclass DirectoryTreeApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield DirectoryTree(\"./\")\nif __name__ == \"__main__\":\napp = DirectoryTreeApp()\napp.run()\n</code></pre>"},{"location":"widgets/directory_tree/#messages","title":"Messages","text":""},{"location":"widgets/directory_tree/#textual.widgets._directory_tree.DirectoryTree.FileSelected","title":"<code>FileSelected</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a file is selected.</p> <p>Can be handled using <code>on_directory_tree_file_selected</code> in a subclass of <code>DirectoryTree</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>path</code> <code>str</code> <p>The path of the file that was selected.</p>"},{"location":"widgets/directory_tree/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>show_root</code> <code>bool</code> <code>True</code> Show the root node. <code>show_guides</code> <code>bool</code> <code>True</code> Show guide lines between levels. <code>guide_depth</code> <code>int</code> <code>4</code> Amount of indentation between parent and child."},{"location":"widgets/directory_tree/#component-classes","title":"Component Classes","text":"<p>The directory tree widget provides the following component classes:</p> Class Description <code>directory-tree--extension</code> Target the extension of a file name. <code>directory-tree--file</code> Target files in the directory structure. <code>directory-tree--folder</code> Target folders in the directory structure. <code>directory-tree--hidden</code> Target hidden items in the directory structure. <p>See also the component classes for <code>Tree</code>.</p>"},{"location":"widgets/directory_tree/#see-also","title":"See Also","text":"<ul> <li>DirectoryTree code reference</li> <li>Tree code reference</li> </ul>"},{"location":"widgets/footer/","title":"Footer","text":"<p>A simple footer widget which is docked to the bottom of its parent container. Displays available keybindings for the currently focused widget.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/footer/#example","title":"Example","text":"<p>The example below shows an app with a single keybinding that contains only a <code>Footer</code> widget. Notice how the <code>Footer</code> automatically displays the keybinding.</p> Outputfooter.py <p> FooterApp \u00a0Q\u00a0\u00a0Quit\u00a0the\u00a0app\u00a0\u00a0?\u00a0\u00a0Show\u00a0help\u00a0screen\u00a0\u00a0DELETE\u00a0\u00a0Delete\u00a0the\u00a0thing\u00a0 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.binding import Binding\nfrom textual.widgets import Footer\nclass FooterApp(App):\nBINDINGS = [\nBinding(key=\"q\", action=\"quit\", description=\"Quit the app\"),\nBinding(\nkey=\"question_mark\",\naction=\"help\",\ndescription=\"Show help screen\",\nkey_display=\"?\",\n),\nBinding(key=\"delete\", action=\"delete\", description=\"Delete the thing\"),\nBinding(key=\"j\", action=\"down\", description=\"Scroll down\", show=False),\n]\ndef compose(self) -&gt; ComposeResult:\nyield Footer()\nif __name__ == \"__main__\":\napp = FooterApp()\napp.run()\n</code></pre>"},{"location":"widgets/footer/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>highlight_key</code> <code>str</code> <code>None</code> Stores the currently highlighted key. This is typically the key the cursor is hovered over in the footer."},{"location":"widgets/footer/#messages","title":"Messages","text":"<p>This widget sends no messages.</p>"},{"location":"widgets/footer/#component-classes","title":"Component Classes","text":"<p>The footer widget provides the following component classes:</p> Class Description <code>footer--description</code> Targets the descriptions of the key bindings. <code>footer--highlight</code> Targets the highlighted key binding. <code>footer--highlight-key</code> Targets the key portion of the highlighted key binding. <code>footer--key</code> Targets the key portions of the key bindings."},{"location":"widgets/footer/#additional-notes","title":"Additional Notes","text":"<ul> <li>You can prevent keybindings from appearing in the footer by setting the <code>show</code> argument of the <code>Binding</code> to <code>False</code>.</li> <li>You can customize the text that appears for the key itself in the footer using the <code>key_display</code> argument of <code>Binding</code>.</li> </ul>"},{"location":"widgets/footer/#see-also","title":"See Also","text":"<ul> <li>Footer code reference</li> </ul>"},{"location":"widgets/header/","title":"Header","text":"<p>A simple header widget which docks itself to the top of the parent container.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/header/#example","title":"Example","text":"<p>The example below shows an app with a <code>Header</code>.</p> Outputheader.py <p> HeaderApp \u2b58HeaderApp </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Header\nclass HeaderApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield Header()\nif __name__ == \"__main__\":\napp = HeaderApp()\napp.run()\n</code></pre>"},{"location":"widgets/header/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>tall</code> <code>bool</code> <code>True</code> Whether the <code>Header</code> widget is displayed as tall or not. The tall variant is 3 cells tall by default. The non-tall variant is a single cell tall. This can be toggled by clicking on the header."},{"location":"widgets/header/#messages","title":"Messages","text":"<p>This widget sends no messages.</p>"},{"location":"widgets/header/#see-also","title":"See Also","text":"<ul> <li>Header code reference</li> </ul>"},{"location":"widgets/input/","title":"Input","text":"<p>A single-line text input widget.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/input/#example","title":"Example","text":"<p>The example below shows how you might create a simple form using two <code>Input</code> widgets.</p> Outputinput.py <p> InputApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258aDarren\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258aLast\u00a0Name\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Input\nclass InputApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield Input(placeholder=\"First Name\")\nyield Input(placeholder=\"Last Name\")\nif __name__ == \"__main__\":\napp = InputApp()\napp.run()\n</code></pre>"},{"location":"widgets/input/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>cursor_blink</code> <code>bool</code> <code>True</code> True if cursor blinking is enabled. <code>value</code> <code>str</code> <code>\"\"</code> The value currently in the text input. <code>cursor_position</code> <code>int</code> <code>0</code> The index of the cursor in the value string. <code>placeholder</code> <code>str</code> <code>str</code> The dimmed placeholder text to display when the input is empty. <code>password</code> <code>bool</code> <code>False</code> True if the input should be masked."},{"location":"widgets/input/#messages","title":"Messages","text":""},{"location":"widgets/input/#textual.widgets._input.Input.Changed","title":"<code>Changed</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when the value changes.</p> <p>Can be handled using <code>on_input_changed</code> in a subclass of <code>Input</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>str</code> <p>The value that the input was changed to.</p> <code>input</code> <code>Input</code> <p>The <code>Input</code> widget that was changed.</p>"},{"location":"widgets/input/#textual.widgets._input.Input.Changed.control","title":"<code>control: Input</code>  <code>property</code>","text":"<p>Alias for self.input.</p>"},{"location":"widgets/input/#textual.widgets._input.Input.Submitted","title":"<code>Submitted</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when the enter key is pressed within an <code>Input</code>.</p> <p>Can be handled using <code>on_input_submitted</code> in a subclass of <code>Input</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>str</code> <p>The value of the <code>Input</code> being submitted.</p> <code>input</code> <code>Input</code> <p>The <code>Input</code> widget that is being submitted.</p>"},{"location":"widgets/input/#textual.widgets._input.Input.Submitted.control","title":"<code>control: Input</code>  <code>property</code>","text":"<p>Alias for self.input.</p>"},{"location":"widgets/input/#bindings","title":"Bindings","text":"<p>The Input widget defines the following bindings:</p> Key(s) Description left Move the cursor left. ctrl+left Move the cursor one word to the left. right Move the cursor right. ctrl+right Move the cursor one word to the right. backspace Delete the character to the left of the cursor. home,ctrl+a Go to the beginning of the input. end,ctrl+e Go to the end of the input. delete,ctrl+d Delete the character to the right of the cursor. enter Submit the current value of the input. ctrl+w Delete the word to the left of the cursor. ctrl+u Delete everything to the left of the cursor. ctrl+f Delete the word to the right of the cursor. ctrl+k Delete everything to the right of the cursor."},{"location":"widgets/input/#component-classes","title":"Component Classes","text":"<p>The input widget provides the following component classes:</p> Class Description <code>input--cursor</code> Target the cursor. <code>input--placeholder</code> Target the placeholder text (when it exists)."},{"location":"widgets/input/#additional-notes","title":"Additional Notes","text":"<ul> <li>The spacing around the text content is due to border. To remove it, set <code>border: none;</code> in your CSS.</li> </ul>"},{"location":"widgets/input/#see-also","title":"See Also","text":"<ul> <li>Input code reference</li> </ul>"},{"location":"widgets/label/","title":"Label","text":"<p>A widget which displays static text, but which can also contain more complex Rich renderables.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/label/#example","title":"Example","text":"<p>The example below shows how you can use a <code>Label</code> widget to display some text.</p> Outputlabel.py <p> LabelApp Hello,\u00a0world! </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Label\nclass LabelApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield Label(\"Hello, world!\")\nif __name__ == \"__main__\":\napp = LabelApp()\napp.run()\n</code></pre>"},{"location":"widgets/label/#reactive-attributes","title":"Reactive Attributes","text":"<p>This widget has no reactive attributes.</p>"},{"location":"widgets/label/#messages","title":"Messages","text":"<p>This widget sends no messages.</p>"},{"location":"widgets/label/#see-also","title":"See Also","text":"<ul> <li>Label code reference</li> </ul>"},{"location":"widgets/list_item/","title":"ListItem","text":"<p><code>ListItem</code> is the type of the elements in a <code>ListView</code>.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/list_item/#example","title":"Example","text":"<p>The example below shows an app with a simple <code>ListView</code>, consisting of multiple <code>ListItem</code>s. The arrow keys can be used to navigate the list.</p> Outputlist_view.py <p> ListViewExample One Two Three </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import ListView, ListItem, Label, Footer\nclass ListViewExample(App):\nCSS_PATH = \"list_view.css\"\ndef compose(self) -&gt; ComposeResult:\nyield ListView(\nListItem(Label(\"One\")),\nListItem(Label(\"Two\")),\nListItem(Label(\"Three\")),\n)\nyield Footer()\nif __name__ == \"__main__\":\napp = ListViewExample()\napp.run()\n</code></pre>"},{"location":"widgets/list_item/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>highlighted</code> <code>bool</code> <code>False</code> True if this ListItem is highlighted"},{"location":"widgets/list_item/#attributes","title":"Attributes","text":"attribute type purpose <code>item</code> <code>ListItem</code> The item that was selected."},{"location":"widgets/list_item/#see-also","title":"See Also","text":"<ul> <li>ListItem code reference</li> </ul>"},{"location":"widgets/list_view/","title":"ListView","text":"<p>Displays a vertical list of <code>ListItem</code>s which can be highlighted and selected. Supports keyboard navigation.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/list_view/#example","title":"Example","text":"<p>The example below shows an app with a simple <code>ListView</code>.</p> Outputlist_view.pylist_view.css <p> ListViewExample One Two Three </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import ListView, ListItem, Label, Footer\nclass ListViewExample(App):\nCSS_PATH = \"list_view.css\"\ndef compose(self) -&gt; ComposeResult:\nyield ListView(\nListItem(Label(\"One\")),\nListItem(Label(\"Two\")),\nListItem(Label(\"Three\")),\n)\nyield Footer()\nif __name__ == \"__main__\":\napp = ListViewExample()\napp.run()\n</code></pre> <pre><code>Screen {\nalign: center middle;\n}\nListView {\nwidth: 30;\nheight: auto;\nmargin: 2 2;\n}\nLabel {\npadding: 1 2;\n}\n</code></pre>"},{"location":"widgets/list_view/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>index</code> <code>int</code> <code>0</code> The currently highlighted index"},{"location":"widgets/list_view/#messages","title":"Messages","text":""},{"location":"widgets/list_view/#textual.widgets._list_view.ListView.Highlighted","title":"<code>Highlighted</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when the highlighted item changes.</p> <p>Highlighted item is controlled using up/down keys. Can be handled using <code>on_list_view_highlighted</code> in a subclass of <code>ListView</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>item</code> <code>ListItem | None</code> <p>The highlighted item, if there is one highlighted.</p>"},{"location":"widgets/list_view/#textual.widgets._list_view.ListView.Selected","title":"<code>Selected</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when a list item is selected, e.g. when you press the enter key on it.</p> <p>Can be handled using <code>on_list_view_selected</code> in a subclass of <code>ListView</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>item</code> <code>ListItem</code> <p>The selected item.</p>"},{"location":"widgets/list_view/#bindings","title":"Bindings","text":"<p>The list view widget defines directly the following bindings:</p> Key(s) Description enter Select the current item. up Move the cursor up. down Move the cursor down."},{"location":"widgets/list_view/#see-also","title":"See Also","text":"<ul> <li>ListView code reference</li> </ul>"},{"location":"widgets/loading_indicator/","title":"LoadingIndicator","text":"<p>Displays pulsating dots to indicate when data is being loaded.</p> <ul> <li> Focusable</li> <li> Container</li> </ul> <p>You can set the color of the loading indicator by setting its <code>color</code> style.</p> <p>Here's how you would do that with CSS:</p> <pre><code>LoadingIndicator {\ncolor: red;\n}\n</code></pre> Outputloading_indicator.py <p> LoadingApp \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0\u25cf\u00a0\u25cf </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import LoadingIndicator\nclass LoadingApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield LoadingIndicator()\nif __name__ == \"__main__\":\napp = LoadingApp()\napp.run()\n</code></pre>"},{"location":"widgets/loading_indicator/#see-also","title":"See Also","text":"<ul> <li>LoadingIndicator code reference</li> </ul>"},{"location":"widgets/markdown/","title":"Markdown","text":"<p>A widget to display a Markdown document.</p> <ul> <li> Focusable</li> <li> Container</li> </ul> <p>Tip</p> <p>See MarkdownViewer for a widget that adds additional features such as a Table of Contents.</p>"},{"location":"widgets/markdown/#example","title":"Example","text":"<p>The following example displays Markdown from a string.</p> Outputmarkdown.py <p> MarkdownExampleApp \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258e\u258b \u258eMarkdown\u00a0Document\u258b \u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 This\u00a0is\u00a0an\u00a0example\u00a0of\u00a0Textual's\u00a0Markdown\u00a0widget. \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258e\u258b \u258eFeatures\u258b \u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 Markdown\u00a0syntax\u00a0and\u00a0extensions\u00a0are\u00a0supported. \u25cf\u00a0Typography\u00a0emphasis,\u00a0strong,\u00a0inline\u00a0code\u00a0etc. \u25cf\u00a0Headers \u25cf\u00a0Lists\u00a0(bullet\u00a0and\u00a0ordered) \u25cf\u00a0Syntax\u00a0highlighted\u00a0code\u00a0blocks \u25cf\u00a0Tables! </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Markdown\nEXAMPLE_MARKDOWN = \"\"\"\\\n# Markdown Document\nThis is an example of Textual's `Markdown` widget.\n## Features\nMarkdown syntax and extensions are supported.\n- Typography *emphasis*, **strong**, `inline code` etc.\n- Headers\n- Lists (bullet and ordered)\n- Syntax highlighted code blocks\n- Tables!\n\"\"\"\nclass MarkdownExampleApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield Markdown(EXAMPLE_MARKDOWN)\nif __name__ == \"__main__\":\napp = MarkdownExampleApp()\napp.run()\n</code></pre>"},{"location":"widgets/markdown/#messages","title":"Messages","text":""},{"location":"widgets/markdown/#textual.widgets._markdown.Markdown.TableOfContentsUpdated","title":"<code>TableOfContentsUpdated</code>","text":"<p>         Bases: <code>Message</code></p> <p>The table of contents was updated.</p>"},{"location":"widgets/markdown/#textual.widgets._markdown.Markdown.TableOfContentsUpdated.table_of_contents","title":"<code>table_of_contents: TableOfContentsType</code>  <code>instance-attribute</code>","text":"<p>Table of contents.</p>"},{"location":"widgets/markdown/#textual.widgets._markdown.Markdown.TableOfContentsSelected","title":"<code>TableOfContentsSelected</code>","text":"<p>         Bases: <code>Message</code></p> <p>An item in the TOC was selected.</p>"},{"location":"widgets/markdown/#textual.widgets._markdown.Markdown.TableOfContentsSelected.block_id","title":"<code>block_id</code>  <code>instance-attribute</code>","text":"<p>ID of the block that was selected.</p>"},{"location":"widgets/markdown/#textual.widgets._markdown.Markdown.LinkClicked","title":"<code>LinkClicked</code>","text":"<p>         Bases: <code>Message</code></p> <p>A link in the document was clicked.</p>"},{"location":"widgets/markdown/#textual.widgets._markdown.Markdown.LinkClicked.href","title":"<code>href: str</code>  <code>instance-attribute</code>","text":"<p>The link that was selected.</p>"},{"location":"widgets/markdown/#see-also","title":"See Also","text":"<ul> <li>Markdown code reference</li> <li>MarkdownViewer code reference</li> </ul>"},{"location":"widgets/markdown_viewer/","title":"MarkdownViewer","text":"<p>A Widget to display Markdown content with an optional Table of Contents.</p> <ul> <li> Focusable</li> <li> Container</li> </ul> <p>Note</p> <p>This Widget adds browser-like functionality on top of the Markdown widget.</p>"},{"location":"widgets/markdown_viewer/#example","title":"Example","text":"<p>The following example displays Markdown from a string and a Table of Contents.</p> Outputmarkdown.py <p> MarkdownExampleApp \u258b\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u25bc\u00a0\u2160\u00a0Markdown\u00a0Viewer\u258b\u258e\u258b \u251c\u2500\u2500\u00a0\u2161\u00a0Features\u258b\u258eMarkdown\u00a0Viewer\u258b \u251c\u2500\u2500\u00a0\u2161\u00a0Tables\u258b\u258e\u258b \u2514\u2500\u2500\u00a0\u2161\u00a0Code\u00a0Blocks\u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u258bThis\u00a0is\u00a0an\u00a0example\u00a0of\u00a0Textual's\u00a0MarkdownViewer\u00a0widget. \u258b \u258b\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258b\u258e\u258b \u258b\u258eFeatures\u258b \u258b\u258e\u258b \u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u258bMarkdown\u00a0syntax\u00a0and\u00a0extensions\u00a0are\u00a0supported. \u258b \u258b\u25cf\u00a0Typography\u00a0emphasis,\u00a0strong,\u00a0inline\u00a0code\u00a0etc. \u258b\u25cf\u00a0Headers \u258b\u25cf\u00a0Lists\u00a0(bullet\u00a0and\u00a0ordered) \u258b\u25cf\u00a0Syntax\u00a0highlighted\u00a0code\u00a0blocks \u258b\u25cf\u00a0Tables! \u258b \u258b\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258b\u258e\u258b \u258b\u258eTables\u258b \u258b\u258e\u258b \u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u258bTables\u00a0are\u00a0displayed\u00a0in\u00a0a\u00a0DataTable\u00a0widget. \u258b \u258b\u00a0Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type\u00a0\u00a0Default\u00a0\u00a0Description\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u258bshow_headerboolTrue\u00a0Show\u00a0the\u00a0table\u00a0header\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u258bfixed_rowsint0\u00a0Number\u00a0of\u00a0fixed\u00a0rows\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u258bfixed_columnsint0\u00a0Number\u00a0of\u00a0fixed\u00a0columns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u258bzebra_stripesboolFalse\u00a0Display\u00a0alternating\u00a0colors\u00a0on\u00a0rows\u00a0 \u258bheader_heightint1\u00a0Height\u00a0of\u00a0header\u00a0row\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2582\u2582 \u258bshow_cursorboolTrue\u00a0Show\u00a0a\u00a0cell\u00a0cursor\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u258b \u258b\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258b\u258e\u258b \u258b\u258eCode\u00a0Blocks\u258b \u258b\u258e\u258b \u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u258bCode\u00a0blocks\u00a0are\u00a0syntax\u00a0highlighted,\u00a0with\u00a0guidelines. \u258b </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import MarkdownViewer\nEXAMPLE_MARKDOWN = \"\"\"\\\n# Markdown Viewer\nThis is an example of Textual's `MarkdownViewer` widget.\n## Features\nMarkdown syntax and extensions are supported.\n- Typography *emphasis*, **strong**, `inline code` etc.\n- Headers\n- Lists (bullet and ordered)\n- Syntax highlighted code blocks\n- Tables!\n## Tables\nTables are displayed in a DataTable widget.\n| Name            | Type   | Default | Description                        |\n| --------------- | ------ | ------- | ---------------------------------- |\n| `show_header`   | `bool` | `True`  | Show the table header              |\n| `fixed_rows`    | `int`  | `0`     | Number of fixed rows               |\n| `fixed_columns` | `int`  | `0`     | Number of fixed columns            |\n| `zebra_stripes` | `bool` | `False` | Display alternating colors on rows |\n| `header_height` | `int`  | `1`     | Height of header row               |\n| `show_cursor`   | `bool` | `True`  | Show a cell cursor                 |\n## Code Blocks\nCode blocks are syntax highlighted, with guidelines.\n```python\nclass ListViewExample(App):\n    def compose(self) -&gt; ComposeResult:\n        yield ListView(\n            ListItem(Label(\"One\")),\n            ListItem(Label(\"Two\")),\n            ListItem(Label(\"Three\")),\n        )\n        yield Footer()\n```\n\"\"\"\nclass MarkdownExampleApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield MarkdownViewer(EXAMPLE_MARKDOWN, show_table_of_contents=True)\nif __name__ == \"__main__\":\napp = MarkdownExampleApp()\napp.run()\n</code></pre>"},{"location":"widgets/markdown_viewer/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>show_table_of_contents</code> bool True Wether a Table of Contents should be displayed with the Markdown."},{"location":"widgets/markdown_viewer/#see-also","title":"See Also","text":"<ul> <li>MarkdownViewer code reference</li> <li>Markdown code reference</li> </ul>"},{"location":"widgets/placeholder/","title":"Placeholder","text":"<p>A widget that is meant to have no complex functionality. Use the placeholder widget when studying the layout of your app before having to develop your custom widgets.</p> <p>The placeholder widget has variants that display different bits of useful information. Clicking a placeholder will cycle through its variants.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/placeholder/#example","title":"Example","text":"<p>The example below shows each placeholder variant.</p> Outputplaceholder.pyplaceholder.css <p> PlaceholderApp Placeholder\u00a0p2\u00a0here! This\u00a0is\u00a0a\u00a0custom\u00a0label\u00a0for\u00a0p1. #p4 #p3#p5Placeholde r Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0 26\u00a0x\u00a06amet,\u00a0consectetur\u00a027\u00a0x\u00a06 adipiscing\u00a0elit.\u00a0Etiam\u00a0 feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0 Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0amet,\u00a0 consectetur\u00a0adipiscing\u00a0elit.\u00a0Etiam\u00a040\u00a0x\u00a06 feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0accumsan.\u00a0 Suspendisse\u00a0bibendum\u00a0nec\u00a0libero\u00a0quis\u00a0 gravida.\u00a0Phasellus\u00a0id\u00a0eleifend\u00a0ligula. Nullam\u00a0imperdiet\u00a0sem\u00a0tellus,\u00a0sed\u00a0 vehicula\u00a0nisl\u00a0faucibus\u00a0sit\u00a0amet.\u00a0Lorem\u00a0ipsum\u00a0dolor\u00a0sit\u00a0amet,\u00a0 Praesent\u00a0iaculis\u00a0tempor\u00a0ultricies.\u00a0Sedconsectetur\u00a0adipiscing\u00a0elit.\u00a0Etiam\u00a0 lacinia,\u00a0tellus\u00a0id\u00a0rutrum\u00a0lacinia,\u00a0feugiat\u00a0ac\u00a0elit\u00a0sit\u00a0amet\u00a0accumsan.\u00a0 sapien\u00a0sapien\u00a0congue\u00a0mauris,\u00a0sit\u00a0amet\u00a0Suspendisse\u00a0bibendum\u00a0nec\u00a0libero\u00a0quis\u00a0 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Container, Horizontal, VerticalScroll\nfrom textual.widgets import Placeholder\nclass PlaceholderApp(App):\nCSS_PATH = \"placeholder.css\"\ndef compose(self) -&gt; ComposeResult:\nyield VerticalScroll(\nContainer(\nPlaceholder(\"This is a custom label for p1.\", id=\"p1\"),\nPlaceholder(\"Placeholder p2 here!\", id=\"p2\"),\nPlaceholder(id=\"p3\"),\nPlaceholder(id=\"p4\"),\nPlaceholder(id=\"p5\"),\nPlaceholder(),\nHorizontal(\nPlaceholder(variant=\"size\", id=\"col1\"),\nPlaceholder(variant=\"text\", id=\"col2\"),\nPlaceholder(variant=\"size\", id=\"col3\"),\nid=\"c1\",\n),\nid=\"bot\",\n),\nContainer(\nPlaceholder(variant=\"text\", id=\"left\"),\nPlaceholder(variant=\"size\", id=\"topright\"),\nPlaceholder(variant=\"text\", id=\"botright\"),\nid=\"top\",\n),\nid=\"content\",\n)\nif __name__ == \"__main__\":\napp = PlaceholderApp()\napp.run()\n</code></pre> <pre><code>Placeholder {\nheight: 100%;\n}\n#top {\nheight: 50%;\nwidth: 100%;\nlayout: grid;\ngrid-size: 2 2;\n}\n#left {\nrow-span: 2;\n}\n#bot {\nheight: 50%;\nwidth: 100%;\nlayout: grid;\ngrid-size: 8 8;\n}\n#c1 {\nrow-span: 4;\ncolumn-span: 8;\nheight: 100%;\n}\n#col1, #col2, #col3 {\nwidth: 1fr;\n}\n#p1 {\nrow-span: 4;\ncolumn-span: 4;\n}\n#p2 {\nrow-span: 2;\ncolumn-span: 4;\n}\n#p3 {\nrow-span: 2;\ncolumn-span: 2;\n}\n#p4 {\nrow-span: 1;\ncolumn-span: 2;\n}\n</code></pre>"},{"location":"widgets/placeholder/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>variant</code> <code>str</code> <code>\"default\"</code> Styling variant. One of <code>default</code>, <code>size</code>, <code>text</code>."},{"location":"widgets/placeholder/#messages","title":"Messages","text":"<p>This widget sends no messages.</p>"},{"location":"widgets/placeholder/#see-also","title":"See Also","text":"<ul> <li>Placeholder code reference</li> </ul>"},{"location":"widgets/radiobutton/","title":"RadioButton","text":"<p>A simple radio button which stores a boolean value.</p> <ul> <li> Focusable</li> <li> Container</li> </ul> <p>A radio button is best used with others inside a <code>RadioSet</code>.</p>"},{"location":"widgets/radiobutton/#example","title":"Example","text":"<p>The example below shows radio buttons, used within a <code>RadioSet</code>.</p> Outputradio_button.pyradio_button.css <p> RadioChoicesApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2590\u25cf\u258cBattlestar\u00a0Galactica\u2502 \u2502\u2590\u25cf\u258cDune\u00a01984\u2502 \u2502\u2590\u25cf\u258cDune\u00a02021\u2502 \u2502\u2590\u25cf\u258cSerenity\u2502 \u2502\u2590\u25cf\u258cStar\u00a0Trek:\u00a0The\u00a0Motion\u00a0Picture\u2502 \u2502\u2590\u25cf\u258cStar\u00a0Wars:\u00a0A\u00a0New\u00a0Hope\u2502 \u2502\u2590\u25cf\u258cThe\u00a0Last\u00a0Starfighter\u2502 \u2502\u2590\u25cf\u258cTotal\u00a0Recall\u00a0\ud83d\udc49\u00a0\ud83d\udd34\u2502 \u2502\u2590\u25cf\u258cWing\u00a0Commander\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import RadioButton, RadioSet\nclass RadioChoicesApp(App[None]):\nCSS_PATH = \"radio_button.css\"\ndef compose(self) -&gt; ComposeResult:\nwith RadioSet():\nyield RadioButton(\"Battlestar Galactica\")\nyield RadioButton(\"Dune 1984\")\nyield RadioButton(\"Dune 2021\", id=\"focus_me\")\nyield RadioButton(\"Serenity\", value=True)\nyield RadioButton(\"Star Trek: The Motion Picture\")\nyield RadioButton(\"Star Wars: A New Hope\")\nyield RadioButton(\"The Last Starfighter\")\nyield RadioButton(\n\"Total Recall :backhand_index_pointing_right: :red_circle:\"\n)\nyield RadioButton(\"Wing Commander\")\ndef on_mount(self) -&gt; None:\nself.query_one(\"#focus_me\", RadioButton).focus()\nif __name__ == \"__main__\":\nRadioChoicesApp().run()\n</code></pre> <pre><code>Screen {\nalign: center middle;\n}\nRadioSet {\nwidth: 50%;\n}\n</code></pre>"},{"location":"widgets/radiobutton/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>value</code> <code>bool</code> <code>False</code> The value of the radio button."},{"location":"widgets/radiobutton/#bindings","title":"Bindings","text":"<p>The radio button widget defines directly the following bindings:</p> Key(s) Description enter, space Toggle the value."},{"location":"widgets/radiobutton/#component-classes","title":"Component Classes","text":"<p>The radio button widget provides the following component classes:</p> Class Description <code>toggle--button</code> Targets the toggle button itself. <code>toggle--label</code> Targets the text label of the toggle button."},{"location":"widgets/radiobutton/#messages","title":"Messages","text":""},{"location":"widgets/radiobutton/#textual.widgets._radio_button.RadioButton.Changed","title":"<code>Changed</code>","text":"<p>         Bases: <code>ToggleButton.Changed</code></p> <p>Posted when the value of the radio button changes.</p> <p>This message can be handled using an <code>on_radio_button_changed</code> method.</p>"},{"location":"widgets/radiobutton/#textual.widgets._radio_button.RadioButton.Changed.control","title":"<code>control: RadioButton</code>  <code>property</code>","text":"<p>Alias for self.radio_button</p>"},{"location":"widgets/radiobutton/#textual.widgets._radio_button.RadioButton.Changed.radio_button","title":"<code>radio_button: RadioButton</code>  <code>property</code>","text":"<p>The radio button that was changed.</p>"},{"location":"widgets/radiobutton/#see-also","title":"See Also","text":"<ul> <li>RadioButton code reference</li> <li>RadioSet</li> </ul>"},{"location":"widgets/radioset/","title":"RadioSet","text":"<p>A container widget that groups <code>RadioButton</code>s together.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/radioset/#example","title":"Example","text":"<p>The example below shows two radio sets, one built using a collection of radio buttons, the other a collection of simple strings.</p> Outputradio_set.pyradio_set.css <p> RadioChoicesApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2590\u25cf\u258cBattlestar\u00a0Galactica\u2502\u2502\u2590\u25cf\u258cAmanda\u2502 \u2502\u2590\u25cf\u258cDune\u00a01984\u2502\u2502\u2590\u25cf\u258cConnor\u00a0MacLeod\u2502 \u2502\u2590\u25cf\u258cDune\u00a02021\u2502\u2502\u2590\u25cf\u258cDuncan\u00a0MacLeod\u2502 \u2502\u2590\u25cf\u258cSerenity\u2502\u2502\u2590\u25cf\u258cHeather\u00a0MacLeod\u2502 \u2502\u2590\u25cf\u258cStar\u00a0Trek:\u00a0The\u00a0Motion\u00a0Picture\u2502\u2502\u2590\u25cf\u258cJoe\u00a0Dawson\u2502 \u2502\u2590\u25cf\u258cStar\u00a0Wars:\u00a0A\u00a0New\u00a0Hope\u2502\u2502\u2590\u25cf\u258cKurgan,\u00a0The\u2502 \u2502\u2590\u25cf\u258cThe\u00a0Last\u00a0Starfighter\u2502\u2502\u2590\u25cf\u258cMethos\u2502 \u2502\u2590\u25cf\u258cTotal\u00a0Recall\u00a0\ud83d\udc49\u00a0\ud83d\udd34\u2502\u2502\u2590\u25cf\u258cRachel\u00a0Ellenstein\u2502 \u2502\u2590\u25cf\u258cWing\u00a0Commander\u2502\u2502\u2590\u25cf\u258cRam\u00edrez\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Horizontal\nfrom textual.widgets import RadioButton, RadioSet\nclass RadioChoicesApp(App[None]):\nCSS_PATH = \"radio_set.css\"\ndef compose(self) -&gt; ComposeResult:\nwith Horizontal():\n# A RadioSet built up from RadioButtons.\nwith RadioSet():\nyield RadioButton(\"Battlestar Galactica\")\nyield RadioButton(\"Dune 1984\")\nyield RadioButton(\"Dune 2021\")\nyield RadioButton(\"Serenity\", value=True)\nyield RadioButton(\"Star Trek: The Motion Picture\")\nyield RadioButton(\"Star Wars: A New Hope\")\nyield RadioButton(\"The Last Starfighter\")\nyield RadioButton(\n\"Total Recall :backhand_index_pointing_right: :red_circle:\",\nid=\"focus_me\",\n)\nyield RadioButton(\"Wing Commander\")\n# A RadioSet built up from a collection of strings.\nyield RadioSet(\n\"Amanda\",\n\"Connor MacLeod\",\n\"Duncan MacLeod\",\n\"Heather MacLeod\",\n\"Joe Dawson\",\n\"Kurgan, [bold italic red]The[/]\",\n\"Methos\",\n\"Rachel Ellenstein\",\n\"Ram\u00edrez\",\n)\ndef on_mount(self) -&gt; None:\nself.query_one(\"#focus_me\", RadioButton).focus()\nif __name__ == \"__main__\":\nRadioChoicesApp().run()\n</code></pre> <pre><code>Screen {\nalign: center middle;\n}\nHorizontal {\nalign: center middle;\nheight: auto;\n}\nRadioSet {\nwidth: 45%;\n}\n</code></pre>"},{"location":"widgets/radioset/#messages","title":"Messages","text":""},{"location":"widgets/radioset/#textual.widgets._radio_set.RadioSet.Changed","title":"<code>Changed</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when the pressed button in the set changes.</p> <p>This message can be handled using an <code>on_radio_set_changed</code> method.</p>"},{"location":"widgets/radioset/#textual.widgets._radio_set.RadioSet.Changed.index","title":"<code>index</code>  <code>instance-attribute</code>","text":"<p>The index of the <code>RadioButton</code> that was pressed to make the change.</p>"},{"location":"widgets/radioset/#textual.widgets._radio_set.RadioSet.Changed.pressed","title":"<code>pressed</code>  <code>instance-attribute</code>","text":"<p>The <code>RadioButton</code> that was pressed to make the change.</p>"},{"location":"widgets/radioset/#textual.widgets._radio_set.RadioSet.Changed.radio_set","title":"<code>radio_set</code>  <code>instance-attribute</code>","text":"<p>A reference to the <code>RadioSet</code> that was changed.</p>"},{"location":"widgets/radioset/#textual.widgets._radio_set.RadioSet.Changed.__init__","title":"<code>__init__(radio_set, pressed)</code>","text":"<p>Initialise the message.</p> <p>Parameters:</p> Name Type Description Default <code>pressed</code> <code>RadioButton</code> <p>The radio button that was pressed.</p> required"},{"location":"widgets/radioset/#example_1","title":"Example","text":"<p>Here is an example of using the message to react to changes in a <code>RadioSet</code>:</p> Outputradio_set_changed.pyradio_set_changed.css <p>       @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1652038759-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1652038759-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1652038759-r1 { fill: #e1e1e1 } .terminal-1652038759-r2 { fill: #c5c8c6 } .terminal-1652038759-r3 { fill: #666666 } .terminal-1652038759-r4 { fill: #3d3d3d } .terminal-1652038759-r5 { fill: #1e1e1e;font-weight: bold } .terminal-1652038759-r6 { fill: #515151 } .terminal-1652038759-r7 { fill: #4ebf71;font-weight: bold } .terminal-1652038759-r8 { fill: #e1e1e1;text-decoration: underline; }      RadioSetChangedApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2590\u25cf\u258cBattlestar\u00a0Galactica\u2502 \u2502\u2590\u25cf\u258cDune\u00a01984\u2502 \u2502\u2590\u25cf\u258cDune\u00a02021\u2502 \u2502\u2590\u25cf\u258cSerenity\u2502 \u2502\u2590\u25cf\u258cStar\u00a0Trek:\u00a0The\u00a0Motion\u00a0Picture\u2502 \u2502\u2590\u25cf\u258cStar\u00a0Wars:\u00a0A\u00a0New\u00a0Hope\u2502 \u2502\u2590\u25cf\u258cThe\u00a0Last\u00a0Starfighter\u2502 \u2502\u2590\u25cf\u258cTotal\u00a0Recall\u00a0\ud83d\udc49\u00a0\ud83d\udd34\u2502 \u2502\u2590\u25cf\u258cWing\u00a0Commander\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f Pressed\u00a0button\u00a0label:\u00a0Total\u00a0Recall\u00a0\ud83d\udc49\u00a0\ud83d\udd34 Pressed\u00a0button\u00a0index:\u00a07 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Horizontal, VerticalScroll\nfrom textual.widgets import Label, RadioButton, RadioSet\nclass RadioSetChangedApp(App[None]):\nCSS_PATH = \"radio_set_changed.css\"\ndef compose(self) -&gt; ComposeResult:\nwith VerticalScroll():\nwith Horizontal():\nwith RadioSet():\nyield RadioButton(\"Battlestar Galactica\")\nyield RadioButton(\"Dune 1984\")\nyield RadioButton(\"Dune 2021\")\nyield RadioButton(\"Serenity\", value=True)\nyield RadioButton(\"Star Trek: The Motion Picture\")\nyield RadioButton(\"Star Wars: A New Hope\")\nyield RadioButton(\"The Last Starfighter\")\nyield RadioButton(\n\"Total Recall :backhand_index_pointing_right: :red_circle:\",\nid=\"focus_me\",\n)\nyield RadioButton(\"Wing Commander\")\nwith Horizontal():\nyield Label(id=\"pressed\")\nwith Horizontal():\nyield Label(id=\"index\")\ndef on_mount(self) -&gt; None:\nself.query_one(\"#focus_me\", RadioButton).focus()\ndef on_radio_set_changed(self, event: RadioSet.Changed) -&gt; None:\nself.query_one(\"#pressed\", Label).update(\nf\"Pressed button label: {event.pressed.label}\"\n)\nself.query_one(\"#index\", Label).update(\nf\"Pressed button index: {event.radio_set.pressed_index}\"\n)\nif __name__ == \"__main__\":\nRadioSetChangedApp().run()\n</code></pre> <pre><code>VerticalScroll {\nalign: center middle;\n}\nHorizontal {\nalign: center middle;\nheight: auto;\n}\nRadioSet {\nwidth: 45%;\n}\n</code></pre>"},{"location":"widgets/radioset/#see-also","title":"See Also","text":"<ul> <li>RadioSet code reference</li> <li>RadioButton</li> </ul>"},{"location":"widgets/static/","title":"Static","text":"<p>A widget which displays static content. Can be used for Rich renderables and can also be the base for other types of widgets.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/static/#example","title":"Example","text":"<p>The example below shows how you can use a <code>Static</code> widget as a simple text label (but see Label as a way of displaying text).</p> Outputstatic.py <p> StaticApp Hello,\u00a0world! </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nclass StaticApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"Hello, world!\")\nif __name__ == \"__main__\":\napp = StaticApp()\napp.run()\n</code></pre>"},{"location":"widgets/static/#reactive-attributes","title":"Reactive Attributes","text":"<p>This widget has no reactive attributes.</p>"},{"location":"widgets/static/#messages","title":"Messages","text":"<p>This widget sends no messages.</p>"},{"location":"widgets/static/#see-also","title":"See Also","text":"<ul> <li>Static code reference</li> <li>Label</li> </ul>"},{"location":"widgets/switch/","title":"Switch","text":"<p>A simple switch widget which stores a boolean value.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/switch/#example","title":"Example","text":"<p>The example below shows switches in various states.</p> Outputswitch.pyswitch.css <p> SwitchApp Example\u00a0switches \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e off:\u00a0\u00a0\u00a0\u00a0\u00a0\u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e on:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e focused:\u00a0\u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e custom:\u00a0\u00a0\u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.containers import Horizontal\nfrom textual.widgets import Switch, Static\nclass SwitchApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield Static(\"[b]Example switches\\n\", classes=\"label\")\nyield Horizontal(\nStatic(\"off:     \", classes=\"label\"),\nSwitch(animate=False),\nclasses=\"container\",\n)\nyield Horizontal(\nStatic(\"on:      \", classes=\"label\"),\nSwitch(value=True),\nclasses=\"container\",\n)\nfocused_switch = Switch()\nfocused_switch.focus()\nyield Horizontal(\nStatic(\"focused: \", classes=\"label\"), focused_switch, classes=\"container\"\n)\nyield Horizontal(\nStatic(\"custom:  \", classes=\"label\"),\nSwitch(id=\"custom-design\"),\nclasses=\"container\",\n)\napp = SwitchApp(css_path=\"switch.css\")\nif __name__ == \"__main__\":\napp.run()\n</code></pre> <pre><code>Screen {\nalign: center middle;\n}\n.container {\nheight: auto;\nwidth: auto;\n}\nSwitch {\nheight: auto;\nwidth: auto;\n}\n.label {\nheight: 3;\ncontent-align: center middle;\nwidth: auto;\n}\n#custom-design {\nbackground: darkslategrey;\n}\n#custom-design &gt; .switch--slider {\ncolor: dodgerblue;\nbackground: darkslateblue;\n}\n</code></pre>"},{"location":"widgets/switch/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>value</code> <code>bool</code> <code>False</code> The value of the switch."},{"location":"widgets/switch/#bindings","title":"Bindings","text":"<p>The switch widget defines directly the following bindings:</p> Key(s) Description enter,space Toggle the switch state."},{"location":"widgets/switch/#component-classes","title":"Component Classes","text":"<p>The switch widget provides the following component classes:</p> Class Description <code>switch--slider</code> Targets the slider of the switch."},{"location":"widgets/switch/#messages","title":"Messages","text":""},{"location":"widgets/switch/#textual.widgets._switch.Switch.Changed","title":"<code>Changed</code>","text":"<p>         Bases: <code>Message</code></p> <p>Posted when the status of the switch changes.</p> <p>Can be handled using <code>on_switch_changed</code> in a subclass of <code>Switch</code> or in a parent widget in the DOM.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>bool</code> <p>The value that the switch was changed to.</p> <code>input</code> <code>bool</code> <p>The <code>Switch</code> widget that was changed.</p>"},{"location":"widgets/switch/#textual.widgets._switch.Switch.Changed.control","title":"<code>control: Switch</code>  <code>property</code>","text":"<p>Alias for self.switch.</p>"},{"location":"widgets/switch/#additional-notes","title":"Additional Notes","text":"<ul> <li>To remove the spacing around a <code>Switch</code>, set <code>border: none;</code> and <code>padding: 0;</code>.</li> </ul>"},{"location":"widgets/switch/#see-also","title":"See Also","text":"<ul> <li>Switch code reference</li> </ul>"},{"location":"widgets/tabs/","title":"Tabs","text":"<p>Displays a number of tab headers which may be activated with a click or navigated with cursor keys.</p> <ul> <li> Focusable</li> <li> Container</li> </ul> <p>Construct a <code>Tabs</code> widget with strings or Text objects as positional arguments, which will set the labels in the tabs. Here's an example with three tabs:</p> <pre><code>def compose(self) -&gt; ComposeResult:\nyield Tabs(\"First tab\", \"Second tab\", Text.from_markup(\"[u]Third[/u] tab\"))\n</code></pre> <p>This will create Tab widgets internally, with auto-incrementing <code>id</code> attributes (<code>\"tab-1\"</code>, <code>\"tab-2\"</code> etc). You can also supply <code>Tab</code> objects directly in the constructor, which will allow you to explicitly set an <code>id</code>. Here's an example:</p> <pre><code>def compose(self) -&gt; ComposeResult:\nyield Tabs(\nTab(\"First tab\", id=\"one\"),\nTab(\"Second tab\", id=\"two\"),\n)\n</code></pre> <p>When the user switches to a tab by clicking or pressing keys, then <code>Tabs</code> will send a Tabs.TabActivated message which contains the <code>tab</code> that was activated. You can then use <code>event.tab.id</code> attribute to perform any related actions.</p>"},{"location":"widgets/tabs/#clearing-tabs","title":"Clearing tabs","text":"<p>Clear tabs by calling the clear method. Clearing the tabs will send a Tabs.TabActivated message with the <code>tab</code> attribute set to <code>None</code>.</p>"},{"location":"widgets/tabs/#adding-tabs","title":"Adding tabs","text":"<p>Tabs may be added dynamically with the add_tab method, which accepts strings, Text, or Tab objects.</p>"},{"location":"widgets/tabs/#example","title":"Example","text":"<p>The following example adds a <code>Tabs</code> widget above a text label. Press A to add a tab, C to clear the tabs.</p> Outputtabs.py <p> TabsApp Paul\u00a0AtreidiesDuke\u00a0Leto\u00a0AtreidesLady\u00a0JessicaGurney\u00a0HalleckBaron\u00a0Vl \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u257a\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258aLady\u00a0Jessica\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u00a0A\u00a0\u00a0Add\u00a0tab\u00a0\u00a0R\u00a0\u00a0Remove\u00a0active\u00a0tab\u00a0\u00a0C\u00a0\u00a0Clear\u00a0tabs\u00a0 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Footer, Label, Tabs\nNAMES = [\n\"Paul Atreidies\",\n\"Duke Leto Atreides\",\n\"Lady Jessica\",\n\"Gurney Halleck\",\n\"Baron Vladimir Harkonnen\",\n\"Glossu Rabban\",\n\"Chani\",\n\"Silgar\",\n]\nclass TabsApp(App):\n\"\"\"Demonstrates the Tabs widget.\"\"\"\nCSS = \"\"\"\n    Tabs {\n        dock: top;\n    }\n    Screen {\n        align: center middle;\n    }\n    Label {\n        margin:1 1;\n        width: 100%;\n        height: 100%;\n        background: $panel;\n        border: tall $primary;\n        content-align: center middle;\n    }\n    \"\"\"\nBINDINGS = [\n(\"a\", \"add\", \"Add tab\"),\n(\"r\", \"remove\", \"Remove active tab\"),\n(\"c\", \"clear\", \"Clear tabs\"),\n]\ndef compose(self) -&gt; ComposeResult:\nyield Tabs(NAMES[0])\nyield Label()\nyield Footer()\ndef on_mount(self) -&gt; None:\n\"\"\"Focus the tabs when the app starts.\"\"\"\nself.query_one(Tabs).focus()\ndef on_tabs_tab_activated(self, event: Tabs.TabActivated) -&gt; None:\n\"\"\"Handle TabActivated message sent by Tabs.\"\"\"\nlabel = self.query_one(Label)\nif event.tab is None:\n# When the tabs are cleared, event.tab will be None\nlabel.visible = False\nelse:\nlabel.visible = True\nlabel.update(event.tab.label)\ndef action_add(self) -&gt; None:\n\"\"\"Add a new tab.\"\"\"\ntabs = self.query_one(Tabs)\n# Cycle the names\nNAMES[:] = [*NAMES[1:], NAMES[0]]\ntabs.add_tab(NAMES[0])\ndef action_remove(self) -&gt; None:\n\"\"\"Remove active tab.\"\"\"\ntabs = self.query_one(Tabs)\nactive_tab = tabs.active_tab\nif active_tab is not None:\ntabs.remove_tab(active_tab.id)\ndef action_clear(self) -&gt; None:\n\"\"\"Clear the tabs.\"\"\"\nself.query_one(Tabs).clear()\nif __name__ == \"__main__\":\napp = TabsApp()\napp.run()\n</code></pre>"},{"location":"widgets/tabs/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>active</code> <code>str</code> <code>\"\"</code> The ID of the active tab. Set this attribute to a tab ID to change the active tab."},{"location":"widgets/tabs/#messages","title":"Messages","text":""},{"location":"widgets/tabs/#textual.widgets._tabs.Tabs.TabActivated","title":"<code>TabActivated</code>","text":"<p>         Bases: <code>Message</code></p> <p>Sent when a new tab is activated.</p>"},{"location":"widgets/tabs/#bindings","title":"Bindings","text":"<p>The Tabs widget defines the following bindings:</p> Key(s) Description left Move to the previous tab. right Move to the next tab."},{"location":"widgets/tabs/#see-also","title":"See Also","text":"<ul> <li>Tabs code reference</li> </ul>"},{"location":"widgets/text_log/","title":"TextLog","text":"<p>A TextLog is a widget which displays scrollable content that may be appended to in realtime.</p> <p>Call TextLog.write with a string or Rich Renderable to write content to the end of the TextLog. Call TextLog.clear to clear the content.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/text_log/#example","title":"Example","text":"<p>The example below shows an application showing a <code>TextLog</code> with different kinds of data logged.</p> Outputtext_log.py <p> TextLogApp \u2502\u00a0\u00a0\u00a0\u2502\u00a0\u00a0\u00a0previous_value=next(iter_values) \u2502\u00a0\u00a0\u00a0exceptStopIteration: \u2502\u00a0\u00a0\u00a0\u2502\u00a0\u00a0\u00a0return \u2502\u00a0\u00a0\u00a0first=True\u2585\u2585 \u2502\u00a0\u00a0\u00a0forvalueiniter_values: \u2502\u00a0\u00a0\u00a0\u2502\u00a0\u00a0\u00a0yieldfirst,False,previous_value \u2502\u00a0\u00a0\u00a0\u2502\u00a0\u00a0\u00a0first=False \u2502\u00a0\u00a0\u00a0\u2502\u00a0\u00a0\u00a0previous_value=value \u2502\u00a0\u00a0\u00a0yieldfirst,True,previous_value \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503lane\u2503swimmer\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503country\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503time\u00a0\u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u25024\u00a0\u00a0\u00a0\u2502Joseph\u00a0Schooling\u00a0\u00a0\u00a0\u00a0\u2502Singapore\u00a0\u00a0\u00a0\u00a0\u250250.39\u2502 \u25022\u00a0\u00a0\u00a0\u2502Michael\u00a0Phelps\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502United\u00a0States\u250251.14\u2502 \u25025\u00a0\u00a0\u00a0\u2502Chad\u00a0le\u00a0Clos\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502South\u00a0Africa\u00a0\u250251.14\u2502 \u25026\u00a0\u00a0\u00a0\u2502L\u00e1szl\u00f3\u00a0Cseh\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502Hungary\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u250251.14\u2502 \u25023\u00a0\u00a0\u00a0\u2502Li\u00a0Zhuhao\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502China\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u250251.26\u2502 \u25028\u00a0\u00a0\u00a0\u2502Mehdy\u00a0Metella\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502France\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u250251.58\u2502 \u25027\u00a0\u00a0\u00a0\u2502Tom\u00a0Shields\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2502United\u00a0States\u250251.73\u2502 \u25021\u00a0\u00a0\u00a0\u2502Aleksandr\u00a0Sadovnikov\u2502Russia\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u250251.84\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Write\u00a0text\u00a0or\u00a0any\u00a0Rich\u00a0renderable! Key(key='H',\u00a0character='H',\u00a0name='upper_h',\u00a0is_printable=True) Key(key='i',\u00a0character='i',\u00a0name='i',\u00a0is_printable=True) </p> <pre><code>import csv\nimport io\nfrom rich.table import Table\nfrom rich.syntax import Syntax\nfrom textual.app import App, ComposeResult\nfrom textual import events\nfrom textual.widgets import TextLog\nCSV = \"\"\"lane,swimmer,country,time\n4,Joseph Schooling,Singapore,50.39\n2,Michael Phelps,United States,51.14\n5,Chad le Clos,South Africa,51.14\n6,L\u00e1szl\u00f3 Cseh,Hungary,51.14\n3,Li Zhuhao,China,51.26\n8,Mehdy Metella,France,51.58\n7,Tom Shields,United States,51.73\n1,Aleksandr Sadovnikov,Russia,51.84\"\"\"\nCODE = '''\\\ndef loop_first_last(values: Iterable[T]) -&gt; Iterable[tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\\\n'''\nclass TextLogApp(App):\ndef compose(self) -&gt; ComposeResult:\nyield TextLog(highlight=True, markup=True)\ndef on_ready(self) -&gt; None:\n\"\"\"Called  when the DOM is ready.\"\"\"\ntext_log = self.query_one(TextLog)\ntext_log.write(Syntax(CODE, \"python\", indent_guides=True))\nrows = iter(csv.reader(io.StringIO(CSV)))\ntable = Table(*next(rows))\nfor row in rows:\ntable.add_row(*row)\ntext_log.write(table)\ntext_log.write(\"[bold magenta]Write text or any Rich renderable!\")\ndef on_key(self, event: events.Key) -&gt; None:\n\"\"\"Write Key events to log.\"\"\"\ntext_log = self.query_one(TextLog)\ntext_log.write(event)\nif __name__ == \"__main__\":\napp = TextLogApp()\napp.run()\n</code></pre>"},{"location":"widgets/text_log/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>highlight</code> <code>bool</code> <code>False</code> Automatically highlight content. <code>markup</code> <code>bool</code> <code>False</code> Apply Rich console markup. <code>max_lines</code> <code>int</code> <code>None</code> Maximum number of lines in the log or <code>None</code> for no maximum. <code>min_width</code> <code>int</code> 78 Minimum width of renderables. <code>wrap</code> <code>bool</code> <code>False</code> Enable word wrapping."},{"location":"widgets/text_log/#messages","title":"Messages","text":"<p>This widget sends no messages.</p>"},{"location":"widgets/text_log/#see-also","title":"See Also","text":"<ul> <li>TextLog code reference</li> </ul>"},{"location":"widgets/tree/","title":"Tree","text":"<p>A tree control widget.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>"},{"location":"widgets/tree/#example","title":"Example","text":"<p>The example below creates a simple tree.</p> Outputtree.py <p> TreeApp \u25bc\u00a0Dune \u2514\u2500\u2500\u00a0\u25bc\u00a0Characters \u251c\u2500\u2500\u00a0Paul \u251c\u2500\u2500\u00a0Jessica \u2514\u2500\u2500\u00a0Chani </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Tree\nclass TreeApp(App):\ndef compose(self) -&gt; ComposeResult:\ntree: Tree[dict] = Tree(\"Dune\")\ntree.root.expand()\ncharacters = tree.root.add(\"Characters\", expand=True)\ncharacters.add_leaf(\"Paul\")\ncharacters.add_leaf(\"Jessica\")\ncharacters.add_leaf(\"Chani\")\nyield tree\nif __name__ == \"__main__\":\napp = TreeApp()\napp.run()\n</code></pre> <p>Tree widgets have a \"root\" attribute which is an instance of a TreeNode. Call add() or add_leaf() to add new nodes underneath the root. Both these methods return a TreeNode for the child which you can use to add additional levels.</p>"},{"location":"widgets/tree/#reactive-attributes","title":"Reactive Attributes","text":"Name Type Default Description <code>show_root</code> <code>bool</code> <code>True</code> Show the root node. <code>show_guides</code> <code>bool</code> <code>True</code> Show guide lines between levels. <code>guide_depth</code> <code>int</code> <code>4</code> Amount of indentation between parent and child."},{"location":"widgets/tree/#messages","title":"Messages","text":""},{"location":"widgets/tree/#textual.widgets._tree.Tree.NodeCollapsed","title":"<code>NodeCollapsed</code>","text":"<p>         Bases: <code>Generic[EventTreeDataType]</code>, <code>Message</code></p> <p>Event sent when a node is collapsed.</p> <p>Can be handled using <code>on_tree_node_collapsed</code> in a subclass of <code>Tree</code> or in a parent node in the DOM.</p> <p>Attributes:</p> Name Type Description <code>node</code> <code>TreeNode[EventTreeDataType]</code> <p>The node that was collapsed.</p>"},{"location":"widgets/tree/#textual.widgets._tree.Tree.NodeExpanded","title":"<code>NodeExpanded</code>","text":"<p>         Bases: <code>Generic[EventTreeDataType]</code>, <code>Message</code></p> <p>Event sent when a node is expanded.</p> <p>Can be handled using <code>on_tree_node_expanded</code> in a subclass of <code>Tree</code> or in a parent node in the DOM.</p> <p>Attributes:</p> Name Type Description <code>node</code> <code>TreeNode[EventTreeDataType]</code> <p>The node that was expanded.</p>"},{"location":"widgets/tree/#textual.widgets._tree.Tree.NodeHighlighted","title":"<code>NodeHighlighted</code>","text":"<p>         Bases: <code>Generic[EventTreeDataType]</code>, <code>Message</code></p> <p>Event sent when a node is highlighted.</p> <p>Can be handled using <code>on_tree_node_highlighted</code> in a subclass of <code>Tree</code> or in a parent node in the DOM.</p> <p>Attributes:</p> Name Type Description <code>node</code> <code>TreeNode[EventTreeDataType]</code> <p>The node that was highlighted.</p>"},{"location":"widgets/tree/#textual.widgets._tree.Tree.NodeSelected","title":"<code>NodeSelected</code>","text":"<p>         Bases: <code>Generic[EventTreeDataType]</code>, <code>Message</code></p> <p>Event sent when a node is selected.</p> <p>Can be handled using <code>on_tree_node_selected</code> in a subclass of <code>Tree</code> or in a parent node in the DOM.</p> <p>Attributes:</p> Name Type Description <code>node</code> <code>TreeNode[EventTreeDataType]</code> <p>The node that was selected.</p>"},{"location":"widgets/tree/#bindings","title":"Bindings","text":"<p>The tree widget defines directly the following bindings:</p> Key(s) Description enter Select the current item. space Toggle the expand/collapsed space of the current item. up Move the cursor up. down Move the cursor down."},{"location":"widgets/tree/#component-classes","title":"Component Classes","text":"<p>The tree widget provides the following component classes:</p> Class Description <code>tree--cursor</code> Targets the cursor. <code>tree--guides</code> Targets the indentation guides. <code>tree--guides-hover</code> Targets the indentation guides under the cursor. <code>tree--guides-selected</code> Targets the indentation guides that are selected. <code>tree--highlight</code> Targets the highlighted items. <code>tree--highlight-line</code> Targets the lines under the cursor. <code>tree--label</code> Targets the (text) labels of the items."},{"location":"widgets/tree/#see-also","title":"See Also","text":"<ul> <li>Tree code reference</li> <li>TreeNode code reference</li> </ul>"},{"location":"blog/page/2/","title":"Textual Blog","text":""}]}