{"config":{"indexing":"full","jieba_dict":null,"jieba_dict_user":null,"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>Welcome to the Textual framework documentation. Built with \u2764\ufe0f by Textualize.io</p>  <p>Textual is a framework for building applications that run within your terminal. Text User Interfaces (TUIs) have a number of advantages over web and desktop apps.</p>  <ul> <li> <p>  Rapid development</p>  <p>Uses your existing Python skills to build beautiful user interfaces.</p> </li> <li> <p> Low requirements</p>  <p>Low system requirements. Run Textual on a single board computer if you want to.</p> </li> <li> <p>   Cross platform</p>  <p>Textual runs just about everywhere.</p> </li> <li> <p> Remote</p>  <p>Textual apps can run over SSH.</p> </li> <li> <p> CLI Integration</p>  <p>Textual apps can be launched and run from the command prompt.</p> </li> <li> <p> Open Source, MIT</p>  <p>Textual is licensed under MIT.</p> </li> </ul>   <p>                                                                                                                             CalculatorApp              0      \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594  \u00a0AC\u00a0\u00a0+/-\u00a0\u00a0%\u00a0\u00a0\u00f7\u00a0  \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581  \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a07\u00a0\u00a08\u00a0\u00a09\u00a0\u00a0\u00d7\u00a0  \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581  \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594  \u00a04\u00a0\u00a05\u00a0\u00a06\u00a0\u00a0-\u00a0  \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581  \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594  \u00a01\u00a0\u00a02\u00a0\u00a03\u00a0\u00a0+\u00a0  \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581  \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594  \u00a00\u00a0\u00a0.\u00a0\u00a0=\u00a0  \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581     </p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2077029372-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2077029372-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2077029372-r1 { fill: #c5c8c6 }                                                                                PrideApp                                    </p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-951990602-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-951990602-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-951990602-r1 { fill: #c5c8c6 } .terminal-951990602-r2 { fill: #f6f5f5 } .terminal-951990602-r3 { fill: #e0dedb } .terminal-951990602-r4 { fill: #f3f3f3 } .terminal-951990602-r5 { fill: #e76580 } .terminal-951990602-r6 { fill: #b93c5b;font-weight: bold } .terminal-951990602-r7 { fill: #030905;font-weight: bold } .terminal-951990602-r8 { fill: #780028 } .terminal-951990602-r9 { fill: #7ae998 } .terminal-951990602-r10 { fill: #2f3940 } .terminal-951990602-r11 { fill: #9b9fa1 } .terminal-951990602-r12 { fill: #f3f4f4;font-weight: bold } .terminal-951990602-r13 { fill: #008139 } .terminal-951990602-r14 { fill: #041118 } .terminal-951990602-r15 { fill: #f2f8fc;font-weight: bold } .terminal-951990602-r16 { fill: #f2f8fc }                                                                                StopwatchApp          \u2b58StopwatchApp11:49:09    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Stop\u00a000:00:00.10 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.00\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.00\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0\u00a0A\u00a0\u00a0Add\u00a0\u00a0R\u00a0\u00a0Remove\u00a0    </p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-967547693-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-967547693-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-967547693-r1 { fill: #c5c8c6 } .terminal-967547693-r2 { fill: #f3f4f4 } .terminal-967547693-r3 { fill: #f3f4f4;font-weight: bold } .terminal-967547693-r4 { fill: #f3f4f4;font-style: italic; } .terminal-967547693-r5 { fill: #f3f4f4;font-weight: bold;text-decoration: underline; } .terminal-967547693-r6 { fill: #98729f } .terminal-967547693-r7 { fill: #7ae998 } .terminal-967547693-r8 { fill: #030905;font-weight: bold } .terminal-967547693-r9 { fill: #008139 }                                                                                WelcomeApp           \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Welcome!\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d  Textual\u00a0is\u00a0a\u00a0TUI,\u00a0or\u00a0Text\u00a0User\u00a0Interface,\u00a0framework\u00a0for\u00a0Python\u00a0inspired\u00a0 by\u00a0modern\u00a0web\u00a0development.\u00a0We\u00a0hope\u00a0you\u00a0enjoy\u00a0using\u00a0Textual!   Dune\u00a0quote  \u258c\u00a0\"I\u00a0must\u00a0not\u00a0fear.\u00a0Fear\u00a0is\u00a0the\u00a0mind-killer.\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0 \u258c\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u00a0I\u00a0will\u00a0face\u00a0my\u00a0fear.\u00a0I\u00a0will\u00a0permit\u00a0\u00a0 \u258c\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u00a0And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will \u258c\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u00a0Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0\u00a0\u00a0 \u258c\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0OK\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581     </p>","title":"Welcome"},{"location":"getting_started/","text":"<p>All you need to get started building Textual apps.</p>","title":"Getting started"},{"location":"getting_started/#requirements","text":"<p>Textual requires Python 3.7 or later. Textual runs on Linux, MacOS, Windows and probably any OS where Python also runs.</p>  <p>Your platform</p>","title":"Requirements"},{"location":"getting_started/#linux-all-distros","text":"<p>All Linux distros come with a terminal emulator that can run Textual apps.</p>","title":"Linux (all distros)"},{"location":"getting_started/#macos","text":"<p>The default terminal app is limited to 256 colors. We recommend installing a newer terminal such as iterm2, Kitty, or WezTerm.</p>","title":"MacOS"},{"location":"getting_started/#windows","text":"<p>The new Windows Terminal runs Textual apps beautifully.</p>","title":"Windows"},{"location":"getting_started/#installation","text":"<p>You can install Textual via PyPI.</p> <p>If you plan on developing Textual apps, then you should install <code>textual[dev]</code>. The <code>[dev]</code> part installs a few extra dependencies for development.</p> <pre><code>pip install textual[dev]\n</code></pre> <p>If you only plan on running Textual apps, then you can drop the <code>[dev]</code> part:</p> <pre><code>pip install textual\n</code></pre>","title":"Installation"},{"location":"getting_started/#textual-cli","text":"<p>If you installed the dev dependencies you have have access to the <code>textual</code> CLI command. There are a number of sub-commands which will aid you in building Textual apps.</p> <pre><code>textual --help\n</code></pre> <p>See devtools for more about the <code>textual</code> command.</p>","title":"Textual CLI"},{"location":"tutorial/","text":"<p>Welcome to the Textual Tutorial!</p> <p>By the end of this page you should have a solid understanding of app development with Textual. </p>  <p>Quote</p> <p>I've always thought the secret sauce in making a popular framework is for it to be fun.</p> <p>\u2014 Will McGugan (creator of Rich and Textual)</p>","title":"Tutorial"},{"location":"tutorial/#stopwatch-application","text":"<p>We're going to build a stopwatch application. This application should show a list of stopwatches with buttons to start, stop, and reset the stopwatches. We also want the user to be able to add and remove stopwatches as required.</p> <p>This will be a simple yet fully featured app \u2014 you could distribute this app if you wanted to!</p> <p>Here's what the finished app will look like:</p> <p>                                                                             StopwatchApp          \u2b58StopwatchApp11:49:10    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.38\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Stop\u00a000:00:00.38 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Stop\u00a000:00:00.22 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0\u00a0A\u00a0\u00a0Add\u00a0\u00a0R\u00a0\u00a0Remove\u00a0    </p>","title":"Stopwatch Application"},{"location":"tutorial/#get-the-code","text":"<p>If you want to try the finished Stopwatch app and follow along with the code, first make sure you have Textual installed then check out the Textual repository:</p> HTTPSSSHGitHub CLI   <pre><code>git clone https://github.com/Textualize/textual.git\n</code></pre>   <pre><code>git clone git@github.com:Textualize/textual.git\n</code></pre>   <pre><code>gh repo clone Textualize/textual\n</code></pre>    <p>With the repository cloned, navigate to <code>docs/examples/tutorial</code> and run <code>stopwatch.py</code>.</p> <pre><code>cd textual/docs/examples/tutorial\npython stopwatch.py\n</code></pre>","title":"Get the code"},{"location":"tutorial/#type-hints-in-brief","text":"<p>Tip</p> <p>Type hints are entirely optional in Textual. We've included them in the example code but it's up to you whether you add them to your own projects.</p>  <p>We're a big fan of Python type hints at Textualize. If you haven't encountered type hinting, it's a way to express the types of your data, parameters, and return values. Type hinting allows tools like Mypy to catch bugs before your code runs.</p> <p>The following function contains type hints:</p> <pre><code>def repeat(text: str, count: int) -&gt; str:\n    \"\"\"Repeat a string a given number of times.\"\"\"\n    return text * count\n</code></pre> <p>Parameter types follow a colon. So <code>text: str</code> indicates that <code>text</code> requires a string and <code>count: int</code> means that <code>count</code> requires an integer.</p> <p>Return types follow <code>-&gt;</code>. So <code>-&gt; str:</code> indicates this method returns a string.</p>","title":"Type hints (in brief)"},{"location":"tutorial/#the-app-class","text":"<p>The first step in building a Textual app is to import and extend the <code>App</code> class. Here's our basic app class with a few methods we will cover below.</p> stopwatch01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Header, Footer\n\n\nclass StopwatchApp(App):\n    \"\"\"A Textual app to manage stopwatches.\"\"\"\n\n    BINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        yield Header()\n        yield Footer()\n\n    def action_toggle_dark(self) -&gt; None:\n        \"\"\"An action to toggle dark mode.\"\"\"\n        self.dark = not self.dark\n\n\napp = StopwatchApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>If you run this code, you should see something like the following:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-764215259-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-764215259-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-764215259-r1 { fill: #c5c8c6 } .terminal-764215259-r2 { fill: #f6f5f5 } .terminal-764215259-r3 { fill: #e0dedb } .terminal-764215259-r4 { fill: #f3f3f3 } .terminal-764215259-r5 { fill: #f2f8fc;font-weight: bold } .terminal-764215259-r6 { fill: #f2f8fc }                                                                                StopwatchApp          \u2b58StopwatchApp11:49:10                      \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0    </p> <p>Hit the D key to toggle between light and dark mode.</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-690225211-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-690225211-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-690225211-r1 { fill: #c5c8c6 } .terminal-690225211-r2 { fill: #0c0802 } .terminal-690225211-r3 { fill: #30230c } .terminal-690225211-r4 { fill: #0b0b0b } .terminal-690225211-r5 { fill: #f2f8fc;font-weight: bold } .terminal-690225211-r6 { fill: #f2f8fc }                                                                                TimerApp\u00a0+\u00a0dark          \u2b58StopwatchApp11:49:10                      \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0    </p> <p>Hit Ctrl+C to exit the app and return to the command prompt.</p>","title":"The App class"},{"location":"tutorial/#a-closer-look-at-the-app-class","text":"<p>Let's examine stopwatch01.py in more detail.</p> stopwatch01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Header, Footer\n\n\nclass StopwatchApp(App):\n    \"\"\"A Textual app to manage stopwatches.\"\"\"\n\n    BINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        yield Header()\n        yield Footer()\n\n    def action_toggle_dark(self) -&gt; None:\n        \"\"\"An action to toggle dark mode.\"\"\"\n        self.dark = not self.dark\n\n\napp = StopwatchApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>The first line imports the Textual <code>App</code> class. The second line imports two builtin widgets: <code>Footer</code> which shows available keys and <code>Header</code> which shows a title and the current time. Widgets are re-usable components responsible for managing a part of the screen. We will cover how to build such widgets in this tutorial.</p> <p>The following lines define the app itself:</p> stopwatch01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Header, Footer\n\n\nclass StopwatchApp(App):\n    \"\"\"A Textual app to manage stopwatches.\"\"\"\n\n    BINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        yield Header()\n        yield Footer()\n\n    def action_toggle_dark(self) -&gt; None:\n        \"\"\"An action to toggle dark mode.\"\"\"\n        self.dark = not self.dark\n\n\napp = StopwatchApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>The App class is where most of the logic of Textual apps is written. It is responsible for loading configuration, setting up widgets, handling keys, and more.</p> <p>Here's what the above app defines:</p> <ul> <li> <p><code>BINDINGS</code> is a list of tuples that maps (or binds) keys to actions in your app. The first value in the tuple is the key; the second value is the name of the action; the final value is a short description. The name of the action (<code>\"toggle_dark\"</code>) is mapped on to the <code>\"action_toggle_dark\"</code> method (see below) which is called when you hit the D key.</p> </li> <li> <p><code>compose()</code> is where we construct a user interface with widgets. The <code>compose()</code> method may return a list of widgets, but it is generally easier to yield them (making this method a generator). In the example code we yield instances of the widget classes we imported, i.e. the header and the footer.</p> </li> <li> <p><code>action_toggle_dark()</code> defines an action method. Actions are methods beginning with <code>action_</code> followed by the name of the action. The <code>BINDINGS</code> list above tells Textual to run this action when the user hits the D key.</p> </li> </ul> stopwatch01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Header, Footer\n\n\nclass StopwatchApp(App):\n    \"\"\"A Textual app to manage stopwatches.\"\"\"\n\n    BINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        yield Header()\n        yield Footer()\n\n    def action_toggle_dark(self) -&gt; None:\n        \"\"\"An action to toggle dark mode.\"\"\"\n        self.dark = not self.dark\n\n\napp = StopwatchApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>The final three lines create an instance of the app and call run() method within a <code>__name__ == \"__main__\"</code> block. This is so we can call <code>python stopwatch01.py</code> to run the app, or we could import <code>stopwatch01</code> as part of a larger application.</p> <p>It's the run method that puts the terminal in to application mode so that Textual can take over updating the terminal and handling keyboard and mouse input.</p>","title":"A closer look at the App class"},{"location":"tutorial/#designing-a-ui-with-widgets","text":"<p>The header and footer are builtin widgets. For our Stopwatch application we will need to build custom widgets.</p> <p>Let's sketch out a design for our app:</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nNVcXGlP40pcdTAwMTb93r9cdTAwMDIxX2akxq/2paXRqFx1MDAwM4R9XHUwMDBiW8PMXHUwMDEzMrFDXGbxguNA4Kn/+5SddOwktuM4S/tFLVx1MDAxYVxcjuu66tx77lJVf33Z2NhcZj48c/PbxqbZb+pcdTAwMWTL8PX3za/h9TfT71quo5pQ9HfX7fnN6M52XHUwMDEweN1vf/xh6/6LXHUwMDE5eFx1MDAxZL1pam9Wt6d3ukHPsFxcrenaf1iBaXf/XHUwMDEz/jzVbfPfnmtcdTAwMWKBr8WdbJmGXHUwMDE1uP6gL7Nj2qZcdTAwMTN01dP/q/7e2Pgr+pmQzjebge48dczoXHUwMDBiUVMsIFx1MDAwNmzy6qnrRMJcbi5cdTAwMDWFXGaR0VxyVndHdVx1MDAxN5iGam0pkc24Jby0+aizxo/G/VPr6uX83Hu/ueqSPo97bVmdzmXw0Ymk6rrqZeK2buC7L+atZVx1MDAwNG3VXG4nrmd9y3d7T23H7HbHvuN6etNcbj7Ca1x1MDAwMIyuXHUwMDBlhuDbRnylXHUwMDFmTlx1MDAxMCdcdTAwMWFkXHUwMDAwUoboqCH8KpJcXCOEYpi4Plx1MDAxMGbb7ajBV8L8XHUwMDAzRJ9YnEe9+fKkZHKM+Fx1MDAxZVx1MDAwMpqAJlx1MDAwNuF9+IqqQ1xyy4lcdTAwMGXapvXUXHUwMDBlXHUwMDA2gmtcdTAwMWNcbp7o24yGXHUwMDFkXCLEOUFcYqNRS9ijd2BEXGL4c3Lg2rrvXHJcdTAwMDdos1x1MDAxYv6RkDZcdTAwMTR0d1x1MDAxMj5JXGIlpvag2/C2m5+HRzdcdTAwMTf1t7uL8114vnc4etZcdTAwMTjedN933zdHLT+Hv8Wi9TxDXHUwMDFmgFxiMlx1MDAwNiRcdTAwMTaSXHUwMDEwgmNcdTAwMWN2LOdFNTq9Tie+5jZfYtxFV39+LYF3gmBcdTAwMTbeJVx1MDAxNYJQSorj3XrEnty37P7JsSlcdTAwMWT97NV7/VGvON5cdTAwMDXRXHUwMDA0wXxcdTAwMWPsXHUwMDE4YlxyYyqT18uAvaVTRNE02JWGTWOcsSlwc8FcdTAwMDRUUCDrXHUwMDAy9y/MXHUwMDA0Zj9cdTAwMThH82CG67KPb+3+/bFcclx1MDAwZnZunFx1MDAwN3v/sL01XHUwMDE3tlx1MDAxOVx1MDAwNVxigWVhe0zOYmZcdTAwMWMqXHUwMDExXHUwMDE4R1x1MDAxY4nCuE5/63RcXLf1Zrvnm1VAtkxDNlZ4X1x1MDAxY9mBrztdT/dcdTAwMTWaUtBNU9CN8LTpJlAqky9WgO5lXHUwMDAyMJ5n11x0Lq3PcKhcdTAwMTNcdTAwMGZcYq/WddvqfIxNVYRMJell4CZcdTAwMDXVu6bqMcIhXHUwMDFmu/d7x3pcbpG72VTvYPpjoFx1MDAwZSzl6oxusC3DSFx1MDAxYfOmXHUwMDEyQFfP9Fx1MDAwZopcdTAwMThh17eeLEfvXFwl5SvPXHUwMDFmjMlM/lAug0SCo8J65lx1MDAxY2/3t06R6Fx1MDAxY8BG42brXHUwMDAzXFw1/I9q81x1MDAwN2NEXHUwMDAzWIJJd4lgpPRcZoGF/aWmaVx1MDAxMEMvSiFiSskgR8q1XHUwMDEyZG1cdTAwMTQymMpeXHUwMDFmn+zsideL9zuj9tK6sE9/bDfS/aNIU2Jcbvma/thZzJTeYXFmXHUwMDEyWPmXWMaTtVwiZqJcdOM4yUycXHUwMDAzyVxiT8zsLI3JXHUwMDFm5ooyk7JcdTAwMTnpOkOp8rpcdTAwMTbXmaWQXHUwMDEzXHUwMDA3XGIoXHUwMDFkS7jhqyenXHUwMDEyXHUwMDE4XFyMnFx1MDAxYWbXXGbWyk4zTPwkO1xyXHUwMDA0LE9PMGFcdTAwMTEntI1wXGKQXHUwMDE0rHh4c/zs9smja183ru5Ojp73jWtcdTAwMTI0q01PhCtVo2Lc34v8QMQ1oMhhPKYuXHUwMDEz4kSfND3DXHUwMDFhnExcdTAwMTiMXHUwMDE0XHUwMDBlU02OO6dDveMq5FRcdTAwMTaArkDtyvHKx0n/ljx8Xlx1MDAwN96xW/NZv+18st1cbkY8kmRcdTAwMDFcdTAwMWQyjpVZ4ax4wJP+0lx1MDAxNadcdTAwMTVcdTAwMTVIZGBd+WJ0knCWzitcdTAwMDRPwzyFV6hcdTAwMDQq5GGr8MeqXHUwMDEz9Fx1MDAwMPAt/Mc1XHUwMDA018ouMyz0JLskxSzPMVhmptCgQFxicVxuOSusende//LkZGf39uiqVoeg3Ttv+8e/k2RwkZQxXHUwMDA1krOpnDGBQmOccrGqIIgypnHO8Vx1MDAxOJOMJY1cdTAwMDVcdTAwMWRPZY/CXCJcdTAwMDRcdTAwMTX/XHUwMDEwsVYtXHUwMDE0XHUwMDEwYonm0MLyoKRcdTAwMTRngpJcdTAwMTPJkVx1MDAwNKQ4XHUwMDFmyGOhO/unXHKf1M97bbttXl1cdTAwMWZUvZAhqFx1MDAwNlx1MDAwNaWEXHQ+XHUwMDE5mlx1MDAxM00uI7ubVcoomt1ccrP8gvLEq6wlNP++3Xpr2O32XHUwMDE2Mz6fejY4erg74uOuz3JD8/RcdTAwMGWr50IpK5KlM0x5XHUwMDBmXHUwMDAwwDlcXKj8Ua6oXHUwMDBipaxCltJQppElKM1yYnMsXHUwMDAwXHUwMDEwfFx1MDAxNTW/6vhQl4Hurzc2n2HlpzPHoYBcdTAwMGL4TSiborCQiOE5XHUwMDEyYW7t5NW8QPzItnuNeqv/dnyB33+vuvFcIsE5XHUwMDAxqZkwXCKVT1xuVqxspVx1MDAwMnRKwuhFrrve/iDfL8+O/Ju9k7bVMPZcdTAwMGZcdTAwMDS+P2uvkrTSO6xcdTAwMWVpIZpZgFGBP8CcUFA8xZU/zFx1MDAxNVUjXHUwMDE192eoXHUwMDExpVx1MDAxYV9xOrlY2C9cdFx1MDAxMpJSuM5s8lx1MDAxMIFwXHUwMDBlXHUwMDA0LsZYw3BcdTAwMWFo41x1MDAwM7py3pph+zOi/kjM8uyFWKazKFx1MDAxOEZcdTAwMDBcdTAwMTFQ3Fl8RkivfaKzXHUwMDFh3vGI34JXd82b/d9cdTAwMTlfkdlBP9Mog1x1MDAxNOGpJVx1MDAwNsroaVx1MDAwYkf8Lf1cdTAwMTFcdTAwMDCaXHUwMDE28XNccipdXHUwMDFh0/WR4il9R1igsPeoXHUwMDBmOKmHXGJcdTAwMTBlXHUwMDEwMV1fOXRcdTAwMTbP6PpcdTAwMTXbu7o/OFx1MDAwMSe39nZw+eRcdTAwMWScXs63WkxIXHRji7NcIp6BIDvBLJByJOZYXHUwMDE3mf7O6XBv+m63u9XWg2b794NewEzQh1x1MDAwZVx1MDAxM4aMrDTJTCmfXHUwMDA2fUqAxCRcdTAwMDJUKcl6k8xzXHUwMDAzcTG62Td1I0lcdTAwMWJrYJpcdTAwMTl2epJphlx1MDAxMpYnXHUwMDE5XG4zSVx1MDAwNlwiyKOca2Gtc+y3k8tcdTAwMTf48Irk+71OwFx1MDAxYjx9LpVZRkvSNzpb34CGXGKcjIRcIq9cdTAwMTAqfWNkXCJEKUE0XGKJR5OlXHUwMDExXHKZVjWcsohcciNcdTAwMTLSUWVcYuU2QPrdzsOWj/pta5/dP+3hXHUwMDA3ez5CkYrd4/dZVeDCM0vzkGEogUCgePyf/ta/nVJcbkCcZkJcXPlRy4D4XGZGSYF5SvxcdTAwMTKuhyFcdTAwMDCtmVDmXHUwMDA14mKEUnfdYM2EMsMmT1x1MDAxMspQwkVcYiUn56ZAiOZSujP60NxvdY1cdTAwMWYt1Kyf39qn/aB5U/FaJdOYXHUwMDEwJKVYSTHXplLf1ShWXCLMJcOYraBamc4xw1x1MDAxMsZcdTAwMWU7O3uxrf7lNjk6291BXHUwMDFl+Vx1MDAxMOk5t1x1MDAxMntcXFx1MDAxMGF8PbVQxrM3XHUwMDAzIE64ilx1MDAwN+fINNvPp/a2d3x0dF4zOvt35lPt8sWpei2Ua5hcdTAwMTE0UYn/XHUwMDE42H9ccirVXzhgX7RcdTAwMTgqiFRTQcSai6E7XHI9eDyy2s9cdTAwMTdcdTAwMTf711x1MDAwZl3y2q5jP1x1MDAxZOPF8soreuwsry+9w3lcdTAwMTRS4DCHumqvj+akq7lcdTAwMDBcdTAwMTBcdFx1MDAwNouHNPnDXFzZXCIrytRGTjW2XHUwMDA0bVxcSpVcdTAwMTVcYkokoGtdXHUwMDAxXVx1MDAwMoaL+Xzrr7LO4I9lV1lcdMkmP4wogpTC4jt0asfXzkO7Z+yC163vV/XWNdjln5WvXHUwMDBmQY1yXHRTNjVTJrRVr1x1MDAwYi1XZoWIXHUwMDAxiClfRVxuL4+4LpqH6PFwz3Vfnlxm9/Ni79Opi93F+XDpj53Fh+lcdTAwMWRWj1x1MDAwZrHIXFw8ijBcdTAwMDVcXMGmeFx1MDAxOSl/lKuqnSxTOznRhFgxXHUwMDE5XHUwMDE2q98qXHUwMDE2RGqq1rxVdc1cXPi76rczSKV0/TYz84hpls5cdTAwMTGBJZtrb3jt7HnLe39/dPmLrd95dYs9YiND59aSVZ/tgEpGNSogSFnmR2G4LUjmXHUwMDFm84FcdNZJ2W2rXHUwMDAwpejbXHUwMDE0/SGiXGaCSM5D1TNcdTAwMWW59Cdr37dcdTAwMGbPXHUwMDFmxPfDmjh8faa017r/sbRMXG6lXHUwMDAwr6/sXHUwMDE2blx1MDAxOH9cdTAwMWbPnSdthFx1MDAxOPvCyFx1MDAwNHTMVpBjIcY2yY+bh7FcdTAwMTdJ270+XHUwMDEwJtdcdTAwMTJcZlx1MDAwNjWNfrOPP1FcdTAwMDAkmPB5zvvJn+Zq2lx1MDAwMlxuNFxmXHUwMDA1Y1x1MDAwMmMsMJw0XHUwMDA3QoOYhVx1MDAwYiZouFtyNTaBizBcdTAwMDWFZbhcdTAwMWSR8OSBXHUwMDAx8cJcdTAwMGWoQYSEomGGpVx1MDAwMvykvVAuNCfhSq/57UUkZNn6hGCiVH2iXHUwMDFiRnU1yzEs50k1xibj1/lVXHUwMDA3XHUwMDA1yCXS1WYvlHJcdTAwMGJoTKrRXHUwMDEzMFxc8IeT5yGFY6F7USSiodCLYThcdTAwMWNGQeTwhpHp2jRcdTAwMWQjlmn8NfRusO3atlx1MDAxNahcdTAwMDE4dy0nmLwjeqPvoZ61TX1Kb9WTk22TXG7phU9cdTAwMWO3zvFvXHUwMDFiMWSjP0a///k19e6tTDxFrZNQilx1MDAxZvcl+f/cplx1MDAwNKHszJZEUir9wsUzW/lMVFFTwjV1V9pcdTAwMGVMisP1zFxmQ45BaFNXYkaksmScyF9cdTAwMWaeslSGKFx0XHUwMDE5XHUwMDAyXHUwMDEw8TCyXHUwMDAyaOq4XGbVICVgskTOa1x1MDAxMTtCldqW8vOXbUeApiw9UapcdTAwMDEg41xckZ9I3DQwI0IjXHUwMDAyRJ5jvv3IkiW/aDgmXHUwMDBilzzccqIgxaREdFpcdTAwMTaENUSHO1x1MDAwZqek+VvZrEzwhp8p2M5pszKTXHUwMDBmXHS+nNzwhChnhOHiqcGjz7u911Zw8456jkktv9WA9duKWywsNJZusZQnpFx0wfLPR1gsXHUwMDEwimWO3ZxYvtFSPlx1MDAwZVx1MDAxMFwiZM1lsVx1MDAwNVx1MDAwMpbcQGhVXHUwMDAx1mqPY1x1MDAxNJSBeUrVS1xusP7n/DOyUKbxr9RYK5G6mi9cdTAwMWazcLSVlKyct4SzXHUwMDE3okjCwpNw5ti1kj/7XHUwMDE1NT1UxV2/llx1MDAxMidXqlx1MDAwZk6skJpiWIakcth5cqf2Mk1cdTAwMTBcdTAwMTOaXHUwMDE4nLhcdTAwMWFcdTAwMTGPiD2QODOjUVxuOFx1MDAwZuXkTFwiknagXHUwMDA1XHUwMDA2UGBaJlVT5dArn87G3Fx1MDAxNFxiiVQ2XHUwMDFhcCYoJ3FcYj1yU5SXMtixkO8x/X0jrkwkhZ9pXGbN6b7k1jd5zuJcdTAwMWWoaF1IJIpnc9+E3fQ+3G6999yRXHUwMDA3dv2cg+1SlmSdp6lRXHJcdTAwMDCkQszpbC5ccjclrGg5W9FcdTAwMDNcYjFV1mE1S0fzPILT21OvfaVcdTAwMDb70rm+wVcnwdbxoZ3uXHUwMDExzFPIXFz6Y2dcdTAwMTUy0zss7r4oJlxy/cd5dlx1MDAwMeYqY1YskdyJMJX+4FhKguY4ai1/mCu6sEe56pmayFXYXFyBo1x1MDAxM1x1MDAxMMRcZofnXHUwMDExrfPgm1x1MDAxMlx1MDAxMFxczINe/7GGM3gj71jDL0Pl3dQ97zJQ4zZyStTUWMbw5eOx2nyzzPda9kl8X4a6XHUwMDFiKolcdTAwMTlOzF8/v/z8P1xiXCJcdTAwMWT6In0=         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Cascadia.woff2\");       }       StopReset00:00:07.21Start00:00:00.00HeaderFooterStart00:00:00.00StopwatchStopwatch(started)Reset  <p>We will need to build a <code>Stopwatch</code> widget composed of the following child widgets:</p> <ul> <li>A \"Start\" button</li> <li>A \"Stop\" button</li> <li>A \"Reset\" button</li> <li>A time display</li> </ul> <p>Textual has a builtin <code>Button</code> widget which takes care of the first three components. All we need to build is the time display widget which will show the elapsed time and the stopwatch widget itself.</p> <p>Let's add those to the app. Just a skeleton for now, we will add the rest of the features as we go.</p> stopwatch02.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.layout import Container\nfrom textual.widgets import Button, Header, Footer, Static\n\n\nclass TimeDisplay(Static):\n    \"\"\"A widget to display elapsed time.\"\"\"\n\n\nclass Stopwatch(Static):\n    \"\"\"A stopwatch widget.\"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets of a stopwatch.\"\"\"\n        yield Button(\"Start\", id=\"start\", variant=\"success\")\n        yield Button(\"Stop\", id=\"stop\", variant=\"error\")\n        yield Button(\"Reset\", id=\"reset\")\n        yield TimeDisplay(\"00:00:00.00\")\n\n\nclass StopwatchApp(App):\n    \"\"\"A Textual app to manage stopwatches.\"\"\"\n\n    BINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        yield Header()\n        yield Footer()\n        yield Container(Stopwatch(), Stopwatch(), Stopwatch())\n\n    def action_toggle_dark(self) -&gt; None:\n        \"\"\"An action to toggle dark mode.\"\"\"\n        self.dark = not self.dark\n\n\napp = StopwatchApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>","title":"Designing a UI with widgets"},{"location":"tutorial/#extending-widget-classes","text":"<p>We've imported two new widgets in this code: <code>Button</code>, which creates a clickable button, and <code>Static</code> which is a base class for a simple control. We've also imported <code>Container</code> from <code>textual.layout</code>. As the name suggests, <code>Container</code> is a Widget which contains other widgets. We will use this container to create a scrolling list of stopwatches.</p> <p>We're extending Static as a foundation for our <code>TimeDisplay</code> widget. There are no methods on this class yet. </p> <p>The Stopwatch class extends Static to define a new widget. This class has a <code>compose()</code> method which yields its child widgets, consisting of three <code>Button</code> objects and a single <code>TimeDisplay</code>. These are all we need to build a stopwatch as in the sketch.</p> <p>The Button constructor takes a label to be displayed in the button (\"Start\", \"Stop\", or \"Reset\"). Additionally some of the buttons set the following parameters:</p> <ul> <li><code>id</code> is an identifier we can use to tell the buttons apart in code and apply styles. More on that later.</li> <li><code>variant</code> is a string which selects a default style. The \"success\" variant makes the button green, and the \"error\" variant makes it red. </li> </ul>","title":"Extending widget classes"},{"location":"tutorial/#composing-the-widgets","text":"<p>To add widgets to our application we first need to yield them from the app's <code>compose()</code> method:</p> <p>The new line in <code>Stopwatch.compose()</code> yields a single <code>Container</code> object which will create a scrolling list of stopwatches. When classes contain other widgets (like <code>Container</code>) they will typically accept their child widgets as positional arguments. We want to start the app with three stopwatches, so we construct three <code>Stopwatch</code> instances and pass them to the container's constructor.</p>","title":"Composing the widgets"},{"location":"tutorial/#the-unstyled-app","text":"<p>Let's see what happens when we run \"stopwatch02.py\".</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1424127869-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1424127869-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1424127869-r1 { fill: #c5c8c6 } .terminal-1424127869-r2 { fill: #f6f5f5 } .terminal-1424127869-r3 { fill: #e0dedb } .terminal-1424127869-r4 { fill: #7ae998 } .terminal-1424127869-r5 { fill: #f3f3f3 } .terminal-1424127869-r6 { fill: #030905;font-weight: bold } .terminal-1424127869-r7 { fill: #008139 } .terminal-1424127869-r8 { fill: #e76580 } .terminal-1424127869-r9 { fill: #fbf5f6;font-weight: bold } .terminal-1424127869-r10 { fill: #780028 } .terminal-1424127869-r11 { fill: #2f3940 } .terminal-1424127869-r12 { fill: #f3f4f4;font-weight: bold } .terminal-1424127869-r13 { fill: #041118 } .terminal-1424127869-r14 { fill: #172127 } .terminal-1424127869-r15 { fill: #f2f8fc;font-weight: bold } .terminal-1424127869-r16 { fill: #f2f8fc }                                                                                stopwatch02.py          \u2b58StopwatchApp11:49:10  \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Stop\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 00:00:00.00 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2585\u2585 \u00a0Stop\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 00:00:00.00 \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0    </p> <p>The elements of the stopwatch application are there. The buttons are clickable and you can scroll the container but it doesn't look like the sketch. This is because we have yet to apply any styles to our new widgets.</p>","title":"The unstyled app"},{"location":"tutorial/#writing-textual-css","text":"<p>Every widget has a <code>styles</code> object with a number of attributes that impact how the widget will appear. Here's how you might set white text and a blue background for a widget:</p> <pre><code>self.styles.background = \"blue\"\nself.styles.color = \"white\"\n</code></pre>  <p>Info</p> <p>Don't worry if you have never worked with CSS before. The dialect of CSS we use is greatly simplified over web based CSS and easy to learn!</p>  <p>While it's possible to set all styles for an app this way, it is rarely necessary. Textual has support for CSS (Cascading Style Sheets), a technology used by web browsers. CSS files are data files loaded by your app which contain information about styles to apply to your widgets. </p> <p>Let's add a CSS file to our application.</p> stopwatch03.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.layout import Container\nfrom textual.widgets import Button, Header, Footer, Static\n\n\nclass TimeDisplay(Static):\n    \"\"\"A widget to display elapsed time.\"\"\"\n\n\nclass Stopwatch(Static):\n    \"\"\"A stopwatch widget.\"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets of a stopwatch.\"\"\"\n        yield Button(\"Start\", id=\"start\", variant=\"success\")\n        yield Button(\"Stop\", id=\"stop\", variant=\"error\")\n        yield Button(\"Reset\", id=\"reset\")\n        yield TimeDisplay(\"00:00:00.00\")\n\n\nclass StopwatchApp(App):\n    \"\"\"A Textual app to manage stopwatches.\"\"\"\n\n    BINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        yield Header()\n        yield Footer()\n        yield Container(Stopwatch(), Stopwatch(), Stopwatch())\n\n    def action_toggle_dark(self) -&gt; None:\n        \"\"\"An action to toggle dark mode.\"\"\"\n        self.dark = not self.dark\n\n\napp = StopwatchApp(css_path=\"stopwatch03.css\")\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Adding the <code>css_path</code> attribute to the app constructor tells Textual to load the following file when it starts the app:</p> stopwatch03.css<pre><code>Stopwatch {\n    layout: horizontal;\n    background: $panel-darken-1;\n    height: 5;\n    padding: 1;\n    margin: 1;\n}\n\nTimeDisplay {\n    content-align: center middle;\n    text-opacity: 60%;\n    height: 3;\n}\n\nButton {\n    width: 16;\n}\n\n#start {\n    dock: left;\n}\n\n#stop {\n    dock: left;\n    display: none;\n}\n\n#reset {\n    dock: right;\n}\n</code></pre> <p>If we run the app now, it will look very different.</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3948967180-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3948967180-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3948967180-r1 { fill: #c5c8c6 } .terminal-3948967180-r2 { fill: #f6f5f5 } .terminal-3948967180-r3 { fill: #e0dedb } .terminal-3948967180-r4 { fill: #f3f3f3 } .terminal-3948967180-r5 { fill: #7ae998 } .terminal-3948967180-r6 { fill: #2f3940 } .terminal-3948967180-r7 { fill: #030905;font-weight: bold } .terminal-3948967180-r8 { fill: #9b9fa1 } .terminal-3948967180-r9 { fill: #f3f4f4;font-weight: bold } .terminal-3948967180-r10 { fill: #008139 } .terminal-3948967180-r11 { fill: #041118 } .terminal-3948967180-r12 { fill: #f2f8fc;font-weight: bold } .terminal-3948967180-r13 { fill: #f2f8fc }                                                                                stopwatch03.py          \u2b58StopwatchApp11:49:11    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.00\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.00\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.00\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0    </p> <p>This app looks much more like our sketch. Textual has read style information from <code>stopwatch03.css</code> and applied it to the widgets. </p>","title":"Writing Textual CSS"},{"location":"tutorial/#css-basics","text":"<p>CSS files contain a number of declaration blocks. Here's the first such block from <code>stopwatch03.css</code> again:</p> <pre><code>Stopwatch {\n    layout: horizontal;\n    background: $panel-darken-1;\n    height: 5;\n    padding: 1;\n    margin: 1;\n}\n</code></pre> <p>The first line tells Textual that the styles should apply to the <code>Stopwatch</code> widget. The lines between the curly brackets contain the styles themselves.</p> <p>Here's how this CSS code changes how the <code>Stopwatch</code> widget is displayed.</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1cXGlT40hcdTAwMTL93r/Cwe7Hdk3dR0dsbIChgaG5mqO7d2diQkjCViNbakvm8MT8901cdLBuY4xNm4lVXHUwMDEwgFVSVaoyX+XLrJT/fNdqrcV3obv2obXm3tqW7zlD62btfXL+2lx1MDAxZEZeMIAmmn6OgtHQTq/sxXFcdTAwMTh9+OWXvjW8cuPQt2xcdTAwMTdde9HI8qN45HhcdTAwMDGyg/4vXuz2o38nv1x1MDAwZqy++68w6DvxXHUwMDEwZYO0XceLg+H9WK7v9t1BXHUwMDFjQe//hc+t1p/p75x0Q9eOrUHXd9NcdTAwMWLSpkxAqWn57EEwSIVl2lAmqSaTXHUwMDBivGhcdTAwMTOGi11cdTAwMDdaL0FkN2tJTq2dnp9f9e6+XHUwMDFkn3S6t39cdTAwMDTc3/A+n5Fs1EvP90/iOz+VKlxu4GGytihcdTAwMWVcdTAwMDZX7lx1MDAxN8+Je9BKSueb7lx1MDAxYVx1MDAwNqNub+BGUeGeILRsL75LXHUwMDFlXHUwMDAxT07ez8CHVnbmNtGPYVxia2Y0Z0pMWpJbKedI6tzJe0k6gVx1MDAwZjNcdTAwMGaS/Fx1MDAwM6dHJsuFZV91QaCBk11ju1x1MDAwZXes7Jqbh+dcdTAwMTNSXCKlXHUwMDE0K4zac71uL06eXHUwMDA0Y6RcdTAwMDVcdTAwMTGS5kZ301knQjMpucTZ0yZjhrtOalx1MDAwML+X561nXHLDh/lZi5JcdTAwMGY5eVx1MDAxM1G3ytaTt6CcZte35eHhVd+7PenwvcOtTVx1MDAxYfI7PemrYG7WcFx1MDAxONysTVr+ej+tX+6PO0c3jjP6KK4x2dbtsO9/nK3fh/+yR1x1MDAxZYWOdW+bREpstMBCKqon7b43uILGwcj3s3OBfZWZ87ucwM+Dkc5ZWlx0RtxgsDBlzMwwuvtyvNUxu+3di+3401x1MDAxZnGwuf7Ht7ufXHQjMMgncMQwQ0pcdTAwMTglXHUwMDBiRpviSGJkuGCEvlxmSlx1MDAxY9tYqCqUiMRVXHUwMDA0SVlcdTAwMDFOYlx1MDAxMExhXCJeXHUwMDE3OJ/Wncue27fV2fZ3ur9zfni8e3xbb+Cxe1x1MDAxYs+Km7fSbeHq97NcdTAwMGX480BekDOHb0VcdTAwMWHxTYQgRlx1MDAxMDm7m5w+y0V89yy7N1x1MDAxYbqrgHDdhHBNXHUwMDExfznC46E1iEJrXGKoqkG5qEE5ZVx1MDAxNZRrwjHhkpvFo3yRNpjpOlx1MDAxOMQn3jiZbopcdTAwMGJnP1p9z78rqCs1TpD0JLaGcX4uI1x1MDAxN4ZMbVFcdTAwMTUuXve9bmK9azY8hDssXHUwMDE4duxcdTAwMDGdnFxc0PdcdTAwMWMn79lskMCCPoe7s3ikYOh1vYHln1x1MDAxNlx1MDAwNJzfm0rcjDaMqVx1MDAxNJRjNTPcLs87R+2D/e92XHUwMDE0nV7zL52rbXbo/VxcuKmn0MaNQkZcdTAwMDHPM1x1MDAxNV6qXHUwMDA0opRcdTAwMTZhuHi4MUTKmJ7gjlx0VFwizFx1MDAwZvCTXHUwMDAyXFwsl2pcdOib5rV+dH6cXHUwMDFkdunBRnggo1x1MDAwM1x1MDAxNq7v8976y53hW+n2KVx1MDAxZls/4Or5WMFcdTAwMWFDUVx1MDAwMlx1MDAxZZZJxujsTnb6NK8m6lx1MDAwNaZNqNdcdTAwMDQpwkuoWzTqOauCvcbJYlxmfIfklfE3dLJcdTAwMTh/SH9QcUaX7mqf8FZlV5tcdTAwMTdzfodrXHUwMDE4aYKe5FxcUaPV7OEricfHwaX+KI6v8d5Fe+ey2zXj1Vx1MDAwZV8lwKs2XHQkKVLSvDx6bUpcdTAwMDTVR6+6XHUwMDAyOVx1MDAwMUJcdTAwMTBDc2B8XHUwMDE1z0rWnWM2tP2uPmLYXHUwMDFm71njz/b+y13gW+n2Kc9aP+CM0r6h1FeTx9Y5XHUwMDE2Xs56UWokZSYz2CeXjanaW9GoWGpZv3BoYOlcdTAwMGJYOFx1MDAxNlx1MDAxMlx1MDAxNFx1MDAxM1xylFxcSP639tef3ch93aD4XHQ/V/bU91x1MDAwMs6FM66a42HKhKKEPiNcdTAwMWW2zU1b3vw63tzZMfZG2P66fbHprzrQXGZcdTAwMDeKU0DTPcxcZjLLpMSS1yCsXHUwMDEy91JcdTAwMDIqXHUwMDEwS/HOq1x1MDAwMzDRSvBcdTAwMTTVQ0zPXHSxOFxim/BVeJAymFx1MDAxZYWZXG6ne7dZhycjmvBkXGZcdTAwMTVKUj473Y10ZH23w/Obs30pdLBcdTAwMWZcdTAwMWSNembl4URcZlLlLFKKKGNcdTAwMTCBSSAv3PqciiqMuMa8sLs6QVx1MDAxNzdIXHUwMDBiUWx8hFx1MDAxOWaYXHUwMDAzrVx1MDAxMOr5OEule22cRUlcdTAwMWV0w1x1MDAxYjjeoFu+xVx1MDAxZDhcci2+XHUwMDE1xZ2g3/diXHUwMDEw4yjwXHUwMDA2cfmKtN/1xLp7rlXBXG70nG8rwyBMeiwy/+y/VmYn6YfJ/7+/r726XVVlejqnxayLd/m/z1x1MDAwNq0gsnx24lx1MDAwNDnmXHUwMDFjQD17dijY2/xOPlx1MDAwZa797e/H7lx1MDAwMVx1MDAxZrEtvi9XXHUwMDFmtFx1MDAxMqlyYcB9mYNB8PzLXHUwMDA1LUEwXHUwMDAwVlxuw+iSwu9MXHUwMDFkXHUwMDE5eDGSxIBFSNA+OMVcblx1MDAxNWVcZtyk0PPsz/xcdTAwMWbBS0Fws1qTo6zQZ4I5pVx1MDAwNzVYXHUwMDA2XCLXiGUjTFLjwmaPXHUwMDFjN1x1MDAxONk4wieCXW73Ozf/6Vx1MDAxZI5D/9eVXHUwMDA3M2BWYGZwxVx1MDAwM3OJsJRcdTAwMWMvc4OHYlx1MDAxOFxc6drtXHUwMDFkaCqJNUn8ck3BQH5cdTAwMDZ6syHfXHUwMDFhelx1MDAwYm1cdTAwMGKFblWJ6W2P6ltcdTAwMTBWqWDls1x1MDAxM6wqaSSsXHUwMDBms5Nlucv3jszh7fru4W7Q+1witkbOsVp9qCqkyphI/a6AoJSWyvhcdTAwMTZcdTAwMGVVXc0kZVitYJRcdTAwMDBDVtrIn8CR/4/R6tU12ivdN1x1MDAxMzin7t5wzctnXHUwMDFmXHUwMDExXG5KMYxqPXt2SG/g/tG+/Wn75uLzKNZb23a3c7lghDpW1HNcdTAwMTdcblGqXHUwMDE04qounqVcdTAwMDKxUqy58CRcdTAwMTGmSJQ9dlbNy1xmwmkoxE16ZLp4wKzB2Fx1MDAxME3wK5cmjkPdXHUwMDFi75OvO9+Ogo2wz3bUOs/yl1x1MDAwNfN7Vk3v5rfo6sw56O7cee3DXHUwMDFk7VxcR6eDzkI3Np6z0EyFVVPCleJGRIGaKFdS5lJIT0Fqz1x1MDAxY+3fnlx1MDAwZsbHwUdcdTAwMGKf7nb2TmPHWX1IXHUwMDE5jYypqUVcdTAwMDBTRcvmp0SaKpJqXHUwMDE4qVx1MDAxNNhQxl+7qvdcdTAwMDXQedrEXHRXOleJsey8bi9cdTAwMTh64yTz6rd86y5cdTAwMTg1bKI0ZHh997KIoMXkd6tCTcVxY9JcYqazXHTIUlx0joUms7vG6VpfUfLKXHJDtFxcOZTealx1MDAwNDIk2T9cdTAwMDKUU86XXGJmXCKRllx1MDAxNKxcdTAwMWGEXHUwMDAxXHUwMDBiVzVlRlx1MDAxODFcdTAwMDJOklx1MDAwMFHSXHUwMDFhlJKLMbNcbn5cdTAwMDFNks2xjflcdTAwMDJmXHUwMDBif2hun3V+ZpstI4/vbO3OQLhS/NqjRMo2QVx1MDAxY+bAMIk1T4xX69xVXStMXHUwMDE3bcRcZuOCXGJcZvpcdTAwMTaPMeDEYVx1MDAxNyn1i0VcIohpLFx1MDAxNVx1MDAxM1RcYqXAlOolXHUwMDEyXHUwMDE4KyEhguKYU1qR6U2ly1x1MDAxYW05OdpVM34m0W9kJKaxQkthTohiz4jCXHUwMDBmgzuLO9H19Zfx3bmOzm6xOdtb9YWMXG6NOOGVIJxcdTAwMTODhC5cdTAwMTckL3xcdMvcxDQ+wiTRmC2l1OLtUO6X8Vx1MDAxMdKyXd9v9a0hMIJV4FwiRYHm4yHCNFZKUaqowvRcdTAwMTn57unaXlH4MspcdTAwMTBcdTAwMTdcXFx1MDAwMThcZqBVZo97XHUwMDBmYoJMeU940SBcdTAwMTZcdTAwMThcdTAwMTGpXHUwMDE0JlxuYnFw6zU0hHOEy0n5XHS2qZFJwDFHlccqZNaanP10Z5DnXHUwMDFmXHUwMDE4USog8FOCJb48tyE78fZcbt1cdTAwMDeMS+ZcdTAwMWSJmzWGcCY1XHUwMDA1i6EsK3+aiMKQJIroXHUwMDFhWd5cdTAwMTLfaLTZ5GjnzHVBPIOr5p05iLUhYlJ69pUq+Fx1MDAxNG6ffu13Tva2NsdfutxcYra56GTiwlcqxVx1MDAxNYI4Q1x1MDAxNXbT00VcbrgswWTJb15l8z9ZlUQ1zS+VTjbTzStcdTAwMTONpVx1MDAxNi1cdTAwMTPK8/tcdTAwMTavRDRCy0mWpd9cdTAwMDZWqqbWxSiOg0F9nVsuLfM6dW5PyDhcdTAwMWZcdTAwMTkxZlxuxjlOtPGMctLpJrGiXHUwMDE411hcdTAwMDPfMIIkO9qGq6yXezai0XJLt2lcdTAwMTLLY82ESjhPUvJQRb1cdTAwMDRcdTAwMTEhklx1MDAxMFx1MDAxOEiRVEbWZD8hxKRGiVfOiCQwXUQ1TVx1MDAxM1xymO41ioxcdTAwMDRzoaRkQlx1MDAwYkY1XHUwMDE1mVwiJzyAYFx1MDAwNLOcaHM+UjL9S22K0lx1MDAwMLflSmtsYIJcdTAwMTRhplwiXGb4a5pcdTAwMDSIoDdGMVx1MDAxM287XHUwMDE50m4247S5YsFcdTAwMGJcIimUNpdcdTAwMDKSpEZUMzX7XHUwMDAy5l9dbv+wP5newa72+1x1MDAxZsVmcOZcZld9XHUwMDAx41x1MDAxYdh4qfIgXbpcdTAwMThFklx1MDAxMrzUqniiamr/qiRFY2U0qP+VX1r7XHUwMDE2fVxyZW/zx+2FP+j9uNnvXHUwMDBl+782fInJXHUwMDFjXHUwMDFjXHUwMDA1rF3OlVx1MDAwZZ6Lo2SaadmJan5cdTAwMWJ4UeufoTVw/baTfIfYoE1Wg6nMJOl8fIU0v2ZcdTAwMDZol8IwIWZPfk43j1x1MDAxNYW7kFx1MDAwMtWAnXK03C+CkM1lgkai0pfBTF5WNVx1MDAxMDlcdTAwMDGFfGVaMjcyZ6Ql0/1EiZZcYsW0Tt7M4lx1MDAwMmtMeO6yx0xcdLjGNGk9nZa82cLiiukkR3tiNU1U4N1Dh2tWXHUwMDE4nsSg4olGwIo852FcdTAwMDXNnmrt2nNvNmpeub5Mj2TJSWc2XHUwMDAxtps8259/vfvrf4F0XHUwMDFiRyJ9         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Cascadia.woff2\");       }       Start00:00:00.00Reset5 lineshorizontal layout1 cell margin1 cell paddingaround buttonsbackground coloris $panel-darken-1  <ul> <li><code>layout: horizontal</code> aligns child widgets horizontally from left to right.</li> <li><code>background: $panel-darken-1</code> sets the background color to <code>$panel-darken-1</code>. The <code>$</code> prefix picks a pre-defined color from the builtin theme. There are other ways to specify colors such as <code>\"blue\"</code> or <code>rgb(20,46,210)</code>.</li> <li><code>height: 5</code> sets the height of our widget to 5 lines of text.</li> <li><code>padding: 1</code> sets a padding of 1 cell around the child widgets.</li> <li><code>margin: 1</code> sets a margin of 1 cell around the Stopwatch widget to create a little space between widgets in the list.</li> </ul> <p>Here's the rest of <code>stopwatch03.css</code> which contains further declaration blocks:</p> <pre><code>TimeDisplay {\n    content-align: center middle;\n    opacity: 60%;\n    height: 3;\n}\n\nButton {\n    width: 16;    \n}\n\n#start {\n    dock: left;\n}\n\n#stop {\n    dock: left;\n    display: none;\n}\n\n#reset {\n    dock: right;\n}\n</code></pre> <p>The <code>TimeDisplay</code> block aligns text to the center (<code>content-align</code>), fades it slightly (<code>opacity</code>), and sets its height (<code>height</code>) to 3 lines.</p> <p>The <code>Button</code> block sets the width (<code>width</code>) of buttons to 16 cells (character widths).</p> <p>The last 3 blocks have a slightly different format. When the declaration begins with a <code>#</code> then the styles will be applied to widgets with a matching \"id\" attribute. We've set an ID on the Button widgets we yielded in compose. For instance the first button has <code>id=\"start\"</code> which matches <code>#start</code> in the CSS.</p> <p>The buttons have a <code>dock</code> style which aligns the widget to a given edge. The start and stop buttons are docked to the left edge, while the reset button is docked to the right edge.</p> <p>You may have noticed that the stop button (<code>#stop</code> in the CSS) has <code>display: none;</code>. This tells Textual to not show the button. We do this because we don't want to display the stop button when the timer is not running. Similarly we don't want to show the start button when the timer is running. We will cover how to manage such dynamic user interfaces in the next section.</p>","title":"CSS basics"},{"location":"tutorial/#dynamic-css","text":"<p>We want our Stopwatch widget to have two states: a default state with a Start and Reset button; and a started state with a Stop button. When a stopwatch is started it should also have a green background and bold text.</p> <p>We can accomplish this with a CSS class. Not to be confused with a Python class, a CSS class is like a tag you can add to a widget to modify its styles.</p> <p>Here's the new CSS:</p> stopwatch04.css<pre><code>Stopwatch {\n    layout: horizontal;\n    background: $panel-darken-1;\n    height: 5;\n    min-width: 50;\n    margin: 1;\n    padding: 1;\n}\n\nTimeDisplay {\n    content-align: center middle;\n    text-opacity: 60%;\n    height: 3;\n}\n\nButton {\n    width: 16;\n}\n\n#start {\n    dock: left;\n}\n\n#stop {\n    dock: left;\n    display: none;\n}\n\n#reset {\n    dock: right;\n}\n\n.started {\n    text-style: bold;\n    background: $success;\n    color: $text;\n}\n\n.started TimeDisplay {\n    text-opacity: 100%;\n}\n\n.started #start {\n    display: none\n}\n\n.started #stop {\n    display: block\n}\n\n.started #reset {\n    visibility: hidden\n}\n</code></pre> <p>These new rules are prefixed with <code>.started</code>. The <code>.</code> indicates that <code>.started</code> refers to a CSS class called \"started\". The new styles will be applied only to widgets that have this CSS class.</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nNVabVPaSlx1MDAxNP7ur2Do15ru+0tn7tyxKra3ioptbXvvXHUwMDFkJyRcdTAwMGKJXHUwMDA0gkkoYKf//W6CV1x1MDAxMkhcdTAwMDBcdTAwMTEwdZSR3c2ek93z7PPs2f25V6lUo3FfVd9WqmpkmZ5rXHUwMDA35rD6Oi7/oYLQ9Xu6XG4l30N/XHUwMDEwWElLJ4r64ds3b7pm0FFR3zMtZfxww4HphdHAdn3D8rtv3Eh1wz/jz7rZVX/0/a5cdTAwMWRcdTAwMDXG1Mi+st3IXHUwMDBmJraUp7qqXHUwMDE3hbr3v/X3SuVn8pnyLlBWZPbankpcdTAwMWVIqqZcdTAwMGViymZL634vcVx1MDAxNmIoIMZYoMdcdTAwMTZueKTtRcrW1S3ts5rWxEVVtO/21NA7XHUwMDE2NX469ulYXHUwMDFjy3Fzarblet5VNPZcdTAwMTK3Ql+/zbQujFx1MDAwMr+jrl07cmLbM+VFT1x1MDAwNf6g7fRUXHUwMDE4Zp7x+6blRuO4XGaAx9LJXHUwMDE4vK1MS0bxXGZRYCAokX5NXHUwMDAxXHUwMDExfayLn0ZIXHUwMDFhXHUwMDE0USxcdTAwMDFL1Uw8OvQ9PVx1MDAwNdqjVyD5mfrUNK1OWzvWs6dtXGKwXHUwMDAw5dM2w4f3pFxmXHUwMDE5WFx1MDAxMorTplx1MDAxZOW2nWjivcGh4CnbKlx1MDAxOXuIgOBcYlwiMp2a2GL/g53Ewb+zo+eYQf9hlKph/CXlbezo8WxcdTAwMTClXHUwMDAzKTW/70hcYsLhqHVw2r47kLiN//IuPz72lYk6M1xi/GH1sebXw39T11x1MDAwNn3bnERcdTAwMTJkXGZxyKCk+u+x3nN7XHUwMDFkXdlcdTAwMWJ43rTMtzrT4EtKf71eI+pcdFx1MDAwN4VRLzmQVFIuVo76oN5EXHUwMDA3+6f49sSun1/UXHUwMDFi38LvjXclj3pcdTAwMDZcZlx0kMBcYuC5qCfUIJBcdTAwMDFIn1x1MDAxYvUtU6NcdTAwMDfNR73ufD7YXHUwMDE5m4tyKKUgXHUwMDAwpCZrJ1F+fHB8XHUwMDEznbRDVe/Y3+9ax1x1MDAwMN7sXHUwMDBm8qM8UqMoXHUwMDE15K/zu820fr2qwZfDTsbPXGZZkFwi2CBcdTAwMDQ51uslWVx1MDAxOTWLRzmLXHUwMDFhx7ScQaDKgFx1MDAxYlqMXHUwMDFixlxmuVx03ESB2Vx1MDAwYvtmoGM1XHUwMDA3OzRcdTAwMDc7XGLPYUdKTLUzVGxcdTAwMWU7m4zD6Xz7vejKvU9iXHRkSmtm1/XGmSlLXHUwMDAyVHt6XHUwMDE1+WlHzVBpi8kqzjNtXHUwMDBmPLdcdTAwMWRcdTAwMDdw1dLvoIJMbEeu1lWPXHK6rm2nOcPSXHUwMDBlmLrP4MMqS71cdTAwMWa4bbdnep/S/q1PUyj1XHUwMDFhszQloFx1MDAxNiWArK7NXHUwMDA2x9eB88l9L8nwQvSa8uxrR7wvN0tcdTAwMTFKXHJcYjnjmo3n0EalXHUwMDAxJOSSZfTROiyV/OQhXHJcdTAwMWKQXHUwMDE0aTOsXHUwMDE3XHUwMDAyQXCONmNcdTAwMWNcdTAwMTO9XHUwMDEwXHUwMDEytnnkLWKtzk372Ox2XHUwMDFkJG/IfVxyX4bS+1xcoM02w1r5XHUwMDA2y8dakMhCXHUwMDE0SUxcdTAwMDSjLKUwlsFo8TCXlLaIlnuFQNKURlx1MDAwNZ5ccuZN01x1MDAxNsHzXHUwMDE4mqctqkHHXHUwMDA03lx1MDAwNnbKw1pcdTAwMDC8TX6N7IBunbyWMMAseaXdXFyfw7gs3mpcdTAwMTHBiVx1MDAxZXi4umiEw/OL0zBqXHUwMDFlNFx1MDAwZeyju1x1MDAxYetbYbNRblx1MDAxMmNYXHUwMDFhXFxkU1xi8ZP73NCRTuUzUffKUjaxzVU3WWJcdTAwMTZxTFDMJdr1XHUwMDFl65Pn3973/NpNo3nRO6x3ry/qh83nsNXv1e0ybs03+Fx1MDAwNG6lnEmZUodb4lbGilx1MDAxNSpcdTAwMTWIS/FcdTAwMDRwL1x1MDAxZeWSUisjJFx1MDAxN96QXHUwMDE4XHUwMDAyMvLczOFm9oKUayHL8Vx1MDAxNjC+yVxifFx1MDAxZas2VKiinfLpXHUwMDEyMprl04mD6zMpXHUwMDA1olxiazxGmmD4XHRYXHUwMDFiwfe3N7chXHTVNy1iz4LRt/7+S1x1MDAxMileKVFPJWd0jklcdTAwMTE0NiFgXHUwMDBiqZQyZnCut3VpXHUwMDAzmSy9oDNZn//z9Fx1MDAxOGmBXHUwMDAzUovgTvRsvPLAJyBv/aBkXHUwMDFjXHUwMDE1XHUwMDA1JcaQIYSfkKK47F6e1/tOjVx1MDAxZd58bvWRV8e+dVJudZck0jGlJJOGSKIy3lbNpFx0N3l0tGpcdTAwMTKdcqCXflxmdpyOeNfq1EZcdTAwMDdcdTAwMWY/yNPvZ91PZyPw1azXnq/Efpdul1x0vHyD5Vx1MDAxM3i0OOWvV1xcSVx1MDAwNZGr505cdTAwMTaPcklcdTAwMDVekvLPRTjUXHUwMDE1XHUwMDFiSEBuQuIhre+0K1x1MDAxNO00cbJriXdcdTAwMTWZwW4l3lx1MDAxMkaaz/fHXHUwMDBlrs+mhFx1MDAxNLIpZFhiqeNtdY33pbF/LZ1G4+xCkJr//cg5umy3X1x1MDAxNm58pZQ/XHUwMDA1eH5DJVxmJulz2XRcdNbWS/hTJrRdirdw1LaIs66su+tcdTAwMWL/8Iszat5/XHUwMDFlX7as9ig4eT5cdTAwMTX+Lt0uY9h8g+VjWMxcdTAwMGJvYDFGQXyOuzrkXHUwMDE3j3JJIVx1MDAxZlx1MDAxZk7kQl5cdTAwMTMs3Cq5rnYoIaTeXjOwXHJ8l4dbX+pQYlx0Sa19KFFcdTAwMDQ3XHUwMDAyiu+wXHUwMDEwTCSidHVB+/VcXFx1MDAxZHktdnvojEHD63BX9Fx1MDAwM1p2QUviREpOXHUwMDE2hUtjVuVuXHUwMDFjcFx1MDAwMOVcdTAwMDBunlFcdGBUMol3mzZBXHUwMDEw8dSmelx1MDAxN5dXhmZkOfl4XHUwMDEz+XjzVCtagLbMhZgs1DIvkndTZeLMeqjChblJKClEevlMJSCWwqrdvKOfW6dH7sWH869cdTAwMTckPGFOUHZYYS1cdTAwMTBJTnZcdTAwMTJyzWJbvlx1MDAxNIZT17xcdTAwMTbhilx0XHUwMDA0JFx1MDAxMGK3x+tcYlx1MDAwMin47nFVXHUwMDE5upFTOby6qlieXHUwMDE5hpV/9Hvp/Zmy/6mWXG5yi/ycoHHvQadWzX5f7zGj2NtcdDb1XHUwMDA0uvbDXHUwMDEwTa1Vf7hq+K74rtPeXHUwMDAzwmMoqXj6fv7a+/VcdTAwMWZcdTAwMTejLMsifQ==         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }       Stop00:00:00.00ResetStart00:00:00.00StopwatchStopwatch with CSS class \"started\"  <p>Some of the new styles have more than one selector separated by a space. The space indicates that the rule should match the second selector if it is a child of the first. Let's look at one of these styles:</p> <pre><code>.started #start {\n    display: none\n}\n</code></pre> <p>The <code>.started</code> selector matches any widget with a <code>\"started\"</code> CSS class. While <code>#start</code> matches a child widget with an ID of \"start\". So it matches the Start button only for Stopwatches in a started state.</p> <p>The rule is <code>\"display: none\"</code> which tells Textual to hide the button.</p>","title":"Dynamic CSS"},{"location":"tutorial/#manipulating-classes","text":"<p>Modifying a widget's CSS classes it a convenient way to modify visuals without introducing a lot of messy display related code.</p> <p>You can add and remove CSS classes with the add_class() and remove_class() methods. We will use these methods to connect the started state to the Start / Stop buttons.</p> <p>The following code will start or stop the stopwatches in response to clicking a button.</p> stopwatch04.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.layout import Container\nfrom textual.widgets import Button, Header, Footer, Static\n\n\nclass TimeDisplay(Static):\n    \"\"\"A widget to display elapsed time.\"\"\"\n\n\nclass Stopwatch(Static):\n    \"\"\"A stopwatch widget.\"\"\"\n\n    def on_button_pressed(self, event: Button.Pressed) -&gt; None:\n        \"\"\"Event handler called when a button is pressed.\"\"\"\n        if event.button.id == \"start\":\n            self.add_class(\"started\")\n        elif event.button.id == \"stop\":\n            self.remove_class(\"started\")\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets of a stopwatch.\"\"\"\n        yield Button(\"Start\", id=\"start\", variant=\"success\")\n        yield Button(\"Stop\", id=\"stop\", variant=\"error\")\n        yield Button(\"Reset\", id=\"reset\")\n        yield TimeDisplay(\"00:00:00.00\")\n\n\nclass StopwatchApp(App):\n    \"\"\"A Textual app to manage stopwatches.\"\"\"\n\n    BINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        yield Header()\n        yield Footer()\n        yield Container(Stopwatch(), Stopwatch(), Stopwatch())\n\n    def action_toggle_dark(self) -&gt; None:\n        \"\"\"An action to toggle dark mode.\"\"\"\n        self.dark = not self.dark\n\n\napp = StopwatchApp(css_path=\"stopwatch04.css\")\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>The <code>on_button_pressed</code> method is an event handler. Event handlers are methods called by Textual in response to an event such as a key press, mouse click, etc. Event handlers begin with <code>on_</code> followed by the name of the event they will handler. Hence <code>on_button_pressed</code> will handle the button pressed event.</p> <p>If you run \"stopwatch04.py\" now you will be able to toggle between the two states by clicking the first button:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1501378322-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1501378322-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1501378322-r1 { fill: #c5c8c6 } .terminal-1501378322-r2 { fill: #f6f5f5 } .terminal-1501378322-r3 { fill: #e0dedb } .terminal-1501378322-r4 { fill: #f3f3f3 } .terminal-1501378322-r5 { fill: #7ae998 } .terminal-1501378322-r6 { fill: #2f3940 } .terminal-1501378322-r7 { fill: #030905;font-weight: bold } .terminal-1501378322-r8 { fill: #9b9fa1 } .terminal-1501378322-r9 { fill: #f3f4f4;font-weight: bold } .terminal-1501378322-r10 { fill: #008139 } .terminal-1501378322-r11 { fill: #041118 } .terminal-1501378322-r12 { fill: #e76580 } .terminal-1501378322-r13 { fill: #b93c5b;font-weight: bold } .terminal-1501378322-r14 { fill: #780028 } .terminal-1501378322-r15 { fill: #f2f8fc;font-weight: bold } .terminal-1501378322-r16 { fill: #f2f8fc }                                                                                stopwatch04.py          \u2b58StopwatchApp11:49:11    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.00\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Stop\u00a000:00:00.00 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.00\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0    </p>","title":"Manipulating classes"},{"location":"tutorial/#reactive-attributes","text":"<p>A recurring theme in Textual is that you rarely need to explicitly update a widget. It is possible: you can call refresh() to display new data. However, Textual prefers to do this automatically via reactive attributes.</p> <p>You can declare a reactive attribute with reactive. Let's use this feature to create a timer that displays elapsed time and keeps it updated.</p> stopwatch05.py<pre><code>from time import monotonic\n\nfrom textual.app import App, ComposeResult\nfrom textual.layout import Container\nfrom textual.reactive import reactive\nfrom textual.widgets import Button, Header, Footer, Static\n\n\nclass TimeDisplay(Static):\n    \"\"\"A widget to display elapsed time.\"\"\"\n\n    start_time = reactive(monotonic)\n    time = reactive(0.0)\n\n    def on_mount(self) -&gt; None:\n        \"\"\"Event handler called when widget is added to the app.\"\"\"\n        self.set_interval(1 / 60, self.update_time)\n\n    def update_time(self) -&gt; None:\n        \"\"\"Method to update the time to the current time.\"\"\"\n        self.time = monotonic() - self.start_time\n\n    def watch_time(self, time: float) -&gt; None:\n        \"\"\"Called when the time attribute changes.\"\"\"\n        minutes, seconds = divmod(time, 60)\n        hours, minutes = divmod(minutes, 60)\n        self.update(f\"{hours:02,.0f}:{minutes:02.0f}:{seconds:05.2f}\")\n\n\nclass Stopwatch(Static):\n    \"\"\"A stopwatch widget.\"\"\"\n\n    def on_button_pressed(self, event: Button.Pressed) -&gt; None:\n        \"\"\"Event handler called when a button is pressed.\"\"\"\n        if event.button.id == \"start\":\n            self.add_class(\"started\")\n        elif event.button.id == \"stop\":\n            self.remove_class(\"started\")\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets of a stopwatch.\"\"\"\n        yield Button(\"Start\", id=\"start\", variant=\"success\")\n        yield Button(\"Stop\", id=\"stop\", variant=\"error\")\n        yield Button(\"Reset\", id=\"reset\")\n        yield TimeDisplay()\n\n\nclass StopwatchApp(App):\n    \"\"\"A Textual app to manage stopwatches.\"\"\"\n\n    BINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        yield Header()\n        yield Footer()\n        yield Container(Stopwatch(), Stopwatch(), Stopwatch())\n\n    def action_toggle_dark(self) -&gt; None:\n        \"\"\"An action to toggle dark mode.\"\"\"\n        self.dark = not self.dark\n\n\napp = StopwatchApp(css_path=\"stopwatch04.css\")\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>We have added two reactive attributes: <code>start_time</code> will contain the time in seconds when the stopwatch was started, and <code>time</code> will contain the time to be displayed on the Stopwatch.</p> <p>Both attributes will be available on <code>self</code> as if you had assigned them in <code>__init__</code>. If you write to either of these attributes the widget will update automatically.</p>  <p>Info</p> <p>The <code>monotonic</code> function in this example is imported from the standard library <code>time</code> module. It is similar to <code>time.time</code> but won't go backwards if the system clock is changed.</p>  <p>The first argument to <code>reactive</code> may be a default value or a callable that returns the default value. The default for <code>start_time</code> is <code>monotonic</code>. When <code>TimeDisplay</code> is added to the app, the <code>start_time</code> attribute will be set to the result of <code>monotonic()</code>.</p> <p>The <code>time</code> attribute has a simple float as the default value, so <code>self.time</code> will be <code>0</code> on start.</p> <p>The <code>on_mount</code> method is an event handler which is called then the widget is first added to the application (or mounted). In this method we call set_interval() to create a timer which calls <code>self.update_time</code> sixty times a second. This <code>update_time</code> method calculates the time elapsed since the widget started and assigns it to <code>self.time</code>. Which brings us to one of Reactive's super-powers.</p> <p>If you implement a method that begins with <code>watch_</code> followed by the name of a reactive attribute (making it a watch method), that method will be called when the attribute is modified.</p> <p>Because <code>watch_time</code> watches the <code>time</code> attribute, when we update <code>self.time</code> 60 times a second we also implicitly call <code>watch_time</code> which converts the elapsed time in to a string and updates the widget with a call to <code>self.update</code>.</p> <p>The end result is that the <code>Stopwatch</code> widgets show the time elapsed since the widget was created:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-404452631-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-404452631-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-404452631-r1 { fill: #c5c8c6 } .terminal-404452631-r2 { fill: #f6f5f5 } .terminal-404452631-r3 { fill: #e0dedb } .terminal-404452631-r4 { fill: #f3f3f3 } .terminal-404452631-r5 { fill: #7ae998 } .terminal-404452631-r6 { fill: #2f3940 } .terminal-404452631-r7 { fill: #030905;font-weight: bold } .terminal-404452631-r8 { fill: #9b9fa1 } .terminal-404452631-r9 { fill: #f3f4f4;font-weight: bold } .terminal-404452631-r10 { fill: #008139 } .terminal-404452631-r11 { fill: #041118 } .terminal-404452631-r12 { fill: #f2f8fc;font-weight: bold } .terminal-404452631-r13 { fill: #f2f8fc }                                                                                stopwatch05.py          \u2b58StopwatchApp11:49:11    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.13\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.12\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.11\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0    </p> <p>We've seen how we can update widgets with a timer, but we still need to wire up the buttons so we can operate Stopwatches independently.</p>","title":"Reactive attributes"},{"location":"tutorial/#wiring-buttons","text":"<p>We need to be able to start, stop, and reset each stopwatch independently. We can do this by adding a few more methods to the <code>TimeDisplay</code> class.</p> stopwatch06.py<pre><code>from time import monotonic\n\nfrom textual.app import App, ComposeResult\nfrom textual.layout import Container\nfrom textual.reactive import reactive\nfrom textual.widgets import Button, Header, Footer, Static\n\n\nclass TimeDisplay(Static):\n    \"\"\"A widget to display elapsed time.\"\"\"\n\n    start_time = reactive(monotonic)\n    time = reactive(0.0)\n    total = reactive(0.0)\n\n    def on_mount(self) -&gt; None:\n        \"\"\"Event handler called when widget is added to the app.\"\"\"\n        self.update_timer = self.set_interval(1 / 60, self.update_time, pause=True)\n\n    def update_time(self) -&gt; None:\n        \"\"\"Method to update time to current.\"\"\"\n        self.time = self.total + (monotonic() - self.start_time)\n\n    def watch_time(self, time: float) -&gt; None:\n        \"\"\"Called when the time attribute changes.\"\"\"\n        minutes, seconds = divmod(time, 60)\n        hours, minutes = divmod(minutes, 60)\n        self.update(f\"{hours:02,.0f}:{minutes:02.0f}:{seconds:05.2f}\")\n\n    def start(self) -&gt; None:\n        \"\"\"Method to start (or resume) time updating.\"\"\"\n        self.start_time = monotonic()\n        self.update_timer.resume()\n\n    def stop(self):\n        \"\"\"Method to stop the time display updating.\"\"\"\n        self.update_timer.pause()\n        self.total += monotonic() - self.start_time\n        self.time = self.total\n\n    def reset(self):\n        \"\"\"Method to reset the time display to zero.\"\"\"\n        self.total = 0\n        self.time = 0\n\n\nclass Stopwatch(Static):\n    \"\"\"A stopwatch widget.\"\"\"\n\n    def on_button_pressed(self, event: Button.Pressed) -&gt; None:\n        \"\"\"Event handler called when a button is pressed.\"\"\"\n        button_id = event.button.id\n        time_display = self.query_one(TimeDisplay)\n        if button_id == \"start\":\n            time_display.start()\n            self.add_class(\"started\")\n        elif button_id == \"stop\":\n            time_display.stop()\n            self.remove_class(\"started\")\n        elif button_id == \"reset\":\n            time_display.reset()\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets of a stopwatch.\"\"\"\n        yield Button(\"Start\", id=\"start\", variant=\"success\")\n        yield Button(\"Stop\", id=\"stop\", variant=\"error\")\n        yield Button(\"Reset\", id=\"reset\")\n        yield TimeDisplay()\n\n\nclass StopwatchApp(App):\n    \"\"\"A Textual app to manage stopwatches.\"\"\"\n\n    BINDINGS = [(\"d\", \"toggle_dark\", \"Toggle dark mode\")]\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Called to add widgets to the app.\"\"\"\n        yield Header()\n        yield Footer()\n        yield Container(Stopwatch(), Stopwatch(), Stopwatch())\n\n    def action_toggle_dark(self) -&gt; None:\n        \"\"\"An action to toggle dark mode.\"\"\"\n        self.dark = not self.dark\n\n\napp = StopwatchApp(css_path=\"stopwatch04.css\")\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Here's a summary of the changes made to <code>TimeDisplay</code>.</p> <ul> <li>We've added a <code>total</code> reactive attribute to store the total time elapsed between clicking that start and stop buttons.</li> <li>The call to <code>set_interval</code> has grown a <code>pause=True</code> argument which starts the timer in pause mode (when a timer is paused it won't run until resume() is called). This is because we don't want the time to update until the user hits the start button.</li> <li>We've stored the result of <code>set_interval</code> which returns a Timer object. We will use this later to resume the timer when we start the Stopwatch.</li> <li>We've added <code>start()</code>, <code>stop()</code>, and <code>reset()</code> methods.</li> </ul> <p>In addition, the <code>on_button_pressed</code> method on <code>Stopwatch</code> has grown some code to manage the time display when the user clicks a button. Let's look at that in detail:</p> <pre><code>    def on_button_pressed(self, event: Button.Pressed) -&gt; None:\n        \"\"\"Event handler called when a button is pressed.\"\"\"\n        button_id = event.button.id\n        time_display = self.query_one(TimeDisplay)\n        if button_id == \"start\":\n            time_display.start()\n            self.add_class(\"started\")\n        elif button_id == \"stop\":\n            time_display.stop()\n            self.remove_class(\"started\")\n        elif button_id == \"reset\":\n            time_display.reset()\n</code></pre> <p>This code supplies missing features and makes our app useful. We've made the following changes.</p> <ul> <li>The first line retrieves the button's ID, which we will use to decide what to do in response.</li> <li>The second line calls <code>query_one</code> to get a reference to the <code>TimeDisplay</code> widget.</li> <li>We call the method on <code>TimeDisplay</code> that matches the pressed button.</li> <li>We add the \"started\" class when the Stopwatch is started (<code>self.add_class(\"started)</code>), and remove it (<code>self.remove_class(\"started\")</code>) when it is stopped. This will update the Stopwatch visuals via CSS.</li> </ul> <p>If you run stopwatch06.py you will be able to use the stopwatches independently.</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-4252891416-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-4252891416-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-4252891416-r1 { fill: #c5c8c6 } .terminal-4252891416-r2 { fill: #f6f5f5 } .terminal-4252891416-r3 { fill: #e0dedb } .terminal-4252891416-r4 { fill: #f3f3f3 } .terminal-4252891416-r5 { fill: #e76580 } .terminal-4252891416-r6 { fill: #fbf5f6;font-weight: bold } .terminal-4252891416-r7 { fill: #030905;font-weight: bold } .terminal-4252891416-r8 { fill: #780028 } .terminal-4252891416-r9 { fill: #7ae998 } .terminal-4252891416-r10 { fill: #2f3940 } .terminal-4252891416-r11 { fill: #4ebf71;font-weight: bold } .terminal-4252891416-r12 { fill: #9b9fa1 } .terminal-4252891416-r13 { fill: #f3f4f4;font-weight: bold } .terminal-4252891416-r14 { fill: #008139 } .terminal-4252891416-r15 { fill: #041118 } .terminal-4252891416-r16 { fill: #f2f8fc;font-weight: bold } .terminal-4252891416-r17 { fill: #f2f8fc }                                                                                stopwatch06.py          \u2b58StopwatchApp11:49:12    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Stop\u00a000:00:00.22 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Stop\u00a000:00:00.09 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.00\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0    </p> <p>The only remaining feature of the Stopwatch app left to implement is the ability to add and remove timers.</p>","title":"Wiring buttons"},{"location":"tutorial/#dynamic-widgets","text":"<p>It's convenient to build a user interface with the <code>compose</code> method. We may also want to add or remove widgets while the app is running.</p> <p>To add a new child widget call <code>mount()</code> on the parent. To remove a widget, call its <code>remove()</code> method.</p> <p>Let's use these to implement adding and removing stopwatches to our app.</p> stopwatch.py<pre><code>from time import monotonic\n\nfrom textual.app import App, ComposeResult\nfrom textual.layout import Container\nfrom textual.reactive import reactive\nfrom textual.widgets import Button, Header, Footer, Static\n\n\nclass TimeDisplay(Static):\n    \"\"\"A widget to display elapsed time.\"\"\"\n\n    start_time = reactive(monotonic)\n    time = reactive(0.0)\n    total = reactive(0.0)\n\n    def on_mount(self) -&gt; None:\n        \"\"\"Event handler called when widget is added to the app.\"\"\"\n        self.update_timer = self.set_interval(1 / 60, self.update_time, pause=True)\n\n    def update_time(self) -&gt; None:\n        \"\"\"Method to update time to current.\"\"\"\n        self.time = self.total + (monotonic() - self.start_time)\n\n    def watch_time(self, time: float) -&gt; None:\n        \"\"\"Called when the time attribute changes.\"\"\"\n        minutes, seconds = divmod(time, 60)\n        hours, minutes = divmod(minutes, 60)\n        self.update(f\"{hours:02,.0f}:{minutes:02.0f}:{seconds:05.2f}\")\n\n    def start(self) -&gt; None:\n        \"\"\"Method to start (or resume) time updating.\"\"\"\n        self.start_time = monotonic()\n        self.update_timer.resume()\n\n    def stop(self):\n        \"\"\"Method to stop the time display updating.\"\"\"\n        self.update_timer.pause()\n        self.total += monotonic() - self.start_time\n        self.time = self.total\n\n    def reset(self):\n        \"\"\"Method to reset the time display to zero.\"\"\"\n        self.total = 0\n        self.time = 0\n\n\nclass Stopwatch(Static):\n    \"\"\"A stopwatch widget.\"\"\"\n\n    def on_button_pressed(self, event: Button.Pressed) -&gt; None:\n        \"\"\"Event handler called when a button is pressed.\"\"\"\n        button_id = event.button.id\n        time_display = self.query_one(TimeDisplay)\n        if button_id == \"start\":\n            time_display.start()\n            self.add_class(\"started\")\n        elif button_id == \"stop\":\n            time_display.stop()\n            self.remove_class(\"started\")\n        elif button_id == \"reset\":\n            time_display.reset()\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets of a stopwatch.\"\"\"\n        yield Button(\"Start\", id=\"start\", variant=\"success\")\n        yield Button(\"Stop\", id=\"stop\", variant=\"error\")\n        yield Button(\"Reset\", id=\"reset\")\n        yield TimeDisplay()\n\n\nclass StopwatchApp(App):\n    \"\"\"A Textual app to manage stopwatches.\"\"\"\n\n    BINDINGS = [\n        (\"d\", \"toggle_dark\", \"Toggle dark mode\"),\n        (\"a\", \"add_stopwatch\", \"Add\"),\n        (\"r\", \"remove_stopwatch\", \"Remove\"),\n    ]\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Called to add widgets to the app.\"\"\"\n        yield Header()\n        yield Footer()\n        yield Container(Stopwatch(), Stopwatch(), Stopwatch(), id=\"timers\")\n\n    def action_add_stopwatch(self) -&gt; None:\n        \"\"\"An action to add a timer.\"\"\"\n        new_stopwatch = Stopwatch()\n        self.query_one(\"#timers\").mount(new_stopwatch)\n        new_stopwatch.scroll_visible()\n\n    def action_remove_stopwatch(self) -&gt; None:\n        \"\"\"Called to remove a timer.\"\"\"\n        timers = self.query(\"Stopwatch\")\n        if timers:\n            timers.last().remove()\n\n    def action_toggle_dark(self) -&gt; None:\n        \"\"\"An action to toggle dark mode.\"\"\"\n        self.dark = not self.dark\n\n\napp = StopwatchApp(css_path=\"stopwatch.css\")\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Here's a summary of the changes:</p> <ul> <li>Added <code>action_add_stopwatch</code> to add a new stopwatch.</li> <li>Added <code>action_remove_stopwatch</code> to remove a stopwatch.</li> <li>Added keybindings for the actions.</li> </ul> <p>The <code>action_add_stopwatch</code> method creates and mounts a new stopwatch. Note the call to query_one() with a CSS selector of <code>\"#timers\"</code> which gets the timer's container via its ID. Once mounted, the new Stopwatch will appear in the terminal. That last line in <code>action_add_stopwatch</code> calls scroll_visible() which will scroll the container to make the new Stopwatch visible (if required).</p> <p>The <code>action_remove_stopwatch</code> function calls query() with a CSS selector of <code>\"Stopwatch\"</code> which gets all the <code>Stopwatch</code> widgets. If there are stopwatches then the action calls last() to get the last stopwatch, and remove() to remove it.</p> <p>If you run <code>stopwatch.py</code> now you can add a new stopwatch with the A key and remove a stopwatch with R.</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2379906615-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2379906615-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2379906615-r1 { fill: #c5c8c6 } .terminal-2379906615-r2 { fill: #0c0802 } .terminal-2379906615-r3 { fill: #30230c } .terminal-2379906615-r4 { fill: #0b0b0b } .terminal-2379906615-r5 { fill: #23568b } .terminal-2379906615-r6 { fill: #e76580 } .terminal-2379906615-r7 { fill: #fbf5f6;font-weight: bold } .terminal-2379906615-r8 { fill: #030905;font-weight: bold } .terminal-2379906615-r9 { fill: #780028 } .terminal-2379906615-r10 { fill: #c5cfd7 } .terminal-2379906615-r11 { fill: #7ae998 } .terminal-2379906615-r12 { fill: #e5eff7 } .terminal-2379906615-r13 { fill: #4ebf71;font-weight: bold } .terminal-2379906615-r14 { fill: #55595c } .terminal-2379906615-r15 { fill: #0a0a0b;font-weight: bold } .terminal-2379906615-r16 { fill: #008139 } .terminal-2379906615-r17 { fill: #b1bac2 } .terminal-2379906615-r18 { fill: #f2f8fc;font-weight: bold } .terminal-2379906615-r19 { fill: #f2f8fc }                                                                                StopwatchApp          \u2b58StopwatchApp11:49:13  \u2586\u2586 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Stop\u00a000:00:00.32 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581   \u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.00\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Start\u00a000:00:00.00\u00a0Reset\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0D\u00a0\u00a0Toggle\u00a0dark\u00a0mode\u00a0\u00a0A\u00a0\u00a0Add\u00a0\u00a0R\u00a0\u00a0Remove\u00a0    </p>","title":"Dynamic widgets"},{"location":"tutorial/#what-next","text":"<p>Congratulations on building your first Textual application! This tutorial has covered a lot of ground. If you are the type that prefers to learn a framework by coding, feel free. You could tweak stopwatch.py or look through the examples.</p> <p>Read the guide for the full details on how to build sophisticated TUI applications with Textual.</p>","title":"What next?"},{"location":"events/","text":"<p>A reference to Textual events.</p>","title":"Events"},{"location":"events/blur/","text":"<p>The <code>Blur</code> event is sent to a widget when it loses focus.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"Blur"},{"location":"events/blur/#attributes","text":"<p>No other attributes</p>","title":"Attributes"},{"location":"events/descendant_blur/","text":"<p>The <code>DescendantBlur</code> event is sent to a widget when one of its children loses focus.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"DescendantBlur"},{"location":"events/descendant_blur/#attributes","text":"<p>No other attributes</p>","title":"Attributes"},{"location":"events/descendant_focus/","text":"<p>The <code>DescendantFocus</code> event is sent to a widget when one of its descendants receives focus.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"DescendantFocus"},{"location":"events/descendant_focus/#attributes","text":"<p>No other attributes</p>","title":"Attributes"},{"location":"events/enter/","text":"<p>The <code>Enter</code> event is sent to a widget when the mouse pointer first moves over a widget.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"Enter"},{"location":"events/enter/#attributes","text":"<p>No other attributes</p>","title":"Attributes"},{"location":"events/focus/","text":"<p>The <code>Focus</code> event is sent to a widget when it receives input focus.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"Focus"},{"location":"events/focus/#attributes","text":"<p>No other attributes</p>","title":"Attributes"},{"location":"events/hide/","text":"<p>The <code>Hide</code> event is sent to a widget when it is hidden from view.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"Show"},{"location":"events/hide/#attributes","text":"<p>No additional attributes</p>","title":"Attributes"},{"location":"events/key/","text":"<p>The <code>Key</code> event is sent to a widget when the user presses a key on the keyboard.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"Key"},{"location":"events/key/#attributes","text":"attribute type purpose     <code>key</code> str The key that was pressed","title":"Attributes"},{"location":"events/leave/","text":"<p>The <code>Leave</code> event is sent to a widget when the mouse pointer moves off a widget.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"Leave"},{"location":"events/leave/#attributes","text":"<p>No other attributes</p>","title":"Attributes"},{"location":"events/load/","text":"<p>The <code>Load</code> event is sent to the app prior to switching the terminal to application mode.</p> <p>The load event is typically used to do any setup actions required by the app that don't change the display.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"Load"},{"location":"events/load/#attributes","text":"<p>No additional attributes</p>","title":"Attributes"},{"location":"events/mount/","text":"<p>The <code>Mount</code> event is sent to a widget and Application when it is first mounted.</p> <p>The mount event is typically used to set the initial state of a widget or to add new children widgets.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"Mount"},{"location":"events/mount/#attributes","text":"<p>No additional attributes</p>","title":"Attributes"},{"location":"events/mouse_capture/","text":"<p>The <code>MouseCapture</code> event is sent to a widget when it is capturing mouse events from outside of its borders on the screen.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"MouseCapture"},{"location":"events/mouse_capture/#attributes","text":"attribute type purpose     <code>mouse_position</code> Offset Mouse coordinates when the mouse was captured","title":"Attributes"},{"location":"events/mouse_click/","text":"<p>The <code>Click</code> event is sent to a widget when the user clicks a mouse button.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"Click"},{"location":"events/mouse_click/#attributes","text":"attribute type purpose     <code>x</code> int Mouse x coordinate, relative to Widget   <code>y</code> int Mouse y coordinate, relative to Widget   <code>delta_x</code> int Change in x since last mouse event   <code>delta_y</code> int Change in y since last mouse event   <code>button</code> int Index of mouse button   <code>shift</code> bool Shift key pressed if True   <code>meta</code> bool Meta key pressed if True   <code>ctrl</code> bool Ctrl key pressed if True   <code>screen_x</code> int Mouse x coordinate relative to the screen   <code>screen_y</code> int Mouse y coordinate relative to the screen","title":"Attributes"},{"location":"events/mouse_down/","text":"<p>The <code>MouseDown</code> event is sent to a widget when a mouse button is pressed.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"MouseDown"},{"location":"events/mouse_down/#attributes","text":"attribute type purpose     <code>x</code> int Mouse x coordinate, relative to Widget   <code>y</code> int Mouse y coordinate, relative to Widget   <code>delta_x</code> int Change in x since last mouse event   <code>delta_y</code> int Change in y since last mouse event   <code>button</code> int Index of mouse button   <code>shift</code> bool Shift key pressed if True   <code>meta</code> bool Meta key pressed if True   <code>ctrl</code> bool Ctrl key pressed if True   <code>screen_x</code> int Mouse x coordinate relative to the screen   <code>screen_y</code> int Mouse y coordinate relative to the screen","title":"Attributes"},{"location":"events/mouse_move/","text":"<p>The <code>MouseMove</code> event is sent to a widget when the mouse pointer is moved over a widget.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"MouseMove"},{"location":"events/mouse_move/#attributes","text":"attribute type purpose     <code>x</code> int Mouse x coordinate, relative to Widget   <code>y</code> int Mouse y coordinate, relative to Widget   <code>delta_x</code> int Change in x since last mouse event   <code>delta_y</code> int Change in y since last mouse event   <code>button</code> int Index of mouse button   <code>shift</code> bool Shift key pressed if True   <code>meta</code> bool Meta key pressed if True   <code>ctrl</code> bool Ctrl key pressed if True   <code>screen_x</code> int Mouse x coordinate relative to the screen   <code>screen_y</code> int Mouse y coordinate relative to the screen","title":"Attributes"},{"location":"events/mouse_release/","text":"<p>The <code>MouseRelease</code> event is sent to a widget when it is no longer receiving mouse events outside of its borders.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"MouseRelease"},{"location":"events/mouse_release/#attributes","text":"attribute type purpose     <code>mouse_position</code> Offset Mouse coordinates when the mouse was released","title":"Attributes"},{"location":"events/mouse_scroll_down/","text":"<p>The <code>MouseScrollDown</code> event is sent to a widget when the scroll wheel (or trackpad equivalent) is moved down.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"MouseScrollDown"},{"location":"events/mouse_scroll_down/#attributes","text":"attribute type purpose     <code>x</code> int Mouse x coordinate, relative to Widget   <code>y</code> int Mouse y coordinate, relative to Widget","title":"Attributes"},{"location":"events/mouse_scroll_up/","text":"<p>The <code>MouseScrollUp</code> event is sent to a widget when the scroll wheel (or trackpad equivalent) is moved up.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"MouseScrollUp"},{"location":"events/mouse_scroll_up/#attributes","text":"attribute type purpose     <code>x</code> int Mouse x coordinate, relative to Widget   <code>y</code> int Mouse y coordinate, relative to Widget","title":"Attributes"},{"location":"events/mouse_up/","text":"<p>The <code>MouseUp</code> event is sent to a widget when the user releases a mouse button.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"MouseUp"},{"location":"events/mouse_up/#attributes","text":"attribute type purpose     <code>x</code> int Mouse x coordinate, relative to Widget   <code>y</code> int Mouse y coordinate, relative to Widget   <code>delta_x</code> int Change in x since last mouse event   <code>delta_y</code> int Change in y since last mouse event   <code>button</code> int Index of mouse button   <code>shift</code> bool Shift key pressed if True   <code>meta</code> bool Meta key pressed if True   <code>ctrl</code> bool Ctrl key pressed if True   <code>screen_x</code> int Mouse x coordinate relative to the screen   <code>screen_y</code> int Mouse y coordinate relative to the screen","title":"Attributes"},{"location":"events/paste/","text":"<p>The <code>Paste</code> event is sent to a widget when the user pastes text.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"Paste"},{"location":"events/paste/#attributes","text":"attribute type purpose     <code>text</code> str The text that was pasted","title":"Attributes"},{"location":"events/resize/","text":"<p>The <code>Resize</code> event is sent to a widget when its size changes and when it is first made visible.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"Resize"},{"location":"events/resize/#attributes","text":"attribute type purpose     <code>size</code> Size The new size of the Widget   <code>virtual_size</code> Size The virtual size (scrollable area) of the Widget   <code>container_size</code> Size The size of the container (parent widget)","title":"Attributes"},{"location":"events/screen_resume/","text":"<p>The <code>ScreenResume</code> event is sent to a Screen when it becomes current.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"ScreenResume"},{"location":"events/screen_resume/#attributes","text":"<p>No other attributes</p>","title":"Attributes"},{"location":"events/screen_suspend/","text":"<p>The <code>ScreenSuspend</code> event is sent to a Screen when it is replaced by another screen.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"ScreenSuspend"},{"location":"events/screen_suspend/#attributes","text":"<p>No other attributes</p>","title":"Attributes"},{"location":"events/show/","text":"<p>The <code>Show</code> event is sent to a widget when it becomes visible.</p> <ul> <li> Bubbles</li> <li> Verbose</li> </ul>","title":"Show"},{"location":"events/show/#attributes","text":"<p>No additional attributes</p>","title":"Attributes"},{"location":"examples/styles/","text":"<p>These are the examples from the documentation, used to generate screenshots.</p> <p>You can run them with the textual CLI.</p> <p>For example:</p> <pre><code>textual run text_style.py\n</code></pre>","title":"Index"},{"location":"guide/","text":"<p>Welcome to the Textual Guide! An in-depth reference on how to build app with Textual.</p>","title":"Textual Guide"},{"location":"guide/#example-code","text":"<p>Most of the code in this guide is fully working\u2014you could cut and paste it if you wanted to.</p> <p>Although it is probably easier to check out the Textual repository and navigate to the <code>docs/examples/guide</code> directory and run the examples from there.</p>","title":"Example code"},{"location":"guide/CSS/","text":"<p>Textual uses CSS to apply style to widgets. If you have any exposure to web development you will have encountered CSS, but don't worry if you haven't: this section will get you up to speed.</p>","title":"Textual CSS"},{"location":"guide/CSS/#stylesheets","text":"<p>CSS stands for Cascading Stylesheets. A stylesheet is a list of styles and rules about how those styles should be applied to a page. In the case of Textual, the stylesheet applies styles to widgets but otherwise it is the same idea.</p>  <p>Note</p> <p>Depending on what you want to build with Textual, you may not need to learn Textual CSS at all. Widgets are packaged with CSS styles so apps may not need any additional CSS.</p>  <p>When Textual loads CSS it sets attributes of your widgets's <code>style</code> object. The effect is the same as if you had set attributes in Python.</p> <p>CSS is typically stored in an external file with the extension <code>.css</code> alongside your Python code.</p> <p>Let's look at some Textual CSS.</p> <pre><code>Header {\n  dock: top;\n  height: 3;\n  content-align: center middle;\n  background: blue;\n  color: white;\n}\n</code></pre> <p>This is an example of a CSS rule set. There may be many such sections in any given CSS file.</p> <p>Let's break this CSS code down a bit.</p> <pre><code>Header {\n  dock: top;\n  height: 3;\n  content-align: center middle;\n  background: blue;\n  color: white;\n}\n</code></pre> <p>The first line is a selector which tells Textual which widget(s) to modify. In the above example, the styles will be applied to a widget defined by the Python class <code>Header</code>.</p> <pre><code>Header {\n  dock: top;\n  height: 3;\n  content-align: center middle;\n  background: blue;\n  color: white;\n}\n</code></pre> <p>The lines inside the curly braces contains CSS rules, which consist of a rule name and rule value separated by a colon and ending in a semi-colon. Such rules are typically written one per line, but you could add additional rules as long as they are separated by semi-colons.</p> <p>The first rule in the above example reads <code>\"dock: top;\"</code>. The rule name is <code>dock</code> which tells Textual to place the widget on an edge of the screen. The text after the colon is <code>top</code> which tells Textual to dock to the top of the screen. Other valid values for <code>dock</code> are \"right\", \"bottom\", or \"left\"; but \"top\" is most appropriate for a header.</p>","title":"Stylesheets"},{"location":"guide/CSS/#the-dom","text":"<p>The DOM, or Document Object Model, is a term borrowed from the web world. Textual doesn't use documents but the term has stuck. In Textual CSS, the DOM is an arrangement of widgets you can visualize as a tree-like structure.</p> <p>Some widgets contain other widgets: for instance, a list control widget will likely also have item widgets, or a dialog widget may contain button widgets. These child widgets form the branches of the tree.</p> <p>Let's look at a trivial Textual app.</p> dom1.pyOutput   <pre><code>from textual.app import App\n\n\nclass ExampleApp(App):\n    pass\n\n\napp = ExampleApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>   <p>                                                                             ExampleApp                                    </p>    <p>This example creates an instance of <code>ExampleApp</code>, which will implicitly create a <code>Screen</code> object. In DOM terms, the <code>Screen</code> is a child of <code>ExampleApp</code>.</p> <p>With the above example, the DOM will look like the following:</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nM1Ya0/jOFx1MDAxNP3Or6i6X3YlXGKOY8fxSKtcdTAwMTXPpSywo1x1MDAwMVxyj9VcYrmJaT3Na1x1MDAxMpfHIP77XqdMXHUwMDFlbVxiZVx1MDAxN0ZEUZv4OtfX1+fc4+R+pdfr67tU9j/0+vLWXHUwMDE3oVxuMnHTXzXt1zLLVVx1MDAxMoNcdFx1MDAxN/d5Ms38oudY6zT/sL5cdTAwMWWJbFwidVx1MDAxYVxuX1rXKp+KMNfTQCWWn0TrSsso/8P8XHUwMDFliUj+niZRoDOrXHUwMDFhZE1cdTAwMDZKJ9lsLFx1MDAxOcpIxjpcdTAwMDfv/8B9r3df/NaiXHUwMDBilIiSOCi6XHUwMDE3hlp4njvfepTERaiUIVx1MDAwN3PqkbKDyrdhMC1cdTAwMDOwXkHAsrKYpn56sbN1pD45eiNcdTAwMWKyfNP5Nvy6d1WNeqXC8FjfhbM8XGJ/PM1kZc11lkzkqVxu9Fx1MDAxOOz2XFx7+VxcnkBcbqqnsmQ6XHUwMDFhxzLPXHUwMDFizySp8JW+M21cYpWtXCJcdTAwMWVcdTAwMTU+qpZbk1x1MDAwMeJamHmO5zpcdTAwMGV1XHUwMDEwqc23cECY5VLsXHUwMDEwh9G5mLaSXHUwMDEw1lx1MDAwMGL6XHUwMDA1XHUwMDE1R1x1MDAxNdVQ+JNcdTAwMTGEXHUwMDE2XHUwMDA3VVx1MDAxZlx1MDAwZvvcrs335sdMa1x1MDAwM46lXHUwMDFhjbVpxNjyXHUwMDEwcT1GZ75r+ZBF/m3P5pRcdTAwMTKMcWkxI6aDoFx1MDAwMMKX+fyNRZY+5qmfm5tatCbQnXlcdTAwMTTVkVRbY+dcIkv5vlx1MDAxYVxmvk7GfyX88CxcdTAwMWRcdTAwMGZcdTAwMGVLX1xy2Gl5q/ul4WG1y+2Ze1x1MDAxMm1cdTAwMGUv7evp9v6BPls7+8jRfrtbkWXJzfN+XHUwMDFiUawuO5HK7eNVlchpXHUwMDFhiFx1MDAxOfZt10XE5sjjXHUwMDBl4aU9VPFcdTAwMDSM8TRcZqu2xJ9UdFmpxbtA0kacdYba5CmG2thQXHUwMDE0XHUwMDEw4i1N0e7le69cdTAwMTSldidFObeAXG6GLP+HoTpcdTAwMTNxnopcZljQwlLWxlK+wErmeraDXFxcdTAwMWK9Piu7kMihOr1cdTAwMDSJ1YInsT5W31x1MDAwYjS5XHUwMDE2hWKEsIsw41x1MDAxY1HW6LUrXCJcdTAwMTXeNdawgCxEvnMrojSUXHUwMDFiafrrb/VcdTAwMTTnXHUwMDEyXCIpXFyTxjNcdTAwMWKhXHUwMDFhXHUwMDE5aPd9mJvMXHUwMDFhqNdcbkSu7Fx1MDAxMKkgXGJrXGL0IVx1MDAxMFx1MDAwMT6zwTKCk2RqpGJcdTAwMTGetMXZScZM+nqGxVx1MDAxNkZS+qRmYlx1MDAwNCDkUJXdpVx1MDAxOXn+PdGXXyfDk+PRwblzQsefkvPLd89IXHUwMDE3W8hlhHheXHUwMDFiI1x1MDAxZNuxXHUwMDEwI9h+U0pSukhJj0GlmFx1MDAxM+tHalx1MDAwMqRcdTAwMTHFXHUwMDFlcV+fml3KXHUwMDE27MfnQ0rOXHUwMDBmtlx1MDAwMrw33tldu9zDn9+jYM78nu5/vr45INuHXHUwMDA3XHUwMDE5XHL+vMNTTLbdV/CLT4PB3u7EP/Q2iH1cdTAwMTKFf+/EXHUwMDE3ozdcdTAwMTX49sS/QOCZkVZe7a/eSOBcdPXmW3+UXHUwMDEzwinUYUKX34J3o+3dVlx1MDAxM9ZZTVxisZhdaNzbXHUwMDE1XHUwMDEz0lJMsDNfREBcdTAwMWFhXHUwMDE3wp2fKu8vx2GbvGPUaO2Q82M/kzJ+SspZo/+rSfkzMjgv5WWMnZSbVZJcdTAwMTbOMfxcdTAwMTTlQCZAv+FcXF7Bu0vxO+Wc43BcdTAwMGJe7lx1MDAxMXNaOYdcdTAwMTm1XFzOjYJcdTAwMTNujjdjXHUwMDFlslxid5vkLlx06Fx1MDAxMIsz7FJcdTAwMTcvyLlcdTAwMDebXuDGf9loXHUwMDE3wf1sJuZaZHpTxYGKR2CslFxm2OhPzbhryEKO7VLCoVx1MDAxNlKOXHTyylmb6YnU7D0tXHUwMDAyckBcdTAwMWPYg1x1MDAxYYxWr5+98kNQ19b4sXMpqX1cdTAwMTlcdTAwMDfPXHUwMDA2hThUX8Tg1Vx1MDAwME7KmLdcdTAwMTBcdTAwMTW24LWh2HVcdTAwMTXfKmyHPVx1MDAxNVY7zVx1MDAxN8JcbkWut5IoUlx1MDAxYdL/MVGxnk9zkc9ccsPvsVx1MDAxNMG8XHUwMDE1plW3zVx1MDAxN4LUeGzu3KqrXsWU4qa8/rLa2nttXHUwMDExweaoYbfysFL/NzuQwmdfpOmxXHUwMDA2pJVrXHUwMDAwYFbBY+GuJta/VvJms+Xb0lVxmDRcdTAwMTYpNCVHmundP6w8/Fx1MDAwYlxiYlx1MDAxObwifQ==         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Cascadia.woff2\");       }       ExampleApp()Screen()  <p>This doesn't look much like a tree yet. Let's add a header and a footer to this application, which will create more branches of the tree:</p> dom2.pyOutput   <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Header, Footer\n\n\nclass ExampleApp(App):\n    def compose(self) -&gt; ComposeResult:\n        yield Header()\n        yield Footer()\n\n\napp = ExampleApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>   <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-233044527-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-233044527-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-233044527-r1 { fill: #c5c8c6 } .terminal-233044527-r2 { fill: #f6f5f5 } .terminal-233044527-r3 { fill: #e0dedb } .terminal-233044527-r4 { fill: #f3f3f3 } .terminal-233044527-r5 { fill: #f2f8fc }                                                                                ExampleApp          \u2b58ExampleApp11:49:13                          </p>    <p>With a header and a footer widget the DOM looks the this:</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1aa0/bSFx1MDAxNP3Or0DZL7tS4877UWm1glx1MDAxNpZ3aWFcdTAwMDNlVVWuPSReP2s7QKj633dsgu28XHUwMDFjXHUwMDEzXHUwMDEyNpXWQiGZmdy5nrnnzLk3/r6xudlKXHUwMDA3kWq92WypO8v0XHUwMDFjOzZvW6+y9lx1MDAxYlx1MDAxNSdOXHUwMDE46C6Uf07CfmzlI3tpXHUwMDFhJW9ev/bN2FVp5JmWMm6cpG96Sdq3ndCwQv+1kyo/+SN7PTF99XtcdTAwMTT6dlx1MDAxYVx1MDAxYuUkbWU7aVx1MDAxOD/MpTzlqyBNtPW/9efNze/5a8U72zH9MLDz4XlHxT0hx1tPwiB3XHUwMDE1Ulx1MDAwNLEkklx1MDAxNFx1MDAwM5zknZ4sVbbuvdZcdTAwMGWrsidralxyTi//7Jn/qItLwY5Odq7hh17nvJz12vG8s3TgPayDafX6sSp7kzRcdTAwMGVddeHYaS+bfKy9+F5cdTAwMTLqJSi/XHUwMDE1h/1uL1BJMvKdMDItJ1x1MDAxZOg2XG6KRjPo5ibKlrtsXHUwMDAxIDVcdTAwMTBcdTAwMTdYMIwpXHUwMDA2RJS3m31fSINRhFx05nTMo7ehp3dAe/RcdTAwMGLIr9Knr6bldrVjgV2OXHUwMDExyJKwcre3j/dZma+nnG4vzVx1MDAxYVx1MDAxMTJcdTAwMDQgTHD6YLuyXHUwMDFhKl99yCDjknAhip5sxmjfzsPg8/jq9cw4XHUwMDFhrlIryT5UvM1cdTAwMWPdXHUwMDE5j6FqXHUwMDFjVXbY/bgtrlx1MDAwZTBoR9euc9x7f+6eqm+FrZGgS9Vd2io6fryqM1x1MDAwYjto76vf+3JLOsHX+Pro+vh+f3u6WTOOw9umdpfu7sjoV00nLM1cdTAwMGXflfvTj2wzXHUwMDFkbilcdTAwMDNcdTAwMDTpXHUwMDAwpITgot9zXHUwMDAyV3dcdTAwMDZ9zyvbQsstMbhR8XdcdTAwMDL5I35WYVx1MDAwZsFM2DMuJEKYoca4r1/mNcU9XHUwMDAydbiHXHUwMDA0XHUwMDFhlOZcdTAwMTB8XHUwMDBl7tPYXGaSyIw1tqZgn0/Dvlx1MDAxY8c6oYBwKjFaPtSXXHUwMDE5h+V2h0F65tw/xJJBNcNcdTAwMDHEXHUwMDAw4lJcdTAwMDLKR0btmr7jXHJGdjBcdTAwMGZY7fnOnelHntqKol9/q65worQnuWky8p0tz+lmgd2y9L2peCTmU0efm8VcdTAwMDDfsW2vXHUwMDEyf5Z2xNQ24/0mZ1hcdTAwMTg7XScwvfNpftZCMVZW+lx1MDAxMIpT8EhcdTAwMTmcjcd87Vx1MDAwNGON8eh9ROdcdTAwMDcn51dXXHUwMDFjfGA+3btcbkkvXXc8YmhcdTAwMDDGXHRcdTAwMTFiXHUwMDFhXHUwMDFlXHUwMDExpVx1MDAwNuBcdTAwMDTBlVx1MDAwMpLSSUBcbq55YkxcdTAwMDA8XHUwMDFlwlx1MDAxNHLOKV9cdTAwMDEy6061I6ftfzlcdTAwMWFcdTAwMWO+9c47g0/3XHUwMDFkeb69dbK+h/DFQefm9oi8Oz6Kqf3nXHUwMDAw9Vx1MDAxMXnHlmBcdTAwMTdd2Pt7u651LLZcYjz3vfc7wVV3XHR2l76880TD9Fx0XHUwMDFiekturtt+6rZcdTAwMDdcdTAwMWbIXHUwMDE3c0dYd+q47y9hXHUwMDE1tlx1MDAwZb+ddtPww5dTR4pcdTAwMDO307uEnzrN7DZcdTAwMTE5XHUwMDE4gVx1MDAxMjUrXHUwMDEyOYTNXHUwMDE2OZhcbkkolOWIeaRaXHUwMDFmXHUwMDE260qqrJZUXHUwMDA1MzhcdTAwMDTymclNPaeSKZyKSmHxyKVQICQpYCtIaJZcdTAwMTmI01RcdTAwMGVcdTAwMDIjrTWq5syKlVxuZilcdTAwMWE+Mn5pimaOXHUwMDFhXHUwMDE4VzSFj7WYe8D8XHUwMDE00HExXHUwMDEzc1x1MDAxMFx1MDAxMEq0lm1eUKg/ktZcdTAwMTNzXHUwMDE4XGJDUlx1MDAwMTiejjnIXHImZSZkiMyulSFcdTAwMGZcdTAwMThEslFwXHUwMDE3XHUwMDAwxMSQXHUwMDFjMcrQpKrRniGh4bhcdTAwMDBcdTAwMTJz71x1MDAxNkWiwIwvgsQkNeN021x0bCfo6s7yLNNotPrZvG1gXHUwMDAwrNVcdTAwMWGRmlxmqURcdTAwMDSI4raz2zOjbGNcckKylIdSJlx0YkRWRlxmS2x1XHUwMDE5wnBwcai2VGDPdVxuSE2/gOtcZkn/UV5ip/Bcblx1MDAxOTp7ytVnXlx1MDAwN4KYz3JrOswn3PLMJH1cdTAwMWL6vpPq5T9ccp0gXHUwMDFkX+Z8PbcyfPeUaY/36tuq9o1cdTAwMTNBlFlcdTAwMWNVsOW7zVx1MDAxMir5h+L951dTR7cnQzi7KsFbWtio/l8oXHUwMDA3g1x1MDAwMM1OwpD2g2KEmlx1MDAxN0VOXHUwMDBmXHUwMDA3b4OrvnQv/Y8n9uG9+5f7z81/y1061uaQXHUwMDE31OSFMIJcdTAwMDRcdMr1a4XNM1x1MDAwM4RcdTAwMTBDY4Q9dldy0v84XHUwMDE304QlKIa0dOhFUjHn6F03OtlNXHUwMDBmLv0t92T70N/12zPU9/+p2NPtrmh5l252XoY3fcKG3j4jw3skxdnHblx1MDAwNqfKT0ArysQkJuOtXHUwMDE1ZoX64GWoeXmrfvvWlVkhrmVWzlxmJiBmkIFVM2uzjFxmccZYRqsvmpA9OVx1MDAxZZ+XkO1pXHUwMDE1o+JcdTAwMTdOyOYog/GErPDxXHUwMDE50oaBurSMIy2NafNSiJfsXHUwMDFlmGfx9o06oJ3j+z3w7XhcdTAwMWKsO1x1MDAwMDFhXHUwMDA2gZzAXHUwMDFjX9mvXHUwMDFiY9KGXHUwMDFiWId8MWBdlI3kOkmQ1VrWiyib40+nZF/sWIdcdTAwMDNcdTAwMTd+ci/aN1F/XHUwMDAw/1c2y1I2K1ren8XsPME0fcKG3q60dI04rXLNilx1MDAwNFx1MDAxM6SYjTdcdTAwMTeEzTHQvoAnKKb6/VtXwqawlrC5NCjEWFx1MDAwZVx1MDAwNdVcblx0u2FcdDvLPzlcdTAwMDGlmy8jmJ5cdTAwMTiPz1x1MDAxM0y7YZi+uGCaozfGXHUwMDA1U+FjLfRmVrBcdTAwMTma/UicoEBcdTAwMTJcZnDzXHUwMDEydn32tq7QXHUwMDAzwFx1MDAxMFRcYplVQ1x1MDAwNVx1MDAxNmhcdTAwMDR5WEslwXV+wIfIw6uDXHUwMDFlXHUwMDAyhqSMS0klg1JCMYlEgVxyqZNIJFx1MDAxONY+M4nGgUmAhFx1MDAxNEm0XHUwMDAwMJ9R0F48k5ld0G5Q8C2PuWqlmVBcdTAwMDBcdTAwMDGlXHUwMDAy6pVgXGLDyqjH6jdFXHUwMDE0wmH2KTBcdTAwMWVcdTAwMGWYX89cdTAwMWXxqT61XHUwMDE59YkhoONcZnFJXHUwMDAw1uGEJnyCyOA6USZMZ8Ukq1x1MDAxM6BcdKd+qmr27GDOrokwLu1tVP8/mc8gwLNcdI3RXGbmXFw011x1MDAxMvXqal1cdFxyXHUwMDBiXHUwMDAzScFcdTAwMDVikmnJUFx1MDAxZVRcdTAwMGaEpqVcdTAwMDTCNPuVnFxiQenqXGJNYoNBiHQ8M4xw5cHeks6kgVx1MDAwNOeSUo6ZoHLy2V/B9Z2QhTLCZ/HZokJj2XxcdTAwMDZcZk1j2lx1MDAxYlx1MDAwMfR2MSRk+ZxiwVx1MDAxZNyA+TOTXHUwMDEwPGzognxWrzxGfKJASL1OTGtcdTAwMDRcbinhXHUwMDEzLlx0gzJ9XGZcdTAwMDGYXHUwMDFmm1iIn5rNZlx1MDAwNXJ2TYTwLCrbXHUwMDE4mm+ZUXSW6ngrtkKHtGNcdTAwMGbVaXmPrVx1MDAxYkfdbk95vP46vzLBl69mxkIqu9PvPzZ+/Fx1MDAwYlx0sVx1MDAwYuIifQ==         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Cascadia.woff2\");       }       ExampleApp()Screen()Header()Footer()   <p>Note</p> <p>We've simplified the above example somewhat. Both the Header and Footer widgets contain children of their own. When building an app with pre-built widgets you rarely need to know how they are constructed unless you plan on changing the styles for the individual components.</p>  <p>Both Header and Footer are children of the Screen object.</p> <p>To further explore the DOM, we're going to build a simple dialog with a question and two buttons. To do this we're going import and use a few more builtin widgets:</p> <ul> <li><code>texual.layout.Container</code> For our top-level dialog.</li> <li><code>textual.layout.Horizontal</code> To arrange widgets left to right.</li> <li><code>textual.widgets.Static</code> For simple content.</li> <li><code>textual.widgets.Button</code> For a clickable button.</li> </ul> dom3.py   <pre><code>from textual.app import App, ComposeResult\nfrom textual.layout import Container, Horizontal\nfrom textual.widgets import Header, Footer, Static, Button\n\nQUESTION = \"Do you want to learn about Textual CSS?\"\n\n\nclass ExampleApp(App):\n    def compose(self) -&gt; ComposeResult:\n        yield Header()\n        yield Footer()\n        yield Container(\n            Static(QUESTION, classes=\"question\"),\n            Horizontal(\n                Button(\"Yes\", variant=\"success\"),\n                Button(\"No\", variant=\"error\"),\n                classes=\"buttons\",\n            ),\n            id=\"dialog\",\n        )\n\n\napp = ExampleApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>    <p>We've added a Container to our DOM which (as the name suggests) is a container for other widgets. The container has a number of other widgets passed as positional arguments which will be added as the children of the container. Not all widgets accept child widgets in this way. A Button widget doesn't require any children, for example.</p> <p>Here's the DOM created by the above code:</p>             @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Cascadia.woff2\");       }       App()Screen()Header()Footer()Container(    id=\"dialog\")Horizontal(        classes=\"buttons\")Button(        \"Yes\",    variant=\"success\")Button(        \"No\",    variant=\"error\")Static(    QUESTION,        classes=\"questions\")  <p>Here's the output from this example:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-153452756-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-153452756-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-153452756-r1 { fill: #c5c8c6 } .terminal-153452756-r2 { fill: #f6f5f5 } .terminal-153452756-r3 { fill: #e0dedb } .terminal-153452756-r4 { fill: #f3f3f3 } .terminal-153452756-r5 { fill: #7ae998 } .terminal-153452756-r6 { fill: #e76580 } .terminal-153452756-r7 { fill: #030905;font-weight: bold } .terminal-153452756-r8 { fill: #fbf5f6;font-weight: bold } .terminal-153452756-r9 { fill: #008139 } .terminal-153452756-r10 { fill: #780028 } .terminal-153452756-r11 { fill: #172127 } .terminal-153452756-r12 { fill: #f2f8fc }                                                                                ExampleApp          \u2b58ExampleApp11:49:14  Do\u00a0you\u00a0want\u00a0to\u00a0learn\u00a0about\u00a0Textual\u00a0CSS? \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Yes\u00a0\u00a0No\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581                \u2587\u2587     </p> <p>You may recognize some of the elements in the above screenshot, but it doesn't quite look like a dialog. This is because we haven't added a stylesheet.</p>","title":"The DOM"},{"location":"guide/CSS/#css-files","text":"<p>To add a stylesheet we pass the path to the app with the <code>css_path</code> parameter:</p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.layout import Container, Horizontal\nfrom textual.widgets import Header, Footer, Static, Button\n\nQUESTION = \"Do you want to learn about Textual CSS?\"\n\n\nclass ExampleApp(App):\n    def compose(self) -&gt; ComposeResult:\n        yield Header()\n        yield Footer()\n        yield Container(\n            Static(QUESTION, classes=\"question\"),\n            Horizontal(\n                Button(\"Yes\", variant=\"success\"),\n                Button(\"No\", variant=\"error\"),\n                classes=\"buttons\",\n            ),\n            id=\"dialog\",\n        )\n\n\napp = ExampleApp(css_path=\"dom4.css\")\n</code></pre> <p>You may have noticed that some of the constructors have additional keyword argument: <code>id</code> and <code>classes</code>. These are used by the CSS to identify parts of the DOM. We will cover these in the next section.</p> <p>Here's the CSS file we are applying:</p> <pre><code>/* The top level dialog (a Container) */\n#dialog {\n    margin: 4 8;\n    background: $primary;\n    color: $text;\n    border: tall $background;\n    padding: 1 2;\n}\n\n/* The button class */\nButton {\n    width: 1fr;\n}\n\n/* Matches the question text */\n.question {\n    text-style: bold;\n    height: 100%;\n    content-align: center middle;\n}\n\n/* Matches the button container */\n.buttons {\n    width: 100%;\n    height: auto;\n    dock: bottom;\n}\n</code></pre> <p>The CSS contains a number of rule sets with a selector and a list of rules. You can also add comments with text between <code>/*</code> and <code>*/</code> which will be ignored by Textual. Add comments to leave yourself reminders or to temporarily disable selectors.</p> <p>With the CSS in place, the output looks very different:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3965253181-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3965253181-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3965253181-r1 { fill: #c5c8c6 } .terminal-3965253181-r2 { fill: #f6f5f5 } .terminal-3965253181-r3 { fill: #e0dedb } .terminal-3965253181-r4 { fill: #f3f3f3 } .terminal-3965253181-r5 { fill: #121212 } .terminal-3965253181-r6 { fill: #f2f5f8;font-weight: bold } .terminal-3965253181-r7 { fill: #7ae998 } .terminal-3965253181-r8 { fill: #e76580 } .terminal-3965253181-r9 { fill: #030905;font-weight: bold } .terminal-3965253181-r10 { fill: #fbf5f6;font-weight: bold } .terminal-3965253181-r11 { fill: #008139 } .terminal-3965253181-r12 { fill: #780028 } .terminal-3965253181-r13 { fill: #f2f8fc }                                                                                ExampleApp          \u2b58ExampleApp11:49:14      \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e \u258a\u258e \u258a\u258e \u258aDo\u00a0you\u00a0want\u00a0to\u00a0learn\u00a0about\u00a0Textual\u00a0CSS?\u258e \u258a\u258e \u258a\u258e \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u00a0Yes\u00a0\u00a0No\u00a0\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e         </p>","title":"CSS files"},{"location":"guide/CSS/#why-css","text":"<p>It is reasonable to ask why use CSS at all? Python is a powerful and expressive language. Wouldn't it be easier to set styles in your <code>.py</code> files?</p> <p>A major advantage of CSS is that it separates how your app looks from how it works. Setting styles in Python can generate a lot of spaghetti code which can make it hard to see the important logic in your application.</p> <p>A second advantage of CSS is that you can customize builtin and third-party widgets just as easily as you can your own app or widgets.</p> <p>Finally, Textual CSS allows you to live edit the styles in your app. If you run your application with the following command, any changes you make to the CSS file will be instantly updated in the terminal:</p> <pre><code>textual run my_app.py --dev\n</code></pre> <p>Being able to iterate on the design without restarting the application makes it easier and faster to design beautiful interfaces.</p>","title":"Why CSS?"},{"location":"guide/CSS/#selectors","text":"<p>A selector is the text which precedes the curly braces in a set of rules. It tells Textual which widgets it should apply the rules to.</p> <p>Selectors can target a kind of widget or a very specific widget. For instance you could have a selector that modifies all buttons, or you could target an individual button used in one dialog. This gives you a lot of flexibility in customizing your user interface.</p> <p>Let's look at the selectors supported by Textual CSS.</p>","title":"Selectors"},{"location":"guide/CSS/#type-selector","text":"<p>The type selector matches the name of the (Python) class. For example, the following widget can be matched with a <code>Button</code> selector:</p> <pre><code>from textual.widgets import Widget\n\nclass Button(Static):\n    pass\n</code></pre> <p>The following rule applies a border to this widget:</p> <pre><code>Button {\n  border: solid blue;\n}\n</code></pre> <p>The type selector will also match a widget's base classes. Consequently a <code>Static</code> selector will also style the button because the <code>Button</code> Python class extends <code>Static</code>.</p> <pre><code>Static {\n  background: blue;\n  border: rounded white;\n}\n</code></pre>  <p>Note</p> <p>The fact that the type selector matches base classes is a departure from browser CSS which doesn't have the same concept.</p>  <p>You may have noticed that the <code>border</code> rule exists in both Static and Button. When this happens, Textual will use the most recently defined sub-class within a list of bases. So Button wins over Static, and Static wins over Widget (the base class of all widgets). Hence if both rules were in a stylesheet, the buttons would be \"solid blue\" and not \"rounded white\".</p>","title":"Type selector"},{"location":"guide/CSS/#id-selector","text":"<p>Every Widget can have a single <code>id</code> attribute, which is set via the constructor. The ID should be unique to it's container.</p> <p>Here's an example of a widget with an ID:</p> <pre><code>yield Button(id=\"next\")\n</code></pre> <p>You can match an ID with a selector starting with a hash (<code>#</code>). Here is how you might draw a red outline around the above button:</p> <pre><code>#next {\n  outline: red;\n}\n</code></pre> <p>A Widget's <code>id</code> attribute can not be changed after the Widget has been constructed. </p>","title":"ID selector"},{"location":"guide/CSS/#class-name-selector","text":"<p>Every widget can have a number of class names applied. The term \"class\" here is borrowed from web CSS, and has a different meaning to a Python class. You can think of a CSS class as a tag of sorts. Widgets with the same tag will share styles.</p> <p>CSS classes are set via the widget's <code>classes</code> parameter in the constructor. Here's an example:</p> <pre><code>yield Button(classes=\"success\")\n</code></pre> <p>This button will have a single class called <code>\"success\"</code> which we could target via CSS to make the button a particular color.</p> <p>You may also set multiple classes separated by spaces. For instance, here is a button with both an <code>error</code> class and a <code>disabled</code> class:</p> <pre><code>yield Button(classes=\"error disabled\")\n</code></pre> <p>To match a Widget with a given class in CSS you can precede the class name with a dot (<code>.</code>). Here's a rule with a class selector to match the <code>\"success\"</code> class name:</p> <pre><code>.success {\n  background: green;\n  color: white;\n}\n</code></pre>  <p>Note</p> <p>You can apply a class name to any widget, which means that widgets of different types could share classes.</p>  <p>Class name selectors may be chained together by appending another full stop and class name. The selector will match a widget that has all of the class names set. For instance, the following sets a red background on widgets that have both <code>error</code> and <code>disabled</code> class names.</p> <pre><code>.error.disabled {\n  background: darkred;\n}\n</code></pre> <p>Unlike the <code>id</code> attribute, a widget's classes can be changed after the widget was created. Adding and removing CSS classes is the recommended way of changing the display while your app is running. There are a few methods you can use to manage CSS classes.</p> <ul> <li>add_class() Adds one or more classes to a widget.</li> <li>remove_class() Removes class name(s) from a widget.</li> <li>toggle_class() Removes a class name if it is present, or adds the name if it's not already present.</li> <li>has_class() Checks if a class(es) is set on a widget.</li> <li>classes Is a frozen set of the class(es) set on a widget.</li> </ul>","title":"Class-name selector"},{"location":"guide/CSS/#universal-selector","text":"<p>The universal selector is denoted by an asterisk and will match all widgets.</p> <p>For example, the following will draw a red outline around all widgets:</p> <pre><code>* {\n  outline: solid red;\n}\n</code></pre>","title":"Universal selector"},{"location":"guide/CSS/#pseudo-classes","text":"<p>Pseudo classes can be used to match widgets in a particular state. Psuedo classes are set automatically by Textual. For instance, you might want a button to have a green background when the mouse cursor moves over it. We can do this with the <code>:hover</code> pseudo selector.</p> <pre><code>Button:hover {\n  background: green;\n}\n</code></pre> <p>The <code>background: green</code> is only applied to the Button underneath the mouse cursor. When you move the cursor away from the button it will return to its previous background color.</p> <p>Here are some other pseudo classes:</p> <ul> <li><code>:focus</code> Matches widgets which have input focus.</li> <li><code>:focus-within</code> Matches widgets with a focused a child widget.</li> </ul>","title":"Pseudo classes"},{"location":"guide/CSS/#combinators","text":"<p>More sophisticated selectors can be created by combining simple selectors. The logic used to combine selectors is know as a combinator.</p>","title":"Combinators"},{"location":"guide/CSS/#descendant-combinator","text":"<p>If you separate two selectors with a space it will match widgets with the second selector that have an ancestor that matches the first selector.</p> <p>Here's a section of DOM to illustrate this combinator:</p>             @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }       Container(    id=\"dialog\")Horizontal(        classes=\"buttons\")Button(\"Yes\")Button(\"No\")Screen()Container(    id=\"sidebar\")Button(        \"Install\")match these*don't* match this  <p>Let's say we want to make the text of the buttons in the dialog bold, but we don't want to change the Button in the sidebar. We can do this with the following rule:</p> <pre><code>#dialog Button {\n  text-style: bold;\n}\n</code></pre> <p>The <code>#dialog Button</code> selector matches all buttons that are below the widget with an ID of \"dialog\". No other buttons will be matched.</p> <p>As with all selectors, you can combine as many as you wish. The following will match a <code>Button</code> that is under a <code>Horizontal</code> widget and under a widget with an id of <code>\"dialog\"</code>:</p> <pre><code>#dialog Horizontal Button {\n  text-style: bold;\n}\n</code></pre>","title":"Descendant combinator"},{"location":"guide/CSS/#child-combinator","text":"<p>The child combinator is similar to the descendant combinator but will only match an immediate child. To create a child combinator, separate two selectors with a greater than symbol (<code>&gt;</code>). Any whitespace around the <code>&gt;</code> will be ignored.</p> <p>Let's use this to match the Button in the sidebar given the following DOM:</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1daXPayFx1MDAxNv2eX+HyfMmrXHUwMDFhNL0vUzX1ylx1MDAxYl6It1x1MDAxOMdxXqamXHUwMDA0yFi2QFjIYDw1//3dxlx1MDAxOFx0kFx1MDAwNDiIQCaaqlx1MDAxOCTRurp9l3P6dvf8/W5jYzPstZzN3zc2naeq7bm1wO5u/mrOd5yg7fpNuET639v+Y1Dt33lcdTAwMWKGrfbvv/3WsIN7J2x5dtWxOm770fba4WPN9a2q3/jNXHKdRvu/5t9cdTAwMTO74fzR8lx1MDAxYrUwsKKHXHUwMDE0nJpcdTAwMWL6wcuzXHUwMDFjz2k4zbBccq3/XHUwMDBmvm9s/N3/NyZd4FRDu1n3nP5cdTAwMGb6l2JcdTAwMDJcdTAwMTLKx0+f+M2+tJgxxKhiWFx1MDAwZe9w27vwwNCpweVcdTAwMWJcdTAwMTDaia6YU5unT1x1MDAwZr3CcfehXFyq1iv+x6B81Ph4XHUwMDE1PffG9byLsOe96MKu3j5cdTAwMDYxqdph4N87V24tvDVPXHUwMDFmOz/8XdtcdTAwMDc1RL9cbvzH+m3TabdHfuO37KpcdTAwMWL24Fx1MDAxY0fDky9a+H0jOvNkblDIYkQxoZSgSpPhRfNrirhFJOiAIcSU0HxMqlx1MDAxZN+Dnlx1MDAwMKl+Qf0jkqtiV+/rIFxcsza8J1xm7Ga7ZVx1MDAwN9Bf0X3d1/dcdTAwMTVieO7Wceu3IZxUKnqe09e6VlJcdTAwMTKCWNQn5iGtw1rfXHUwMDAy/lx1MDAxY1farVx1MDAxZLRcdTAwMDbK2WybLzFcdTAwMDGNbHvj5lx1MDAxMzehWMdcdTAwMWU3gkcquttb+1x1MDAwNz1153/aqYf+zrCtXHUwMDExe1x1MDAwYp2ncHN44Z9fs5ptfLkslfdvtjvh5aej7nn3+bjeqiQ3a1x1MDAwN4HfnbXdq6NPne5cdTAwMDe2e/wh4LX9XHUwMDFleSRsVyygXXJVOzwo3leP1Vx1MDAxNsPlhne61/xSX0C7Oal3vZr98Lh7gPTnw+enXHUwMDFiVSpcdTAwMTZrT3/Zne5P5S6m2eYneVx1MDAxM1xcf9zzd0J9dl1raX5Fb1ZXucGjLu70xNlflza9Pqtf1vjV0dk3iTtcIsWvs75I1OzgU1x1MDAxNGFcdTAwMWZbNfslXHUwMDEzQuiG5KBcdTAwMDX8p/Twuuc27+Fi89HzonN+9T5Knu9i8k6k7Vx1MDAxMTlHMjZT46eHXHUwMDE5XHUwMDFicoMkSNCZXHUwMDEzdnb3rWrC5lx1MDAxOVx0myBLLidh84SEzaO8PEjYkKtcdTAwMDVcdTAwMTOYxSxjYVx1MDAxOXuRxlx1MDAxOPW531xmL9znvj2JkbNFu+F6vZFu61spSLpcdTAwMDOXbbfpXHUwMDA07782zVx1MDAwNbf2x9fNmmt7fv3r5tfmf+JqbjsgjWmek5F2tjy3bix803NuRk0/dFx1MDAwMftcdTAwMGUvN9xaLY5mq6/PPpxcdTAwMDWD+oFbd5u2V55V8kwvzVx1MDAwNtec41RX5eDHWjOGZ/bVx+1tzfZ6qHhyt9XcVzLsnlx1MDAwNEer7qtCWkQhRDGd9FUmqUVcdTAwMTlTXHUwMDA0XHUwMDEx3vfVXHUwMDFjnVWjSWdVYtxZmWZcdTAwMTBBOc7BV7Oy3e5D8S44Oz54OC/uljpN++7y41x1MDAxN/cnul5cdTAwMTS6zkm969VsXuh6vbRQXHUwMDBlbne7lY5TXHUwMDBl6ZGHiXq+P299+NdpIS8ycNCz5e1e62z3ktxXXHUwMDFmcIufXHUwMDFmXHUwMDFl11x1MDAxNtBuVVx1MDAxY5/xc9ooXHUwMDFl1IJS4aSwfVK8JavYa9NIRvJcdTAwMDOjZlx1MDAwN5++P8ngUoyfXHUwMDFlXCJcdTAwMTdcIjHVUszBMrL1vKLIRZJcZuSipKWWhFxcVFx1MDAwMnKZpFx1MDAxOVpSjaj6sVnGXHUwMDAxgPdng9e99+b8XHUwMDBiYK96drvttFx1MDAwMbVXXHUwMDFlw9BvtpdNOKbg8nHCMc9LZDpvNvdQKHVgXzGwXHUwMDEzhYme2YErXb3fKNRDXSn0XHUwMDBlnXapt394WllxXHUwMDA3ZmZcXJ9LKbg0fkFGPVhcYmJhLFx1MDAxOcKcI+M835t6SI6QknHGuFx1MDAxNOqx5fTY/vmhf1cv71x1MDAxNLYudz63y92Ugbaf1GP+dnNS73o1m1x1MDAxN/VYLy3kRT3WS1x1MDAwYp7e3lGV/Vx1MDAxZLYjhHNRLj3Vi8VcdTAwMTW2hbyYx8LFncY8klx1MDAxZlx1MDAxODU7+PT9mYfSLJV5IFwiIFczOfuYabaeV1x1MDAxNbjwLOCiuSWWXHUwMDAzXFySmEdsaPSVeSBcZlxmXGKxXHUwMDFjgMtcdTAwMTRrjFx1MDAwMau8mcd2XHUwMDFmlb//unntXHUwMDAwNE9mXHUwMDE3mI38bEhcdTAwMWaq8DpO8HZ+MVx1MDAwNXyP84txUTPdMJtDQNem+lwiVlxuXHUwMDBijsXsJOLx+aDTPH1+vmS03PN4VTS/PFx1MDAxN1fcXHUwMDE3wcgspFx1MDAxNXDrXHUwMDE3X1x1MDAxY+NcdTAwMTDYklpcIqXRanBcYkqxXHUwMDE2XFzFRiOWwiGuXHUwMDBlXHUwMDBmzz5cXD8/bFx1MDAxZlx1MDAxNC78QtdcdTAwMGWfPznHPznEojhETupdr2bz4lx1MDAxMOulhbw4xHppIS9cdTAwMGWxXlrIq9iycHGnUZPkXHUwMDA3Rs1cdTAwMGU+LVx1MDAxMlxmZmKiNGpCXHUwMDExkuOnI2pcIjlSfJ6iSLaeV1x1MDAxM1x1MDAwZUnEMuBcdTAwMTAwXHUwMDEzslx1MDAxYzg0XHUwMDFiM8GaKVx1MDAwMmLKXHUwMDFjJkuvIDU58ZfNTKYg+lRm8lwiaaZcdTAwMTO+hKxcdTAwMDQvlFx1MDAwNKU6IcdSKCb57E6YXVx0X00nXHUwMDA0hG9cdTAwMTFwQLAyjlx1MDAxMJd8xFx1MDAwYlx1MDAxOcKWkERx+MC0XCKxQu6i3Vx1MDAxMFlAOFx1MDAxMMZcXEumheI0NnQzdEuhISgwXCKgZ1x1MDAwNHiimvRSjLjCwHDo/F7aXHUwMDE3dtle2lx1MDAwZe0g3HabNbdZh4tRrntdjDPLPMS+X1dcdTAwMWbbfTVcIlx1MDAwMb1IJSeIKOgyLWN31e2W4XpcdTAwMTYolzGEjL4pkXhwwzDnbjrN2nSZskuVMZlcbiBcdTAwMTSViMBcdTAwMTNcdMdA9LlSfEIqYlEphVx1MDAwNsJJNIJAKyak8ux2uOM3XHUwMDFhblxiyj/z3WY4ruS+NreMt986dm38KrxV/Np4WGiZXHUwMDE2R/lp9Gkj8pv+l+HnP39NvjvdnM0xYchRe+/if+eOaJjg1MlcdTAwMTbgXHUwMDE1nDGsZ1x1MDAxZvHMhoUrXHUwMDFh0SS2OIGghSRYN4uiSP/XXHUwMDEyWVx1MDAxYZCVMkNcdTAwMWKaxIZDXHUwMDE3XHUwMDBlKzC1qFCKQWDlbGTSRzTogiymXHUwMDAwXHUwMDAyMZCTgj3EJn5cZuq4mijMwWt+rGg2c+RcdTAwMDD9UI6FMj5EXHUwMDA0pFx1MDAxZlx1MDAxNvOiQdzAkKKwXHUwMDE5NWaIIU5cdTAwMDR7YzTLhFx1MDAxZqMyXHUwMDExqjX4rEJIKFxuXHUwMDFkPSlcdTAwMTO4P9dcZnPCzVxuO1x1MDAxMHytg1m6LZtjwopcdTAwMTdcdTAwMTbLIGWkwjOALIRcbj7HvJPs8tuKXHUwMDA2M8aBIyHMTWKkMjZA/lx1MDAxMs2IxbAwI7VcXFx1MDAwYinHxVpcXDTTXHUwMDFh+phA0NRcdTAwMWNDOoutXHUwMDFhioJcdTAwMTmz4CqVcFx1MDAxZsZE0IlZZVx1MDAxOEJcdTAwMTlcdTAwMDNcdTAwMGbG/9ZoVjCggHFMXHUwMDAwalx1MDAxM1xiaYyihHBGLUhcXFx1MDAwMJOAXHUwMDFlQ1xu44K+LZ5lXHUwMDE3ekal4lx1MDAxYfA/1lx1MDAxMlx1MDAxM4hqmuBcdKG4XHUwMDA1uFx1MDAxYVwirJTIyDUp0jpFs0KqMZtjwoznjGaZRTBcdTAwMTnjJWNcdTAwMDGNaCyQmme1nfZKl6Wb+6fS9dVFrfaJ2Fx1MDAxN1x1MDAxZj6ueDhjZlx1MDAwNY8wuYJAzkYyXG4j/eFcYlx1MDAwMbpcdTAwMDeEKlx1MDAwMbVpXHUwMDA0d+RcdTAwMDfOYlWtKICBbPBoKidgXHUwMDE4QGZcdLQknmyWUlx1MDAwYrvrlu9cXO+ycdTuak4qXi0sep++fbD3+Pzw+br49DlcZnadwu1F+7MkbFx1MDAxMTP2161cdTAwMTaWk3pzalZ23IPiw1x1MDAxZW5cdTAwMDR7f9V2w1x1MDAwZemceovQXHUwMDAyQ0FcdTAwMGI3O9WTq2LpRF3tXvnHYWl1tVu5a2ydeVx1MDAxZIF5WNiu6XrpxH/qra64i197PlDD58NcdTAwMTLx2lx1MDAxN6p1etxmndZt6ZBfflO70yoryVxuipp9zY5cdTAwMGJEYpmJNq2yXHUwMDAySDiVNCDgYkQxOnuWzTaLXHUwMDE1zbJmtUl6ltXCgoSGXHUwMDAx5+mcsyxLyLIk0v1rdqVUamqw1uKza96VlVj9YEpl5aJcdTAwMWE4TvN9Sk1Fjty/sJrKXHUwMDE0jDheU1x1MDAxOcqY6XjpfF2lbyZBgD4gTdjs2z9lR87V9DzOsVx1MDAwNWRcdTAwMWNcXItcdTAwMTGqXGJcdTAwMWatpsB3S0klluB5XHUwMDE4XHUwMDAzi1SUaOCZSopYrXnoiIybMlx1MDAwMFx1MDAwN8ebwLtcdTAwMDQhRpjW4lxyeHeVmXq2O2zEx/i4llx1MDAwMuJcdTAwMTJcdTAwMDeWLijhMYo4oMTMQlx1MDAxY1RcZtpcdTAwMWJcXJmTn89R0Vx1MDAxMVx1MDAxOFx0XHUwMDA19JxhXHSBMqGgXHUwMDAzsiCgsohzbpKb1lx1MDAxM1wirVx1MDAxMz9PN15zxMw2auhd/O/bpqfSdGpcdTAwMGVsUYE7izm217huPV2497RyfcnK4fn+XHUwMDE26dyffl7x4EWJtKggXHUwMDFjSHpcdTAwMDJsMJvXYWVqwfqFnH/33eugQ1x1MDAxOFn+XCK34z1WPFdq9+amVun2yrf+VlhOISA/J6jO325O6l2vZnPbvW6ttJBTs7ntXpePuHmNIOQk7nn9oX7uXFw9XHUwMDEwLb94lyeNtt1yUsZRXHUwMDE2tdle4otEzb6Cg+89MEEoSV1cdTAwMDFDMCFCKI5nh1x1MDAxONn9t6JcdTAwMTCDkiyIQVx1MDAwMOsuXHRizLbfXHUwMDFlxpIjSlx1MDAwMX2v39DEN+6313ZrTsVcdTAwMGWWvf/FXHUwMDE04DzThnsjome66pRcdTAwMTVr6ZtjMsaAiDE++3DG9lHTx1xi6JdDjypP5Vx1MDAxMr7URSfFXcfcbtRZx6csvdVZMZrqrVhbXGZpRvCLt45OPmCCWIJcbo6Y+PbRjF8wqSgllEpwVZkweJGw5Vx1MDAwNSZcdTAwMTKx+Fx1MDAwNNalsIHzvaND9CRLN6dXLr66PdNfetf7P9nAothATupdr2bzYlx1MDAwM+ulhbyWq62XXHUwMDE28lqulpO4eW15sV6dtnxOlPxcIjOKe1rd3T65bqn60Ze7Y7vje0/bjM0m7uDTd+daXHUwMDE00dTldUT3t9mLIYVp2C3bLL5cdTAwMGLVmlx1MDAwMb1cdTAwMTGWhd6ktPCi0NuU0dxcdTAwMDT8lrC1uWRMXHUwMDAzXHUwMDA0zFx1MDAwMb+tXHUwMDBl01x1MDAxYSxaM+de+MrXzcNmO7Q9b9k8a1xuXHUwMDFkSVltlyp4ppOmXHUwMDE3jFx1MDAxOUl1Ulx1MDAwNCleUDVcdTAwMDfDyp5cdTAwMTKzmlx1MDAwM1winHFLMCp14oBcYuHCMsMgS3BSxixJiOCCJMzZYNriQjAkJkvFVCBwJPKWXUJ+iEpxwVxmWWlcIoSmXHUwMDEwZzWmOKk8yyjlmsoppeJR+deoYltIMlx1MDAxZnPEXGYnauNd/O/8MYOn1mk55cpUjGfP65m4bDUjXHUwMDA2w8Si4OuvQ6hcdCt2XHUwMDExNsaY91x1MDAxY1x1MDAxM2RcdTAwMTFuZvQogYmAXGJcdTAwMTCb2Fx1MDAxNa3XNZNcdTAwMTckVlx0U6qppGZcdTAwMDe2t+T7VVx1MDAwZVx1MDAxY9njl6OBXHUwMDAzXHUwMDExJFx1MDAxMWdUSCRcdTAwMTiOZlx1MDAxN1xmXHUwMDAzh7RcdTAwMTQliGIzXHUwMDE3XHUwMDA3joR1XHUwMDE3M001yc71XHUwMDFiI4uHQVx1MDAxY7PGiygzUYlINLlOd3K18DqFqnSrNUdkr3OGq3RcdTAwMWWSselcdTAwMTnHRFx1MDAxMqlm5yFS2yd35O7sYLdXrX/0xd72WUWkxKtcdTAwMTVcdTAwMTlDJlx1MDAxNFx1MDAwMI7Go9jhZb8z9mrd31TmyVx1MDAxODkmSdPeJiFcZlx1MDAwNtJcdTAwMDH2IN8y2+1bho5Xi2YnXHUwMDExm9lnt142a05gXGLLRnjrtjde9lx1MDAxZE+e6qpGfjz7VNfQb6WxmZHXXHUwMDFhpy7Jor1ccnxA0EhcdTAwMDVcdTAwMWbIJGQ5x+L67P5fSW+mWFlcdTAwMTC2zNbiXHUwMDE0Y6FGx1x1MDAxNFx1MDAwNMA9zNToXG6qMY92hJRv92hNLU0pXHUwMDE1ZjNcdTAwMWUmaGxCXnxcdTAwMTVX4lx1MDAxYS6zmo/QkZLdXHUwMDBmXHUwMDAxOLJzwijggNxcdTAwMGXAXHUwMDExXHUwMDExXGKMWkNATli4XHUwMDBl0VrNwlW+XHUwMDE5a1x1MDAxOHGkJmbSqlZcdTAwMDSeiVTiYliwMqzM/zvDbFx1MDAwMrXe2CPVes1ReDXcNOTxbtDupt1qXYRgZcNeXHUwMDAwQ3Zrg5BcdTAwMWS93GbHdbrbXHTuddM/TFx1MDAwNOyr0Vx1MDAwNFx1MDAxYce84t//vPvn/yxzRNUifQ==         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0/dist/excalidraw-assets/Cascadia.woff2\");       }       Container(    id=\"dialog\")Horizontal(        classes=\"buttons\")Button(\"Yes\")Button(\"No\")Screen()Container(    id=\"sidebar\")Button(        \"Install\")Underline this button  <p>We can use the following CSS to style all buttons which have a parent with an ID of <code>sidebar</code>:</p> <pre><code>#sidebar &gt; Button {\n  text-style: underline;\n}\n</code></pre>","title":"Child combinator"},{"location":"guide/CSS/#specificity","text":"<p>It is possible that several selectors match a given widget. If the same style is applied by more than one selector then Textual needs a way to decide which rule wins. It does this by following these rules:</p> <ul> <li> <p>The selector with the most IDs wins. For instance <code>#next</code> beats <code>.button</code> and <code>#dialog #next</code> beats <code>#next</code>. If the selectors have the same number of IDs then move to the next rule.</p> </li> <li> <p>The selector with the most class names wins. For instance <code>.button.success</code> beats <code>.success</code>. For the purposes of specificity, pseudo classes are treated the same as regular class names, so \".button:hover\" counts as 2 class names. If the selectors have the same number of class names then move to the next rule.</p> </li> <li> <p>The selector with the most types wins. For instance <code>Container Button</code> beats <code>Button</code>.</p> </li> </ul>","title":"Specificity"},{"location":"guide/CSS/#important-rules","text":"<p>The specificity rules are usually enough to fix any conflicts in your stylesheets. There is one last way of resolving conflicting selectors which applies to individual rules. If you add the text <code>!important</code> to the end of a rule then it will \"win\" regardless of the specificity.</p>  <p>Warning</p> <p>Use <code>!important</code> sparingly (if at all) as it can make it difficult to modify your CSS in the future.</p>  <p>Here's an example that makes buttons blue when hovered over with the mouse, regardless of any other selectors that match Buttons:</p> <pre><code>Button:hover {\n  background: blue !important;\n}\n</code></pre>","title":"Important rules"},{"location":"guide/CSS/#css-variables","text":"<p>TODO: Variables</p>","title":"CSS Variables"},{"location":"guide/actions/","text":"<p>TODO: Actions docs</p>","title":"Actions"},{"location":"guide/animator/","text":"<p>TODO: Animator docs</p>","title":"Animator"},{"location":"guide/app/","text":"<p>In this chapter we will cover how to use Textual's App class to create an application. Just enough to get you up to speed. We will go in to more detail in the following chapters.</p>","title":"App Basics"},{"location":"guide/app/#the-app-class","text":"<p>The first step in building a Textual app is to import the App class and create a subclass. Let's look at the simplest app class:</p> <pre><code>from textual.app import App\n\n\nclass MyApp(App):\n    pass\n</code></pre>","title":"The App class"},{"location":"guide/app/#the-run-method","text":"<p>To run an app we create an instance and call run().</p> simple02.py<pre><code>from textual.app import App\n\n\nclass MyApp(App):\n    pass\n\n\napp = MyApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Apps don't get much simpler than this\u2014don't expect it to do much.</p>  <p>Tip</p> <p>The <code>__name__ == \"__main__\":</code> condition is true only if you run the file with <code>python</code> command. This allows us to import <code>app</code> without running the app immediately. It also allows the devtools run command to run the app in development mode. See the Python docs for more information.</p>  <p>If we run this app with <code>python simple02.py</code> you will see a blank terminal, something like the following:</p> <p>                                                                             MyApp                                    </p> <p>When you call App.run() Textual puts the terminal in to a special state called application mode. When in application mode the terminal will no longer echo what you type. Textual will take over responding to user input (keyboard and mouse) and will update the visible portion of the terminal (i.e. the screen).</p> <p>If you hit Ctrl+C Textual will exit application mode and return you to the command prompt. Any content you had in the terminal prior to application mode will be restored.</p>  <p>Tip</p> <p>A side effect of application mode is that you may no longer be able to select and copy text in the usual way. Terminals typically offer a way to bypass this limit with a key modifier. On iTerm you can select text if you hold the Option key. See the documentation for your terminal software for how to select text in application mode.</p>","title":"The run method"},{"location":"guide/app/#events","text":"<p>Textual has an event system you can use to respond to key presses, mouse actions, and internal state changes. Event handlers are methods which are prefixed with <code>on_</code> followed by the name of the event.</p> <p>One such event is the mount event which is sent to an application after it enters application mode. You can respond to this event by defining a method called <code>on_mount</code>.</p>  <p>Info</p> <p>You may have noticed we use the term \"send\" and \"sent\" in relation to event handler methods in preference to \"calling\". This is because Textual uses a message passing system where events are passed (or sent) between components. We will cover the details in events.</p>  <p>Another such event is the key event which is sent when the user presses a key. The following example contains handlers for both those events:</p> event01.py<pre><code>from textual.app import App\nfrom textual import events\n\n\nclass EventApp(App):\n\n    COLORS = [\n        \"white\",\n        \"maroon\",\n        \"red\",\n        \"purple\",\n        \"fuchsia\",\n        \"olive\",\n        \"yellow\",\n        \"navy\",\n        \"teal\",\n        \"aqua\",\n    ]\n\n    def on_mount(self) -&gt; None:\n        self.screen.styles.background = \"darkblue\"\n\n    def on_key(self, event: events.Key) -&gt; None:\n        if event.key.isdecimal():\n            self.screen.styles.background = self.COLORS[int(event.key)]\n\n\napp = EventApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>The <code>on_mount</code> handler sets the <code>self.screen.styles.background</code> attribute to <code>\"darkblue\"</code> which (as you can probably guess) turns the background blue. Since the mount event is sent immediately after entering application mode, you will see a blue screen when you run this code.</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2078733322-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2078733322-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2078733322-r1 { fill: #f3f3f3 } .terminal-2078733322-r2 { fill: #c5c8c6 }                                                                                EventApp                                    </p> <p>The key event handler (<code>on_key</code>) specifies an <code>event</code> parameter which will receive a Key instance. Every event has an associated event object which will be passed to the handler method if it is present in the method's parameter list.</p>  <p>Note</p> <p>It is unusual (but not unprecedented) for a method's parameters to affect how it is called. Textual accomplishes this by inspecting the method prior to calling it.</p>  <p>For some events, such as the key event, the event object contains additional information. In the case of Key it will contain the key that was pressed.</p> <p>The <code>on_key</code> method above uses the <code>key</code> attribute on the Key event to change the background color if any of the keys 0 to 9 are pressed.</p>","title":"Events"},{"location":"guide/app/#async-events","text":"<p>Textual is powered by Python's asyncio framework which uses the <code>async</code> and <code>await</code> keywords to coordinate events.</p> <p>Textual knows to await your event handlers if they are coroutines (i.e. prefixed with the <code>async</code> keyword).</p>  <p>Note</p> <p>Don't worry if you aren't familiar with the async programming in Python. You can build many apps without using them.</p>","title":"Async events"},{"location":"guide/app/#widgets","text":"<p>Widgets are self-contained components responsible for generating the output for a portion of the screen and can respond to events in much the same way as the App. Most apps that do anything interesting will contain at least one (and probably many) widgets which together form a User Interface.</p> <p>Widgets can be as simple as a piece of text, a button, or a fully-fledge component like a text editor or file browser (which may contain widgets of their own).</p>","title":"Widgets"},{"location":"guide/app/#composing","text":"<p>To add widgets to your app implement a <code>compose()</code> method which should return a iterable of Widget instances. A list would work, but it is convenient to yield widgets, making the method a generator.</p> <p>The following example imports a builtin Welcome widget and yields it from compose.</p> widgets01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Welcome\n\n\nclass WelcomeApp(App):\n    def compose(self) -&gt; ComposeResult:\n        yield Welcome()\n\n    def on_button_pressed(self) -&gt; None:\n        self.exit()\n\n\napp = WelcomeApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>When you run this code, Textual will mount the Welcome widget which contains a Markdown content area and a button:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-967547693-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-967547693-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-967547693-r1 { fill: #c5c8c6 } .terminal-967547693-r2 { fill: #f3f4f4 } .terminal-967547693-r3 { fill: #f3f4f4;font-weight: bold } .terminal-967547693-r4 { fill: #f3f4f4;font-style: italic; } .terminal-967547693-r5 { fill: #f3f4f4;font-weight: bold;text-decoration: underline; } .terminal-967547693-r6 { fill: #98729f } .terminal-967547693-r7 { fill: #7ae998 } .terminal-967547693-r8 { fill: #030905;font-weight: bold } .terminal-967547693-r9 { fill: #008139 }                                                                                WelcomeApp           \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Welcome!\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d  Textual\u00a0is\u00a0a\u00a0TUI,\u00a0or\u00a0Text\u00a0User\u00a0Interface,\u00a0framework\u00a0for\u00a0Python\u00a0inspired\u00a0 by\u00a0modern\u00a0web\u00a0development.\u00a0We\u00a0hope\u00a0you\u00a0enjoy\u00a0using\u00a0Textual!   Dune\u00a0quote  \u258c\u00a0\"I\u00a0must\u00a0not\u00a0fear.\u00a0Fear\u00a0is\u00a0the\u00a0mind-killer.\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0 \u258c\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u00a0I\u00a0will\u00a0face\u00a0my\u00a0fear.\u00a0I\u00a0will\u00a0permit\u00a0\u00a0 \u258c\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u00a0And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will \u258c\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u00a0Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0\u00a0\u00a0 \u258c\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0OK\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581     </p> <p>Notice the <code>on_button_pressed</code> method which handles the Button.Pressed event sent by a button contained in the Welcome widget. The handler calls App.exit() to exit the app.</p>","title":"Composing"},{"location":"guide/app/#mounting","text":"<p>While composing is the preferred way of adding widgets when your app starts it is sometimes necessary to add new widget(s) in response to events. You can do this by calling mount() which will add a new widget to the UI.</p> <p>Here's an app which adds the welcome widget in response to any key press:</p> widgets02.py<pre><code>from textual.app import App\nfrom textual.widgets import Welcome\n\n\nclass WelcomeApp(App):\n    def on_key(self) -&gt; None:\n        self.mount(Welcome())\n\n    def on_button_pressed(self) -&gt; None:\n        self.exit()\n\n\napp = WelcomeApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>When you first run this you will get a blank screen. Press any key to add the welcome widget. You can even press a key multiple times to add several widgets.</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2204208135-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2204208135-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2204208135-r1 { fill: #c5c8c6 } .terminal-2204208135-r2 { fill: #f3f4f4 } .terminal-2204208135-r3 { fill: #f3f4f4;font-style: italic; } .terminal-2204208135-r4 { fill: #f3f3f3 } .terminal-2204208135-r5 { fill: #f3f4f4;font-weight: bold } .terminal-2204208135-r6 { fill: #f3f4f4;font-weight: bold;text-decoration: underline; } .terminal-2204208135-r7 { fill: #98729f } .terminal-2204208135-r8 { fill: #7ae998 } .terminal-2204208135-r9 { fill: #030905;font-weight: bold } .terminal-2204208135-r10 { fill: #008139 }                                                                                WelcomeApp         Textual\u00a0is\u00a0a\u00a0TUI,\u00a0or\u00a0Text\u00a0User\u00a0Interface,\u00a0framework\u00a0for\u00a0Python\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 inspired\u00a0by\u00a0modern\u00a0web\u00a0development.\u00a0We\u00a0hope\u00a0you\u00a0enjoy\u00a0using\u00a0Textual!   Dune\u00a0quote  \u258c\u00a0\"I\u00a0must\u00a0not\u00a0fear.\u00a0Fear\u00a0is\u00a0the\u00a0mind-killer.\u00a0Fear\u00a0is\u00a0the\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u258c\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u00a0I\u00a0will\u00a0face\u00a0my\u00a0fear.\u00a0 \u258c\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u00a0And\u00a0when\u00a0it\u00a0has\u00a0\u00a0 \u258c\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u00a0Where\u00a0the\u00a0\u00a0\u00a0 \u258c\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0    \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0OK\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581    \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Welcome!\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d     </p>","title":"Mounting"},{"location":"guide/app/#exiting","text":"<p>An app will run until you call App.exit() which will exit application mode and the run method will return. If this is the last line in your code you will return to the command prompt.</p> <p>The exit method will also accept an optional positional value to be returned by <code>run()</code>. The following example uses this to return the <code>id</code> (identifier) of a clicked button.</p> question01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static, Button\n\n\nclass QuestionApp(App[str]):\n    def compose(self) -&gt; ComposeResult:\n        yield Static(\"Do you love Textual?\")\n        yield Button(\"Yes\", id=\"yes\", variant=\"primary\")\n        yield Button(\"No\", id=\"no\", variant=\"error\")\n\n    def on_button_pressed(self, event: Button.Pressed) -&gt; None:\n        self.exit(event.button.id)\n\n\napp = QuestionApp()\nif __name__ == \"__main__\":\n    reply = app.run()\n    print(reply)\n</code></pre> <p>Running this app will give you the following:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-813200425-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-813200425-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-813200425-r1 { fill: #f3f3f3 } .terminal-813200425-r2 { fill: #c5c8c6 } .terminal-813200425-r3 { fill: #507bb3 } .terminal-813200425-r4 { fill: #f2f5f8;font-weight: bold } .terminal-813200425-r5 { fill: #001541 } .terminal-813200425-r6 { fill: #e76580 } .terminal-813200425-r7 { fill: #fbf5f6;font-weight: bold } .terminal-813200425-r8 { fill: #780028 }                                                                                QuestionApp         Do\u00a0you\u00a0love\u00a0Textual? \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Yes\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0No\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581                     </p> <p>Clicking either of those buttons will exit the app, and the <code>run()</code> method will return either <code>\"yes\"</code> or <code>\"no\"</code> depending on button clicked.</p>","title":"Exiting"},{"location":"guide/app/#return-type","text":"<p>You may have noticed that we subclassed <code>App[str]</code> rather than the usual <code>App</code>.</p> question01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static, Button\n\n\nclass QuestionApp(App[str]):\n    def compose(self) -&gt; ComposeResult:\n        yield Static(\"Do you love Textual?\")\n        yield Button(\"Yes\", id=\"yes\", variant=\"primary\")\n        yield Button(\"No\", id=\"no\", variant=\"error\")\n\n    def on_button_pressed(self, event: Button.Pressed) -&gt; None:\n        self.exit(event.button.id)\n\n\napp = QuestionApp()\nif __name__ == \"__main__\":\n    reply = app.run()\n    print(reply)\n</code></pre> <p>The addition of <code>[str]</code> tells Mypy that <code>run()</code> is expected to return a string. It may also return <code>None</code> if App.exit() is called without a return value, so the return type of <code>run</code> will be <code>str | None</code>. Replace the <code>str</code> in <code>[str]</code> with the type of the value you intend to call the exit method with.</p>  <p>Note</p> <p>Type annotations are entirely optional (but recommended) with Textual.</p>","title":"Return type"},{"location":"guide/app/#css","text":"<p>Textual apps can reference CSS files which define how your app and widgets will look, while keeping your Python code free of display related code (which tends to be messy).</p> <p>The chapter on Textual CSS describes how to use CSS in detail. For now lets look at how your app references external CSS files.</p> <p>The following example sets the <code>css_path</code> attribute on the app:</p> question02.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static, Button\n\n\nclass QuestionApp(App[str]):\n    def compose(self) -&gt; ComposeResult:\n        yield Static(\"Do you love Textual?\", id=\"question\")\n        yield Button(\"Yes\", id=\"yes\", variant=\"primary\")\n        yield Button(\"No\", id=\"no\", variant=\"error\")\n\n    def on_button_pressed(self, event: Button.Pressed) -&gt; None:\n        self.exit(event.button.id)\n\n\napp = QuestionApp(css_path=\"question02.css\")\nif __name__ == \"__main__\":\n    reply = app.run()\n    print(reply)\n</code></pre> <p>If the path is relative (as it is above) then it is taken as relative to where the app is defined. Hence this example references <code>\"question01.css\"</code> in the same directory as the Python code. Here is that CSS file:</p> question02.css<pre><code>Screen {\n    layout: grid;\n    grid-size: 2;\n    grid-gutter: 2; \n    padding: 2;   \n}\n#question {\n    width: 100%;\n    height: 100%;\n    column-span: 2;\n    content-align: center bottom;\n    text-style: bold;\n} \n\nButton {\n    width: 100%;\n}\n</code></pre> <p>When <code>\"question02.py\"</code> runs it will load <code>\"question02.css\"</code> and update the app and widgets accordingly. Even though the code is almost identical to the previous sample, the app now looks quite different:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-715002506-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-715002506-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-715002506-r1 { fill: #c5c8c6 } .terminal-715002506-r2 { fill: #f3f3f3;font-weight: bold } .terminal-715002506-r3 { fill: #f3f3f3 } .terminal-715002506-r4 { fill: #507bb3 } .terminal-715002506-r5 { fill: #e76580 } .terminal-715002506-r6 { fill: #f2f5f8;font-weight: bold } .terminal-715002506-r7 { fill: #fbf5f6;font-weight: bold } .terminal-715002506-r8 { fill: #001541 } .terminal-715002506-r9 { fill: #780028 }                                                                                QuestionApp                   Do\u00a0you\u00a0love\u00a0Textual?   \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Yes\u00a0\u00a0No\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581            </p>","title":"CSS"},{"location":"guide/app/#classvar-css","text":"<p>While external CSS files are recommended for most applications, and enable some cool features like live editing (see below), you can also specify the CSS directly within the Python code. To do this you can set the <code>CSS</code> class variable on the app which contains the CSS content.</p> <p>Here's the question app with classvar CSS:</p> question03.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static, Button\n\n\nclass QuestionApp(App[str]):\n    CSS = \"\"\"\n    Screen {\n        layout: table;\n        table-size: 2;\n        table-gutter: 2; \n        padding: 2;   \n    }\n    #question {\n        width: 100%;\n        height: 100%;\n        column-span: 2;\n        content-align: center bottom;\n        text-style: bold;\n    } \n\n    Button {\n        width: 100%;\n    }\n    \"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        yield Static(\"Do you love Textual?\", id=\"question\")\n        yield Button(\"Yes\", id=\"yes\", variant=\"primary\")\n        yield Button(\"No\", id=\"no\", variant=\"error\")\n\n    def on_button_pressed(self, event: Button.Pressed) -&gt; None:\n        self.exit(event.button.id)\n\n\napp = QuestionApp()\nif __name__ == \"__main__\":\n    reply = app.run()\n    print(reply)\n</code></pre>","title":"Classvar CSS"},{"location":"guide/app/#whats-next","text":"<p>In the following chapter we will learn more about how to apply styles to you widgets and app.</p>","title":"What's next"},{"location":"guide/devtools/","text":"<p>Note</p> <p>If you don't have the <code>textual</code> command on your path, you may have forgotten so install with the <code>dev</code> switch.</p> <p>See getting started for details.</p>  <p>Textual comes with a command line application of the same name. The <code>textual</code> command is a super useful tool that will help you to build apps.</p> <p>Take a moment to look through the available sub-commands. There will be even more helpful tools here in the future.</p> <pre><code>textual --help\n</code></pre>","title":"Devtools"},{"location":"guide/devtools/#run","text":"<p>You can run Textual apps with the <code>run</code> subcommand. If you supply a path to a Python file it will load and run the application.</p> <pre><code>textual run my_app.py\n</code></pre> <p>The <code>run</code> sub-command assumes you have an App instance called <code>app</code> in the global scope of your Python file. If the application is called something different, you can specify it with a colon following the filename:</p> <pre><code>textual run my_app.py:alternative_app\n</code></pre>  <p>Note</p> <p>If the Python file contains a call to app.run() then you can launch the file as you normally would any other Python program. Running your app via <code>textual run</code> will give you access to a few Textual features such as live editing of CSS files.</p>","title":"Run"},{"location":"guide/devtools/#live-editing","text":"<p>If you combine the <code>run</code> command with the <code>--dev</code> switch your app will run in development mode.</p> <pre><code>textual run --dev my_app.py\n</code></pre> <p>One of the the features of dev mode is live editing of CSS files: any changes to your CSS will be reflected in the terminal a few milliseconds later.</p> <p>This is a great feature for iterating on your app's look and feel. Open the CSS in your editor and have your app running in a terminal. Edits to your CSS will appear almost immediately after you save. </p>","title":"Live editing"},{"location":"guide/devtools/#console","text":"<p>When building a typical terminal application you are generally unable to use <code>print</code> when debugging (or log to the console). This is because anything you write to standard output will overwrite application content. Textual has a solution to this in the form of a debug console which restores <code>print</code> and adds a few additional features to help you debug.</p> <p>To use the console, open up two terminal emulators. Run the following in one of the terminals:</p> <pre><code>textual console\n</code></pre> <p>You should see the Textual devtools welcome message:</p> <p>                                                                             textual\u00a0console         \u258cTextual\u00a0Development\u00a0Console\u00a0v0.1.15 \u258cRun\u00a0a\u00a0Textual\u00a0app\u00a0with\u00a0textual\u00a0run\u00a0--dev\u00a0my_app.py\u00a0to\u00a0connect. \u258cPress\u00a0Ctrl+C\u00a0to\u00a0quit.                         </p> <p>In the other console, run your application with <code>textual run</code> and the <code>--dev</code> switch:</p> <pre><code>textual run --dev my_app.py\n</code></pre> <p>Anything you <code>print</code> from your application will be displayed in the console window. Textual will also write log messages to this window which may be helpful when debugging your application.</p>","title":"Console"},{"location":"guide/devtools/#verbosity","text":"<p>Textual writes log messages to inform you about certain events, such as when the user presses a key or clicks on the terminal. To avoid swamping you with too much information, some events are marked as \"verbose\" and will be excluded from the logs. If you want to see these log messages, you can add the <code>-v</code> switch.</p> <pre><code>textual console -v\n</code></pre>","title":"Verbosity"},{"location":"guide/devtools/#textual-log","text":"<p>In addition to simple strings, Textual console supports Rich formatting. To write rich logs, import <code>log</code> as follows:</p> <pre><code>from textual import log\n</code></pre> <p>This method will pretty print data structures (like lists and dicts) as well as Rich renderables. Here are some examples:</p> <pre><code>log(\"Hello, World\")  # simple string\nlog(locals())  # Log local variables\nlog(children=self.children, pi=3.141592)  # key/values\nlog(self.tree)  # Rich renderables\n</code></pre> <p>Textual log messages may contain console Markup:</p> <pre><code>log(\"[bold red]DANGER![/] We're having too much fun\")\n</code></pre>","title":"Textual log"},{"location":"guide/devtools/#log-method","text":"<p>There's a convenient shortcut to <code>log</code> available on the App and Widget objects. This is useful in event handlers. Here's an example:</p> <pre><code>from textual.app import App\n\nclass LogApp(App):\n\n    def on_load(self):\n        self.log(\"In the log handler!\", pi=3.141529)\n\n    def on_mount(self):\n        self.log(self.tree)\n\napp = LogApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>","title":"Log method"},{"location":"guide/events/","text":"","title":"Events"},{"location":"guide/events/#events","text":"<p>TODO: events docs</p> <ul> <li>What are events</li> <li>Handling events</li> <li>Auto calling base classes</li> <li>Event bubbling</li> <li>Posting / emitting events</li> </ul>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1cXFtz2shcdTAwMTJ+z69weV92q4wy90uqTp3y3Y4vcYJ9nOTslkuRXHUwMDA0yCCJlYSxSeW/n1x1MDAxNnbQXHUwMDA1JFxiXHUwMDE3m+xcdFx1MDAwZlx1MDAwZcxcZjOtnv66v+lp8vXVxsZm/NB1Nt9sbDr3ltlx7dDsb24l7XdOXHUwMDE4uYFcdTAwMGZdZPg5XG56oTVcdTAwMWPZiuNu9Ob1a89cZttO3O2YlmPcuVHP7ERxz3ZcdTAwMDPDXG68127seNG/k7/npuf8q1x1MDAxYnh2XHUwMDFjXHUwMDFh6VwiNcd24yB8XFzL6Tie48dcdTAwMTHM/l/4vLHxdfg3I13oWLHpNzvO8Fx1MDAwYsOujIBaXHUwMDE0W89cdTAwMDN/KCwnjEmmhVx1MDAxY1xycKM9WC52bOhtgMhO2pM0bV5uXHUwMDFmuHyv6+1aonvpfMDdnbdHrXTVhtvp1OOHzqMmTKvVXHUwMDBiMzJFcVx1MDAxOLSda9eOW9CPXHUwMDBi7aPvRVx1MDAwMSgh/VZcdTAwMTj0mi3fiaLcd4KuabnxQ9KG0Kj1UVx0bzbSlnv4pKSBXHUwMDA0RopwgqjGio16k+9cdTAwMGJuXGLOhUBaXHUwMDEwipDSXHUwMDA1uXaDXHUwMDBl7Fx1MDAwNMj1XHUwMDFiXHUwMDFhvlLJvphWu1x04vl2OoZZwmnwdEz/6WlcdOZcdTAwMDaC1ZEgfNTZctxmK4ZeRrChcKYncoZboFx1MDAxMGVcdTAwMTjJVKRkue6xPbSFv4pcbmyZYfdJUZtR8iEjalwi5X7RkLLGlNnk652bz5Z3KFx1MDAwZq/9vVx1MDAwYvfCa+/ti4fRXFw5yzPDMOhvjnq+Pb1LRet1bfPRnDCoXHUwMDE4M0mpRCx9oI7rt6HT73U6aVtgtVNcdTAwMGJcdTAwMWO2ftuaw/I55mWWT5hgiEvFZ7b8zifvuP+f29bhwfZpZHduoqbZqJdYfsGCZ7R7O4iT5Zdo+Fx1MDAxOGEjUTqTXHUwMDE4UUmy+kgmoFJcdTAwMWJMcc1cdTAwMDFcdTAwMWNcdTAwMTgrLVx1MDAxN7L8xvA1bvmAN1x1MDAwM1OSM++R4UOfkmNmjzVcdTAwMDUsaime2fC3z7vyulbf/9gjtUE9Olx1MDAxYSjW6E02/Ni5jzN2v/Vr2tJpc6O3Zl3w5XxKTs6MO2FcdTAwMDJcdTAwMTVbv7tcdTAwMTOssVx1MDAwNDvHJMXpNH9SreY1jaRcdTAwMTiJKofCkDY0oWwpXHUwMDBlJVx1MDAwZU0/6pohXHUwMDAwd4JTkWlcdTAwMTBcdTAwMWY5XHUwMDEzQsdcdTAwMWNcdGNcdTAwMDKEwSztWZojWaY9pttcdTAwMWX4cd1cdTAwMWRcZkNcdTAwMTTKtVx1MDAxZZie23nI7dzQUEHS3Y5rtX//I6vNyIFFh5Ypc8O3O24zseVNXHUwMDBiXHUwMDFlw1x0c2ZcdTAwMWW7QD9HXHUwMDAzPNe2s2HVXHUwMDAyXHUwMDE5TJgzPJ4lXHUwMDFjXHUwMDA2odt0fbNzWVx1MDAxMLFcdTAwMTJ4tmt6gW9Pwp6kpaFcdTAwMWMzpVx04lx1MDAxOM+OvV3zdK/zaad5Ojij5Gj/4vYqeLDWXHUwMDFke4pcdTAwMWFcdTAwMTJcdTAwMTGqIFxcM8SIIDnoccpcclwiXHUwMDE1XHUwMDE1QmHOJCeLQO83zE3zy4RYTjJcdTAwMTBcdTAwMWLBXHUwMDBlc1iaXHUwMDE3qO13XHUwMDAwckIw1oiuXHUwMDAwgFVBjO/Qh1x1MDAwYuo1dunpgWbNt1x1MDAwN/fbf6PFY+PPMu20kDt5wfVcdTAwMGK5gpaGXFzBXGLCcHSlM6O+WsvrinpViXpcdTAwMDVcZlx1MDAxZXGKtYbeXHUwMDA1UV9cdTAwMTlwXHSegHwmingnICvSROLlw3194u1OL45cdTAwMDP/T1x1MDAxZqyh6cRcdTAwMTPDLkO5by0t7E6JXFzFsFuQtFx1MDAxMoOVR2mge6RcZolcdTAwMWN8vNSa6JmReGH3XHUwMDBl6M6gf3c5XHUwMDE43Hw6vYvPXHUwMDFh+4MlI9E2o9ZyT9NMXHUwMDEwQ1x1MDAwYo0pXHUwMDEyXHUwMDE0QizOIVx1MDAxMSNuMKmRhFxijCTYpFhcdTAwMTlcdTAwMTTnOVBDbFx1MDAxNpLoTL7jWcJwYH48OlwiXHUwMDE3ylxud+JQmuYh6tTdxePliqalvcG7XGLdxadcdTAwMTdn9t/xp+7JzUldzpb3elx0cVx1MDAxN0jTvYS4S592XHUwMDFhyZm84PqRXHUwMDFjnUlIXHUwMDE3zzZKXGKqMdKzZ+ir1bymLIdcdFnhWqkwXHUwMDE4XHUwMDE2/DlcXOusaVx1MDAwNU1cdCNcbqXb8lx1MDAwZqQ5L5FWmMJcZuZKK5ThXHUwMDBlk8xdT1x1MDAxMXj0kXLr2UnN/Ye9Njras9TliXN7ftmv+WK3M1x1MDAxZvCKNH6mK1x1MDAwMjJcdTAwMWbyXHUwMDEwMlx1MDAwMDJUTUJcdTAwMWWc6lxy0IKmijA4XyjEXHUwMDE3QV5pVoFiZEglleCMgN7lOFx1MDAwNFx1MDAxOTUoQnLSXHUwMDE1XHUwMDE5ZUpjLl9cdTAwMDCJakEkYmVcdTAwMTBKwMaUhpMspngyMOlcdTAwMTgwbaexXHUwMDEx+DfW0PhcdTAwMDGSja1ccudcdTAwMGWk/uPNn34yMGkyXHUwMDFjz41/f+T/xkVcYo/s2JOhTPW4bnOY7jiNuFx1MDAwMtFx0C2Dc04hRezO/1x1MDAxNJVof6Q6XHUwMDEz4C4zhlVAu6REXG6Wtf5pYK/mXj9cdTAwMDR2Vlx1MDAwNvaKKDtcdTAwMWbW4WRuKFxyXHUwMDA3dCmxUkk2IYd2XHUwMDA2KMNJUoUo0EY26i1cdTAwMTHrcHAxNFx1MDAwMVmFZsOXXHUwMDE4RzvF4HbgtFx1MDAwMkMkXHUwMDE4Jlx1MDAxYsO8IFxmXHUwMDFjNKVznGaGYj53+I1iM4x3XFzfdv0mdKYsXHUwMDE2kG71knVcdTAwMTFsXGbDmHJMmaCY8ZH2k4czu4mRXHUwMDFhikiKYVxcctGU2byNUYnIcUWNxtPgXHUwMDExmd50fHuKSFx1MDAxY3aHMVwiidBcdTAwMTJcXCxcdTAwMWVcdTAwMTOJIFx1MDAwM3OuMIfdSl7p8bIo0+S4PiZTx4zi3cBcdTAwMDPQg+YvXHUwMDAy14+LXHUwMDFhXHUwMDFlqnI7wXjLMcd8XGY8U7av6FxmusmM+UNr+m4jRcvww+j9X1tcdTAwMTNHU2RcYlxim1x1MDAwNKnEXHUwMDE0KeEq+/VcdTAwMWHlXHUwMDA2hm1cdTAwMDKrUYRKjjCfOiE1OOwuelImXHUwMDEy+fmQNFx1MDAxMCFcdTAwMTjiMWKJwqdNV460x/mKIEvne5X994dvSUlpuVx1MDAxMeZCSs4on73q4lx1MDAxM5f1xsByXCJzr/5esr633W/K5zvNzOdnXHUwMDEzzUtNhUZcZiVcdTAwMWEm+VvSXHUwMDFh0Fx1MDAxZMIoQIvDMYLTXHUwMDA172pK6y4yXHUwMDE5u9S1jmVsXHUwMDE52FxiXHUwMDAwWM9xQfNcIr40e5RRudaKo8xcdTAwMTlIbDadaFwiXHUwMDAxembeM5KlXHUwMDEyXpXZWEZKk7FcdTAwMTBcdTAwMThcdTAwMTKvrWZPXHUwMDE4nLv2W7ttdY/fXHUwMDFlXHUwMDFk9z427XpcdTAwMTddX6x7wkBx8L5cXFBEaUJoRFx1MDAxZWFCXHUwMDFhVEhcdTAwMDRndFxyzFbjXCLFesmSPiySolx1MDAwNMnlM6diV5UtXHUwMDFjXHUwMDFjbL/r35xfvcdXTbone6dcdTAwMGY1b8ak6fc4s0Q3UYmpivpcdTAwMDIlyqNcdTAwMTbTXHUwMDEwblx1MDAwNVwis0et41x1MDAwZjuHjasjtN9Q+/zgeF9fb3/21lx1MDAxZVJMXHUwMDFhXHUwMDA0XHUwMDFlXHUwMDE0I4jQmst8lSynwoCDqqSKsmHQWsnp4MfrXHUwMDBiNEXAcTh/5vqCL6fb6KRR+0y9a+fgrFY/uLliavFcdTAwMWP5//m00zL6k1x1MDAxN3w5h1LGgWV5Rp8gXHUwMDAydJyo2VNcctVaXldnwkmFM1x1MDAwMWdqXGLYXHUwMDExiMxCLepMfrxsYTyhT1x04kIh9Y/O59et0HH8Z07oT1x0hUVyPJJxfnJcZiGqXGZ8XHUwMDEwvjjnmMxOju2GXGI+P7iXtzfmg31tXtyG5u1RXHT45qv6Xz70hDKIguMnREyFpc4n+ZKafyUo04pcYqqUWugubak1/5zAyYVKulx1MDAwMlxmVlx1MDAwNbGT5lm/drh31eN3l/37y755f2e+XTw2/pp2XHUwMDE1004jXGKTXHUwMDE3XFxDglCeJKOE0iQszk5cdTAwMTCqtbyuXHUwMDA0QdJcbi/FMEoupfTISy10XHUwMDE5sYwrf1x1MDAwNa5cdM5cdTAwMTl4XHUwMDA1v0haXHUwMDFmhpC/aHtmpjAl1E4ubczIOj9jwFx1MDAxNJVcdTAwMTdcdTAwMDIgzZRcdTAwMTCEzl5nbHnv2uK8fflBvP9cdTAwMTjX1Oll6513+Fx1MDAxM1Q3MoNzklxcXHUwMDA3XGJMeeZcdTAwMTczQ9qguCGRgsM2eKfkyn11eJyDOihcdPRcdTAwMWTrVVx1MDAxNFx1MDAwMVSFN1prvI/FXHSY+cdcdTAwMGb9Qe3Q69LPrcWj5qqmXVF144rEXVW+8ifbtGVPO41BTV5w/Vx1MDAxOFx1MDAxNCa69Fx1MDAwZVx1MDAwNIOL0ljMzqCqtbymXGaKXHRd4bBcdTAwMTlcdTAwMTZcdTAwMDZmXFw9g8OejUBJrSWRmv9cIlCrXCJQU3jHYlx1MDAwNKq0rFxuXHUwMDEzXFxcbkSJwDLZXHUwMDBmUKfqy6Q1LatcdTAwMTKaXHUwMDFiYGZcIvlcdCrwXHUwMDEwVKyqwlx1MDAwNsFMSUE5YZyzxTIuK62r4oiQ5P+EmePXW+tQV1UsXHUwMDA1mlLeXHUwMDA0XHUwMDBiI6ZcdTAwMThcdTAwMDFcdTAwMWIlmVx1MDAwM+jGqLqJXHUwMDE4VFx1MDAwMC3mICBcdTAwMDVBOctcZslVN02+Qn9cdTAwMWH8q7rpccL1rG569bTCptnt1mMwzJG1gO279lNcdTAwMDRIt2HzznX6O+Wp0FdPXHUwMDFinvgqJ9mMr99efftcdTAwMWZFQFx1MDAxMlx1MDAxYyJ9    Click()ButtonWidgetClick()def on_click(self, event):    self.emit(Button.Pressed)MessagesScreen()Button.Pressed()Button.Pressed()","title":"Events"},{"location":"guide/layout/","text":"<p>In textual the layout defines how widgets will be arranged (or layed out) on the screen. Textual supports a number of layouts which can be set either via a widgets <code>styles</code> object or via CSS.</p> <p>TODO: layout docs</p>","title":"Layout"},{"location":"guide/layout/#vertical","text":"<p>A vertical layout will place new widgets below previous widgets, starting from the top of the screen.</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO2ZW2/aSFx1MDAxNIDf8ytcIvrauHO/VFqtXHUwMDAyTdrck9KkTVdVNLFcdTAwMDdwMLbXXHUwMDFlXHUwMDEyoOp/37FJMVx1MDAxOFx1MDAxY1FcdTAwMWFRtrt+MPjM7XjmO2fOXHUwMDE5f93a3q6ZYaxrr7dreuCqwPdcdTAwMTL1UHuZye91kvpRaItQ/pxG/cTNa3aMidPXr171VNLVJlx1MDAwZZSrnXs/7asgNX3Pj1x1MDAxYzfqvfKN7qV/ZvdT1dN/xFHPM4lTXGayoz3fRMl4LFx1MDAxZOieXHUwMDBlTWp7/8s+b29/ze9T2iXaNSpsXHUwMDA3Om+QXHUwMDE3XHUwMDE1XG5CLsrS0yjMlYVcdTAwMDJRxFx1MDAxMGZsUsNP39jxjPZsccvqrIuSTFS7rNdcdTAwMGbj+/6RSNBdfFF/84lcdTAwMGZIUlxm2/KDoGmGQa6Wm0RputNRxu1cdTAwMTQ1UpNEXf3R90wn06Akn7RNIztcdTAwMTNFqyTqtzuhTtOZNlGsXFzfXGYzXHUwMDE5XHUwMDAwXHUwMDEz6XgmXm9cdTAwMTeSQbZOQjqSUFxmXHUwMDExncjzloI6XHUwMDE4gVx1MDAxOflYl0ZcdTAwMTTYJbC6vFx1MDAwMPlVaHOr3G7bqlx1MDAxNHqTOiZRYVx1MDAxYavELlRR7+HxLYlkXHUwMDBl5kJcdTAwMDI2NUhH++2OsaVcdTAwMThcdEdcdTAwMTDMp8bX+fxD24ZcdTAwMGLBWVGSjVx1MDAxYVx1MDAxZng5XHUwMDBiX8pz11FJ/DhHtTR7mNI4U3ZvXG6konE/9tR4vSFjXGJJiVx1MDAwMVx1MDAxN6yYvMBcdTAwMGa7tjDsXHUwMDA3QSGL3G6BSC799nJcdTAwMTU2KapiU2AkhSRkeTRcdTAwMTk4XCJcdTAwMThGh+qm8/Gi07jY8y/gTVx1MDAwNZolvGahROuDUlx1MDAwModIXHUwMDA0XHUwMDA1L0NJXHUwMDFjgGd5eX4oiVNBJGJcdTAwMGVEXHUwMDEwyFx1MDAwNUxcIkgpwFx1MDAxOK5cdTAwMTFJXGZcdTAwMDCUjHD0XFxI6iDw43QxkKjSWVxujJl1XHUwMDE0kixccuS+PLl517x6f/k+uvp09Fx1MDAwZXXdYd1bXHUwMDA1yPV5SVxmoFx1MDAwMyBlZSdpWSmJV8DxRUtRu+HMo1xikYMgmfWBXHUwMDEzXHUwMDE4IXRKbvu7e+SIQYq5/Fx1MDAxN3vHp1BcdTAwMTSVvpFbs4VcdTAwMThRsDSKny/SgTm6eXu81/Aurlx1MDAxM91NSXC04ShcIupQXHUwMDA2KGFz3lFcIuu5XHUwMDEwnt0zV+LxXHUwMDE2XHUwMDAw+lxcPFwiwFx0XHUwMDAzkEn8e1x1MDAwMmnjxCogXHQj2DpqKZZcdTAwMDbyslx1MDAxZTY/XHUwMDFm3lx1MDAwNVx1MDAwZnz0rn/gN+7vXFx8sOFAUuhAYO9cdTAwMGLcI3IwXHUwMDEwVP4skFx1MDAxMN1cbsGeXHUwMDBiSMKJpIKJ3zZ8xE+kNvaShEO8PJLnXHUwMDFmklH3nDY8vvu3fHOTXHUwMDA0QI3OKpDsKLfTT/RcdTAwMDZAXHSBXHUwMDAz5YJcdTAwMTDSukeHlZBZfc+mXHUwMDBivCQhwsk8nlxcSCW1Sc04r1wiMrtcdTAwMDQr44lcdTAwMTBEmGNcdTAwMDLXiifN7Eg8XHUwMDE3nkZcdTAwMGbMQl9Z6SohQ4xhgsDyiVxybV2NTsO3g+udYDS63mVR86ZcdTAwMTFvOpg2S5jlkZKf4fDJVIaRef5cdTAwMTbEi1x1MDAxNkKbSeBcco9cdTAwMTeLdY1C0/RHOlx1MDAwZi1mpPuq51x1MDAwN8OZpclBtJrahW5rMz2VqbZjjk97ZmrvXHUwMDA2fjtDtVx1MDAxNujWLMPGd1UwKTbR1Ju7dnRlu0tcdTAwMGW88ltEid/2Q1x1MDAxNXyY1WR1705cdTAwMTCv9u6SXHUwMDAwIaRcXD5cdTAwMDKW51x1MDAxMFx1MDAxY1x1MDAwZY7htZa3rZM9fkz76d6mXHUwMDFiXHUwMDExXHUwMDA20mFcdTAwMDLPXHUwMDA2XHUwMDE2w9ztXHUwMDEzR1xiJH7y1OpcdTAwMDVcdTAwMDEuoJwtXGI5XGIlXHUwMDBlp7jihFx1MDAwMELqXGLISFaaXHUwMDBmXHUwMDAz56yNXCJJKON0vdFcdTAwMDdcdTAwMDXUboZriT4oJlV8YmRcdTAwMTM0xvnyeKrPO83hzd6nncuTw+O6XHUwMDFj+Gr/Q3Pj8bTBXHUwMDA3gVxczmVoWWhApSzFXHUwMDA2K1x1MDAwMeoy3aKLXHUwMDAxtUFxJaCEOyjXazzIPJ9cYoBcZm+I15utUWhDtWfjUyVJ9LD4XHUwMDFjqzpX43ZcdTAwMGKU8Fx1MDAwN+KP+5OUjc5cdTAwMGUur0x8XHUwMDE2JOfDs1x1MDAwN4YvVmNzfUerwsa/slx1MDAxY1x1MDAwMH8/yypHrWUybVx1MDAxYaawfprMqlxcXHI4nHO8OFXDXGI5XHUwMDA0US5cdTAwMTZcdTAwMWZnXHRcblxiWyFcdTAwMWPONVt3eJJcdTAwMWGVmLpcdTAwMWZ6ftguN9GhV1FcdTAwMTKo1DSiXs83Vo3zyFx1MDAwZk25Rt7vblx1MDAwNnZHq7kow/Y8XVa2gDjrsfhSll3Fv+1cdTAwMDKR/GHy/8vLxbXnVjK7ptew6GFr+vdHs1x1MDAwNVwiy8JJoGMxlVhQtLy1plx1MDAwN/qwvdc+xfuXcrA/knetNiSbvpNYN+0ghNjc0Vxutnnk/LeIX5M/XHUwMDAwTG3ehjb9POW/lEBUWZR84ps3QcKGrj/wzftYJo2O2b3bXHUwMDFk6uOr3TPVc+/ev918i+JcdTAwMGVcdTAwMTFg/vScWIviXGbymVx1MDAxM6NfZFFYXHUwMDEwXHS53aP/t6i1W9TW475XU3HcNHaGbI2xfdlF8L3H1yz6q937+qG+6IQwv7JecyvN7EFnS/D129a3f1x1MDAwMLFE1Vx1MDAwMCJ9    WidgetWidgetWidget  <p>TODO: Explanation of vertical layout</p>","title":"Vertical"},{"location":"guide/layout/#horizontal","text":"<p>A horizontal layout will place the first widget at the top left of the screen, and new widgets will be place directly to the right of the previous widget.</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO2aa0/bSFx1MDAxNIa/8ytQ+rVM536ptFpcdTAwMTEuLTQtlNAtdFVVjj1JZnFsYztcdGnFf9+xQ+PE2GxcYlHKatdCSTzX45nnXHUwMDFjvzPDj63t7UY6iXTj9XZD37iOb7zYXHUwMDE5N15m6SNcdTAwMWQnJlxmbFx1MDAxNs7vk3BcdTAwMTi7ecl+mkbJ61evXHUwMDA2Tnyl08h3XFxcckYmXHUwMDE5On6SXHUwMDBlPVx1MDAxM1x1MDAwMjdcdTAwMWO8MqlcdTAwMWUkv2efXHUwMDFmnIH+LVxuXHUwMDA3Xlx1MDAxYYOik1x1MDAxZO2ZNIynfWlfXHUwMDBmdJAmtvU/7f329o/8c866WLupXHUwMDEz9HydV8izXG5cdTAwMDNcdTAwMTFH5dRcdTAwMGZhkFx1MDAxYitcdTAwMDRnTFBOZ1x1MDAwNUyyb7tLtWdzu9ZkXeRkSY1wrHY6o1x1MDAxMbuiTv8vfja8uWw3o6LXrvH9djrxc6vcOEySnb6Tuv2iRJLG4ZX+bLy0n9lWSp/VTUI7XHUwMDEwRa04XHUwMDFj9vqBTpKFOmHkuCadZGlcdTAwMTDOUqdcdTAwMDPxertIubF3XHUwMDFjXHUwMDAxXHUwMDA0XHUwMDEx45jNkvOKXHUwMDA0XHUwMDAyXHUwMDBlXHUwMDA1xUhcblYyZi/07Vx1MDAxNFhjXsD8KszpOO5Vz9pcdTAwMTR4szJp7Fx1MDAwNEnkxHaiinLju8ekilx1MDAwM1wipILz3fe16fVTm0uwXHUwMDA0kpL5/nU+XHUwMDAxXGJhXHUwMDAyle2ZzHKyXqMjL2fha3nw+k5cdTAwMWPdXHJSI8lu5izOjD2YXHUwMDAzqag8jDxnOuGIc4yVXCJcbjNajJ5vgiubXHUwMDE5XGZ9v0hcdTAwMGLdq4KRPPX25SpsXHUwMDEyXsemopxcdTAwMGKO4fJs9odB29//LryTZvzHXHUwMDA1jpLjT+ZdXHKbJb5cdTAwMTapxJukktPFuc8rYlx1MDAwNVx1MDAwNJSqRMXaqaSgXHUwMDA2ScxcdTAwMDHCXGKqKii55Vx1MDAxMVNcdTAwMDHR5qAkXHUwMDEwYiigQOuCUvu+iZJqJFx1MDAxMalDkiNCqP1cdTAwMTNLI/lpsPd2ctChqOd8eXt4zVvHcFx1MDAxZq2C5OZcdTAwMDKlwFx1MDAwMImFaDiNk1xuMIZcdTAwMDV5KpEvulx1MDAwZcNcZt+nXHUwMDExYYBRyVx1MDAxN2Y8XCJcdTAwMDQoI1xi36NcdTAwMTFbw1xiUYJvNERaKyGkXHUwMDFioZGLOlx1MDAxYe1gXHREkIBqaVx1MDAxY9E5vWmpTtg62lx1MDAxOUYnh63v3eB493njaN+cwlx1MDAwZYLi94mUgFx1MDAxMlXGYiVcIjtcdTAwMTCytVx1MDAxMVx0MWFIWiY3TyTeXHUwMDAwkVx1MDAxONfKSeuLUmJCKVmayPeuuL5pXlx1MDAxY6TiYHzcla0v+/1o/3lcdTAwMTOJsOWC2ZBTISaFXHUwMDE1ckzAJyOJcEdKvi4kXHUwMDExQlx1MDAxMCumXHUwMDE4+1x1MDAxNyP5oI7k9WtcdTAwMWOroZVgXG7hpZmM3r9PzpvDvdZxcn74RSr+5qzztobJvuP2h7H+9VRcblx1MDAwMaxywVx1MDAxMpWZXHUwMDE0XGYwWKZ19Vx1MDAxNzevopJZuShcdFOVWGIuXHUwMDAxrMKSWIVPIedqk1QqSlx1MDAxMCNiXVSm+iatVpGyXHUwMDE2SIVskGRKLS8jj1x1MDAwZttJ2mpCdlx1MDAxMnjJ8FrH74KLi+dO5DROksVcdTAwMTVGVlx1MDAxNUtcYlxixvjJSD64upnb1ChQrFjNWFxirYhcIlx1MDAxYlxczWShUVwiwsgjICzmOlxm0rb5rnOlsZB66FxmjD9ZmK6cTmupnfyeTufHMtG2z5xGuVB61ze9jN+Gr7uLYKfGdfxZdlx1MDAxYc49uWt7d2xz8ZFXfoowNj1cdTAwMTM4/vmiJatHeilonWNcdFx1MDAxYuelJIIv7Ve4NWiN+67eXHUwMDFm6dbHyWRMh2ejo+fuV5gxUN5cdTAwMWGYRnr7XG6AVns+OdJP1UdlpIdcdTAwMWPYt7pYeM3MRXpcdTAwMDZ4aZPtp59Jqz6gIHijXHUwMDEyRFFcdTAwMWJq4WP8bHUwXHUwMDE1YnVgXCJMoWBYLs3ldde9hEcn15+Cvve5N1x1MDAxYZs2Pfz23Lkkklx1MDAwMJS90O8pXHUwMDEwXHUwMDA0eFmarIIlxrKjq7HkXHUwMDE4SJ53QVV2iSo4XHUwMDE1kFx1MDAwNFcqXHUwMDExpCRWVJBccitcdTAwMTEsXHUwMDA15OuCs1aJqHouKYNcdTAwMWOJR+xnnYs3x6NT7/SjY051e6/3wfF26/aznlxymFhIIGBpVTZcdTAwMTVcIlx1MDAxMqh1bCGsQYhQqlxis4vHTetcdTAwMTAqXHUwMDFmJYb/Szqk1qPkXHUwMDAzXHUwMDEyhNs4w+dm8Vx1MDAxZlx1MDAwZtQ+XHUwMDFmOJff6NklvDa9sVaBOPlr8tw9imJcdTAwMDHKbvPToaDgpf3jX6TsieJ2sUfxpj0qO7T636Oyr3tcdTAwMWXlxHE4rnQpWOtSdrVoXHUwMDAzOH/EnuK3uHnK946uXHUwMDA35uDj8I1vlHmz667mUlx1MDAxYjxcdJSA4vu73FxmXCLwkCtJ0WWdp1x1MDAxY1x1MDAwMTJA+KK7XHUwMDE2+4mAK1U6XHUwMDE4v/MtaHOs4EUr7HHn1q3mW1xmMkVcdTAwMWVz6jJnh1x1MDAxM6dNXHUwMDEzeCbolavowKvJ8Z0k3Vx1MDAwYlx1MDAwN1x1MDAwM5NaM05DXHUwMDEzpOVcdTAwMTJ5u7tcdTAwMTnVfe3cc1x1MDAxMdvyfF5cdTAwMTn/KGux+K+O7Cp+bVx1MDAxN3zkN7PfX19Wlq6Yyewq5rBoYGv++3brrsmGXHUwMDEzRe3UXHUwMDBluDVo6rh2To13XHUwMDE3kYrnaoyMXHUwMDFlN6v2XHUwMDA38ytcdTAwMGJcdTAwMDC5+2d+prOn+3G7dfs38GbaXHUwMDA3In0=         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }       WidgetWidgetWidget  <p>TODO: Explantion of horizontal layout</p>","title":"Horizontal"},{"location":"guide/layout/#center","text":"<p>A center widget will place the widget directly in the center of the screen. New widgets will also be placed in the center of the screen, overlapping previous widgets.</p> <p>There probably isn't a practical use for such overlapping widgets. In practice this layout is probably only useful where you have a single child widget.</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nNWXW2/bNlx1MDAxNMff+ylcZve1UXhcdTAwMTdcdTAwMTlgXHUwMDE4nHRZ0mxuV6fpsmFcdTAwMThcdTAwMTiJllx0U5eJtHNDvvsoObUsx1x1MDAwZbzUMDI9XGLQ4eVcdTAwMWPy/Pg/4v2bTqfrblx1MDAwYtU96HTVTSSNjkt53X1X2aeqtDrPfFx1MDAxM6q/bT4po7rnyLnCXHUwMDFl7O+nslx1MDAxYytXXHUwMDE4XHUwMDE5qWCq7URcdTAwMWHrJrHOgyhP97VTqf2xevdlqn4o8jR2ZdA42VOxdnk586WMSlXmrJ/9T//d6dzX74XoSlx1MDAxNTmZJUbVXHUwMDAz6qaFXHUwMDAwXHUwMDAxW7b286xcdTAwMGWWUoxpXGJDMO+g7XvvzqnYt1x1MDAwZX3IqmmpTN2Pn0+MMlx1MDAxZk4tXHUwMDFj9tXPXHUwMDE3VCfclo3XoTZm4G5NXHUwMDFkVVTm1u6NpItGTVx1MDAwZuvKfKy+6tiNfFx1MDAxZrhkn4+1ud+IZlSZT5JRpqxtjclcdTAwMGJcdTAwMTlpd1vZQLOE2UZcdTAwMWN0XHUwMDFhy43/wkBcdTAwMDRIIMF4SOdcctVQRFnAXHUwMDA1oiGHiC6Fc5RcdTAwMWKfXHUwMDA0XHUwMDFmzltQP01AVzJcdTAwMWEnPqosnvdxpcxsIUufqqbf9eNCiWBcdTAwMDFcdTAwMGW5XHUwMDAwbMHJSOlk5KrgXHUwMDEwXHUwMDBmOMFcdTAwMGKRWVWnQISQYoZ5s5bKaXFcdTAwMWHXMPy1vHsjWVx1MDAxNo+71LXVx0LAVaw/LZDUXGaeXHUwMDE0sZxlXHUwMDFjMoaQXHUwMDEwzHuFeN5udDb2jdnEmMaWR+NcdTAwMDaS2vrw7lx1MDAwNXBCLtbBiYDgXHUwMDA0YkrJxnT+dszkP72LL/BzL75y4PBTf7CWziXC2lxcop1yXHUwMDE5glx1MDAxMOBF+r5xXHShgKSFzPa5JMFcdTAwMWEokfePIFx1MDAxMCuwRJwwgVx1MDAwNWW7w1x1MDAxMvtlUlx1MDAxNHK0LSyVMbqwq6Gk4VooXHUwMDExXHUwMDAxXGJ7IdmYSWhcXFx1MDAxNNvxydHFuexHe1NzqT9+eFx0kzvUSlx1MDAwNFx1MDAwMr/h5KlWMuphpeC7tfLtUFJE0VNcdTAwMWUhXG5cdTAwMTAkbS2cXHUwMDEzXHRhQGjroDzyXHUwMDE4+lPCXHUwMDE5RWR3PFwiwSmFLNyaTD7DI4JwXHUwMDFkj1x1MDAxMFx1MDAxMVx1MDAwZVx1MDAxOSB0cyBvpoOz+DzLit4vJ1x0j/hcdTAwMTFOXHUwMDBm81dcdTAwMGUkIUFcdTAwMThS3FaqXHUwMDE5kSSgXHUwMDAyhu26/jJcIq+8wmyLSFx1MDAwMlx1MDAwMWV0p1xuuVNcIlx1MDAxOV1LJIWCXHUwMDAyXHUwMDA0Nq/al45cXJP4MFx1MDAxMX+MP/V+7+9l788y/sqBXGZBgCHHtFVcdTAwMWRnQOJAXGK+JJ4vXHUwMDAxXHUwMDEyoivO2baAhIRcdTAwMDJIOcbof0zks7+SbKEoLzPJIeC+ZjG2MZQ4Oc56N3eEqPIqncqvf5dwcLZcdTAwMDbKkYxGk1K9XHUwMDAyLFx1MDAxOVx1MDAwYsBcbpXEOFxmQkp5XHUwMDFi15fXbbZcdTAwMDJL7zb45qKeiK2gk/tb0PLReOSTcsaxXHUwMDFmvlPF9GXD/83RbfHp1I1bhWbI15HJWMh8XHKHm5dvfX7X+7KX0PjXy/MzejhMU927fe1g+ppcdTAwMTCQZakkSFx1MDAwNP5g0u+WymdvOIw85XCFPFwi4C+9XHUwMDAy7PSi/d/VsUlznrmBvpvdk1vWY5lqc9vKVI2lj9TnPVFucSut8j5nXG7Z6t0zOqnA7Vx1MDAxYTVsXHUwMDEz7XQkzbzZ5Vx1MDAwYiuPvHfppytP4+VV5KVOdCbNeTuS2WHy73qPurIoXHUwMDA2zu+Q7zE7Wj5cdDp+XFxmM193qtX14Spxqp9q1vqAVmdBVSm4f3jz8C/DXFz9NyJ9         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }       Widget  <p>TODO: Explanation of center layout</p>","title":"Center"},{"location":"guide/layout/#grid","text":"<p>A grid layout arranges widgets within a grid composed of columns and rows. Widgets can span multiple rows or columns to create more complex layouts.</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nN2ZW3PaRlx1MDAxNMff8yk85DVsds/eM9PpONimwZc40NZ2O52MkFx1MDAxNiQjkCxcdOM4k+/elUhcdTAwMTFcYpNQyrhcdTAwMDQ9aEZnb8e7P875n/XnXHUwMDE3XHUwMDA3XHUwMDA3texTbGpvXHUwMDBlaubBdcLAS5xJ7VVuvzdJXHUwMDFhRCPbXHUwMDA0xXdcdTAwMWGNXHUwMDEzt+jpZ1mcvnn9eugkXHUwMDAzk8Wh41x1MDAxYXRcdTAwMWakYydMs7FcdTAwMTdEyI2Gr4PMXGbTn/P3hTM0P8XR0MtcdTAwMTJULlI3XpBFyXQtXHUwMDEzmqFcdTAwMTllqZ39T/t9cPC5eM95l1x1MDAxODdzRv3QXHUwMDE0XHUwMDAziqbSQVx1MDAwZbRqvYhGhbNSYYEpV3rWIUiP7HKZ8Wxrz7psypbcVLtpnVx1MDAxZl596NavLlx1MDAxZlx1MDAxZVx1MDAxYVx1MDAxZlx1MDAwNmN8d/rQKlftXHUwMDA1YdjJPoWFV25cdTAwMTKlad13Mtcve6RZXHUwMDEyXHLMVeBlvu1DKvbZ2DSyXHUwMDFiUY5KonHfXHUwMDFmmTRdXHUwMDE4XHUwMDEzxY5cdTAwMWJkn3JcdTAwMWLGM+t0I95cdTAwMWOUloeiXHUwMDA3Q1RSzISSfNZSjFx1MDAxNVxuXHUwMDExxjglwCvuNKLQXHUwMDFlgnXnJS6e0qGu41x1MDAwZfrWq5E365MlziiNncRcdTAwMWVV2W/y9Vx1MDAwZmVa2OWVxmJuXHUwMDEx31x1MDAwNH0/s61cdTAwMTRcdTAwMTRSjM45lpriXGKIXHUwMDEyUlGQsjzCfNX4nVfQ8Fd1+3wnib9uUy3NP+Y8zp09nkOpXHUwMDFjPI49Z3rkRFxioFhcYo0xLfcvXGZGXHUwMDAz2zhcdTAwMWGHYWmL3EFJSWH98mpcdTAwMDM6iYaVdFxuKblQhKxN51x1MDAxOVHtWH7sezeP/lHnulx1MDAwMVx1MDAwZbm+XUFnhbBFLuFZuVx1MDAwNFxuXGbIMpdcdTAwMTIxXCL1XHUwMDAysNvnkqFcdTAwMTVQgkBcdTAwMDRcYtZPYSmVXHUwMDEyhCtJfmAsTVx1MDAxOFx1MDAwNnH6NJRCroKSgKCSYGB8bSpvvZPTNlx1MDAxN73r5nEr6pCscXtydrZcdJXPXHUwMDE4LVx0Q0phxVx1MDAxN06/XHUwMDE4K1x1MDAwNdJcdTAwMTJcdTAwMDRcdTAwMTf/LVq+7DlcdTAwMWM4LFx1MDAxM0lcdTAwMDBcdTAwMDFhi9FwxiQhqFx1MDAxYainRCrGXGLYUfr5gSTPXHUwMDAwJFx1MDAwMFlccqSywYNpvj6QN2MxOUs8t3nphONcdTAwMTNcdTAwMTI770izu+NAUo1cdTAwMThwqebPfsojR1x1MDAxNUw3o7GLMd9cdTAwMTaNVHPFlFx1MDAwNrmnNM5tRpVGLG101DZGrk2j4dK9ad+178bvo7fHl0o49cbJjtMobNZcXFx1MDAxNpJcdTAwMTbFLVx1MDAwNEZcdTAwMDJdm123hVwiyVx1MDAxMzVVWvxcdTAwMGapemssfltBXHUwMDEyvlJCMlxuQtn6Zv1cdTAwMDKn58i02ei/u3J9OrlodY/Os4+rkrXvuP44MTvAI1x1MDAxMMujkMtMgqVmSV1unq7FU1xcaoxA0pzL6UR0XHUwMDE5T1x0/0hZpotnXHRTomxxROeF195hOldmV6OmxsDtr1x1MDAxNNbnNFx1MDAxOep2M2xcdTAwMWReXHUwMDBl07f3LGh15MVxvOucUmo5kFhiWk3jgDXKz2KxXHUwMDE22S6oXG4jOc8p2YRT4FQrofT+ckphdfGDqS3KQdP1Of2j0W1cdTAwMDa3V4T83nPdX25cdTAwMWb751x1MDAxN0fOrnNq01x1MDAwNlJSaL7MqY2nXFxhvChEt1x1MDAxY1CZLb6YzJXElEK5XGZqrkB4cZc1XVx1MDAwYosqqfZcdTAwMTclOFx1MDAwNjJcdTAwMTf3941UXHUwMDAyeCWpXHUwMDAyXHUwMDEzRYGT9XXo+aVw621y18x4NOanp93eIVx1MDAxOe06qXnmZ5zj5cKIYkBWjW8h9U9cdTAwMDXp06mfXCLNXGLLg/bmqZ8qZXOCwPurUC2H30j9Np3k97xrg0rYUVx1MDAwMHU2oYG+gUFrXHUwMDEyTn5cdTAwMTk+7DqolDKElV4sX6ac2lpKq8rF/HY53U7mXHUwMDE33Go0YPub+blcdTAwMTIrMZVC2OPjZP1bps71yfk5jDJcdTAwMGbjTP7620X9LIuPdlx1MDAxZNOikpJM4KWLT6ol4lpXWjbhXHUwMDE0QHXNk5yCJohcbrlcdTAwMTCx/1xyofm9PFx1MDAxMXR/XHUwMDAzKdPf0Ka5XHUwMDFlgLl7ju9cdTAwMDH6cVx1MDAxON++T4Pe44fw0L+Pzvw2ucG7XHUwMDBlKLNxlC39X2ZcdTAwMDboVqTpakBcdFx1MDAxM0hPr2FXStPvclxuWFx1MDAxMK2A/Vx1MDAxOJf19l1MWnPiuJPZKW3zlFrrdeB1gkezME3tPjCTt09cdP7iqb34yn7Ol8l9/vzlxZe/XHUwMDAxUO5ccsMifQ==         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }         <p>TODO: Explanation of grid layout</p>","title":"Grid"},{"location":"guide/layout/#docking","text":"<p>Widgets may be docked. Docking a widget removes it from the layout and fixes it position, aligned to either the top, right, bottom, or left edges of the screen. Docked widgets will not scroll, making them ideal for fixed headers / footers / sidebars.</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nN2aWXPbNlx1MDAxMIDf8ys0ymvM4D4y0+nItpKocWwnjuOj0+nQJCTSokiWpCxLXHUwMDE5//cuaVXURVx1MDAxZrKqqtGDLWFcdGBcdHy72Fx1MDAwNfDjVa1Wz4axqb+r1c2tY1x1MDAwN76b2IP6m7z8xiSpXHUwMDFmhSBcIsXvNOonTvGkl2Vx+u7t256ddE1cdTAwMTZcdTAwMDe2Y6xcdTAwMWI/7dtBmvVdP7KcqPfWz0wv/TX/e2j3zC9x1HOzxCo72TGun0XJfV8mMD1cdTAwMTNmKbT+O/yu1X5cdTAwMTR/p7RLjJPZYScwRYVCVCrIXHSbLz2MwkJZzDXHTCuMJk/46T70l1x1MDAxOVx1MDAxN8Rt0NmUkryovk9cdTAwMWKNLDiPm7vvveD4YtQ6b3mdstu2XHUwMDFmXHUwMDA0J9kwKNRykihNdzw7c7zyiTRLoq45893MyzWYK5/UTSNcdTAwMTiJslZcdTAwMTL1O15o0nSmTlx1MDAxNNuOn1xy8zJUvsL9SLyrlSW3+TBcYksppLimkk9cdTAwMDR5VVwiLc0wQ4LwOWX2olx1MDAwMOZcdTAwMDCUeY2KT6nOle10O6BT6E6eyVx1MDAxMjtMYzuBmSqfXHUwMDFijF+TaWFRqfRMJ57xO15cdTAwMDZSSpSl2LReqSkmQFLMXHUwMDE4RVxcTVx1MDAwNHmnccstWPhjfuw8O4nHY1RP81x1MDAxZlNcbue6NqdAKiv3Y9e+n28sXHUwMDA0YVx1MDAxYyOtJKJcdTAwMTN54IddXHUwMDEwhv0gKMtcIqdbXCJSlN69WYFNrGklm4wjXCI1k09nM+yfXHUwMDFj73qX3/rdXHUwMDEz3jvY/Vx1MDAxNCFf7lWwOcfXLJVkk1RKhlxiZUuoJJjNUbF2KplVgSRcdTAwMTFcdTAwMTYmQMIyKJHGXHUwMDFhXHUwMDFjXHUwMDA3+lx1MDAxZkNpgsCP0+VIXG5VhaQg4D84werJRLZUvG9uj6L9a9p2/mzEPlx1MDAxYuhwXHUwMDE1XCI35yeFtKhSQmI1RyRcdTAwMDVUheZcdTAwMTS/zE++btuccLJIIyaLxE94xNhic13f08hcdTAwMDVSQlx1MDAwYkV+Tlx1MDAxYVx0IVU0YiykJuA7no6jz0dnXel+uP14ddL63CW94Pw82G5cdTAwMWM1tjSli6s25ZbgL1xcslx1MDAwMcUrhPi6UCyCXGLNlPhJUZSiXG5FmFx1MDAxZKQwsPhkXHUwMDEym8R8O/R6XzzxvXf05f1+s5mNXHUwMDBltptEjKXF5Cx0Y1x1MDAxMl9cdTAwMWE7vsbkXG587rpA1FgqJqT8P6/QXHUwMDBmh41cdTAwMTC5VLpFSlx1MDAxOVx1MDAxM1x1MDAxMOc/PW68uTj8XHUwMDFj68ug2T/5yptcdTAwMTk7v4pdv1x1MDAwMkbPdrx+Yv57XHUwMDFjuVx1MDAwNjTIXFxKkVfldJ3rtFhGJdWWXHUwMDEwRcZ031x1MDAxMF2Ek1wiYtFZ5cZ0XG4miCZywys2jFx1MDAwNkViM3TKXHUwMDA3Mm4qXGJoJJ+R1Vx1MDAxY1x1MDAxZYlcdTAwMTZpXFz3XHUwMDAzX35cdTAwMTmq9vfWzaCRbjudXHUwMDA0c0stYJjXXHUwMDE11FKQ2NGXZjZjn7mMT8iYLYZcdTAwMTHmS1NcdTAwMWJJQCghZJRMXHUwMDE3n3lAMVx1MDAwNF2SK0o2SygkXHUwMDE3SMrNXHUwMDEwqpSsXCKU5IqoZ1x1MDAxMbpz9MGcfo/OzcDP1M7p8V+O23K2n1BlgUdcdTAwMTBswYFiziyBJCMzKdB6XHUwMDExJVpZfFVAXHUwMDA1olQwyjaLJ5jFxvBElVmPRlhTNZ1cdTAwMTY9Rif969PnVn/onO3tfrn0mmfNTvL5z+2nXHUwMDEzsu2lyzthzFKU6lx1MDAxN29ccj1Cp0RcdTAwMTDN4dVcdTAwMWMoQ+A/MaGbXHJAYc2hXHUwMDAyb4RQgmTlLlx1MDAxMURHVEJcdTAwMWH4jGyo8enyMOy6UUz6R3vu7c23bD+Mt1x1MDAxZFFOmSU5X7KjLoWl+Dr8JyHqyiwlXHUwMDE0wotcIrZcdTAwMThcdTAwMTOotVjkXHUwMDE0XHUwMDBibTGxdFx1MDAwZlx1MDAxM1x1MDAxMiRcblx1MDAxM1x1MDAwNPRveIlcdTAwMTeYboZQrFHl1rpSmmBKpnKox1x1MDAwMFx1MDAxNa33e8e/XHRcdTAwMTnstM2+STJFXHUwMDBm+61tXHUwMDA3NF/hXHRcdTAwMTWUqPlcdTAwMTiUQs4uOV5DkvSQXHUwMDBmXHUwMDA1K1x1MDAxOJ83XHUwMDE1XHItI1RbsJapXHUwMDEyYzpcdTAwMGYqpVx1MDAxNFDlerMnQDBykESvi1M7SaLBUi/KKlx1MDAxMWWUS4LwM1x1MDAwZSbbl1xyXHUwMDE571x1MDAwN5/E6FwiuKTy4243XHUwMDFjXHUwMDBlVkN0c8c/WECaRDBmRFx1MDAxMIWEwnKGU5afTT5cZil3NEPuqpDmm1xiXHUwMDEwXHUwMDAyc5jyonu2yChB2lr0n1x1MDAwMoPqXG6vcjJZKLdcdTAwMWGXlMKQPsd/TulhJ9muXHUwMDFmun7YXHUwMDAx4T+M1ian661cdTAwMDKig49fvUBcdTAwMGVcdGmedk4v5ECnX9HpRNdcdTAwMWOjyOnnWu4gXHUwMDBiwlxywlx1MDAxNbhcdTAwMTdCNSyDik891rHjYv4teZ/ojiV3XHUwMDEzfUzoltrMvoCdZntRr+dn8OrHkVx1MDAxZmbzT1x1MDAxNO/SyI3KM7Y7L4WWp2Xz1lx1MDAxN+ctlldcdPJP+a1W4ln8mHz/483Sp3cq+SmkXHUwMDA1OmVcdTAwMWKvpv9XOYvM3GZLfVx1MDAwNa5cZrgkg0BcdTAwMTRcdTAwMDLO0sE+5itcdTAwMWWe5i1dznCxnC1cdTAwMWNcdTAwMTQzXG6xOnn5WUi1k4BwfolbWPBcdFx1MDAxME9cdIhcdP+N449cdEM/pvB6kt+fYeveXHUwMDE0JpK7f4D8N1x1MDAxY047XG6zXHUwMDEzf1TsqKCZ0vd2z1x1MDAwZoYzXHUwMDE4XHUwMDE00OeXa4q2ajDwXHUwMDFkk01PV2qg61wiuVAzlVx1MDAxYYHfya2jXHUwMDFlmPas2WS+Y1x1MDAwN1x1MDAxM3FcdTAwMTZNXHKvXHUwMDAzStjQXFzSWnBcdTAwMWVR4nf80Fx1MDAwZb4tVWglw8XVW02QIVxuSVx1MDAxOFJPz5RcdTAwMGVcdTAwMDJzdINij35cdTAwMThdOFe/XVx1MDAwZkbBaMWt+s2t8lRLaz6NXHUwMDA3O7aUnj+/WfNcdTAwMDVcdTAwMGbMS4VcdTAwMWawXFyMXHUwMDE01lx1MDAxMHuwXHKb7uHxdYNeKXamlZdcXCeDXHUwMDBmo1x1MDAwMTtYm+lyjMRz9qteZrpcdTAwMDf2MOpnY0tJt8F25zRaMUTn1Vx1MDAxN7RcdTAwMTCh+DnXs1x1MDAxZZ7uLbVdxoVFXHUwMDE5yq/hIaXx1GWL+1x1MDAwMJ1Z+rG7g0q2+dXqRqykhbjGeqzA1MZTadJcdTAwMTBcdTAwMWFUXdeCcsGJ5qusyy9cdNVz81OrmN9TQ/VcdTAwMDdXgtlQXHUwMDFkVpj8SFxcUYihJFXlJJahOrG0QkyonzdWr+SokE4jVFx1MDAxNbK/XHUwMDFhN1634/gkg/meTFx1MDAwZiDlu2OfWb5h/cY3g91lR8vFJ3dJxSjnpm/y9/xx9+rub5B4Q/4ifQ==         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }       Docked widgetLayout widgets  <p>TODO: Diagram TODO: Explanation of dock</p>","title":"Docking"},{"location":"guide/layout/#offsets","text":"<p>Widgets have a relative offset which is added to the widget's location, after its location has been determined via its layout.</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nN2ZWVPbSFx1MDAxMIDf+Vx1MDAxNZTzXHUwMDFhK3NcdTAwMWap2triXlxiS8JcdTAwMTVcYlspSkhjWWtZUqQx2Enx37clXHUwMDFjS744XGZhXHR6sK3p0Uxr5utr/GNpeblhXHUwMDA3qWm8X26YvudGoZ+5V423RfulyfIwiUFEyvs86WVe2bNtbZq/f/eu62ZcdTAwMWRj08j1jHNcdTAwMTnmPTfKbc9cdTAwMGZcdTAwMTPHS7rvQmu6+Z/F557bNX+kSde3mVNN0jR+aJPsZi5cdTAwMTOZroltXHUwMDBlo/9cdTAwMDP3y8s/ys+adpnxrFx1MDAxYlx1MDAwN5EpXHUwMDFmKEWVgpywyda9JC6VJVxcaM1cdTAwMDRBo1x1MDAwZWG+XHUwMDBl01njg7RcdTAwMDUqm0pSNDU2/L/pRvvbv70g+1x1MDAxNlxmVulgTZ82q1lbYVx1MDAxNFx1MDAxZNpBVGrlZUmeN9uu9dpVj9xmScechL5tQ1x1MDAxZjzRPno2T2AhqqeypFx1MDAxN7Rjk+djzySp64V2ULSh6lx1MDAxNW5cdTAwMTbi/XLV0i96UO4ohVx1MDAxNNdU8pGkeJYw7miGXHUwMDE5XHUwMDEyhE+os5ZEsFx0oM5cdTAwMWJUXpVCXHUwMDE3rtdcdECr2Fx1MDAxZvWxmVx1MDAxYuepm8FWVf2uhi/KtHCoVHpskrZcdIO2XHUwMDA1KSXKUayuWG7KLSCIYKWkpnokKWZNt/2Shq+Ty9d2s3S4TI28uKlpXFwou1FDqXq4l/ruzZZjIWA5XGJcdTAwMTDBdbV+UVx1MDAxOHdAXHUwMDE496Koaku8TkVJ2Xr9dlx1MDAwMTqxpvPoxJxgyTGW5N54XHUwMDFl2Y39081wV7ubXHUwMDFiJjv1z9OrvXl4TiA2XHUwMDBlJnlWMCVDhLJZYFx1MDAxMswmwHhyMJkzh0pcIlx1MDAxY0ww0jO4xEpQyonC9Dfm0kRRmOazqVx1MDAxNGoulVJcdTAwMTJcdTAwMDFb8lx1MDAwMCqT1Ytm/7CXx53Vg72TY4hcdTAwMDWfcGdcdTAwMTEqn9FdMvBXSlx0idUklZw5UmhO8ePc5ZuWy1x0J9NEYjJN/YhJjFx1MDAxZDYx9VxykUIrXHUwMDBlNqTx61x1MDAwNJKQuW5SIcxcdTAwMDVcdTAwMTX8/jz2XHUwMDBljoONwzPvUH6x4V/euWKnweZcdTAwMGLnUVwiR4PLmY7enDqTcXUxXHUwMDFhL1x1MDAxMOJPRaNUQkjxat0jkWKue0RCYK5FrcedOaV111vrQaY656q/x21rv1x1MDAxYixcdTAwMTS0n1x1MDAxMUdI55hcdTAwMTS8Tt1PXHUwMDFhXHUwMDFmjVwiJlx1MDAxN+B5n1xuRXDgiEtBlfyNWbw9hYQ0cS6OTCHN1Vx1MDAwM2hcXNvaOuqibbZ1XHUwMDE2fVx1MDAxOFxmdnbyj0r259DYdr12LzP/P49Eclx1MDAwN3EhxouYkkilXHUwMDFjOonq4uFazOJSI4fIMn+9XHUwMDE5iE7jKYnDsNRCSabLa1xuU1akXHUwMDE0XHUwMDE0iV9Q6VxmXHUwMDA1XHUwMDE1V7Xt3jnZXHUwMDBm6cpcdTAwMGU/kGebO1v+Jv34feXbaKwxXGLdLEuuXHUwMDFhI8n18NdcdTAwMGIxXHUwMDAyRvlcXCNcdTAwMTBcdTAwMTLyOMJqSe1dVtBstdbTXcp2dz+fb1xyzk74v51IvXQroFx1MDAxYUNcdTAwMTlccu+JucRIsYlUgVx1MDAxMeJcYqxcdTAwMWZf6Vx1MDAwZj30bFugo8OEhW2BgsdiYFxmr8pcdTAwMTRcbv+An8dcdTAwMTSEnpueXHUwMDEwpLDWhUO8tylE6+GXo1x1MDAwM2mClt7vtN0zkXhb+Us3hVwiICguXHUwMDE5marfXHUwMDE4l1x1MDAwZSNS0sdcdTAwMWUr3Fx1MDAxNlx1MDAxMVx1MDAxNHNcdTAwMTRReGhcdTAwMDNcYolcdTAwMDWsXHUwMDAwXHUwMDA24Fx1MDAwNKL373z0dWMnM931/FxmmjHQXHUwMDAxq/s769tccvdBhD7fuVx1MDAxN9RcdTAwMTDFiShDgKnCUvFxTGmR0eC7jlx1MDAxOZRs8YvFXHUwMDBmv6BYccCPa4Uxhe3neFx1MDAxYdPicJgzpYnSklx1MDAwYkbVJKZQknIsXHUwMDE5W6DUKzVdXHUwMDEw08J8yVx1MDAwMzCt6eFmdjWM/TBcdTAwMGVAWMWBn/8zbN8jXHIuqEq8Xrn7XHUwMDBllpD4gVx1MDAxOeNcItxcdTAwMDG8tU6Bm5ZEO1BcdTAwMTiVNfpQdD1Sx8T+3crcno3UlGlcIlx1MDAwN4FLwVx1MDAwNPJdpTVcdTAwMDRRxKbUUY7kRCvGOIJccuVCTilcdTAwMTW5uV1Lut3QwqJ/SsLYTi5uuYorhXW3jetPSuGl6rJJN5BcdTAwMTYjjofj6tdyZSflzej317cze89luLim6K1GW6p/z/Nf1vTtLPfF0S3uiyNYf0iB7u2/Lq8+dE6PV7+vN9m2/Cy7l3ZggpdcdTAwMWVhsdLgv1x1MDAwNNNMICaAqGpFSv8llFx1MDAwM9ZQxC+tMUTbx4TaW51YLauvju6nj1x1MDAwMSTkpFJcdTAwMTDyzMdcdTAwMDBcdTAwMTTXI9lcdTAwMDP8VCuJ7WH4/SZpXHUwMDFia910u2E0XHUwMDE427iSU9D0Y6uVXHUwMDFiW1/L3MCcJZdqrPdKXHUwMDE0XHUwMDA2cZnemdY44jb03GgktkntzT2Y3YXhsu0pk0+yMFxiYzc6XHUwMDFh1+RcdTAwMTFZLNdkro1xjFx1MDAwNUVS3d/G9pvHXHUwMDFl2ewrlVE//JCGe8dcdTAwMWLu2Vx1MDAxM9uYn1x1MDAxNP7yaZNcdTAwMDTmcKRnnLRRSVx1MDAxZHDv4tf+bfsk5Vx1MDAxYyZcZnKEwlx1MDAxYV5TPVfkyVx1MDAwZq/nloaDNtw0PbQw5Cjqw5qE/tDgq2FcdTAwMWGXoblanVV8lFehcmldXHUwMDA1wKZYkVx1MDAxZtdL1/9cdTAwMDE0elVbIn0=         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }       Offset  <p>TODO: Diagram TODO: Offsets</p>","title":"Offsets"},{"location":"guide/reactivity/","text":"<p>TODO: Reactivity docs</p> <ul> <li>What is reactivity</li> <li>Reactive variables</li> <li>Demo</li> <li>repaint vs layout</li> <li>Validation</li> <li>Watch methods</li> </ul>","title":"Reactivity"},{"location":"guide/screens/","text":"<p>TODO: Screens docs</p> <ul> <li>Explanation of screens</li> <li>Screens API</li> <li>Install screen</li> <li>Uninstall screen</li> <li>Push screen</li> <li>Pop screen</li> <li>Switch Screen</li> <li>Screens example</li> </ul>","title":"Screens"},{"location":"guide/styles/","text":"<p>In this chapter will explore how you can apply styles to your application to create beautiful user interfaces.</p>","title":"Styles"},{"location":"guide/styles/#styles-object","text":"<p>Every Textual widget class provides a <code>styles</code> object which contains a number of attributes. These attributes tell Textual how the widget should be displayed. Setting any of these attributes will update the screen accordingly.</p>  <p>Note</p> <p>These docs use the term screen to describe the contents of the terminal, which will typically be a window on your desktop.</p>  <p>Let's look at a simple example which sets styles on <code>screen</code> (a special widget that represents the screen).</p> screen.py<pre><code>from textual.app import App\n\n\nclass ScreenApp(App):\n    def on_mount(self) -&gt; None:\n        self.screen.styles.background = \"darkblue\"\n        self.screen.styles.border = (\"heavy\", \"white\")\n\n\napp = ScreenApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>The first line sets the background style to <code>\"darkblue\"</code> which will change the background color to dark blue. There are a few other ways of setting color which we will explore later.</p> <p>The second line sets border to a tuple of <code>(\"heavy\", \"white\")</code> which tells Textual to draw a white border with a style of <code>\"heavy\"</code>. Running this code will show the following:</p> <p>                                                                             ScreenApp         \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b    </p>","title":"Styles object"},{"location":"guide/styles/#styling-widgets","text":"<p>Setting styles on screen is useful, but to create most user interfaces we will also need to apply styles to other widgets.</p> <p>The following example adds a static widget which we will apply some styles to:</p> widget.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\n\nclass WidgetApp(App):\n    def compose(self) -&gt; ComposeResult:\n        self.widget = Static(\"Textual\")\n        yield self.widget\n\n    def on_mount(self) -&gt; None:\n        self.widget.styles.background = \"darkblue\"\n        self.widget.styles.border = (\"heavy\", \"white\")\n\n\napp = WidgetApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>The compose method stores a reference to the widget before yielding it. In the mount handler we use that reference to set the same styles on the widget as we did for the screen example. Here is the result:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3474727155-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3474727155-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3474727155-r1 { fill: #ffffff } .terminal-3474727155-r2 { fill: #c5c8c6 } .terminal-3474727155-r3 { fill: #f3f3f3 }                                                                                WidgetApp         \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Textual\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b                         </p> <p>Widgets will occupy the full width of their container and as many lines as required to fit in the vertical direction.</p> <p>Note how the combined height of the widget is three rows in the terminal. This is because a border adds two rows (and two columns). If you were to remove the line that sets the border style, the widget would occupy a single row.</p> <p>Widgets will wrap text by default. If you were to replace <code>\"Textual\"</code> with a long paragraph of text, the widget will expand downwards to fit.</p>","title":"Styling widgets"},{"location":"guide/styles/#colors","text":"<p>There are a number of style attribute which accept colors. The most commonly used are color which sets the default color of text on a widget, and background which sets the background color (beneath the text).</p> <p>You can set a color value to one of a number of pre-defined color constants, such as \"crimson\", \"lime\", and \"palegreen\". You can find a full list in the Color reference.</p> <p>Here's how you would set the screen background to lime:</p> <pre><code>self.screen.styles.background = \"lime\"\n</code></pre> <p>In addition to color names, you can also use any of the following ways of expressing a color:</p> <ul> <li>RGB hex colors starts with a <code>#</code> followed by three pairs of one or two hex digits; one for the red, green, and blue color components. For example, <code>#f00</code> is an intense red color, and <code>#9932CC</code> is dark orchid.</li> <li>RGB decimal color start with <code>rgb</code> followed by a tuple of three numbers in the range 0 to 255. For example <code>rgb(255,0,0)</code> is intense red, and <code>rgb(153,50,204)</code> is dark orchid.</li> <li>HSL colors start with <code>hsl</code> followed by a angle between 0 and 360 and two percentage values, representing Hue, Saturation and Lightness. For example <code>hsl(0,100%,50%)</code> is intense red and <code>hsl(280,60%,49%)</code> is dark orchid</li> </ul> <p>The background and color styles also accept a Color object which can be used to create colors dynamically.</p> <p>The following example adds three widgets and sets color styles.</p> colors01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.color import Color\nfrom textual.widgets import Static\n\n\nclass ColorApp(App):\n    def compose(self) -&gt; ComposeResult:\n        self.widget1 = Static(\"Textual One\")\n        yield self.widget1\n        self.widget2 = Static(\"Textual Two\")\n        yield self.widget2\n        self.widget3 = Static(\"Textual Three\")\n        yield self.widget3\n\n    def on_mount(self) -&gt; None:\n        self.widget1.styles.background = \"#9932CC\"\n        self.widget2.styles.background = \"hsl(150,42.9%,49.4%)\"\n        self.widget2.styles.color = \"blue\"\n        self.widget3.styles.background = Color(191, 78, 96)\n\n\napp = ColorApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Here is the output:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-549518608-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-549518608-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-549518608-r1 { fill: #f3f3f3 } .terminal-549518608-r2 { fill: #c5c8c6 } .terminal-549518608-r3 { fill: #0000ff }                                                                                ColorApp         Textual\u00a0One Textual\u00a0Two Textual\u00a0Three                         </p>","title":"Colors"},{"location":"guide/styles/#alpha","text":"<p>Textual represents color internally as a tuple of three values for the red, green, and blue components.</p> <p>Textual supports a common fourth value called alpha which can make a color translucent. If you set alpha on a background color, Textual will blend the background with the color beneath it. If you set alpha on the text color, then Textual will blend the text with the background color.</p> <p>There are a few ways you can set alpha on a color in Textual.</p> <ul> <li>You can set the alpha value of a color by adding a fourth digit or pair of digits to a hex color. The extra digits form an alpha component which ranges from 0 for completely transparent to 255 (completely opaque). Any value between 0 and 255 will be translucent. For example <code>\"#9932CC7f\"</code> is a dark orchid which is roughly 50% translucent.</li> <li>You can also set alpha with the <code>rgba</code> format, which is identical to <code>rgb</code> with the additional of a fourth value that should be between 0 and 1, where 0 is invisible and 1 is opaque. For example <code>\"rgba(192,78,96,0.5)\"</code>.</li> <li>You can add the <code>a</code> parameter on a Color object. For example <code>Color(192, 78, 96, a=0.5)</code> creates a translucent dark orchid. </li> </ul> <p>The following examples shows what happens when you set alpha on background colors:</p> colors01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.color import Color\nfrom textual.widgets import Static\n\n\nclass ColorApp(App):\n    def compose(self) -&gt; ComposeResult:\n        self.widgets = [Static(\"\") for n in range(10)]\n        yield from self.widgets\n\n    def on_mount(self) -&gt; None:\n        for index, widget in enumerate(self.widgets, 1):\n            alpha = index * 0.1\n            widget.update(f\"alpha={alpha:.1f}\")\n            widget.styles.background = Color(191, 78, 96, a=alpha)\n\n\napp = ColorApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Notice that an alpha of 0.1 the background almost matches the screen, but at 1.0 it is a solid color. </p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-880280878-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-880280878-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-880280878-r1 { fill: #f3f3f3 } .terminal-880280878-r2 { fill: #c5c8c6 }                                                                                ColorApp         alpha=0.1 alpha=0.2 alpha=0.3 alpha=0.4 alpha=0.5 alpha=0.6 alpha=0.7 alpha=0.8 alpha=0.9 alpha=1.0                  </p>","title":"Alpha"},{"location":"guide/styles/#dimensions","text":"<p>Widgets occupy a rectangular region of the screen, which may be as small as a single character or as large as the screen (potentially larger if scrolling is enabled).</p>","title":"Dimensions"},{"location":"guide/styles/#box-model","text":"<p>The following styles influence the dimensions of a widget.</p> <ul> <li>width and height define the size of the widget.</li> <li>padding adds optional space around the content area. </li> <li>border draws an optional rectangular border around the padding and the content area.</li> </ul> <p>Additionally, the margin style adds space around a widget's border, which isn't technically part of the widget, but provides visual separation between widgets.</p> <p>Together these styles compose the widget's box model. The following diagram shows how these settings are combined:</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1cXGtT2txcdTAwMTb+3l/h+H4tu/t+6cyZM9VqrbfWevfMO51cYlx1MDAwMaJAaFx1MDAxMlx1MDAxNHyn//2sXHUwMDFklCSERFCw6Dn50EpcdTAwMTKSxd7redaz1r78825lZTVcdTAwMWF03dWPK6tuv+q0vFrg3K6+t+dv3CD0/Fx1MDAwZVxcovHn0O9cdTAwMDXV+M5mXHUwMDE0dcOPXHUwMDFmPrSd4NqNui2n6qJcdTAwMWIv7DmtMOrVPFx1MDAxZlX99lx1MDAwNy9y2+G/7b/7Ttv9V9dv16JcdTAwMDAlL6m4NS/yg+G73JbbdjtRXGJP/1x1MDAwZnxeWfkn/jdlXeBWI6fTaLnxXHUwMDE34kuJgZzT8bP7fic2llBFleCck9FcdTAwMWRe+Fx1MDAxOd5cdTAwMTe5NbhcXFx1MDAwN5vd5Io9tTo46Tt6Y//TbvubXHUwMDFmnISHXHUwMDFkv16tJa+te63WYTRoXHKbwqk2e0HKqDBcbvxr99SrRU379rHzo+/V/MhcdTAwMWEwulx1MDAxY/i9RrPjhmHmS37XqXrRwJ7DeHR22FxmXHUwMDFmV5IzfdtcdTAwMDZYXCIhpMGYXHUwMDEwybA0cnQ5flx1MDAwMMdIY2FcYiZGKEFcdTAwMTVcdTAwMWYzbd1vQW+AaX/h+Ehsu3Sq11xyMLBTXHUwMDFi3Vx1MDAxM1x1MDAwNU4n7DpcdTAwMDH0WXLf7f2PXHUwMDE22CCmNJVUXHUwMDBiplxyS35P0/VcdTAwMWHNyFx1MDAxYUtcdMJaXHUwMDE4psTwbYmxoVx1MDAxYndcZtjJXGI8JfmR1oTu11rsI3+Pt2vTXHS69823XHUwMDFh2lx1MDAwZinzreVcdTAwMWLjXHUwMDBllnayVN9/r+v+vt5vXa5HV0dH52dVXHUwMDE11ndGz8p4pFx1MDAxM1x1MDAwNP7t6ujK7/u/XHUwMDEy03rdmjP0MlwiJSOSSo0l06PrLa9zXHJcdTAwMTc7vVYrOedXr1x1MDAxM8eMz/5+/1x1MDAwNERIZVxuXHUwMDExYYji4Fx1MDAwNFRNjYjdra+tur9f3aq3XHUwMDA3P1x1MDAxYd7N7lx1MDAwMd1cZlx1MDAwYlx1MDAxMFx1MDAxMfqA75nxMPatx+DAXHUwMDFlRYNcdTAwMDI0XHUwMDE4TVx1MDAxOVx1MDAxNVx1MDAxYyshWFx1MDAxNlxylGokJSZKXHS4R6cvj6NB1FmtykvR8Fx1MDAxN69Kty7ySGBCIS1cdTAwMDSXWok8XGKoMIhcdTAwMWFcdTAwMDNewVx1MDAxOcNU5EFAXHUwMDE5XHUwMDEzklxirl9cdTAwMTZcdTAwMDTVb7vnzbOt49rAmE5vn3RVs+a9Qlx1MDAxMHBZXGZcdTAwMDImMeVUSjE1XGKud6+u2mHw6zRw+4HZONu46PHPT1x1MDAwYlx1MDAwYrRcYlx1MDAwNjUnbM43LFxiRpFSXFxIYaiSWpAsXHUwMDBlXHUwMDE0uKDWWlx1MDAxOUOoIIqwQlx1MDAxY7hSqedEXHUwMDA18O88XHUwMDA0SMq1XHUwMDFmiJ9pXGJh0DX8pZz+wZdcIrdcdTAwMWZlvXzY8TtcdTAwMTef9k5+bW1drG1dXHUwMDA0P2818/prTsrn309+7PDLd1x1MDAwM7355Yiz3Z1+c933mt+rXHUwMDFi11+WXHUwMDEzS5nfn5Z/KZCMwchIQjhcdTAwMDeKmlx1MDAxYUU3XHUwMDFlZnzT7Kvewefq9aU52D6W3+YsrmZcZiaPg0hcdTAwMWGDuLA/lEpmtKFcdTAwMTlcdTAwMTBcdMKQ1pJcdTAwMTgjtNRcdTAwMTBNXHUwMDE2pqwkzUOIilx1MDAxY4KwkFQxiHHzR9A8nTHpdL9cdTAwMTNcdTAwMWR6d7bdKc6c3XTaXmuQ6bfYS8HSPSdoeJ10W4YuvDMmd525+1PLa1g/Xm259ayDR1x1MDAxZWQjo8uRn/rlVXi7XHUwMDAzj1x1MDAwYr7Wxn+FXHUwMDFmePBmp3WUteRJ2GKiXHUwMDEwW1x1MDAwNGSaUcDabGpwXHLCzs7hQe1qw2l+3dq9lp2Dm7D5gplcdTAwMGJ+XCK6IERRK4K0XHLLXFxk0Fx1MDAwNalcdTAwMWJcdTAwMDLgYSpccmRcdTAwMTOMXHUwMDFhtTB4pXKicngpSFxcXGZ+YVXmqeb2TXV7/etGh31yu+etSPw8mmskSdTSosH73anVvE5jXHUwMDE50PtgytNCI1bjZ1x1MDAxZuBcdTAwMGLaXHUwMDFkXHUwMDEyXFwpplx1MDAwZo2Tdcayo1cwVVwiMFx1MDAxOSdIvZDA5Fx1MDAxM1x1MDAwNCZNvW9cYl9gXHUwMDFiyLYgUL98cFxcXHUwMDE0vlhcdTAwMGVf63BcdTAwMTmsWoGmciaDzExcdTAwMDZZXHUwMDE1vuVcdTAwMDYlMGt7tVo628pcIu2xJGlcdTAwMWN8XHUwMDE5O0tcdTAwMTFYnuhpXlx1MDAwNEPCpWCCSjJ9tWPnR6O5dbm5b1x1MDAwNs2rk8b+USDO+rdcdTAwMDU4rFx1MDAwNn5cdTAwMThWmk5UbVx1MDAxNmFxvNC2OJlcdTAwMWFcdTAwMTc9tFx1MDAxMYRgI1xyIYxnsEipRJBZXHRNjZREM1lcXFx1MDAwMpyi6FGKxcdcdTAwMGJcdTAwMWaGcCzzwVVcYlxyvVx1MDAwNVx1MDAwMvZlY+vF55/O2t2nauv48MugvXf16cfBXHUwMDE1ny62lmZ/e9v9XHLj17c3RXBUOe+37rw9df3HYnYpwIbvn1x1MDAwNC4qcVx1MDAxMbooMUopkGVTg6u8pWdcdTAwMDZXYSVl7uBcdTAwMTJGIU4heGCNtVx1MDAwMcfO5oBcdTAwMTSucmhcdGIgXHUwMDAzNGRxOSAjiHJcYqZcdTAwMWNiKSeQdubxxTRcdTAwMTJcdTAwMDRMZFx1MDAxNFBuMOXjKCNYWv+RqXxyapjFpr50XHUwMDEwXGYjJ4jWvE6s1D6mkPYwcjSMPj0xOOmJdXzt4cPTtmxf3ahcdTAwMTM/XHUwMDA1N1xim9Ve7Fx1MDAwMlxiY26w4Fx1MDAxYfqCXHUwMDFhbFL3NJxu3ESIKMNcdTAwMTVcdTAwMTAp3Mah3+/vXHUwMDE4XHUwMDAxftXt1Fx1MDAxZTepPJikTKpgRDU3jFxi8DBwMS1VziiKjFx1MDAwMXMgXHSC+5SUQuWMajlhtO63257Ved99r1x1MDAxM403cdyWnyzam66Tk8fwo9LXxmmha5+YpdPkr5VcdTAwMDQy8YfR33+/n3h3oSvbo5Lz4uRx79L/z6rZ7buK+Ixhrlx1MDAxOZMzpNzlLvdcInz2RN1O49ZXoFx1MDAxNojmNFW5XHUwMDE51rQ4XHUwMDAyNU9cdTAwMTlIXHUwMDA1cDSlx+yaY00rXHT1JUm35sImXHUwMDEwL1dcdTAwMTR+ti5YQPyeJSfI59xrflBLS/s/l3LfW/I0OWL5sVxivuCwilE9vdQv12fzXHUwMDE505k7cpUmXGJcdTAwMTRcYoGMmyvKx1Q+5DqIgFx1MDAxMiFcdTAwMDRcdTAwMTBDXHUwMDE0Xdw4P1x1MDAwNCwhpVxyVMDdXFzTXHTFaWB4XHUwMDA29zCOXHUwMDE52GnrezkpXCKYYoxi/lx1MDAwNGQvg1x1MDAxNFx1MDAxOVx1MDAwZp5zUFx1MDAwNMNYr5GWXHUwMDE0Q8tcdTAwMTgsQX/wtERJaVx1MDAwNoWNVkpyyZTQkHK9akFQ6FH2qOSdaUZFUMwpjJeMXHUwMDE0K2MoVnz6Ql75JJIlZlx1MDAxNWh6XHUwMDAzv5RA2/Ox/IZhXHUwMDA0XHQ7tFx1MDAxM8EgkPi4XfNkXHUwMDE1XHTv4LFcdTAwMTZcdTAwMDbP5olcZs7QitJcdTAwMTRslWCtJFxc5jNcdTAwMWNcdTAwMDHGgqh5ylx1MDAxONjrpJXyWWsp0oCO5EZcdTAwMDCSKFFcdTAwMDI4I2m8JPl55SxS5EH2yPvOjCxcdTAwMTJrplx0JKJTXHUwMDEyepxDpGBcdTAwMDY4LTUp6zFcdTAwMGVZ29w4ucWuUP0tsbl95ZxXfTlY9nFyYFxyXHUwMDA09IHt1Cqp+Vx1MDAxOIdAXHUwMDFlh1xmqFx1MDAxMiPhXHUwMDA2I1x1MDAwNF/kXHUwMDE0RESkMpPLj1x1MDAwNI1XJlx1MDAxZkhDXHUwMDEzhTGHZPOtkUb2YfPFcubaXFyBPKFcdTAwMTftMeq/OVx1MDAwMVfIYuBqJY2tqE9fXHUwMDEwYNu/blx1MDAwZqtcdTAwMDbj3unNSbOmyMHaN7b0wIWmVpBdXHUwMDFiqZSwXHUwMDAzXGJcdTAwMTngcq3tbF3OoNlcdTAwMDEgIDdcdTAwMTdcdTAwMDZcXFx1MDAwZbJXXHUwMDEwkVx1MDAxZVx1MDAxOVx1MDAxOOFcdTAwMTYjXHUwMDE2K8NcdMDlXHUwMDAwXFyRKVP8XHUwMDFmuH9cdTAwMTC4+V60RyXpwHlcdPd0oT1cdTAwMDddyCVcdTAwMTQ1eHrofu7XpXvxq7Le9DaOf7Y/fz6+/LGx9NBVXHUwMDE0KfBHyqmiXHUwMDEyXHUwMDA0XVx1MDAwNrqMcWQ4t9OIXHUwMDE1aFx1MDAxZbLIaoBRRnHGXGJjoKxcZp9Q14PcXHUwMDAxXHSMNYeeseV3kUoj7mc8cylcdTAwMTSh4pVcdTAwMDK5SJz7Z8e7J25w1T350Vx1MDAxZmzc7eytNUNZMFxugDlcdTAwMTaMQdBRiimuVaoqnoxNUFx1MDAwMklcdTAwMWFcdTAwMTNwp5mQ879cdTAwMTiFLFTHV4pdKr6c96Z50VxuKFg2fvqBV5TClNmumZpWSO07ub08qG5+ObxsrK/fnlx1MDAwN+J4b/lphSBbeLKDUYaQ8Wk9SiNlsJ3xg+2s2MVccndcdTAwMTJkbbAlXHUwMDA3zOFl6XZcdTAwMWbRiiHgKKBbiKCaKZErXHUwMDA2KEq4XHUwMDA2J3mlsv7ZpFx1MDAwMjKaQKbLJFx1MDAwNVxmYYEpyXOKRra4Q5WhmFx1MDAxMSHMXHUwMDFi5ZRid7LHuCPNyCdFI466eFx1MDAwMoWCfrEj0dOLlPJeX1Y24Vx1MDAxY0lNtDBKXGLI/rOFXHUwMDAxxlx1MDAwNbI+Z9dCcWpSq3bmXlx1MDAxN0hcdTAwMWVdMthoQDpcdTAwMTKhzVx1MDAwYk/wLY9cdTAwMTNcdTAwMTlPm2lcdTAwMTJSuawtfe6D2y+C5Z40iLk17LWUXHUwMDAz/KlBzHtLSlx0oajiYEwhIVx1MDAxMMUhrIKomX698vlp4/i6urfryruoe0hMv1x1MDAxMX3dWnZG4DZtXHUwMDExTFPQd5ZcdTAwMDGzaVx1MDAwYsVcdTAwMDYkrq38gPbA6ULiXHUwMDAyhlx1MDAxYqC9gfCp4cD8lEzQXHUwMDE3QE9cdTAwMTiDXHUwMDEw1Vx1MDAwMi5TjXW+XHUwMDAwXHUwMDAxeZfAdsnz65RcdTAwMThvrVx1MDAwMFHcq/ao5Dt0xkhfXHUwMDA07LQ8XHUwMDFkn5sgjLaZw/TDiL1m55Z4XHUwMDBl+bV5Snb5trk46vhF85CXXHUwMDA215pcdESltPPqMNCcyuZcclx1MDAxNEtEQIcyw5nGgJrFVVx1MDAxMjHSRmktXHUwMDA1SCwstZ5Uj+B2XHUwMDE3XHUwMDAyUIFK2GXimuSHXHUwMDExJaRcdTAwMGWcavXmZie8VlxcXHUwMDE3dao9Krn+nFx1MDAxMdbFXHUwMDA1gZJcdTAwMTVcdTAwMDbUzlx1MDAxMOCQXHUwMDExT4/s5vb15UG3Ujlccu+2XHUwMDBl1ytsoPYrRZOgl1x1MDAwNtmSaGR3XHUwMDE2XHUwMDAxXHUwMDE1z5igKrtMj1x1MDAxOMu5XHUwMDE4Wt72S3pa8twrXHUwMDAyTFwiXHUwMDEwXGbA21x1MDAwNOjFpEZdUyN8QENcdTAwMWOua8ZcdTAwMTRcdTAwMDVcdJFbZc4451pcdTAwMTP6SuN1UUngSNd37i62XHUwMDFiP9yzjbWdwDn9eXjzs6DOSOxcXFx1MDAwZYhJXHUwMDEyMmHDSXqyTVJntHOMsVx1MDAxMZgzm1x1MDAxMt3f8NaKXHUwMDAylUKXXHUwMDFhXs1509xoJb1mLbdxXHUwMDExwVSotPZ9jFakS25PXHUwMDBm1k7Xe7+O62FwuH6MXbr0tGIoMsDXkFx1MDAwYmBlXGZcdTAwMWKjXHUwMDE1bZBcItb9qFLMyOLlg8+mXHUwMDE1amfcXHUwMDAxfeF4jDNN+JlcdTAwMTFIwlx0RJ94sJHp9GLke8VAiMBcdTAwMDJj/r/KLFx1MDAxOMHPl1RBXG5cdTAwMGKQsqFxwvxcIoKInZwllMKEQ7fn1zG8XHJmKXYqe1Qm+NOM1FJUclQlK1wiXHK1vjLDfMbyvl9WXrFNXHUwMDBmylx1MDAxZNI7q81otuRIlERSc6OJsfNcdTAwMWQoW1x1MDAxY7GI5NFlu1xuQMakiZb6XHS88ZyiY7lcdTAwMTTN+NpMRcfyWFT63Fx1MDAwN8dfXHUwMDA02z2p6Dh03pRcdTAwMDP8qZrj0JCnaVxyXjxVgjOioEVnmJ1YvqvR0s5wZlxiYo3dQ4RplopLw0lOQiFiXGaVIDMoXHUwMDExophcdTAwMTBcdTAwMThnXHUwMDBlf1ZlXHUwMDAyXHUwMDEzO81cdTAwMTAzXGJcdTAwMGbAw8JM2nfEqlwiXHUwMDAxYcFcdTAwMTZBIUayXFxcbmOkgUeItzdZsUiClO8tMFx1MDAxMlx1MDAxN1x1MDAxMlx1MDAxOWm1uuTSjk7zlJhP0lx1MDAxZrtcdTAwMDCUXHUwMDAw30L+w6lcdTAwMDHflzlcdTAwMDXymnRGpcSn4ut5d5pRaFx1MDAxNOcwqmRcdTAwMDcjIZmgRE5PLOWb3CwtsVDEscF2koFcdTAwMTFybPKkXHUwMDA0satBXGZcdTAwMTOFXHUwMDAxPCUrKZ/PK5rH0/ol1liI9JKqpDKikVx1MDAwNPlHIKM1oI7YhFx1MDAwNVlgpmBY0SdswbBcZrxSuD6idG+sLDdASlwiuYYkRoNOJGpCZUTYtTKScFx1MDAwNUhcdTAwMTOg3lx1MDAxZiqNby2BqVx1MDAxNDuVPfLuNCOtlG7rYkjhts5cdTAwMTRDjMaE0umzmIprjs+jy7NQRc2Ts1x1MDAwZebru79cdTAwMGVcbqhlubZ10Vx1MDAxONJlu1kpt9BMVyaG27pcdTAwMThky3eGXHRNKFBNMcM8f1tcdTAwMTeCXHUwMDE4J0VcdTAwMGIrqKCIMUj9qWRcdTAwMDVcdTAwMTO1IeBcdTAwMWFcdTAwMGXukrTEsq/jLs1yXHUwMDE2ur+LgoQwtfXmtPu7vLt/6KrT7Vx1MDAxZUbwyFx1MDAxMSlCW3u1++wneczqjeferk3Y1bhcdTAwMWVcdTAwMWbW5LhcdTAwMTEsQlxc29L//H73+7/nXHUwMDBiXHUwMDAzXCIifQ==         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }       MarginPaddingContent areaBorderHeightWidth","title":"Box Model"},{"location":"guide/styles/#width-and-height","text":"<p>Setting the width restricts the number of columns used by a widget, and setting the height restricts the number of rows. Let's look at an example which sets both dimensions.</p> dimensions01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass DimensionsApp(App):\n    def compose(self) -&gt; ComposeResult:\n        self.widget = Static(TEXT)\n        yield self.widget\n\n    def on_mount(self) -&gt; None:\n        self.widget.styles.background = \"purple\"\n        self.widget.styles.width = 30\n        self.widget.styles.height = 10\n\n\napp = DimensionsApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>This code produces the following result.</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1958292413-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1958292413-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1958292413-r1 { fill: #f3f3f3 } .terminal-1958292413-r2 { fill: #c5c8c6 }                                                                                DimensionsApp         I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0 brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0 me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0 will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see its\u00a0path.                  </p> <p>Note how the text wraps in the widget, and is cropped because it doesn't fit in the space provided.</p>","title":"Width and height"},{"location":"guide/styles/#auto-dimensions","text":"<p>In practice, we generally want the size of a widget to adapt to it's content, which we can do by setting a dimension to <code>\"auto\"</code>.</p> <p>Let's set the height to auto and see what happens.</p> dimensions02.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass DimensionsApp(App):\n    def compose(self) -&gt; ComposeResult:\n        self.widget = Static(TEXT)\n        yield self.widget\n\n    def on_mount(self) -&gt; None:\n        self.widget.styles.background = \"purple\"\n        self.widget.styles.width = 30\n        self.widget.styles.height = \"auto\"\n\n\napp = DimensionsApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>If you run this you will see the height of the widget now grows to accommodate the full text.:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3750640325-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3750640325-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3750640325-r1 { fill: #f3f3f3 } .terminal-3750640325-r2 { fill: #c5c8c6 }                                                                                DimensionsApp         I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0 brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0 me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0 will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0 will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0 remain.               </p>","title":"Auto dimensions"},{"location":"guide/styles/#units","text":"<p>Textual offers a few different units which allow you to specify dimensions relative to the screen or container. Relative units can better make use of available space if the user resizes the terminal.</p> <ul> <li>Percentage units are given as a string containing a number followed by a percentage symbol, e.g. <code>\"50%\"</code>. Setting a dimension to a percentage unit will cause it to fit in that percentage of the available space. For instance, setting width to <code>\"50%\"</code> will cause the width of the widget to be half the available space.</li> <li>View units are similar to percentage units, but explicitly reference a dimension. The <code>vw</code> unit sets a dimension to a percentage of the terminal width, and <code>vh</code> sets a dimension to a percentage of the terminal height.</li> <li>The <code>w</code> unit sets a dimension to a percentage of the available width (which may be smaller than the terminal size if the widget is within another widget).</li> <li>The <code>h</code> unit sets a dimension to a percentage of the available height.</li> </ul> <p>The following example demonstrates applying percentage units:</p> dimensions03.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass DimensionsApp(App):\n    def compose(self) -&gt; ComposeResult:\n        self.widget = Static(TEXT)\n        yield self.widget\n\n    def on_mount(self) -&gt; None:\n        self.widget.styles.background = \"purple\"\n        self.widget.styles.width = \"50%\"\n        self.widget.styles.height = \"80%\"\n\n\napp = DimensionsApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>With the width set to <code>\"50%\"</code> and the height set to <code>\"80%\"</code>, the widget will keep those relative dimensions when resizing the terminal window:</p> 60 x 2080 x 30120 x 40   <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2663506062-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2663506062-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2663506062-r1 { fill: #f3f3f3 } .terminal-2663506062-r2 { fill: #c5c8c6 }                                                                    DimensionsApp         I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0 brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0 me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0 will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0 will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0 remain.           </p>   <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2354083585-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2354083585-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2354083585-r1 { fill: #f3f3f3 } .terminal-2354083585-r2 { fill: #c5c8c6 }                                                                                                  DimensionsApp         I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0 total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0 through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0 the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0 nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.                       </p>   <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3631588212-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3631588212-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3631588212-r1 { fill: #f3f3f3 } .terminal-3631588212-r2 { fill: #c5c8c6 }                                                                                                                                DimensionsApp         I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0 its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0 remain.                                   </p>    <p>Percentage units are useful for widgets that occupy a relative portion of the screen, but they can be problematic for some proportions. For instance, if we want to divide the screen into thirds, we would have to set a dimension to <code>33.3333333333%</code> which is awkward. Textual supports <code>fr</code> units which are often better than percentage-based units for these situations.</p> <p>When specifying <code>fr</code> units for a given dimension, Textual will divide the available space by the sum of the <code>fr</code> units on that dimension. That space will then be divided amongst the widgets as a proportion of their individual <code>fr</code> values.</p> <p>Let's look at an example. We will create two widgets, one with a height of <code>\"2fr\"</code> and one with a height of <code>\"1fr\"</code>.</p> dimensions04.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass DimensionsApp(App):\n    def compose(self) -&gt; ComposeResult:\n        self.widget1 = Static(TEXT)\n        yield self.widget1\n        self.widget2 = Static(TEXT)\n        yield self.widget2\n\n    def on_mount(self) -&gt; None:\n        self.widget1.styles.background = \"purple\"\n        self.widget2.styles.background = \"darkgreen\"\n        self.widget1.styles.height = \"2fr\"\n        self.widget2.styles.height = \"1fr\"\n\n\napp = DimensionsApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>The total <code>fr</code> units for height is 3. The first widget will have a screen height of two thirds because its height style is set to <code>2fr</code>. The second widget's height styles is <code>1fr</code> so its screen height will be a third. Here's what that looks like.</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1990754138-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1990754138-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1990754138-r1 { fill: #f3f3f3 } .terminal-1990754138-r2 { fill: #c5c8c6 }                                                                                DimensionsApp         I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.          I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.     </p>","title":"Units"},{"location":"guide/styles/#maximum-and-minimums","text":"<p>The same units may also be used to set limits on a dimension. The following styles set minimum and maximum sizes and can accept any of the values used in width and height.</p> <ul> <li>min-width sets a minimum width.</li> <li>max-width sets a maximum width.</li> <li>min-height sets a minimum height.</li> <li>max-height sets a maximum height.</li> </ul>","title":"Maximum and minimums"},{"location":"guide/styles/#padding","text":"<p>Padding adds space around your content which can aid readability. Setting padding to an integer will add that number additional rows and columns around the content area. The following example sets padding to 2:</p> padding01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass PaddingApp(App):\n    def compose(self) -&gt; ComposeResult:\n        self.widget = Static(TEXT)\n        yield self.widget\n\n    def on_mount(self) -&gt; None:\n        self.widget.styles.background = \"purple\"\n        self.widget.styles.width = 30\n        self.widget.styles.padding = 2\n\n\napp = PaddingApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Notice the additional space around the text:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2319792483-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2319792483-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2319792483-r1 { fill: #c5c8c6 } .terminal-2319792483-r2 { fill: #f3f3f3 }                                                                                PaddingApp           I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0 that\u00a0brings\u00a0total\u00a0 obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0 over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past, I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0 to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0 there\u00a0will\u00a0be\u00a0nothing.\u00a0 Only\u00a0I\u00a0will\u00a0remain.            </p> <p>You can also set padding to a tuple of two integers which will apply padding to the top/bottom and left/right edges. The following example sets padding to <code>(2, 4)</code> which adds two rows to the top and bottom of the widget, and 4 columns to the left and right of the widget.</p> padding02.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass PaddingApp(App):\n    def compose(self) -&gt; ComposeResult:\n        self.widget = Static(TEXT)\n        yield self.widget\n\n    def on_mount(self) -&gt; None:\n        self.widget.styles.background = \"purple\"\n        self.widget.styles.width = 30\n        self.widget.styles.padding = (2, 4)\n\n\napp = PaddingApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Compare the output of this example to the previous example:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-2066626915-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-2066626915-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-2066626915-r1 { fill: #c5c8c6 } .terminal-2066626915-r2 { fill: #f3f3f3 }                                                                                PaddingApp           I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0 mind-killer. Fear\u00a0is\u00a0the\u00a0 little-death\u00a0that\u00a0 brings\u00a0total\u00a0 obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0 pass\u00a0over\u00a0me\u00a0and\u00a0 through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0 past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0 inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0 path. Where\u00a0the\u00a0fear\u00a0has\u00a0 gone\u00a0there\u00a0will\u00a0be\u00a0 nothing.\u00a0Only\u00a0I\u00a0will\u00a0 remain.       </p> <p>You can also set padding to a tuple of four values which applies padding to each edge individually. The first value is the padding for the top of the widget, followed by the right of the widget, then bottom, then left.</p>","title":"Padding"},{"location":"guide/styles/#border","text":"<p>The border style draws a border around a widget. To add a border set <code>syles.border</code> to a tuple of two values. The first value is the border type, which should be a string. The second value is the border color which will accept any value that works with  color and background.</p> <p>The following example adds a border around a widget:</p> border01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass BorderApp(App):\n    def compose(self) -&gt; ComposeResult:\n        self.widget = Static(TEXT)\n        yield self.widget\n\n    def on_mount(self) -&gt; None:\n        self.widget.styles.background = \"darkblue\"\n        self.widget.styles.width = \"50%\"\n        self.widget.styles.border = (\"heavy\", \"yellow\")\n\n\napp = BorderApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Here is the result:</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-4009425118-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-4009425118-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-4009425118-r1 { fill: #ffff00 } .terminal-4009425118-r2 { fill: #f3f3f3 } .terminal-4009425118-r3 { fill: #c5c8c6 }                                                                                BorderApp         \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503I\u00a0must\u00a0not\u00a0fear.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0\u2503 \u2503total\u00a0obliteration.\u2503 \u2503I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2503 \u2503I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0\u2503 \u2503through\u00a0me.\u2503 \u2503And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0\u2503 \u2503the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u2503 \u2503Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0\u2503 \u2503nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b               </p> <p>There are many other border types. Run the following from the command prompt to preview them.</p> <pre><code>textual borders\n</code></pre>","title":"Border"},{"location":"guide/styles/#outline","text":"<p>Outline is similar to border and is set in the same way. The difference is that outline will not change the size of the widget, and may overlap the content area. The following example sets an outline on a widget:</p> outline01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass OutlineApp(App):\n    def compose(self) -&gt; ComposeResult:\n        self.widget = Static(TEXT)\n        yield self.widget\n\n    def on_mount(self) -&gt; None:\n        self.widget.styles.background = \"darkblue\"\n        self.widget.styles.width = \"50%\"\n        self.widget.styles.outline = (\"heavy\", \"yellow\")\n\n\napp = OutlineApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Notice how the outline overlaps the text in the widget.</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-1788207707-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-1788207707-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-1788207707-r1 { fill: #ffff00 } .terminal-1788207707-r2 { fill: #f3f3f3 } .terminal-1788207707-r3 { fill: #c5c8c6 }                                                                                OutlineApp         \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503ear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503ear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0\u2503 \u2503otal\u00a0obliteration.\u2503 \u2503\u00a0will\u00a0face\u00a0my\u00a0fear.\u2503 \u2503\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0\u2503 \u2503hrough\u00a0me.\u2503 \u2503nd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0\u2503 \u2503he\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u2503 \u2503here\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b                 </p> <p>Outline can be useful to emphasize a widget, but be mindful that it may obscure your content.</p>","title":"Outline"},{"location":"guide/styles/#box-sizing","text":"<p>When you set padding or border it reduces the size of the widget's content area. In other words, setting padding or border won't change the width or height of the widget.</p> <p>This is generally desirable when you arrange things on screen as you can add border or padding without breaking your layout. Occasionally though you may want to keep the size of the content area constant and grow the size of the widget to fit padding and border. The box-sizing style allows you to switch between these two modes.</p> <p>If you set <code>box_sizing</code> to <code>\"content-box\"</code> then space required for padding and border will be added to the widget dimensions. The default value of <code>box_sizing</code> is <code>\"border-box\"</code>. Compare the box model diagram for content box to the previous box model diagram.</p>    eyJ2ZXJzaW9uIjoiMSIsImVuY29kaW5nIjoiYnN0cmluZyIsImNvbXByZXNzZWQiOnRydWUsImVuY29kZWQiOiJ4nO1bbU/bylx1MDAxMv7eX4E4X4m77ztb6eoq0HJISyEtUF6ujpBJXGYxOHFqm/BS9b/fWVx1MDAwN2LHid1cdTAwMDRCiqpjtZR41+vJ7vPMPDO7/fFmZWU1uet7q+9WVr3bllx1MDAxYvjtyL1ZXbP3XHUwMDA3Xlx1MDAxNPthXHUwMDBmm1j6OVx1MDAwZa+jVtqzkyT9+N3bt103uvKSfuC2PGfgx9duXHUwMDEwJ9dtP3RaYfetn3jd+L/2547b9f7TXHUwMDBmu+0kcrKX1Ly2n4TR8F1e4HW9Xlx1MDAxMuPo/8PPKys/0p8561wir5W4vYvAS1x1MDAxZkibMlx1MDAwM4WQxbs7YS81lnJmJFfAxaiHXHUwMDFmv8f3JV5cdTAwMWKbz9FmL2uxt1ZcdTAwMDf9k3XYheNT//DG8O1zPnjvXWavPfeDYC+5XHUwMDBihlPhtjrXUc6oOInCK+/QbydcdTAwMWT79sL90XPtMLFcdTAwMDaMmqPw+qLT8+J47KGw77b85M7eI2R0dzhccu9Wsju3todhjuSUgWRCXHUwMDEyw7RcdTAwMWE121x1MDAwMZjijqGKKFxuVFx1MDAxYcpMwbKNMMDFQMv+XCLplZl25rauLtC+XnvUJ4ncXtx3I1xcsqzfzcN3xpc7XFxcdTAwMDNTaFxuXHUwMDA3w7Ov0/H8i05i14tRh4A0XFzL4dsyW2MvXVx1MDAxN0q50Fx1MDAwMFSxUYu1od9op1x1MDAxOPmnOK9cdTAwMWQ36j9M32psP+Tst6Z/yFx1MDAwMSx7+Lrfdoc4oEpxqqRhVFx1MDAxMD5qXHUwMDBm/N5cdTAwMTU29q6DILtcdTAwMTe2rjLopHd/rj1cdTAwMDGzXG5oXHUwMDE5ZoVQwkitZ4fs1pZcdFx1MDAwN1x1MDAwN9/U1kbj5KPfh73vyW2nXHUwMDA0snGIXHUwMDA0nFx1MDAxYrCFp36FV/4ruFwiPFx1MDAxY6mZolopI1x1MDAwNaVjaOWSOlpcdTAwMTPkLiNMXG4pS9Eqz3m7JSrR+pdoKe9cXE5cIpVL7YCUQoGWkyBl0jjMXHUwMDE4XHUwMDA1RHCOVkxcdTAwMDGpMNxI4EotXHUwMDFlpFx1MDAwZlxyXHUwMDE5qnKr3drdPu5cdTAwMWNtXHUwMDFktO+M6V3v0L7utP3RWGNcdTAwMTB0oyi8WVx1MDAxZLX8fPitilx1MDAwMuhcdTAwMWKYXFxcblx1MDAwNYTmZVx1MDAxNFCSKipcdTAwMDVTM1PgYvdka6u+XHUwMDBidbj4/uVzI1jf2/yw+TSvzcpI0HbjzmK9NqfgaFx1MDAwMUZSXCKV0Fx1MDAwNMRcdTAwMThcdTAwMGZcdTAwMDRhXHUwMDBlN4ZwKjlTWlx1MDAxNy3LMO5h63O8NuJ7klx1MDAwMlRAXHUwMDEx81xmo1x1MDAwN6HKwHIhfyjXXHUwMDFi0KxcdTAwMTHduax/XCJ8/XNjY29/OuRcdTAwMTPvNskhfm36sGO912Z94e8j0pideW1GTFx1MDAxOYcwlFEuXHUwMDExWjAziaqn+eWlXHUwMDBmeVx1MDAxYYlcdTAwMTivJJFcdTAwMTJcdTAwMGUsh0RiXG6JXHUwMDE4L3JcYqVcdTAwMWHnWlx1MDAxOLFkcTMvILN1XHUwMDBme8mef++leFx1MDAxYru76Xb9II3Yo9spUtHSXHJsRqtWcK7c/JTGXHUwMDFlvjnFp1x1MDAxOXumXHUwMDFl+Fx1MDAxN700vOFTXjRcdTAwMDb2xMe0YdSh67fb+YjSwje5OGbUmCVcdTAwMTKEkX/h99xgf5qdz1xiZqDLiag0lYzD7NFs5/To4Gj/I+XbzY31xsllM+g2v5VcdTAwMTCxXHUwMDE1hXFcXOu4SatTRkZRRsY5Zd2vuZjqOoW6XzEmldFcdTAwMDVdJ4xDXHUwMDE5xn0hQXHBoZSKM+i6Sir+WttcdTAwMTn0jyrHh0dyXHUwMDEyTVx1MDAxOf5ZdoRcdTAwMGI8/9T/1Fx1MDAxNMTd612eX57tt8/7fy9O1Fx1MDAxOZPLgJ9cdTAwMTmLUv5OoVx1MDAwMOTmrEhcdTAwMDGNXHUwMDEyWmswZGZcbuydfavJ/nZP3HtcImh5N5tHx75YcCxaOPxcdTAwMTHUXHUwMDBlyiOgXHUwMDFjM1hcdTAwMDJkPFx0x4DsXHUwMDAw00JqzsGyo1x1MDAxNP7PT8JcdTAwMWSqtJmOfupcdTAwMTSJMVxuTECF1oY+XHUwMDAx+6lxT1xmTNxcdTAwMDCDOdCZs8ONknW/1/Z7XHUwMDE3xUe8XrukJXDjZCPsdn0rRJqh30uKPdJx65ZmXHUwMDFkz21PXHUwMDE5ubStb4dcdTAwMWIne/bbSoaW9MPo93/Wpvaesor2XHUwMDFhrV/2/Jv8v/PyXHUwMDE2k60y3lx1MDAwMmGo+Fx1MDAxNWRK5Ve0jYLuWaO5uX1Fv5r9wf76cXD/Yf3101Y5QkgmMOFCXVaoRkiMJYTaqIbikebD+KJpK1x1MDAwMINcdTAwMTa+iU1hLXHwzZpOoy1cblxmXHUwMDBlNF+hWFxubZlBZ/EvbSd6T66ivWrZXHUwMDAyzsnbYbyfQlxcSnh5XHUwMDExkVx1MDAwMq6PlLMnf2ZdXHUwMDFlXHUwMDA3jfB+vZZwT7//dnvQOPZfPXMlTjZDOaklMoCxXGaPacDFViQsV1RQwqR8OeZaTy2UkURqZlxmJng5MmZ1b3A4Z4ZcdTAwMDDmqOhUtJmgssJcdTAwMDe5XHUwMDEwTyl7P4fJgvFcXFxmeDqTM137uKUzTMlcIu+2/v7kzP18R1x1MDAwZvfvTj6FX3ZOznLiXHUwMDE2c8nWtbVcdTAwMTJJQlx1MDAwNFx1MDAxM7iqXHUwMDA2ME0gxGQ5gp1cZrefolx1MDAwMpNcYismXHUwMDAxXHInVFxi9tDjZ57ry/FcIkVyLtSR1CpQlbZPXHUwMDAyamGuJb9FNLGnpjiuXHUwMDExRp2ZfcvXU1x1MDAxMftcdTAwMWZ7V+fdTs39+vfgbHDX+Pj6fYtyjDA49bZeXHUwMDAzXCKrcaSqXHUwMDAwxbwhmC5cdTAwMWGGXHUwMDE5rWYv6VskcKHQXHUwMDFjXFxcdTAwMTRl7ZniWoyD2kRbL2e40jKXWox21KQkoGj2XHUwMDFkl6Ptqcipx9/oWpBLaFx1MDAwZuOMXGKqhaGaiVxcr6FnXHUwMDAxXHUwMDA3XHUwMDEzOMNwSW21UJo/1K+UXHUwMDAzyl5cdTAwMTNQmtOnlJWqIVx1MDAxN9UmKmTMpPp69vJA9bq/Vo/CiYOzjnlcdTAwMDZcdTAwMDBcdTAwMDdZVCtcblx1MDAxY6ZcdTAwMTSVlFx1MDAxM8xGXrA6MMWBTKmEXHUwMDE5SoyS4ilpxXMqYdWxYlxmasVK2FrVuNX6tnLcR9xX+DlbXFzPJmqxxfVcZmyPxfWt4bLlXHUwMDEwkJXVYaz3qGpcdTAwMWV45+O0XHUwMDFjL6onYW69xivqY9+iWD5/sKTSI5RcdTAwMTVcdTAwMWUoUaVcdTAwMDd3UNih3Fx1MDAxMWpcdTAwMGWXcCa/XyabZ1x1MDAwM7++d3DfXHUwMDFjfDyK67T92l1cdTAwMDKCx0E/jCwzUlxuIIWCOWeOJlx1MDAxNMUw6i1cdTAwMDOqWMhfpMhQxDCbQmFWb1x1MDAwZsJk7idcdTAwMTNcdTAwMTnSQUWuXHUwMDA1ei5cZp+AmnNSZaCpZuy41VJUhtRcXM5zbqdMZfxppYjyVbVXbXJB54z1ZczW5bthVnFgijt7RbGx955cdTAwMWbG96eXXHUwMDFi21eDvuyw2mly8tppLZV2tNBgT8AhbTOijFiN+Vx1MDAwNCZcdTAwMGZAXHUwMDA0ofQlaVxyRlx1MDAwMyipUfkrXHUwMDAwMa0sYU/jKaK1ZFx1MDAxOO0hb81cdTAwMDOrpVx1MDAwNlx1MDAwNUQ+ZcP6WaxGbGZS5V9WjzqULqq9alx1MDAxM+s5J6nLi1x1MDAwMrJih89oaf3MXHUwMDFjm9zhyWf4Ksh2fHq2XHUwMDFmeVe614TD+LVcdTAwMTNbXHUwMDEw4VCuXHUwMDA14UoxTjlcdTAwMWLf4sM7jkZfi9FcdTAwMWOXXHUwMDA1Kna4n8tsXHL4XCJOlLZHsiThXHUwMDE5N3NcdTAwMWJ9zFx1MDAwMCB50blcdTAwMTOp81x1MDAwNZvRbjfHkM1cdTAwMTVZMrOtLYvY8SurXG5cdTAwMDTN+8vzdqPbj1x1MDAwNzu8Xt9s6i9cdTAwMWL5c15jXHUwMDA1R1x1MDAwNTYlY1x1MDAxMoDY8kAuXHUwMDE5zlxujpgsa4LTLDhDmD90+NPqXHUwMDAytVJM2WtcdTAwMTJNXHUwMDBi8yvclFx1MDAxNlx1MDAxYo2xZ2/NXHUwMDFjh6FP9kNf3ZHzK7PV2lx1MDAxZFxcfrn4cFx1MDAxOddfvVvBqcdcdTAwMDTSWL2gtDZcdTAwMTlcdTAwMWaHXoU5xoBcdTAwMDZGOKZESpVcdTAwMWaIfrZbMY5cdTAwMDAw6Fx1MDAxNVxmapgph/eJw6VAW1x1MDAwNHBcbpTlTnE9XHUwMDFlXHUwMDExxSBg97+WXFxoxLl7XHUwMDFkLmW4hSGAcnSuxpbZeK7Xg0ehXHUwMDBlprfApMbsTlx1MDAxMG1cdTAwMWWLbH+aSymBU/psXHUwMDExSHO6k7I6o85JkKJIIejigWs9+65o9bK/Vm9ChVx1MDAwMza0IzOQXHUwMDFlhVx1MDAwM7HMXHUwMDE4dPOSci61QV8vXi79yCXlXHUwMDE1lUZGXHUwMDA1XHUwMDE3wOAp546eU2msXHUwMDE2oGNgm6vSWFx1MDAxZIEqx31EfoWjW26lcVxi3lx1MDAxY1x1MDAwMH5XoXFoSKVHqDyga2jFXHUwMDAxXWnPfPI5TidcdTAwMWVHlLa22Fx1MDAxMVx0XHUwMDA3Xtj1opvjxulNiVt4ZVx1MDAwN3SVQzHwXHUwMDEwiVx1MDAwMlx1MDAwZf9cdTAwMTb+nyCXzFFEWaVHMTphOlPqXHUwMDFinn9ElzpcXNCyU4pcZi3hnGnCXHUwMDE0n37uyd5cdTAwMDRcIpa8PdE8qFx1MDAxZuy2br61Pnz49EXcXHUwMDA1u21cdTAwMTEsblx1MDAxYkHR+VxumW9cdTAwMWVcdTAwMDdOXHUwMDA3XXX7/b1cdTAwMDSHXHUwMDFj6Vx1MDAxOJxcdTAwMTO//UD6bJjVge/drE/5r3Ln6WVNTjlmcezZXHUwMDE5+fHzzc//XHUwMDAzXHUwMDFmSbr7In0=         @font-face {         font-family: \"Virgil\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Virgil.woff2\");       }       @font-face {         font-family: \"Cascadia\";         src: url(\"https://unpkg.com/@excalidraw/excalidraw@0.12.0-32d8221/dist/excalidraw-assets/Cascadia.woff2\");       }       Content areaHeightWidth  <p>The following example creates two widgets which have a width of 30, a height of 6, and a border and padding of 1. The second widget has <code>box_sizing</code> set to <code>\"content-box\"</code>.</p> box_sizing01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass BoxSizing(App):\n    def compose(self) -&gt; ComposeResult:\n        self.widget1 = Static(TEXT)\n        yield self.widget1\n        self.widget2 = Static(TEXT)\n        yield self.widget2\n\n    def on_mount(self) -&gt; None:\n        self.widget1.styles.background = \"purple\"\n        self.widget2.styles.background = \"darkgreen\"\n        self.widget1.styles.width = 30\n        self.widget2.styles.width = 30\n        self.widget2.styles.height = 6\n        self.widget1.styles.height = 6\n        self.widget2.styles.height = 6\n        self.widget1.styles.border = (\"heavy\", \"white\")\n        self.widget2.styles.border = (\"heavy\", \"white\")\n        self.widget1.styles.padding = 1\n        self.widget2.styles.padding = 1\n        self.widget2.styles.box_sizing = \"content-box\"\n\n\napp = BoxSizing()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>The padding and border of the first widget is subtracted from the height leaving only 2 lines in the content area. The second widget also has a height of 6, but the padding and border adds additional height so that the content area remains 6 lines. </p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-3285399601-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-3285399601-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-3285399601-r1 { fill: #ffffff } .terminal-3285399601-r2 { fill: #f3f3f3 } .terminal-3285399601-r3 { fill: #c5c8c6 }                                                                                BoxSizing         \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503\u2503 \u2503I\u00a0must\u00a0not\u00a0fear.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503\u2503 \u2503I\u00a0must\u00a0not\u00a0fear.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0\u2503 \u2503brings\u00a0total\u00a0obliteration.\u2503 \u2503I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2503 \u2503I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b            </p>","title":"Box sizing"},{"location":"guide/styles/#margin","text":"<p>Margin is similar to padding in that it adds space, but unlike padding, margin is outside of the widget's border. It is used to add space between widgets.</p> <p>The following example creates two widgets, each with a padding of 2.</p> margin01.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass MarginApp(App):\n    def compose(self) -&gt; ComposeResult:\n        self.widget1 = Static(TEXT)\n        yield self.widget1\n        self.widget2 = Static(TEXT)\n        yield self.widget2\n\n    def on_mount(self) -&gt; None:\n        self.widget1.styles.background = \"purple\"\n        self.widget2.styles.background = \"darkgreen\"\n        self.widget1.styles.border = (\"heavy\", \"white\")\n        self.widget2.styles.border = (\"heavy\", \"white\")\n        self.widget1.styles.margin = 2\n        self.widget2.styles.margin = 2\n\n\napp = MarginApp()\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Notice how each widget has an additional two rows and columns around the border.</p> <p>        @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Regular\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Regular.woff\") format(\"woff\");         font-style: normal;         font-weight: 400;     }     @font-face {         font-family: \"Fira Code\";         src: local(\"FiraCode-Bold\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Bold.woff2\") format(\"woff2\"),                 url(\"https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff/FiraCode-Bold.woff\") format(\"woff\");         font-style: bold;         font-weight: 700;     }      .terminal-726393193-matrix {         font-family: Fira Code, monospace;         font-size: 20px;         line-height: 24.4px;         font-variant-east-asian: full-width;     }      .terminal-726393193-title {         font-size: 18px;         font-weight: bold;         font-family: arial;     }      .terminal-726393193-r1 { fill: #f3f3f3 } .terminal-726393193-r2 { fill: #c5c8c6 } .terminal-726393193-r3 { fill: #ffffff }                                                                                MarginApp           \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503I\u00a0must\u00a0not\u00a0fear.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u2503 \u2503I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2503 \u2503I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u2503 \u2503And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u2503 \u2503Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b   \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503I\u00a0must\u00a0not\u00a0fear.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0mind-killer.\u2503 \u2503Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u2503 \u2503I\u00a0will\u00a0face\u00a0my\u00a0fear.\u2503 \u2503I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u2503 \u2503And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path.\u2503 \u2503Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b      </p>  <p>Note</p> <p>In the above example both widgets have a margin of 2, but there are only 2 lines of space between the widgets. This is because margins of consecutive widgets overlap. In other words when there are two widgets next to each other Textual picks the greater of the two margins.</p>","title":"Margin"},{"location":"guide/styles/#more-styles","text":"<p>We've covered the most fundamental styles used by Textual apps, but there are many more which you can use to customize many aspects of how your app looks. See the Styles reference for a comprehensive list.</p> <p>In the next chapter we will discuss Textual CSS which is a powerful way of applying styles to widgets that keeps your code free of style attributes.</p>","title":"More styles"},{"location":"guide/widgets/","text":"<p>TODO: Widgets docs</p> <ul> <li>What is a widget</li> <li>Defining a basic widget</li> <li>Base classes Widget or Static</li> <li>Text widgets</li> <li>Rich renderable widgets</li> <li>Complete widget</li> <li>Render line widget API</li> </ul>","title":"Widgets"},{"location":"how-to/","text":"<p>For those who want more focused information on Textual features.</p>","title":"How to ..."},{"location":"how-to/animation/","text":"","title":"Animation"},{"location":"how-to/mouse-and-keyboard/","text":"","title":"Mouse and Keyboard"},{"location":"how-to/scroll/","text":"","title":"Scroll"},{"location":"reference/","text":"<p>A reference to the Textual public APIs.</p>","title":"Reference"},{"location":"reference/app/","text":"<p>         Bases: <code>Generic[ReturnType]</code>, <code>DOMNode</code></p> <p>The base class for Textual Applications.</p> <p>Parameters:</p>    Name Type Description Default     <code>driver_class</code>  <code>Type[Driver] | None</code>  <p>Driver class or <code>None</code> to auto-detect. Defaults to None.</p>  <code>None</code>    <code>title</code>  <code>str | None</code>  <p>Title of the application. If <code>None</code>, the title is set to the name of the <code>App</code> subclass. Defaults to <code>None</code>.</p>  <code>None</code>    <code>css_path</code>  <code>str | PurePath | None</code>  <p>Path to CSS or <code>None</code> for no CSS file. Defaults to None.</p>  <code>None</code>    <code>watch_css</code>  <code>bool</code>  <p>Watch CSS for changes. Defaults to False.</p>  <code>False</code>","title":"App"},{"location":"reference/app/#textual.app.App.action","text":"<p>Perform an action.</p> <p>Parameters:</p>    Name Type Description Default     <code>action</code>  <code>str</code>  <p>Action encoded in a string.</p>  required    <code>default_namespace</code>  <code>object | None</code>  <p>Namespace to use if not provided in the action, or None to use app. Defaults to None.</p>  <code>None</code>","title":"<code>action(action, default_namespace=None)</code>  <code>async</code>"},{"location":"reference/app/#textual.app.App.action_screenshot","text":"<p>Action to save a screenshot.</p>","title":"<code>action_screenshot(filename, path='~/')</code>"},{"location":"reference/app/#textual.app.App.action_toggle_dark","text":"<p>Action to toggle dark mode.</p>","title":"<code>action_toggle_dark()</code>"},{"location":"reference/app/#textual.app.App.bell","text":"<p>Play the console 'bell'.</p>","title":"<code>bell()</code>"},{"location":"reference/app/#textual.app.App.bind","text":"<p>Bind a key to an action.</p> <p>Parameters:</p>    Name Type Description Default     <code>keys</code>  <code>str</code>  <p>A comma separated list of keys, i.e.</p>  required    <code>action</code>  <code>str</code>  <p>Action to bind to.</p>  required    <code>description</code>  <code>str</code>  <p>Short description of action. Defaults to \"\".</p>  <code>''</code>    <code>show</code>  <code>bool</code>  <p>Show key in UI. Defaults to True.</p>  <code>True</code>    <code>key_display</code>  <code>str</code>  <p>Replacement text for key, or None to use default. Defaults to None.</p>  <code>None</code>","title":"<code>bind(keys, action, *, description='', show=True, key_display=None)</code>"},{"location":"reference/app/#textual.app.App.bindings","text":"<p>Get current bindings.</p>","title":"<code>bindings()</code>  <code>property</code>"},{"location":"reference/app/#textual.app.App.capture_mouse","text":"<p>Send all mouse events to the given widget, disable mouse capture.</p> <p>Parameters:</p>    Name Type Description Default     <code>widget</code>  <code>Widget | None</code>  <p>If a widget, capture mouse event, or None to end mouse capture.</p>  required","title":"<code>capture_mouse(widget)</code>"},{"location":"reference/app/#textual.app.App.compose","text":"<p>Yield child widgets for a container.</p>","title":"<code>compose()</code>"},{"location":"reference/app/#textual.app.App.debug","text":"<p>Check if debug mode is enabled.</p> <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if debug mode is enabled.</p>","title":"<code>debug()</code>  <code>property</code>"},{"location":"reference/app/#textual.app.App.devtools_enabled","text":"<p>Check if devtools are enabled.</p> <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if devtools are enabled.</p>","title":"<code>devtools_enabled()</code>  <code>property</code>"},{"location":"reference/app/#textual.app.App.exit","text":"<p>Exit the app, and return the supplied result.</p> <p>Parameters:</p>    Name Type Description Default     <code>result</code>  <code>ReturnType | None</code>  <p>Return value. Defaults to None.</p>  <code>None</code>","title":"<code>exit(result=None)</code>"},{"location":"reference/app/#textual.app.App.export_screenshot","text":"<p>Export a SVG screenshot of the current screen.</p> <p>Parameters:</p>    Name Type Description Default     <code>title</code>  <code>str | None</code>  <p>The title of the exported screenshot or None to use app title. Defaults to None.</p>  <code>None</code>","title":"<code>export_screenshot(*, title=None)</code>"},{"location":"reference/app/#textual.app.App.fatal_error","text":"<p>Exits the app after an unhandled exception.</p>","title":"<code>fatal_error()</code>"},{"location":"reference/app/#textual.app.App.focus_chain","text":"<p>Get widgets that may receive focus, in focus order.</p> <p>Returns:</p>    Type Description      <code>list[Widget]</code>  <p>list[Widget]: List of Widgets in focus order.</p>","title":"<code>focus_chain()</code>  <code>property</code>"},{"location":"reference/app/#textual.app.App.focus_next","text":"<p>Focus the next widget.</p> <p>Returns:</p>    Type Description      <code>Widget | None</code>  <p>Widget | None: Newly focused widget, or None for no focus.</p>","title":"<code>focus_next()</code>"},{"location":"reference/app/#textual.app.App.focus_previous","text":"<p>Focus the previous widget.</p> <p>Returns:</p>    Type Description      <code>Widget | None</code>  <p>Widget | None: Newly focused widget, or None for no focus.</p>","title":"<code>focus_previous()</code>"},{"location":"reference/app/#textual.app.App.get_child","text":"<p>Shorthand for self.screen.get_child(id: str) Returns the first child (immediate descendent) of this DOMNode with the given ID.</p> <p>Parameters:</p>    Name Type Description Default     <code>id</code>  <code>str</code>  <p>The ID of the node to search for.</p>  required     <p>Returns:</p>    Name Type Description     <code>DOMNode</code>  <code>DOMNode</code>  <p>The first child of this node with the specified ID.</p>    <p>Raises:</p>    Type Description      <code>NoMatchingNodesError</code>  <p>if no children could be found for this ID</p>","title":"<code>get_child(id)</code>"},{"location":"reference/app/#textual.app.App.get_css_variables","text":"<p>Get a mapping of variables used to pre-populate CSS.</p> <p>Returns:</p>    Type Description      <code>dict[str, str]</code>  <p>dict[str, str]: A mapping of variable name to value.</p>","title":"<code>get_css_variables()</code>"},{"location":"reference/app/#textual.app.App.get_driver_class","text":"<p>Get a driver class for this platform.</p> <p>Called by the constructor.</p> <p>Returns:</p>    Name Type Description     <code>Driver</code>  <code>Type[Driver]</code>  <p>A Driver class which manages input and display.</p>","title":"<code>get_driver_class()</code>"},{"location":"reference/app/#textual.app.App.get_screen","text":"<p>Get an installed screen.</p> <p>If the screen isn't running, it will be registered before it is run.</p> <p>Parameters:</p>    Name Type Description Default     <code>screen</code>  <code>Screen | str</code>  <p>Either a Screen object or screen name (the <code>name</code> argument when installed).</p>  required     <p>Raises:</p>    Type Description      <code>KeyError</code>  <p>If the named screen doesn't exist.</p>    <p>Returns:</p>    Name Type Description     <code>Screen</code>  <code>Screen</code>  <p>A screen instance.</p>","title":"<code>get_screen(screen)</code>"},{"location":"reference/app/#textual.app.App.get_widget_at","text":"<p>Get the widget under the given coordinates.</p> <p>Parameters:</p>    Name Type Description Default     <code>x</code>  <code>int</code>  <p>X Coord.</p>  required    <code>y</code>  <code>int</code>  <p>Y Coord.</p>  required     <p>Returns:</p>    Type Description      <code>tuple[Widget, Region]</code>  <p>tuple[Widget, Region]: The widget and the widget's screen region.</p>","title":"<code>get_widget_at(x, y)</code>"},{"location":"reference/app/#textual.app.App.install_screen","text":"<p>Install a screen.</p> <p>Parameters:</p>    Name Type Description Default     <code>screen</code>  <code>Screen</code>  <p>Screen to install.</p>  required    <code>name</code>  <code>str | None</code>  <p>Unique name of screen or None to auto-generate. Defaults to None.</p>  <code>None</code>     <p>Raises:</p>    Type Description      <code>ScreenError</code>  <p>If the screen can't be installed.</p>    <p>Returns:</p>    Name Type Description     <code>str</code>  <code>str</code>  <p>The name of the screen</p>","title":"<code>install_screen(screen, name=None)</code>"},{"location":"reference/app/#textual.app.App.is_headless","text":"<p>Check if the app is running in 'headless' mode.</p> <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the app is in headless mode.</p>","title":"<code>is_headless()</code>  <code>property</code>"},{"location":"reference/app/#textual.app.App.is_screen_installed","text":"<p>Check if a given screen has been installed.</p> <p>Parameters:</p>    Name Type Description Default     <code>screen</code>  <code>Screen | str</code>  <p>Either a Screen object or screen name (the <code>name</code> argument when installed).</p>  required     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the screen is currently installed,</p>","title":"<code>is_screen_installed(screen)</code>"},{"location":"reference/app/#textual.app.App.measure","text":"<p>Get the optimal width for a widget or renderable.</p> <p>Parameters:</p>    Name Type Description Default     <code>renderable</code>  <code>RenderableType</code>  <p>A renderable (including Widget)</p>  required    <code>max_width</code>  <code>[type]</code>  <p>Maximum width. Defaults to 100_000.</p>  <code>100000</code>     <p>Returns:</p>    Name Type Description     <code>int</code>  <code>int</code>  <p>Number of cells required to render.</p>","title":"<code>measure(renderable, max_width=100000)</code>"},{"location":"reference/app/#textual.app.App.mount","text":"<p>Mount widgets. Widgets specified as positional args, or keywords args. If supplied as keyword args they will be assigned an id of the key.</p>","title":"<code>mount(*anon_widgets, **widgets)</code>"},{"location":"reference/app/#textual.app.App.mount_all","text":"<p>Mount widgets from an iterable.</p> <p>Parameters:</p>    Name Type Description Default     <code>widgets</code>  <code>Iterable[Widget]</code>  <p>An iterable of widgets.</p>  required","title":"<code>mount_all(widgets)</code>"},{"location":"reference/app/#textual.app.App.panic","text":"<p>Exits the app then displays a message.</p> <p>Parameters:</p>    Name Type Description Default     <code>*renderables</code>  <code>RenderableType</code>  <p>Rich renderables to display on exit.</p>  <code>()</code>","title":"<code>panic(*renderables)</code>"},{"location":"reference/app/#textual.app.App.pop_screen","text":"<p>Pop the current screen from the stack, and switch to the previous screen.</p> <p>Returns:</p>    Name Type Description     <code>Screen</code>  <code>Screen</code>  <p>The screen that was replaced.</p>","title":"<code>pop_screen()</code>"},{"location":"reference/app/#textual.app.App.press","text":"<p>Handle a key press.</p> <p>Parameters:</p>    Name Type Description Default     <code>key</code>  <code>str</code>  <p>A key</p>  required     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the key was handled by a binding, otherwise False</p>","title":"<code>press(key)</code>  <code>async</code>"},{"location":"reference/app/#textual.app.App.push_screen","text":"<p>Push a new screen on the screen stack.</p> <p>Parameters:</p>    Name Type Description Default     <code>screen</code>  <code>Screen | str</code>  <p>A Screen instance or an id.</p>  required","title":"<code>push_screen(screen)</code>"},{"location":"reference/app/#textual.app.App.refresh_css","text":"<p>Refresh CSS.</p> <p>Parameters:</p>    Name Type Description Default     <code>animate</code>  <code>bool</code>  <p>Also execute CSS animations. Defaults to True.</p>  <code>True</code>","title":"<code>refresh_css(animate=True)</code>"},{"location":"reference/app/#textual.app.App.run","text":"<p>The main entry point for apps.</p> <p>Parameters:</p>    Name Type Description Default     <code>quit_after</code>  <code>float | None</code>  <p>Quit after a given number of seconds, or None to run forever. Defaults to None.</p>  <code>None</code>    <code>headless</code>  <code>bool</code>  <p>Run in \"headless\" mode (don't write to stdout).</p>  <code>False</code>    <code>press</code>  <code>str</code>  <p>An iterable of keys to simulate being pressed.</p>  <code>None</code>    <code>screenshot</code>  <code>bool</code>  <p>Take a screenshot after pressing keys (svg data stored in self._screenshot). Defaults to False.</p>  <code>False</code>    <code>screenshot_title</code>  <code>str | None</code>  <p>Title of screenshot, or None to use App title. Defaults to None.</p>  <code>None</code>     <p>Returns:</p>    Type Description      <code>ReturnType | None</code>  <p>ReturnType | None: The return value specified in <code>App.exit</code> or None if exit wasn't called.</p>","title":"<code>run(*, quit_after=None, headless=False, press=None, screenshot=False, screenshot_title=None)</code>"},{"location":"reference/app/#textual.app.App.save_screenshot","text":"<p>Save a SVG screenshot of the current screen.</p> <p>Parameters:</p>    Name Type Description Default     <code>filename</code>  <code>str | None</code>  <p>Filename of SVG screenshot, or None to auto-generate a filename with the date and time. Defaults to None.</p>  <code>None</code>    <code>path</code>  <code>str</code>  <p>Path to directory for output. Defaults to current working directory.</p>  <code>'./'</code>    <code>time_format(str,</code>  <code>optional</code>  <p>Time format to use if filename is None. Defaults to \"%Y-%m-%d %X %f\".</p>  required     <p>Returns:</p>    Name Type Description     <code>str</code>  <code>str</code>  <p>Filename of screenshot.</p>","title":"<code>save_screenshot(filename=None, path='./', time_format='%Y-%m-%d %X %f')</code>"},{"location":"reference/app/#textual.app.App.screen","text":"<p>Get the current screen.</p> <p>Raises:</p>    Type Description      <code>ScreenStackError</code>  <p>If there are no screens on the stack.</p>    <p>Returns:</p>    Name Type Description     <code>Screen</code>  <code>Screen</code>  <p>The currently active screen.</p>","title":"<code>screen()</code>  <code>property</code>"},{"location":"reference/app/#textual.app.App.screen_stack","text":"<p>Get a copy of the screen stack.</p> <p>Returns:</p>    Type Description      <code>list[Screen]</code>  <p>list[Screen]: List of screens.</p>","title":"<code>screen_stack()</code>  <code>property</code>"},{"location":"reference/app/#textual.app.App.set_focus","text":"<p>Focus (or unfocus) a widget. A focused widget will receive key events first.</p> <p>Parameters:</p>    Name Type Description Default     <code>widget</code>  <code>Widget</code>  <p>Widget to focus.</p>  required    <code>scroll_visible</code>  <code>bool</code>  <p>Scroll widget in to view.</p>  <code>True</code>","title":"<code>set_focus(widget, scroll_visible=True)</code>"},{"location":"reference/app/#textual.app.App.show_focus","text":"<p>Highlight the currently focused widget.</p> <p>Returns:</p>    Type Description      <code>Widget | None</code>  <p>Widget | None: Focused widget, or None for no focus.</p>","title":"<code>show_focus()</code>"},{"location":"reference/app/#textual.app.App.size","text":"<p>Get the size of the terminal.</p> <p>Returns:</p>    Name Type Description     <code>Size</code>  <code>Size</code>  <p>Size of the terminal</p>","title":"<code>size()</code>  <code>property</code>"},{"location":"reference/app/#textual.app.App.switch_screen","text":"<p>Switch to a another screen by replacing the top of the screen stack with a new screen.</p> <p>Parameters:</p>    Name Type Description Default     <code>screen</code>  <code>Screen | str</code>  <p>Either a Screen object or screen name (the <code>name</code> argument when installed).</p>  required","title":"<code>switch_screen(screen)</code>"},{"location":"reference/app/#textual.app.App.uninstall_screen","text":"<p>Uninstall a screen. If the screen was not previously installed then this method is a null-op.</p> <p>Parameters:</p>    Name Type Description Default     <code>screen</code>  <code>Screen | str</code>  <p>The screen to uninstall or the name of a installed screen.</p>  required     <p>Returns:</p>    Type Description      <code>str | None</code>  <p>str | None: The name of the screen that was uninstalled, or None if no screen was uninstalled.</p>","title":"<code>uninstall_screen(screen)</code>"},{"location":"reference/app/#textual.app.App.update_styles","text":"<p>Request update of styles.</p> <p>Should be called whenever CSS classes / pseudo classes change.</p>","title":"<code>update_styles(node=None)</code>"},{"location":"reference/app/#textual.app.App.update_visible_styles","text":"<p>Update visible styles only.</p>","title":"<code>update_visible_styles()</code>"},{"location":"reference/app/#textual.app.App.watch_dark","text":"<p>Watches the dark bool.</p>","title":"<code>watch_dark(dark)</code>"},{"location":"reference/button/","text":"<p>         Bases: <code>Widget</code></p> <p>A simple clickable button.</p>","title":"Button"},{"location":"reference/button/#textual.widgets._button.Button.ACTIVE_EFFECT_DURATION","text":"<p>When buttons are clicked they get the <code>-active</code> class for this duration (in seconds)</p>","title":"<code>ACTIVE_EFFECT_DURATION = 0.3</code>  <code>class-attribute</code>"},{"location":"reference/button/#textual.widgets._button.Button.__init__","text":"<p>Create a Button widget.</p> <p>Parameters:</p>    Name Type Description Default     <code>label</code>  <code>str</code>  <p>The text that appears within the button.</p>  <code>None</code>    <code>disabled</code>  <code>bool</code>  <p>Whether the button is disabled or not.</p>  <code>False</code>    <code>variant</code>  <code>ButtonVariant</code>  <p>The variant of the button.</p>  <code>'default'</code>    <code>name</code>  <code>str | None</code>  <p>The name of the button.</p>  <code>None</code>    <code>id</code>  <code>str | None</code>  <p>The ID of the button in the DOM.</p>  <code>None</code>    <code>classes</code>  <code>str | None</code>  <p>The CSS classes of the button.</p>  <code>None</code>","title":"<code>__init__(label=None, disabled=False, variant='default', *, name=None, id=None, classes=None)</code>"},{"location":"reference/button/#textual.widgets._button.Button.error","text":"<p>Utility constructor for creating an error Button variant.</p> <p>Parameters:</p>    Name Type Description Default     <code>label</code>  <code>str</code>  <p>The text that appears within the button.</p>  <code>None</code>    <code>disabled</code>  <code>bool</code>  <p>Whether the button is disabled or not.</p>  <code>False</code>    <code>name</code>  <code>str | None</code>  <p>The name of the button.</p>  <code>None</code>    <code>id</code>  <code>str | None</code>  <p>The ID of the button in the DOM.</p>  <code>None</code>    <code>classes</code>  <code>str | None</code>  <p>The CSS classes of the button.</p>  <code>None</code>     <p>Returns:</p>    Name Type Description     <code>Button</code>  <code>Button</code>  <p>A Button widget of the 'error' variant.</p>","title":"<code>error(label=None, disabled=False, *, name=None, id=None, classes=None)</code>  <code>classmethod</code>"},{"location":"reference/button/#textual.widgets._button.Button.press","text":"<p>Respond to a button press.</p>","title":"<code>press()</code>"},{"location":"reference/button/#textual.widgets._button.Button.success","text":"<p>Utility constructor for creating a success Button variant.</p> <p>Parameters:</p>    Name Type Description Default     <code>label</code>  <code>str</code>  <p>The text that appears within the button.</p>  <code>None</code>    <code>disabled</code>  <code>bool</code>  <p>Whether the button is disabled or not.</p>  <code>False</code>    <code>name</code>  <code>str | None</code>  <p>The name of the button.</p>  <code>None</code>    <code>id</code>  <code>str | None</code>  <p>The ID of the button in the DOM.</p>  <code>None</code>    <code>classes</code>  <code>str | None</code>  <p>The CSS classes of the button.</p>  <code>None</code>     <p>Returns:</p>    Name Type Description     <code>Button</code>  <code>Button</code>  <p>A Button widget of the 'success' variant.</p>","title":"<code>success(label=None, disabled=False, *, name=None, id=None, classes=None)</code>  <code>classmethod</code>"},{"location":"reference/button/#textual.widgets._button.Button.validate_label","text":"<p>Parse markup for self.label</p>","title":"<code>validate_label(label)</code>"},{"location":"reference/button/#textual.widgets._button.Button.warning","text":"<p>Utility constructor for creating a warning Button variant.</p> <p>Parameters:</p>    Name Type Description Default     <code>label</code>  <code>str</code>  <p>The text that appears within the button.</p>  <code>None</code>    <code>disabled</code>  <code>bool</code>  <p>Whether the button is disabled or not.</p>  <code>False</code>    <code>name</code>  <code>str | None</code>  <p>The name of the button.</p>  <code>None</code>    <code>id</code>  <code>str | None</code>  <p>The ID of the button in the DOM.</p>  <code>None</code>    <code>classes</code>  <code>str | None</code>  <p>The CSS classes of the button.</p>  <code>None</code>     <p>Returns:</p>    Name Type Description     <code>Button</code>  <code>Button</code>  <p>A Button widget of the 'warning' variant.</p>","title":"<code>warning(label=None, disabled=False, *, name=None, id=None, classes=None)</code>  <code>classmethod</code>"},{"location":"reference/button/#textual.widgets._button.Button.watch_mouse_over","text":"<p>Update from CSS if mouse over state changes.</p>","title":"<code>watch_mouse_over(value)</code>"},{"location":"reference/color/","text":"<p>This module contains a powerful Color class which Textual uses to expose colors.</p> <p>The only exception would be for Rich renderables, which require a rich.color.Color instance. You can convert from a Textual color to a Rich color with the rich_color property.</p>","title":"Color"},{"location":"reference/color/#textual.color--named-colors","text":"<p>The following named colors are used by the parse method.</p> <p>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             colors         \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503hex\u00a0\u00a0\u00a0\u00a0\u2503RGB\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503Color\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2503 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502\"aliceblue\"\u2502#F0F8FF\u2502rgb(240,\u00a0248,\u00a0255)\u2502\u2502 \u2502\"ansi_black\"\u2502#000000\u2502rgb(0,\u00a00,\u00a00)\u2502\u2502 \u2502\"ansi_blue\"\u2502#000080\u2502rgb(0,\u00a00,\u00a0128)\u2502\u2502 \u2502\"ansi_bright_black\"\u2502#808080\u2502rgb(128,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"ansi_bright_blue\"\u2502#0000FF\u2502rgb(0,\u00a00,\u00a0255)\u2502\u2502 \u2502\"ansi_bright_cyan\"\u2502#00FFFF\u2502rgb(0,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"ansi_bright_green\"\u2502#00FF00\u2502rgb(0,\u00a0255,\u00a00)\u2502\u2502 \u2502\"ansi_bright_magenta\"\u2502#FF00FF\u2502rgb(255,\u00a00,\u00a0255)\u2502\u2502 \u2502\"ansi_bright_red\"\u2502#FF0000\u2502rgb(255,\u00a00,\u00a00)\u2502\u2502 \u2502\"ansi_bright_white\"\u2502#FFFFFF\u2502rgb(255,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"ansi_bright_yellow\"\u2502#FFFF00\u2502rgb(255,\u00a0255,\u00a00)\u2502\u2502 \u2502\"ansi_cyan\"\u2502#008080\u2502rgb(0,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"ansi_green\"\u2502#008000\u2502rgb(0,\u00a0128,\u00a00)\u2502\u2502 \u2502\"ansi_magenta\"\u2502#800080\u2502rgb(128,\u00a00,\u00a0128)\u2502\u2502 \u2502\"ansi_red\"\u2502#800000\u2502rgb(128,\u00a00,\u00a00)\u2502\u2502 \u2502\"ansi_white\"\u2502#C0C0C0\u2502rgb(192,\u00a0192,\u00a0192)\u2502\u2502 \u2502\"ansi_yellow\"\u2502#808000\u2502rgb(128,\u00a0128,\u00a00)\u2502\u2502 \u2502\"antiquewhite\"\u2502#FAEBD7\u2502rgb(250,\u00a0235,\u00a0215)\u2502\u2502 \u2502\"aqua\"\u2502#00FFFF\u2502rgb(0,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"aquamarine\"\u2502#7FFFD4\u2502rgb(127,\u00a0255,\u00a0212)\u2502\u2502 \u2502\"azure\"\u2502#F0FFFF\u2502rgb(240,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"beige\"\u2502#F5F5DC\u2502rgb(245,\u00a0245,\u00a0220)\u2502\u2502 \u2502\"bisque\"\u2502#FFE4C4\u2502rgb(255,\u00a0228,\u00a0196)\u2502\u2502 \u2502\"black\"\u2502#000000\u2502rgb(0,\u00a00,\u00a00)\u2502\u2502 \u2502\"blanchedalmond\"\u2502#FFEBCD\u2502rgb(255,\u00a0235,\u00a0205)\u2502\u2502 \u2502\"blue\"\u2502#0000FF\u2502rgb(0,\u00a00,\u00a0255)\u2502\u2502 \u2502\"blueviolet\"\u2502#8A2BE2\u2502rgb(138,\u00a043,\u00a0226)\u2502\u2502 \u2502\"brown\"\u2502#A52A2A\u2502rgb(165,\u00a042,\u00a042)\u2502\u2502 \u2502\"burlywood\"\u2502#DEB887\u2502rgb(222,\u00a0184,\u00a0135)\u2502\u2502 \u2502\"cadetblue\"\u2502#5F9EA0\u2502rgb(95,\u00a0158,\u00a0160)\u2502\u2502 \u2502\"chartreuse\"\u2502#7FFF00\u2502rgb(127,\u00a0255,\u00a00)\u2502\u2502 \u2502\"chocolate\"\u2502#D2691E\u2502rgb(210,\u00a0105,\u00a030)\u2502\u2502 \u2502\"coral\"\u2502#FF7F50\u2502rgb(255,\u00a0127,\u00a080)\u2502\u2502 \u2502\"cornflowerblue\"\u2502#6495ED\u2502rgb(100,\u00a0149,\u00a0237)\u2502\u2502 \u2502\"cornsilk\"\u2502#FFF8DC\u2502rgb(255,\u00a0248,\u00a0220)\u2502\u2502 \u2502\"crimson\"\u2502#DC143C\u2502rgb(220,\u00a020,\u00a060)\u2502\u2502 \u2502\"cyan\"\u2502#00FFFF\u2502rgb(0,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"darkblue\"\u2502#00008B\u2502rgb(0,\u00a00,\u00a0139)\u2502\u2502 \u2502\"darkcyan\"\u2502#008B8B\u2502rgb(0,\u00a0139,\u00a0139)\u2502\u2502 \u2502\"darkgoldenrod\"\u2502#B8860B\u2502rgb(184,\u00a0134,\u00a011)\u2502\u2502 \u2502\"darkgray\"\u2502#A9A9A9\u2502rgb(169,\u00a0169,\u00a0169)\u2502\u2502 \u2502\"darkgreen\"\u2502#006400\u2502rgb(0,\u00a0100,\u00a00)\u2502\u2502 \u2502\"darkgrey\"\u2502#A9A9A9\u2502rgb(169,\u00a0169,\u00a0169)\u2502\u2502 \u2502\"darkkhaki\"\u2502#BDB76B\u2502rgb(189,\u00a0183,\u00a0107)\u2502\u2502 \u2502\"darkmagenta\"\u2502#8B008B\u2502rgb(139,\u00a00,\u00a0139)\u2502\u2502 \u2502\"darkolivegreen\"\u2502#556B2F\u2502rgb(85,\u00a0107,\u00a047)\u2502\u2502 \u2502\"darkorange\"\u2502#FF8C00\u2502rgb(255,\u00a0140,\u00a00)\u2502\u2502 \u2502\"darkorchid\"\u2502#9932CC\u2502rgb(153,\u00a050,\u00a0204)\u2502\u2502 \u2502\"darkred\"\u2502#8B0000\u2502rgb(139,\u00a00,\u00a00)\u2502\u2502 \u2502\"darksalmon\"\u2502#E9967A\u2502rgb(233,\u00a0150,\u00a0122)\u2502\u2502 \u2502\"darkseagreen\"\u2502#8FBC8F\u2502rgb(143,\u00a0188,\u00a0143)\u2502\u2502 \u2502\"darkslateblue\"\u2502#483D8B\u2502rgb(72,\u00a061,\u00a0139)\u2502\u2502 \u2502\"darkslategray\"\u2502#2F4F4F\u2502rgb(47,\u00a079,\u00a079)\u2502\u2502 \u2502\"darkslategrey\"\u2502#2F4F4F\u2502rgb(47,\u00a079,\u00a079)\u2502\u2502 \u2502\"darkturquoise\"\u2502#00CED1\u2502rgb(0,\u00a0206,\u00a0209)\u2502\u2502 \u2502\"darkviolet\"\u2502#9400D3\u2502rgb(148,\u00a00,\u00a0211)\u2502\u2502 \u2502\"deeppink\"\u2502#FF1493\u2502rgb(255,\u00a020,\u00a0147)\u2502\u2502 \u2502\"deepskyblue\"\u2502#00BFFF\u2502rgb(0,\u00a0191,\u00a0255)\u2502\u2502 \u2502\"dimgray\"\u2502#696969\u2502rgb(105,\u00a0105,\u00a0105)\u2502\u2502 \u2502\"dimgrey\"\u2502#696969\u2502rgb(105,\u00a0105,\u00a0105)\u2502\u2502 \u2502\"dodgerblue\"\u2502#1E90FF\u2502rgb(30,\u00a0144,\u00a0255)\u2502\u2502 \u2502\"firebrick\"\u2502#B22222\u2502rgb(178,\u00a034,\u00a034)\u2502\u2502 \u2502\"floralwhite\"\u2502#FFFAF0\u2502rgb(255,\u00a0250,\u00a0240)\u2502\u2502 \u2502\"forestgreen\"\u2502#228B22\u2502rgb(34,\u00a0139,\u00a034)\u2502\u2502 \u2502\"fuchsia\"\u2502#FF00FF\u2502rgb(255,\u00a00,\u00a0255)\u2502\u2502 \u2502\"gainsboro\"\u2502#DCDCDC\u2502rgb(220,\u00a0220,\u00a0220)\u2502\u2502 \u2502\"ghostwhite\"\u2502#F8F8FF\u2502rgb(248,\u00a0248,\u00a0255)\u2502\u2502 \u2502\"gold\"\u2502#FFD700\u2502rgb(255,\u00a0215,\u00a00)\u2502\u2502 \u2502\"goldenrod\"\u2502#DAA520\u2502rgb(218,\u00a0165,\u00a032)\u2502\u2502 \u2502\"gray\"\u2502#808080\u2502rgb(128,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"green\"\u2502#008000\u2502rgb(0,\u00a0128,\u00a00)\u2502\u2502 \u2502\"greenyellow\"\u2502#ADFF2F\u2502rgb(173,\u00a0255,\u00a047)\u2502\u2502 \u2502\"grey\"\u2502#808080\u2502rgb(128,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"honeydew\"\u2502#F0FFF0\u2502rgb(240,\u00a0255,\u00a0240)\u2502\u2502 \u2502\"hotpink\"\u2502#FF69B4\u2502rgb(255,\u00a0105,\u00a0180)\u2502\u2502 \u2502\"indianred\"\u2502#CD5C5C\u2502rgb(205,\u00a092,\u00a092)\u2502\u2502 \u2502\"indigo\"\u2502#4B0082\u2502rgb(75,\u00a00,\u00a0130)\u2502\u2502 \u2502\"ivory\"\u2502#FFFFF0\u2502rgb(255,\u00a0255,\u00a0240)\u2502\u2502 \u2502\"khaki\"\u2502#F0E68C\u2502rgb(240,\u00a0230,\u00a0140)\u2502\u2502 \u2502\"lavender\"\u2502#E6E6FA\u2502rgb(230,\u00a0230,\u00a0250)\u2502\u2502 \u2502\"lavenderblush\"\u2502#FFF0F5\u2502rgb(255,\u00a0240,\u00a0245)\u2502\u2502 \u2502\"lawngreen\"\u2502#7CFC00\u2502rgb(124,\u00a0252,\u00a00)\u2502\u2502 \u2502\"lemonchiffon\"\u2502#FFFACD\u2502rgb(255,\u00a0250,\u00a0205)\u2502\u2502 \u2502\"lightblue\"\u2502#ADD8E6\u2502rgb(173,\u00a0216,\u00a0230)\u2502\u2502 \u2502\"lightcoral\"\u2502#F08080\u2502rgb(240,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"lightcyan\"\u2502#E0FFFF\u2502rgb(224,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"lightgoldenrodyellow\"\u2502#FAFAD2\u2502rgb(250,\u00a0250,\u00a0210)\u2502\u2502 \u2502\"lightgray\"\u2502#D3D3D3\u2502rgb(211,\u00a0211,\u00a0211)\u2502\u2502 \u2502\"lightgreen\"\u2502#90EE90\u2502rgb(144,\u00a0238,\u00a0144)\u2502\u2502 \u2502\"lightgrey\"\u2502#D3D3D3\u2502rgb(211,\u00a0211,\u00a0211)\u2502\u2502 \u2502\"lightpink\"\u2502#FFB6C1\u2502rgb(255,\u00a0182,\u00a0193)\u2502\u2502 \u2502\"lightsalmon\"\u2502#FFA07A\u2502rgb(255,\u00a0160,\u00a0122)\u2502\u2502 \u2502\"lightseagreen\"\u2502#20B2AA\u2502rgb(32,\u00a0178,\u00a0170)\u2502\u2502 \u2502\"lightskyblue\"\u2502#87CEFA\u2502rgb(135,\u00a0206,\u00a0250)\u2502\u2502 \u2502\"lightslategray\"\u2502#778899\u2502rgb(119,\u00a0136,\u00a0153)\u2502\u2502 \u2502\"lightslategrey\"\u2502#778899\u2502rgb(119,\u00a0136,\u00a0153)\u2502\u2502 \u2502\"lightsteelblue\"\u2502#B0C4DE\u2502rgb(176,\u00a0196,\u00a0222)\u2502\u2502 \u2502\"lightyellow\"\u2502#FFFFE0\u2502rgb(255,\u00a0255,\u00a0224)\u2502\u2502 \u2502\"lime\"\u2502#00FF00\u2502rgb(0,\u00a0255,\u00a00)\u2502\u2502 \u2502\"limegreen\"\u2502#32CD32\u2502rgb(50,\u00a0205,\u00a050)\u2502\u2502 \u2502\"linen\"\u2502#FAF0E6\u2502rgb(250,\u00a0240,\u00a0230)\u2502\u2502 \u2502\"magenta\"\u2502#FF00FF\u2502rgb(255,\u00a00,\u00a0255)\u2502\u2502 \u2502\"maroon\"\u2502#800000\u2502rgb(128,\u00a00,\u00a00)\u2502\u2502 \u2502\"mediumaquamarine\"\u2502#66CDAA\u2502rgb(102,\u00a0205,\u00a0170)\u2502\u2502 \u2502\"mediumblue\"\u2502#0000CD\u2502rgb(0,\u00a00,\u00a0205)\u2502\u2502 \u2502\"mediumorchid\"\u2502#BA55D3\u2502rgb(186,\u00a085,\u00a0211)\u2502\u2502 \u2502\"mediumpurple\"\u2502#9370DB\u2502rgb(147,\u00a0112,\u00a0219)\u2502\u2502 \u2502\"mediumseagreen\"\u2502#3CB371\u2502rgb(60,\u00a0179,\u00a0113)\u2502\u2502 \u2502\"mediumslateblue\"\u2502#7B68EE\u2502rgb(123,\u00a0104,\u00a0238)\u2502\u2502 \u2502\"mediumspringgreen\"\u2502#00FA9A\u2502rgb(0,\u00a0250,\u00a0154)\u2502\u2502 \u2502\"mediumturquoise\"\u2502#48D1CC\u2502rgb(72,\u00a0209,\u00a0204)\u2502\u2502 \u2502\"mediumvioletred\"\u2502#C71585\u2502rgb(199,\u00a021,\u00a0133)\u2502\u2502 \u2502\"midnightblue\"\u2502#191970\u2502rgb(25,\u00a025,\u00a0112)\u2502\u2502 \u2502\"mintcream\"\u2502#F5FFFA\u2502rgb(245,\u00a0255,\u00a0250)\u2502\u2502 \u2502\"mistyrose\"\u2502#FFE4E1\u2502rgb(255,\u00a0228,\u00a0225)\u2502\u2502 \u2502\"moccasin\"\u2502#FFE4B5\u2502rgb(255,\u00a0228,\u00a0181)\u2502\u2502 \u2502\"navajowhite\"\u2502#FFDEAD\u2502rgb(255,\u00a0222,\u00a0173)\u2502\u2502 \u2502\"navy\"\u2502#000080\u2502rgb(0,\u00a00,\u00a0128)\u2502\u2502 \u2502\"oldlace\"\u2502#FDF5E6\u2502rgb(253,\u00a0245,\u00a0230)\u2502\u2502 \u2502\"olive\"\u2502#808000\u2502rgb(128,\u00a0128,\u00a00)\u2502\u2502 \u2502\"olivedrab\"\u2502#6B8E23\u2502rgb(107,\u00a0142,\u00a035)\u2502\u2502 \u2502\"orange\"\u2502#FFA500\u2502rgb(255,\u00a0165,\u00a00)\u2502\u2502 \u2502\"orangered\"\u2502#FF4500\u2502rgb(255,\u00a069,\u00a00)\u2502\u2502 \u2502\"orchid\"\u2502#DA70D6\u2502rgb(218,\u00a0112,\u00a0214)\u2502\u2502 \u2502\"palegoldenrod\"\u2502#EEE8AA\u2502rgb(238,\u00a0232,\u00a0170)\u2502\u2502 \u2502\"palegreen\"\u2502#98FB98\u2502rgb(152,\u00a0251,\u00a0152)\u2502\u2502 \u2502\"paleturquoise\"\u2502#AFEEEE\u2502rgb(175,\u00a0238,\u00a0238)\u2502\u2502 \u2502\"palevioletred\"\u2502#DB7093\u2502rgb(219,\u00a0112,\u00a0147)\u2502\u2502 \u2502\"papayawhip\"\u2502#FFEFD5\u2502rgb(255,\u00a0239,\u00a0213)\u2502\u2502 \u2502\"peachpuff\"\u2502#FFDAB9\u2502rgb(255,\u00a0218,\u00a0185)\u2502\u2502 \u2502\"peru\"\u2502#CD853F\u2502rgb(205,\u00a0133,\u00a063)\u2502\u2502 \u2502\"pink\"\u2502#FFC0CB\u2502rgb(255,\u00a0192,\u00a0203)\u2502\u2502 \u2502\"plum\"\u2502#DDA0DD\u2502rgb(221,\u00a0160,\u00a0221)\u2502\u2502 \u2502\"powderblue\"\u2502#B0E0E6\u2502rgb(176,\u00a0224,\u00a0230)\u2502\u2502 \u2502\"purple\"\u2502#800080\u2502rgb(128,\u00a00,\u00a0128)\u2502\u2502 \u2502\"rebeccapurple\"\u2502#663399\u2502rgb(102,\u00a051,\u00a0153)\u2502\u2502 \u2502\"red\"\u2502#FF0000\u2502rgb(255,\u00a00,\u00a00)\u2502\u2502 \u2502\"rosybrown\"\u2502#BC8F8F\u2502rgb(188,\u00a0143,\u00a0143)\u2502\u2502 \u2502\"royalblue\"\u2502#4169E1\u2502rgb(65,\u00a0105,\u00a0225)\u2502\u2502 \u2502\"saddlebrown\"\u2502#8B4513\u2502rgb(139,\u00a069,\u00a019)\u2502\u2502 \u2502\"salmon\"\u2502#FA8072\u2502rgb(250,\u00a0128,\u00a0114)\u2502\u2502 \u2502\"sandybrown\"\u2502#F4A460\u2502rgb(244,\u00a0164,\u00a096)\u2502\u2502 \u2502\"seagreen\"\u2502#2E8B57\u2502rgb(46,\u00a0139,\u00a087)\u2502\u2502 \u2502\"seashell\"\u2502#FFF5EE\u2502rgb(255,\u00a0245,\u00a0238)\u2502\u2502 \u2502\"sienna\"\u2502#A0522D\u2502rgb(160,\u00a082,\u00a045)\u2502\u2502 \u2502\"silver\"\u2502#C0C0C0\u2502rgb(192,\u00a0192,\u00a0192)\u2502\u2502 \u2502\"skyblue\"\u2502#87CEEB\u2502rgb(135,\u00a0206,\u00a0235)\u2502\u2502 \u2502\"slateblue\"\u2502#6A5ACD\u2502rgb(106,\u00a090,\u00a0205)\u2502\u2502 \u2502\"slategray\"\u2502#708090\u2502rgb(112,\u00a0128,\u00a0144)\u2502\u2502 \u2502\"slategrey\"\u2502#708090\u2502rgb(112,\u00a0128,\u00a0144)\u2502\u2502 \u2502\"snow\"\u2502#FFFAFA\u2502rgb(255,\u00a0250,\u00a0250)\u2502\u2502 \u2502\"springgreen\"\u2502#00FF7F\u2502rgb(0,\u00a0255,\u00a0127)\u2502\u2502 \u2502\"steelblue\"\u2502#4682B4\u2502rgb(70,\u00a0130,\u00a0180)\u2502\u2502 \u2502\"tan\"\u2502#D2B48C\u2502rgb(210,\u00a0180,\u00a0140)\u2502\u2502 \u2502\"teal\"\u2502#008080\u2502rgb(0,\u00a0128,\u00a0128)\u2502\u2502 \u2502\"thistle\"\u2502#D8BFD8\u2502rgb(216,\u00a0191,\u00a0216)\u2502\u2502 \u2502\"tomato\"\u2502#FF6347\u2502rgb(255,\u00a099,\u00a071)\u2502\u2502 \u2502\"turquoise\"\u2502#40E0D0\u2502rgb(64,\u00a0224,\u00a0208)\u2502\u2502 \u2502\"violet\"\u2502#EE82EE\u2502rgb(238,\u00a0130,\u00a0238)\u2502\u2502 \u2502\"wheat\"\u2502#F5DEB3\u2502rgb(245,\u00a0222,\u00a0179)\u2502\u2502 \u2502\"white\"\u2502#FFFFFF\u2502rgb(255,\u00a0255,\u00a0255)\u2502\u2502 \u2502\"whitesmoke\"\u2502#F5F5F5\u2502rgb(245,\u00a0245,\u00a0245)\u2502\u2502 \u2502\"yellow\"\u2502#FFFF00\u2502rgb(255,\u00a0255,\u00a00)\u2502\u2502 \u2502\"yellowgreen\"\u2502#9ACD32\u2502rgb(154,\u00a0205,\u00a050)\u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     </p>","title":"Named colors"},{"location":"reference/color/#textual.color.Color","text":"<p>         Bases: <code>NamedTuple</code></p> <p>A class to represent a RGB color with an alpha component.</p>","title":"<code>Color</code>"},{"location":"reference/color/#textual.color.Color.a","text":"<p>Alpha component (0-1)</p>","title":"<code>a: float = 1.0</code>  <code>class-attribute</code>"},{"location":"reference/color/#textual.color.Color.b","text":"<p>Blue component (0-255)</p>","title":"<code>b: int</code>  <code>class-attribute</code>"},{"location":"reference/color/#textual.color.Color.g","text":"<p>Green component (0-255)</p>","title":"<code>g: int</code>  <code>class-attribute</code>"},{"location":"reference/color/#textual.color.Color.r","text":"<p>Red component (0-255)</p>","title":"<code>r: int</code>  <code>class-attribute</code>"},{"location":"reference/color/#textual.color.Color.blend","text":"<p>Generate a new color between two colors.</p> <p>Parameters:</p>    Name Type Description Default     <code>destination</code>  <code>Color</code>  <p>Another color.</p>  required    <code>factor</code>  <code>float</code>  <p>A blend factor, 0 -&gt; 1.</p>  required    <code>alpha</code>  <code>float | None</code>  <p>New alpha for result. Defaults to 1.</p>  <code>1</code>     <p>Returns:</p>    Name Type Description     <code>Color</code>  <code>Color</code>  <p>A new color.</p>","title":"<code>blend(destination, factor, alpha=1)</code>"},{"location":"reference/color/#textual.color.Color.brightness","text":"<p>Get the human perceptual brightness.</p> <p>Returns:</p>    Name Type Description     <code>float</code>  <code>float</code>  <p>Brightness value (0-1).</p>","title":"<code>brightness()</code>  <code>property</code>"},{"location":"reference/color/#textual.color.Color.clamped","text":"<p>Get a color with all components saturated to maximum and minimum values.</p> <p>Returns:</p>    Name Type Description     <code>Color</code>  <code>Color</code>  <p>A color object.</p>","title":"<code>clamped()</code>  <code>property</code>"},{"location":"reference/color/#textual.color.Color.css","text":"<p>The color in CSS rgb or rgba form.</p> <p>Returns:</p>    Name Type Description     <code>str</code>  <code>str</code>  <p>A CSS style color, e.g. <code>\"rgb(10,20,30)\"</code> or <code>\"rgb(50,70,80,0.5)\"</code></p>","title":"<code>css()</code>  <code>property</code>"},{"location":"reference/color/#textual.color.Color.darken","text":"<p>Darken the color by a given amount.</p> <p>Parameters:</p>    Name Type Description Default     <code>amount</code>  <code>float</code>  <p>Value between 0-1 to reduce luminance by.</p>  required    <code>alpha</code>  <code>float | None</code>  <p>Alpha component for new color or None to copy alpha. Defaults to None.</p>  <code>None</code>     <p>Returns:</p>    Name Type Description     <code>Color</code>  <code>Color</code>  <p>New color.</p>","title":"<code>darken(amount, alpha=None)</code>  <code>cached</code>"},{"location":"reference/color/#textual.color.Color.from_hsl","text":"<p>Create a color from HLS components.</p> <p>Parameters:</p>    Name Type Description Default     <code>h</code>  <code>float</code>  <p>Hue.</p>  required    <code>l</code>  <code>float</code>  <p>Lightness.</p>  required    <code>s</code>  <code>float</code>  <p>Saturation.</p>  required     <p>Returns:</p>    Name Type Description     <code>Color</code>  <code>Color</code>  <p>A new color.</p>","title":"<code>from_hsl(h, s, l)</code>  <code>classmethod</code>"},{"location":"reference/color/#textual.color.Color.from_rich_color","text":"<p>Create a new color from Rich's Color class.</p> <p>Parameters:</p>    Name Type Description Default     <code>rich_color</code>  <code>RichColor</code>  <p>An instance of rich.color.Color.</p>  required     <p>Returns:</p>    Name Type Description     <code>Color</code>  <code>Color</code>  <p>A new Color.</p>","title":"<code>from_rich_color(rich_color)</code>  <code>classmethod</code>"},{"location":"reference/color/#textual.color.Color.get_contrast_text","text":"<p>Get a light or dark color that best contrasts this color, for use with text.</p> <p>Parameters:</p>    Name Type Description Default     <code>alpha</code>  <code>float</code>  <p>An alpha value to adjust the pure white / black by. Defaults to 0.95.</p>  <code>0.95</code>     <p>Returns:</p>    Name Type Description     <code>Color</code>  <code>Color</code>  <p>A new color, either an off-white or off-black</p>","title":"<code>get_contrast_text(alpha=0.95)</code>  <code>cached</code>"},{"location":"reference/color/#textual.color.Color.hex","text":"<p>The color in CSS hex form, with 6 digits for RGB, and 8 digits for RGBA.</p> <p>Returns:</p>    Name Type Description     <code>str</code>  <code>str</code>  <p>A CSS hex-style color, e.g. <code>\"#46b3de\"</code> or <code>\"#3342457f\"</code></p>","title":"<code>hex()</code>  <code>property</code>"},{"location":"reference/color/#textual.color.Color.hex6","text":"<p>The color in CSS hex form, with 6 digits for RGB. Alpha is ignored.</p> <p>Returns:</p>    Name Type Description     <code>str</code>  <code>str</code>  <p>A CSS hex-style color, e.g. \"#46b3de\"</p>","title":"<code>hex6()</code>  <code>property</code>"},{"location":"reference/color/#textual.color.Color.hsl","text":"<p>Get the color as HSL.</p> <p>Returns:</p>    Name Type Description     <code>HSL</code>  <code>HSL</code>  <p>Color in HSL format.</p>","title":"<code>hsl()</code>  <code>property</code>"},{"location":"reference/color/#textual.color.Color.is_transparent","text":"<p>Check if the color is transparent, i.e. has 0 alpha.</p> <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if transparent, otherwise False.</p>","title":"<code>is_transparent()</code>  <code>property</code>"},{"location":"reference/color/#textual.color.Color.lighten","text":"<p>Lighten the color by a given amount.</p> <p>Parameters:</p>    Name Type Description Default     <code>amount</code>  <code>float</code>  <p>Value between 0-1 to increase luminance by.</p>  required    <code>alpha</code>  <code>float | None</code>  <p>Alpha component for new color or None to copy alpha. Defaults to None.</p>  <code>None</code>     <p>Returns:</p>    Name Type Description     <code>Color</code>  <code>Color</code>  <p>New color.</p>","title":"<code>lighten(amount, alpha=None)</code>"},{"location":"reference/color/#textual.color.Color.normalized","text":"<p>A tuple of the color components normalized to between 0 and 1.</p> <p>Returns:</p>    Type Description      <code>tuple[float, float, float]</code>  <p>tuple[float, float, float]: Normalized components.</p>","title":"<code>normalized()</code>  <code>property</code>"},{"location":"reference/color/#textual.color.Color.parse","text":"<p>Parse a string containing a named color or CSS-style color.</p> <p>Colors may be parsed from the following formats:</p> <p>Text beginning with a <code>#</code> is parsed as hex:</p> <p>R, G, and B must be hex digits (0-9A-F)</p> <ul> <li><code>#RGB</code></li> <li><code>#RRGGBB</code></li> <li><code>#RRGGBBAA</code></li> </ul> <p>Text in the following formats is parsed as decimal values:</p> <p>RED, GREEN, and BLUE must be numbers between 0 and 255. ALPHA should ba a value between 0 and 1.</p> <ul> <li><code>rgb(RED,GREEN,BLUE)</code></li> <li><code>rgba(RED,GREEN,BLUE,ALPHA)</code></li> <li><code>hsl(RED,GREEN,BLUE)</code></li> <li><code>hsla(RED,GREEN,BLUE,ALPHA)</code></li> </ul> <p>All other text will raise a <code>ColorParseError</code>.</p> <p>Parameters:</p>    Name Type Description Default     <code>color_text</code>  <code>str | Color</code>  <p>Text with a valid color format. Color objects will be returned unmodified.</p>  required     <p>Raises:</p>    Type Description      <code>ColorParseError</code>  <p>If the color is not encoded correctly.</p>    <p>Returns:</p>    Name Type Description     <code>Color</code>  <code>Color</code>  <p>New color object.</p>","title":"<code>parse(color_text)</code>  <code>cached</code> <code>classmethod</code>"},{"location":"reference/color/#textual.color.Color.rgb","text":"<p>Get just the red, green, and blue components.</p> <p>Returns:</p>    Type Description      <code>tuple[int, int, int]</code>  <p>tuple[int, int, int]: Color components</p>","title":"<code>rgb()</code>  <code>property</code>"},{"location":"reference/color/#textual.color.Color.rich_color","text":"<p>This color encoded in Rich's Color class.</p> <p>Returns:</p>    Name Type Description     <code>RichColor</code>  <code>RichColor</code>  <p>A color object as used by Rich.</p>","title":"<code>rich_color()</code>  <code>property</code>"},{"location":"reference/color/#textual.color.Color.with_alpha","text":"<p>Create a new color with the given alpha.</p> <p>Parameters:</p>    Name Type Description Default     <code>alpha</code>  <code>float</code>  <p>New value for alpha.</p>  required     <p>Returns:</p>    Name Type Description     <code>Color</code>  <code>Color</code>  <p>A new color.</p>","title":"<code>with_alpha(alpha)</code>"},{"location":"reference/color/#textual.color.ColorParseError","text":"<p>         Bases: <code>Exception</code></p> <p>A color failed to parse.</p> <p>Parameters:</p>    Name Type Description Default     <code>message</code>  <code>str</code>  <p>the error message</p>  required    <code>suggested_color</code>  <code>str | None</code>  <p>a close color we can suggest. Defaults to None.</p>  <code>None</code>","title":"<code>ColorParseError</code>"},{"location":"reference/color/#textual.color.HSL","text":"<p>         Bases: <code>NamedTuple</code></p> <p>A color in HLS format.</p>","title":"<code>HSL</code>"},{"location":"reference/color/#textual.color.HSL.h","text":"<p>Hue</p>","title":"<code>h: float</code>  <code>class-attribute</code>"},{"location":"reference/color/#textual.color.HSL.l","text":"<p>Lightness</p>","title":"<code>l: float</code>  <code>class-attribute</code>"},{"location":"reference/color/#textual.color.HSL.s","text":"<p>Saturation</p>","title":"<code>s: float</code>  <code>class-attribute</code>"},{"location":"reference/color/#textual.color.HSL.css","text":"<p>HSL in css format.</p>","title":"<code>css()</code>  <code>property</code>"},{"location":"reference/color/#textual.color.HSV","text":"<p>         Bases: <code>NamedTuple</code></p> <p>A color in HSV format.</p>","title":"<code>HSV</code>"},{"location":"reference/color/#textual.color.HSV.h","text":"<p>Hue</p>","title":"<code>h: float</code>  <code>class-attribute</code>"},{"location":"reference/color/#textual.color.HSV.s","text":"<p>Saturation</p>","title":"<code>s: float</code>  <code>class-attribute</code>"},{"location":"reference/color/#textual.color.HSV.v","text":"<p>Value</p>","title":"<code>v: float</code>  <code>class-attribute</code>"},{"location":"reference/color/#textual.color.Lab","text":"<p>         Bases: <code>NamedTuple</code></p> <p>A color in CIE-L*ab format.</p>","title":"<code>Lab</code>"},{"location":"reference/color/#textual.color.lab_to_rgb","text":"<p>Convert a CIE-L*ab color to RGB.</p> <p>Uses the standard RGB color space with a D65/2\u2070 standard illuminant. Conversion passes through the XYZ color space. Cf. http://www.easyrgb.com/en/math.php.</p>","title":"<code>lab_to_rgb(lab, alpha=1.0)</code>"},{"location":"reference/color/#textual.color.rgb_to_lab","text":"<p>Convert an RGB color to the CIE-L*ab format.</p> <p>Uses the standard RGB color space with a D65/2\u2070 standard illuminant. Conversion passes through the XYZ color space. Cf. http://www.easyrgb.com/en/math.php.</p>","title":"<code>rgb_to_lab(rgb)</code>"},{"location":"reference/dom_node/","text":"<p>         Bases: <code>MessagePump</code></p> <p>The base class for object that can be in the Textual DOM (App and Widget)</p>","title":"Dom node"},{"location":"reference/dom_node/#textual.dom.DOMNode.add_class","text":"<p>Add class names to this Node.</p> <p>Parameters:</p>    Name Type Description Default     <code>*class_names</code>  <code>str</code>  <p>CSS class names to add.</p>  <code>()</code>","title":"<code>add_class(*class_names)</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.ancestors","text":"<p>Get a list of Nodes by tracing ancestors all the way back to App.</p>","title":"<code>ancestors()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.background_colors","text":"<p>Get the background color and the color of the parent's background.</p> <p>Returns:</p>    Type Description      <code>tuple[Color, Color]</code>  <p>tuple[Color, Color]: Tuple of (base background, background)</p>","title":"<code>background_colors()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.classes","text":"<p>A frozenset of the current classes set on the widget.</p> <p>Returns:</p>    Type Description      <code>frozenset[str]</code>  <p>frozenset[str]: Set of class names.</p>","title":"<code>classes()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.colors","text":"<p>Gets the Widgets foreground and background colors, and its parent's (base) colors.</p> <p>Returns:</p>    Type Description      <code>tuple[Color, Color, Color, Color]</code>  <p>tuple[Color, Color, Color, Color]: Tuple of (base background, base color, background, color)</p>","title":"<code>colors()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.css_identifier","text":"<p>A CSS selector that identifies this DOM node.</p>","title":"<code>css_identifier()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.css_identifier_styled","text":"<p>A stylized CSS identifier.</p>","title":"<code>css_identifier_styled()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.css_path_nodes","text":"<p>A list of nodes from the root to this node, forming a \"path\".</p> <p>Returns:</p>    Type Description      <code>list[DOMNode]</code>  <p>list[DOMNode]: List of Nodes, starting with the root and ending with this node.</p>","title":"<code>css_path_nodes()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.display","text":"<p>Check if this widget should display or not.</p> <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p><code>True</code> if this DOMNode is displayed (<code>display != \"none\"</code>) otherwise <code>False</code> .</p>","title":"<code>display()</code>  <code>property</code> <code>writable</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.displayed_children","text":"<p>The children which don't have display: none set.</p> <p>Returns:</p>    Type Description      <code>list[Widget]</code>  <p>list[DOMNode]: Children of this widget which will be displayed.</p>","title":"<code>displayed_children()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.get_child","text":"<p>Return the first child (immediate descendent) of this node with the given ID.</p> <p>Parameters:</p>    Name Type Description Default     <code>id</code>  <code>str</code>  <p>The ID of the child.</p>  required     <p>Returns:</p>    Name Type Description     <code>DOMNode</code>  <code>DOMNode</code>  <p>The first child of this node with the ID.</p>    <p>Raises:</p>    Type Description      <code>NoMatchingNodesError</code>  <p>if no children could be found for this ID</p>","title":"<code>get_child(id)</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.get_component_styles","text":"<p>Get a \"component\" styles object (must be defined in COMPONENT_CLASSES classvar).</p> <p>Parameters:</p>    Name Type Description Default     <code>name</code>  <code>str</code>  <p>Name of the component.</p>  required     <p>Raises:</p>    Type Description      <code>KeyError</code>  <p>If the component class doesn't exist.</p>    <p>Returns:</p>    Name Type Description     <code>RenderStyles</code>  <code>RenderStyles</code>  <p>A Styles object.</p>","title":"<code>get_component_styles(name)</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.get_default_css","text":"<p>Gets the CSS for this class and inherited from bases.</p> <p>Returns:</p>    Type Description      <code>list[tuple[str, str, int]]</code>  <p>list[tuple[str, str]]: a list of tuples containing (PATH, SOURCE) for this and inherited from base classes.</p>","title":"<code>get_default_css()</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.get_pseudo_classes","text":"<p>Get any pseudo classes applicable to this Node, e.g. hover, focus.</p> <p>Returns:</p>    Type Description      <code>Iterable[str]</code>  <p>Iterable[str]: Iterable of strings, such as a generator.</p>","title":"<code>get_pseudo_classes()</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.has_class","text":"<p>Check if the Node has all the given class names.</p> <p>Parameters:</p>    Name Type Description Default     <code>*class_names</code>  <code>str</code>  <p>CSS class names to check.</p>  <code>()</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p><code>True</code> if the node has all the given class names, otherwise <code>False</code>.</p>","title":"<code>has_class(*class_names)</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.has_pseudo_class","text":"<p>Check for pseudo class (such as hover, focus etc)</p>","title":"<code>has_pseudo_class(*class_names)</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.id","text":"<p>The ID of this node, or None if the node has no ID.</p> <p>Returns:</p>    Type Description      <code>str | None</code>  <p>A Node ID or None.</p>","title":"<code>id()</code>  <code>property</code> <code>writable</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.parent","text":"<p>Get the parent node.</p> <p>Returns:</p>    Type Description      <code>DOMNode | None</code>  <p>DOMNode | None: The node which is the direct parent of this node.</p>","title":"<code>parent()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.pseudo_classes","text":"<p>Get a set of all pseudo classes</p>","title":"<code>pseudo_classes()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.query","text":"<p>Get a DOM query matching a selector.</p> <p>Parameters:</p>    Name Type Description Default     <code>selector</code>  <code>str</code>  <p>A CSS selector or <code>None</code> for all nodes. Defaults to None.</p>  <code>None</code>     <p>Returns:</p>    Name Type Description     <code>DOMQuery</code>  <code>DOMQuery</code>  <p>A query object.</p>","title":"<code>query(selector=None)</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.query_one","text":"<p>Get the first Widget matching the given selector or selector type.</p> <p>Parameters:</p>    Name Type Description Default     <code>selector</code>  <code>str | None</code>  <p>A selector.</p>  required    <code>expect_type</code>  <code>type</code>  <p>Require the object be of the supplied type, or None for any type. Defaults to None.</p>  <code>None</code>     <p>Returns:</p>    Type Description      <code>ExpectType | Widget</code>  <p>Widget | ExpectType: A widget matching the selector.</p>","title":"<code>query_one(selector, expect_type=None)</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.remove_class","text":"<p>Remove class names from this Node.</p> <p>Parameters:</p>    Name Type Description Default     <code>*class_names</code>  <code>str</code>  <p>CSS class names to remove.</p>  <code>()</code>","title":"<code>remove_class(*class_names)</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.reset_styles","text":"<p>Reset styles back to their initial state</p>","title":"<code>reset_styles()</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.rich_style","text":"<p>Get a Rich Style object for this DOMNode.</p>","title":"<code>rich_style()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.screen","text":"<p>Get the screen that this node is contained within. Note that this may not be the currently active screen within the app.</p>","title":"<code>screen()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.set_class","text":"<p>Add or remove class(es) based on a condition.</p> <p>Parameters:</p>    Name Type Description Default     <code>add</code>  <code>bool</code>  <p>Add the classes if True, otherwise remove them.</p>  required","title":"<code>set_class(add, *class_names)</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.set_styles","text":"<p>Set custom styles on this object.</p>","title":"<code>set_styles(css=None, **update_styles)</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.text_style","text":"<p>Get the text style object.</p> <p>A widget's style is influenced by its parent. for instance if a parent is bold, then the child will also be bold.</p> <p>Returns:</p>    Name Type Description     <code>Style</code>  <code>Style</code>  <p>Rich Style object.</p>","title":"<code>text_style()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.toggle_class","text":"<p>Toggle class names on this Node.</p> <p>Parameters:</p>    Name Type Description Default     <code>*class_names</code>  <code>str</code>  <p>CSS class names to toggle.</p>  <code>()</code>","title":"<code>toggle_class(*class_names)</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.tree","text":"<p>Get a Rich tree object which will recursively render the structure of the node tree.</p> <p>Returns:</p>    Name Type Description     <code>Tree</code>  <code>Tree</code>  <p>A Rich object which may be printed.</p>","title":"<code>tree()</code>  <code>property</code>"},{"location":"reference/dom_node/#textual.dom.DOMNode.walk_children","text":"<p>Generate descendant nodes.</p> <p>Parameters:</p>    Name Type Description Default     <code>filter_type</code>  <code>type[WalkType] | None</code>  <p>Filter only this type, or None for no filter. Defaults to None.</p>  <code>None</code>    <code>with_self</code>  <code>bool</code>  <p>Also yield self in addition to descendants. Defaults to True.</p>  <code>True</code>     <p>Returns:</p>    Type Description      <code>Iterable[DOMNode | WalkType]</code>  <p>Iterable[DOMNode | WalkType]: An iterable of nodes.</p>","title":"<code>walk_children(filter_type=None, *, with_self=True)</code>"},{"location":"reference/events/","text":"","title":"Events"},{"location":"reference/events/#textual.events.Compose","text":"<p>         Bases: <code>Event</code></p> <p>Sent to a widget to request it to compose and mount children.</p>","title":"<code>Compose</code>"},{"location":"reference/events/#textual.events.Hide","text":"<p>         Bases: <code>Event</code></p> <p>Sent when a widget has been hidden.</p> <p>A widget may be hidden by setting its <code>visible</code> flag to <code>False</code>, if it is no longer in a layout, or if it has been offset beyond the edges of the terminal.</p>","title":"<code>Hide</code>"},{"location":"reference/events/#textual.events.Idle","text":"<p>         Bases: <code>Event</code></p> <p>Sent when there are no more items in the message queue.</p> <p>This is a pseudo-event in that it is created by the Textual system and doesn't go through the usual message queue.</p>","title":"<code>Idle</code>"},{"location":"reference/events/#textual.events.InvokeCallbacks","text":"<p>         Bases: <code>Event</code></p> <p>Sent after the Screen is updated</p>","title":"<code>InvokeCallbacks</code>"},{"location":"reference/events/#textual.events.Key","text":"<p>         Bases: <code>InputEvent</code></p> <p>Sent when the user hits a key on the keyboard.</p> <p>Parameters:</p>    Name Type Description Default     <code>sender</code>  <code>MessageTarget</code>  <p>The sender of the event (the App).</p>  required    <code>key</code>  <code>str</code>  <p>A key name (textual.keys.Keys).</p>  required    <code>char</code>  <code>str | None</code>  <p>A printable character or None if it is not printable.</p>  required","title":"<code>Key</code>"},{"location":"reference/events/#textual.events.Key.is_printable","text":"<p>Return True if the key is printable. Currently, we assume any key event that isn't defined in key bindings is printable.</p> <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the key is printable.</p>","title":"<code>is_printable()</code>  <code>property</code>"},{"location":"reference/events/#textual.events.Key.key_name","text":"<p>Name of a key suitable for use as a Python identifier.</p>","title":"<code>key_name()</code>  <code>property</code>"},{"location":"reference/events/#textual.events.Load","text":"<p>         Bases: <code>Event</code></p> <p>Sent when the App is running but before the terminal is in application mode.</p> <p>Use this event to run any set up that doesn't require any visuals such as loading configuration and binding keys.</p>","title":"<code>Load</code>"},{"location":"reference/events/#textual.events.Mount","text":"<p>         Bases: <code>Event</code></p> <p>Sent when a widget is mounted and may receive messages.</p>","title":"<code>Mount</code>"},{"location":"reference/events/#textual.events.MouseCapture","text":"<p>         Bases: <code>Event</code></p> <p>Sent when the mouse has been captured.</p> <p>When a mouse has been captures, all further mouse events will be sent to the capturing widget.</p> <p>Parameters:</p>    Name Type Description Default     <code>sender</code>  <code>MessageTarget</code>  <p>The sender of the event, (in this case the app).</p>  required    <code>mouse_position</code>  <code>Point</code>  <p>The position of the mouse when captured.</p>  required","title":"<code>MouseCapture</code>"},{"location":"reference/events/#textual.events.MouseEvent","text":"<p>         Bases: <code>InputEvent</code></p> <p>Sent in response to a mouse event.</p> <p>Parameters:</p>    Name Type Description Default     <code>sender</code>  <code>MessageTarget</code>  <p>The sender of the event.</p>  required    <code>x</code>  <code>int</code>  <p>The relative x coordinate.</p>  required    <code>y</code>  <code>int</code>  <p>The relative y coordinate.</p>  required    <code>delta_x</code>  <code>int</code>  <p>Change in x since the last message.</p>  required    <code>delta_y</code>  <code>int</code>  <p>Change in y since the last message.</p>  required    <code>button</code>  <code>int</code>  <p>Indexed of the pressed button.</p>  required    <code>shift</code>  <code>bool</code>  <p>True if the shift key is pressed.</p>  required    <code>meta</code>  <code>bool</code>  <p>True if the meta key is pressed.</p>  required    <code>ctrl</code>  <code>bool</code>  <p>True if the ctrl key is pressed.</p>  required    <code>screen_x</code>  <code>int</code>  <p>The absolute x coordinate.</p>  <code>None</code>    <code>screen_y</code>  <code>int</code>  <p>The absolute y coordinate.</p>  <code>None</code>    <code>style</code>  <code>Style</code>  <p>The Rich Style under the mouse cursor.</p>  <code>None</code>","title":"<code>MouseEvent</code>"},{"location":"reference/events/#textual.events.MouseMove","text":"<p>         Bases: <code>MouseEvent</code></p> <p>Sent when the mouse cursor moves.</p>","title":"<code>MouseMove</code>"},{"location":"reference/events/#textual.events.MouseRelease","text":"<p>         Bases: <code>Event</code></p> <p>Mouse has been released.</p> <p>Parameters:</p>    Name Type Description Default     <code>sender</code>  <code>MessageTarget</code>  <p>The sender of the event, (in this case the app).</p>  required    <code>mouse_position</code>  <code>Point</code>  <p>The position of the mouse when released.</p>  required","title":"<code>MouseRelease</code>"},{"location":"reference/events/#textual.events.Paste","text":"<p>         Bases: <code>Event</code></p> <p>Event containing text that was pasted into the Textual application. This event will only appear when running in a terminal emulator that supports bracketed paste mode. Textual will enable bracketed pastes when an app starts, and disable it when the app shuts down.</p> <p>Parameters:</p>    Name Type Description Default     <code>sender</code>  <code>MessageTarget</code>  <p>The sender of the event, (in this case the app).</p>  required    <code>text</code>  <code>str</code>  <p>The text that has been pasted.</p>  required","title":"<code>Paste</code>"},{"location":"reference/events/#textual.events.Remove","text":"<p>         Bases: <code>Event</code></p> <p>Sent to a widget to ask it to remove itself from the DOM.</p>","title":"<code>Remove</code>"},{"location":"reference/events/#textual.events.Resize","text":"<p>         Bases: <code>Event</code></p> <p>Sent when the app or widget has been resized.</p> <p>Parameters:</p>    Name Type Description Default     <code>sender</code>  <code>MessageTarget</code>  <p>The sender of the event (the Screen).</p>  required    <code>size</code>  <code>Size</code>  <p>The new size of the Widget.</p>  required    <code>virtual_size</code>  <code>Size</code>  <p>The virtual size (scrollable size) of the Widget.</p>  required    <code>container_size</code>  <code>Size | None</code>  <p>The size of the Widget's container widget. Defaults to None.</p>  <code>None</code>","title":"<code>Resize</code>"},{"location":"reference/events/#textual.events.Show","text":"<p>         Bases: <code>Event</code></p> <p>Sent when a widget has become visible.</p>","title":"<code>Show</code>"},{"location":"reference/geometry/","text":"<p>Functions and classes to manage terminal geometry (anything involving coordinates or dimensions).</p>","title":"Geometry"},{"location":"reference/geometry/#textual.geometry.Offset","text":"<p>         Bases: <code>NamedTuple</code></p> <p>A cell offset defined by x and y coordinates. Offsets are typically relative to the top left of the terminal or other container.</p> <p>Textual prefers the names <code>x</code> and <code>y</code>, but you could consider <code>x</code> to be the column and <code>y</code> to be the row.</p>","title":"<code>Offset</code>"},{"location":"reference/geometry/#textual.geometry.Offset.x","text":"<p>Offset in the x-axis (horizontal)</p>","title":"<code>x: int = 0</code>  <code>class-attribute</code>"},{"location":"reference/geometry/#textual.geometry.Offset.y","text":"<p>Offset in the y-axis (vertical)</p>","title":"<code>y: int = 0</code>  <code>class-attribute</code>"},{"location":"reference/geometry/#textual.geometry.Offset.blend","text":"<p>Blend (interpolate) to a new point.</p> <p>Parameters:</p>    Name Type Description Default     <code>destination</code>  <code>Point</code>  <p>Point where factor would be 1.0.</p>  required    <code>factor</code>  <code>float</code>  <p>A value between 0 and 1.0.</p>  required     <p>Returns:</p>    Name Type Description     <code>Point</code>  <code>Offset</code>  <p>A new point on a line between self and destination.</p>","title":"<code>blend(destination, factor)</code>"},{"location":"reference/geometry/#textual.geometry.Offset.get_distance_to","text":"<p>Get the distance to another offset.</p> <p>Parameters:</p>    Name Type Description Default     <code>other</code>  <code>Offset</code>  <p>An offset.</p>  required     <p>Returns:</p>    Name Type Description     <code>float</code>  <code>float</code>  <p>Distance to other offset.</p>","title":"<code>get_distance_to(other)</code>"},{"location":"reference/geometry/#textual.geometry.Offset.is_origin","text":"<p>Check if the point is at the origin (0, 0).</p> <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the offset is the origin.</p>","title":"<code>is_origin()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region","text":"<p>         Bases: <code>NamedTuple</code></p> <p>Defines a rectangular region.</p> <p>A Region consists a coordinate (x and y) and dimensions (width and height).</p> <pre><code>  (x, y)\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25b2\n    \u2502                    \u2502 \u2502\n    \u2502                    \u2502 \u2502\n    \u2502                    \u2502 height\n    \u2502                    \u2502 \u2502\n    \u2502                    \u2502 \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25bc\n    \u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500 width \u2500\u2500\u2500\u2500\u2500\u2500\u25b6\n</code></pre>","title":"<code>Region</code>"},{"location":"reference/geometry/#textual.geometry.Region.height","text":"<p>The height of the region.</p>","title":"<code>height: int = 0</code>  <code>class-attribute</code>"},{"location":"reference/geometry/#textual.geometry.Region.width","text":"<p>The width of the region.</p>","title":"<code>width: int = 0</code>  <code>class-attribute</code>"},{"location":"reference/geometry/#textual.geometry.Region.x","text":"<p>Offset in the x-axis (horizontal).</p>","title":"<code>x: int = 0</code>  <code>class-attribute</code>"},{"location":"reference/geometry/#textual.geometry.Region.y","text":"<p>Offset in the y-axis (vertical).</p>","title":"<code>y: int = 0</code>  <code>class-attribute</code>"},{"location":"reference/geometry/#textual.geometry.Region.area","text":"<p>Get the area within the region.</p> <p>Returns:</p>    Name Type Description     <code>int</code>  <code>int</code>  <p>Area covered by this region.</p>","title":"<code>area()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.at_offset","text":"<p>Get a new Region with the same size at a given offset.</p> <p>Parameters:</p>    Name Type Description Default     <code>offset</code>  <code>tuple[int, int]</code>  <p>An offset.</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>New Region with adjusted offset.</p>","title":"<code>at_offset(offset)</code>"},{"location":"reference/geometry/#textual.geometry.Region.bottom","text":"<p>Maximum Y value (non inclusive).</p> <p>Returns:</p>    Name Type Description     <code>int</code>  <code>int</code>  <p>y coordinate.</p>","title":"<code>bottom()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.bottom_left","text":"<p>Bottom left offset of the region.</p> <p>Returns:</p>    Name Type Description     <code>Offset</code>  <code>Offset</code>  <p>Bottom left offset.</p>","title":"<code>bottom_left()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.bottom_right","text":"<p>Bottom right of the region.</p> <p>Returns:</p>    Name Type Description     <code>Offset</code>  <code>Offset</code>  <p>Bottom right.</p>","title":"<code>bottom_right()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.clip","text":"<p>Clip this region to fit within width, height.</p> <p>Parameters:</p>    Name Type Description Default     <code>width</code>  <code>int</code>  <p>Width of bounds.</p>  required    <code>height</code>  <code>int</code>  <p>Height of bounds.</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>Clipped region.</p>","title":"<code>clip(width, height)</code>"},{"location":"reference/geometry/#textual.geometry.Region.clip_size","text":"<p>Clip the size to fit within minimum values.</p> <p>Parameters:</p>    Name Type Description Default     <code>size</code>  <code>tuple[int, int]</code>  <p>Maximum width and height.</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>No region, not bigger than size.</p>","title":"<code>clip_size(size)</code>"},{"location":"reference/geometry/#textual.geometry.Region.column_range","text":"<p>A range object for X coordinates.</p>","title":"<code>column_range()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.column_span","text":"<p>Get the start and end columns (x coord).</p> <p>The end value is exclusive.</p> <p>Returns:</p>    Type Description      <code>tuple[int, int]</code>  <p>tuple[int, int]: Pair of x coordinates (column numbers).</p>","title":"<code>column_span()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.contains","text":"<p>Check if a point is in the region.</p> <p>Parameters:</p>    Name Type Description Default     <code>x</code>  <code>int</code>  <p>X coordinate.</p>  required    <code>y</code>  <code>int</code>  <p>Y coordinate.</p>  required     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the point is within the region.</p>","title":"<code>contains(x, y)</code>"},{"location":"reference/geometry/#textual.geometry.Region.contains_point","text":"<p>Check if a point is in the region.</p> <p>Parameters:</p>    Name Type Description Default     <code>point</code>  <code>tuple[int, int]</code>  <p>A tuple of x and y coordinates.</p>  required     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the point is within the region.</p>","title":"<code>contains_point(point)</code>"},{"location":"reference/geometry/#textual.geometry.Region.contains_region","text":"<p>Check if a region is entirely contained within this region.</p> <p>Parameters:</p>    Name Type Description Default     <code>other</code>  <code>Region</code>  <p>A region.</p>  required     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the other region fits perfectly within this region.</p>","title":"<code>contains_region(other)</code>"},{"location":"reference/geometry/#textual.geometry.Region.corners","text":"<p>Get the top left and bottom right coordinates as a tuple of integers.</p> <p>Returns:</p>    Type Description      <code>tuple[int, int, int, int]</code>  <p>tuple[int, int, int, int]: A tuple of <code>(&lt;left&gt;, &lt;top&gt;, &lt;right&gt;, &lt;bottom&gt;)</code>.</p>","title":"<code>corners()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.crop_size","text":"<p>Get a region with the same offset, with a size no larger than <code>size</code>.</p> <p>Parameters:</p>    Name Type Description Default     <code>size</code>  <code>tuple[int, int]</code>  <p>Maximum width and height (WIDTH, HEIGHT).</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>New region that could fit within <code>size</code>.</p>","title":"<code>crop_size(size)</code>"},{"location":"reference/geometry/#textual.geometry.Region.expand","text":"<p>Increase the size of the region by adding a border.</p> <p>Parameters:</p>    Name Type Description Default     <code>size</code>  <code>tuple[int, int]</code>  <p>Additional width and height.</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>A new region.</p>","title":"<code>expand(size)</code>"},{"location":"reference/geometry/#textual.geometry.Region.from_corners","text":"<p>Construct a Region form the top left and bottom right corners.</p> <p>Parameters:</p>    Name Type Description Default     <code>x1</code>  <code>int</code>  <p>Top left x.</p>  required    <code>y1</code>  <code>int</code>  <p>Top left y.</p>  required    <code>x2</code>  <code>int</code>  <p>Bottom right x.</p>  required    <code>y2</code>  <code>int</code>  <p>Bottom right y.</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>A new region.</p>","title":"<code>from_corners(x1, y1, x2, y2)</code>  <code>classmethod</code>"},{"location":"reference/geometry/#textual.geometry.Region.from_offset","text":"<p>Create a region from offset and size.</p> <p>Parameters:</p>    Name Type Description Default     <code>offset</code>  <code>Point</code>  <p>Offset (top left point).</p>  required    <code>size</code>  <code>tuple[int, int]</code>  <p>Dimensions of region.</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>A region instance.</p>","title":"<code>from_offset(offset, size)</code>  <code>classmethod</code>"},{"location":"reference/geometry/#textual.geometry.Region.from_union","text":"<p>Create a Region from the union of other regions.</p> <p>Parameters:</p>    Name Type Description Default     <code>regions</code>  <code>Collection[Region]</code>  <p>One or more regions.</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>A Region that encloses all other regions.</p>","title":"<code>from_union(regions)</code>  <code>classmethod</code>"},{"location":"reference/geometry/#textual.geometry.Region.get_scroll_to_visible","text":"<p>Calculate the smallest offset required to translate a window so that it contains another region.</p> <p>This method is used to calculate the required offset to scroll something in to view.</p> <p>Parameters:</p>    Name Type Description Default     <code>window_region</code>  <code>Region</code>  <p>The window region.</p>  required    <code>region</code>  <code>Region</code>  <p>The region to move inside the window.</p>  required     <p>Returns:</p>    Name Type Description     <code>Offset</code>  <code>Offset</code>  <p>An offset required to add to region to move it inside window_region.</p>","title":"<code>get_scroll_to_visible(window_region, region)</code>  <code>classmethod</code>"},{"location":"reference/geometry/#textual.geometry.Region.grow","text":"<p>Grow a region by adding spacing.</p> <p>Parameters:</p>    Name Type Description Default     <code>margin</code>  <code>tuple[int, int, in, int]</code>  <p>Grow space by <code>(&lt;top&gt;, &lt;right&gt;, &lt;bottom&gt;, &lt;left&gt;)</code>.</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>New region.</p>","title":"<code>grow(margin)</code>"},{"location":"reference/geometry/#textual.geometry.Region.intersection","text":"<p>Get the overlapping portion of the two regions.</p> <p>Parameters:</p>    Name Type Description Default     <code>region</code>  <code>Region</code>  <p>A region that overlaps this region.</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>A new region that covers when the two regions overlap.</p>","title":"<code>intersection(region)</code>  <code>cached</code>"},{"location":"reference/geometry/#textual.geometry.Region.line_range","text":"<p>A range object for Y coordinates.</p>","title":"<code>line_range()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.line_span","text":"<p>Get the start and end line number (y coord).</p> <p>The end value is exclusive.</p> <p>Returns:</p>    Type Description      <code>tuple[int, int]</code>  <p>tuple[int, int]: Pair of y coordinates (line numbers).</p>","title":"<code>line_span()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.offset","text":"<p>Get the start point of the region.</p> <p>Returns:</p>    Name Type Description     <code>Offset</code>  <code>Offset</code>  <p>Top left offset.</p>","title":"<code>offset()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.overlaps","text":"<p>Check if another region overlaps this region.</p> <p>Parameters:</p>    Name Type Description Default     <code>other</code>  <code>Region</code>  <p>A Region.</p>  required     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if other region shares any cells with this region.</p>","title":"<code>overlaps(other)</code>  <code>cached</code>"},{"location":"reference/geometry/#textual.geometry.Region.reset_offset","text":"<p>An region of the same size at (0, 0).</p> <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>reset region.</p>","title":"<code>reset_offset()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.right","text":"<p>Maximum X value (non inclusive).</p> <p>Returns:</p>    Name Type Description     <code>int</code>  <code>int</code>  <p>x coordinate.</p>","title":"<code>right()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.shrink","text":"<p>Shrink a region by subtracting spacing.</p> <p>Parameters:</p>    Name Type Description Default     <code>margin</code>  <code>tuple[int, int, int, int]</code>  <p>Shrink space by <code>(&lt;top&gt;, &lt;right&gt;, &lt;bottom&gt;, &lt;left&gt;)</code>.</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>The new, smaller region.</p>","title":"<code>shrink(margin)</code>"},{"location":"reference/geometry/#textual.geometry.Region.size","text":"<p>Get the size of the region.</p> <p>Returns:</p>    Name Type Description     <code>Size</code>  <code>Size</code>  <p>Size of the region.</p>","title":"<code>size()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.split","text":"<p>Split a region in to 4 from given x and y offsets (cuts).</p> <pre><code>           cut_x \u2193\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2510\n        \u2502        \u2502 \u2502   \u2502\n        \u2502    0   \u2502 \u2502 1 \u2502\n        \u2502        \u2502 \u2502   \u2502\ncut_y \u2192 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2510\n        \u2502    2   \u2502 \u2502 3 \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518\n</code></pre> <p>Parameters:</p>    Name Type Description Default     <code>cut_x</code>  <code>int</code>  <p>Offset from self.x where the cut should be made. If negative, the cut is taken from the right edge.</p>  required    <code>cut_y</code>  <code>int</code>  <p>Offset from self.y where the cut should be made. If negative, the cut is taken from the lower edge.</p>  required     <p>Returns:</p>    Type Description      <code>tuple[Region, Region, Region, Region]</code>  <p>tuple[Region, Region, Region, Region]: Four new regions which add up to the original (self).</p>","title":"<code>split(cut_x, cut_y)</code>  <code>cached</code>"},{"location":"reference/geometry/#textual.geometry.Region.split_horizontal","text":"<p>Split a region in to two, from a given x offset.</p> <pre><code>            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502    0    \u2502\n            \u2502         \u2502\n    cut \u2192   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502    1    \u2502\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Parameters:</p>    Name Type Description Default     <code>cut</code>  <code>int</code>  <p>An offset from self.x where the cut should be made. May be negative, for the offset to start from the right edge.</p>  required     <p>Returns:</p>    Type Description      <code>tuple[Region, Region]</code>  <p>tuple[Region, Region]: Two regions, which add up to the original (self).</p>","title":"<code>split_horizontal(cut)</code>  <code>cached</code>"},{"location":"reference/geometry/#textual.geometry.Region.split_vertical","text":"<p>Split a region in to two, from a given x offset.</p> <pre><code>         cut \u2193\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2510\n    \u2502    0   \u2502\u2502 1 \u2502\n    \u2502        \u2502\u2502   \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2518\n</code></pre> <p>Parameters:</p>    Name Type Description Default     <code>cut</code>  <code>int</code>  <p>An offset from self.x where the cut should be made. If cut is negative, it is taken from the right edge.</p>  required     <p>Returns:</p>    Type Description      <code>tuple[Region, Region]</code>  <p>tuple[Region, Region]: Two regions, which add up to the original (self).</p>","title":"<code>split_vertical(cut)</code>  <code>cached</code>"},{"location":"reference/geometry/#textual.geometry.Region.top_right","text":"<p>Top right offset of the region.</p> <p>Returns:</p>    Name Type Description     <code>Offset</code>  <code>Offset</code>  <p>Top right.</p>","title":"<code>top_right()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Region.translate","text":"<p>Move the offset of the Region.</p> <p>Parameters:</p>    Name Type Description Default     <code>offset</code>  <code>tuple[int, int]</code>  <p>Offset to add to region.</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>A new region shifted by (x, y)</p>","title":"<code>translate(offset)</code>"},{"location":"reference/geometry/#textual.geometry.Region.union","text":"<p>Get the smallest region that contains both regions.</p> <p>Parameters:</p>    Name Type Description Default     <code>region</code>  <code>Region</code>  <p>Another region.</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>An optimally sized region to cover both regions.</p>","title":"<code>union(region)</code>  <code>cached</code>"},{"location":"reference/geometry/#textual.geometry.Size","text":"<p>         Bases: <code>NamedTuple</code></p> <p>The dimensions of a rectangular region.</p>","title":"<code>Size</code>"},{"location":"reference/geometry/#textual.geometry.Size.height","text":"<p>The height in cells.</p>","title":"<code>height: int = 0</code>  <code>class-attribute</code>"},{"location":"reference/geometry/#textual.geometry.Size.width","text":"<p>The width in cells.</p>","title":"<code>width: int = 0</code>  <code>class-attribute</code>"},{"location":"reference/geometry/#textual.geometry.Size.area","text":"<p>Get the area of the size.</p> <p>Returns:</p>    Name Type Description     <code>int</code>  <code>int</code>  <p>Area in cells.</p>","title":"<code>area()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Size.contains","text":"<p>Check if a point is in area defined by the size.</p> <p>Parameters:</p>    Name Type Description Default     <code>x</code>  <code>int</code>  <p>X coordinate.</p>  required    <code>y</code>  <code>int</code>  <p>Y coordinate.</p>  required     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the point is within the region.</p>","title":"<code>contains(x, y)</code>"},{"location":"reference/geometry/#textual.geometry.Size.contains_point","text":"<p>Check if a point is in the area defined by the size.</p> <p>Parameters:</p>    Name Type Description Default     <code>point</code>  <code>tuple[int, int]</code>  <p>A tuple of x and y coordinates.</p>  required     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the point is within the region.</p>","title":"<code>contains_point(point)</code>"},{"location":"reference/geometry/#textual.geometry.Size.line_range","text":"<p>Get a range covering lines.</p> <p>Returns:</p>    Name Type Description     <code>range</code>  <code>range</code>  <p>A builtin range object.</p>","title":"<code>line_range()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Size.region","text":"<p>Get a region of the same size.</p> <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>A region with the same size at (0, 0).</p>","title":"<code>region()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Spacing","text":"<p>         Bases: <code>NamedTuple</code></p> <p>The spacing around a renderable.</p>","title":"<code>Spacing</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.bottom","text":"<p>Space from the bottom of a region.</p>","title":"<code>bottom: int = 0</code>  <code>class-attribute</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.left","text":"<p>Space from the left of a region.</p>","title":"<code>left: int = 0</code>  <code>class-attribute</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.right","text":"<p>Space from the left of a region.</p>","title":"<code>right: int = 0</code>  <code>class-attribute</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.top","text":"<p>Space from the top of a region.</p>","title":"<code>top: int = 0</code>  <code>class-attribute</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.all","text":"<p>Construct a Spacing with a given amount of spacing on all edges.</p> <p>Parameters:</p>    Name Type Description Default     <code>amount</code>  <code>int</code>  <p>The magnitude of spacing to apply to all edges</p>  required     <p>Returns:</p>    Name Type Description     <code>Spacing</code>  <code>Spacing</code>  <p><code>Spacing(amount, amount, amount, amount)</code></p>","title":"<code>all(amount)</code>  <code>classmethod</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.bottom_right","text":"<p>Bottom right space.</p> <p>Returns:</p>    Type Description      <code>tuple[int, int]</code>  <p>tuple[int, int]: <code>(&lt;right&gt;, &lt;bottom&gt;)</code></p>","title":"<code>bottom_right()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.css","text":"<p>Gets a string containing the spacing in CSS format.</p> <p>Returns:</p>    Name Type Description     <code>str</code>  <code>str</code>  <p>Spacing in CSS format.</p>","title":"<code>css()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.grow_maximum","text":"<p>Grow spacing with a maximum.</p> <p>Parameters:</p>    Name Type Description Default     <code>other</code>  <code>Spacing</code>  <p>Spacing object.</p>  required     <p>Returns:</p>    Name Type Description     <code>Spacing</code>  <code>Spacing</code>  <p>New spacing were the values are maximum of the two values.</p>","title":"<code>grow_maximum(other)</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.height","text":"<p>Total space in height.</p> <p>Returns:</p>    Name Type Description     <code>int</code>  <code>int</code>  <p>Height.</p>","title":"<code>height()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.horizontal","text":"<p>Construct a Spacing with a given amount of spacing on horizontal edges, and no vertical spacing.</p> <p>Parameters:</p>    Name Type Description Default     <code>amount</code>  <code>int</code>  <p>The magnitude of spacing to apply to horizontal edges</p>  required     <p>Returns:</p>    Name Type Description     <code>Spacing</code>  <code>Spacing</code>  <p><code>Spacing(0, amount, 0, amount)</code></p>","title":"<code>horizontal(amount)</code>  <code>classmethod</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.top_left","text":"<p>Top left space.</p> <p>Returns:</p>    Type Description      <code>tuple[int, int]</code>  <p>tuple[int, int]: <code>(&lt;left&gt;, &lt;top&gt;)</code></p>","title":"<code>top_left()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.totals","text":"<p>Get total horizontal and vertical space.</p> <p>Returns:</p>    Type Description      <code>tuple[int, int]</code>  <p>tuple[int, int]: <code>(&lt;horizontal&gt;, &lt;vertical&gt;)</code></p>","title":"<code>totals()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.unpack","text":"<p>Unpack padding specified in CSS style.</p> <p>Parameters:</p>    Name Type Description Default     <code>pad</code>  <code>SpacingDimensions</code>  <p>An integer, or tuple of 1, 2, or 4 integers.</p>  required     <p>Raises:</p>    Type Description      <code>ValueError</code>  <p>If <code>pad</code> is an invalid value.</p>    <p>Returns:</p>    Name Type Description     <code>Spacing</code>  <code>Spacing</code>  <p>New Spacing object.</p>","title":"<code>unpack(pad)</code>  <code>classmethod</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.vertical","text":"<p>Construct a Spacing with a given amount of spacing on vertical edges, and no horizontal spacing.</p> <p>Parameters:</p>    Name Type Description Default     <code>amount</code>  <code>int</code>  <p>The magnitude of spacing to apply to vertical edges</p>  required     <p>Returns:</p>    Name Type Description     <code>Spacing</code>  <code>Spacing</code>  <p><code>Spacing(amount, 0, amount, 0)</code></p>","title":"<code>vertical(amount)</code>  <code>classmethod</code>"},{"location":"reference/geometry/#textual.geometry.Spacing.width","text":"<p>Total space in width.</p> <p>Returns:</p>    Name Type Description     <code>int</code>  <code>int</code>  <p>Width.</p>","title":"<code>width()</code>  <code>property</code>"},{"location":"reference/geometry/#textual.geometry.clamp","text":"<p>Adjust a value to it is not less than a minimum and not greater than a maximum value.</p> <p>Parameters:</p>    Name Type Description Default     <code>value</code>  <code>T</code>  <p>A value.</p>  required    <code>minimum</code>  <code>T</code>  <p>Minimum value.</p>  required    <code>maximum</code>  <code>T</code>  <p>maximum value.</p>  required     <p>Returns:</p>    Name Type Description     <code>T</code>  <code>T</code>  <p>New value that is not less than the minimum or greater than the maximum.</p>","title":"<code>clamp(value, minimum, maximum)</code>"},{"location":"reference/message_pump/","text":"<p>A message pump is a class that processes messages.</p> <p>It is a base class for the <code>App</code>, <code>Screen</code>, and <code>Widget</code> classes.</p>","title":"Message pump"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.app","text":"<p>Get the current app.</p> <p>Returns:</p>    Name Type Description     <code>App</code>  <code>App</code>  <p>The current app.</p>    <p>Raises:</p>    Type Description      <code>NoActiveAppError</code>  <p>if no active app could be found for the current asyncio context</p>","title":"<code>app()</code>  <code>property</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.call_later","text":"<p>Schedule a callback to run after all messages are processed and the screen has been refreshed. Positional and keyword arguments are passed to the callable.</p> <p>Parameters:</p>    Name Type Description Default     <code>callback</code>  <code>Callable</code>  <p>A callable.</p>  required","title":"<code>call_later(callback, *args, **kwargs)</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.check_idle","text":"<p>Prompt the message pump to call idle if the queue is empty.</p>","title":"<code>check_idle()</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.disable_messages","text":"<p>Disable message types from being processed.</p>","title":"<code>disable_messages(*messages)</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.dispatch_key","text":"<p>Dispatch a key event to method.</p> <p>This method will call the method named 'key_' if it exists. <p>Parameters:</p>    Name Type Description Default     <code>event</code>  <code>events.Key</code>  <p>A key event.</p>  required","title":"<code>dispatch_key(event)</code>  <code>async</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.emit","text":"<p>Send a message to the parent.</p> <p>Parameters:</p>    Name Type Description Default     <code>message</code>  <code>Message</code>  <p>A message object.</p>  required     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>_True if the message was posted successfully.</p>","title":"<code>emit(message)</code>  <code>async</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.enable_messages","text":"<p>Enable processing of messages types.</p>","title":"<code>enable_messages(*messages)</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.log","text":"<p>Get a logger for this object.</p> <p>Returns:</p>    Name Type Description     <code>Logger</code>  <code>Logger</code>  <p>A logger.</p>","title":"<code>log()</code>  <code>property</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.on_event","text":"<p>Called to process an event.</p> <p>Parameters:</p>    Name Type Description Default     <code>event</code>  <code>events.Event</code>  <p>An Event object.</p>  required","title":"<code>on_event(event)</code>  <code>async</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.on_message","text":"<p>Called to process a message.</p> <p>Parameters:</p>    Name Type Description Default     <code>message</code>  <code>Message</code>  <p>A Message object.</p>  required","title":"<code>on_message(message)</code>  <code>async</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.post_message","text":"<p>Post a message or an event to this message pump.</p> <p>Parameters:</p>    Name Type Description Default     <code>message</code>  <code>Message</code>  <p>A message object.</p>  required     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the messages was posted successfully, False if the message was not posted (because the message pump was in the process of closing).</p>","title":"<code>post_message(message)</code>  <code>async</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.post_message_no_wait","text":"<p>Posts a message on the queue.</p> <p>Parameters:</p>    Name Type Description Default     <code>message</code>  <code>Message</code>  <p>A message (or Event).</p>  required     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the messages was processed, False if it wasn't.</p>","title":"<code>post_message_no_wait(message)</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.post_priority_message","text":"<p>Post a \"priority\" messages which will be processes prior to regular messages.</p> <p>Note that you should rarely need this in a regular app. It exists primarily to allow timer messages to skip the queue, so that they can be more regular.</p> <p>Parameters:</p>    Name Type Description Default     <code>message</code>  <code>Message</code>  <p>A message.</p>  required     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the messages was processed, False if it wasn't.</p>","title":"<code>post_priority_message(message)</code>  <code>async</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.set_interval","text":"<p>Call a function at periodic intervals.</p> <p>Parameters:</p>    Name Type Description Default     <code>interval</code>  <code>float</code>  <p>Time between calls.</p>  required    <code>callback</code>  <code>TimerCallback | None</code>  <p>Function to call. Defaults to None.</p>  <code>None</code>    <code>name</code>  <code>str | None</code>  <p>Name of the timer object. Defaults to None.</p>  <code>None</code>    <code>repeat</code>  <code>int</code>  <p>Number of times to repeat the call or 0 for continuous. Defaults to 0.</p>  <code>0</code>    <code>pause</code>  <code>bool</code>  <p>Start the timer paused. Defaults to False.</p>  <code>False</code>     <p>Returns:</p>    Name Type Description     <code>Timer</code>  <code>Timer</code>  <p>A timer object.</p>","title":"<code>set_interval(interval, callback=None, *, name=None, repeat=0, pause=False)</code>"},{"location":"reference/message_pump/#textual.message_pump.MessagePump.set_timer","text":"<p>Make a function call after a delay.</p> <p>Parameters:</p>    Name Type Description Default     <code>delay</code>  <code>float</code>  <p>Time to wait before invoking callback.</p>  required    <code>callback</code>  <code>TimerCallback | None</code>  <p>Callback to call after time has expired. Defaults to None.</p>  <code>None</code>    <code>name</code>  <code>str | None</code>  <p>Name of the timer (for debug). Defaults to None.</p>  <code>None</code>    <code>pause</code>  <code>bool</code>  <p>Start timer paused. Defaults to False.</p>  <code>False</code>     <p>Returns:</p>    Name Type Description     <code>Timer</code>  <code>Timer</code>  <p>A timer object.</p>","title":"<code>set_timer(delay, callback=None, *, name=None, pause=False)</code>"},{"location":"reference/query/","text":"","title":"Query"},{"location":"reference/query/#textual.css.query.DOMQuery.add_class","text":"<p>Add the given class name(s) to nodes.</p>","title":"<code>add_class(*class_names)</code>"},{"location":"reference/query/#textual.css.query.DOMQuery.exclude","text":"<p>Exclude nodes that match a given selector.</p> <p>Parameters:</p>    Name Type Description Default     <code>selector</code>  <code>str</code>  <p>A CSS selector.</p>  required     <p>Returns:</p>    Name Type Description     <code>DOMQuery</code>  <code>DOMQuery</code>  <p>New DOM query.</p>","title":"<code>exclude(selector)</code>"},{"location":"reference/query/#textual.css.query.DOMQuery.filter","text":"<p>Filter this set by the given CSS selector.</p> <p>Parameters:</p>    Name Type Description Default     <code>selector</code>  <code>str</code>  <p>A CSS selector.</p>  required     <p>Returns:</p>    Name Type Description     <code>DOMQuery</code>  <code>DOMQuery</code>  <p>New DOM Query.</p>","title":"<code>filter(selector)</code>"},{"location":"reference/query/#textual.css.query.DOMQuery.first","text":"<p>Get the first match node.</p> <p>Parameters:</p>    Name Type Description Default     <code>expect_type</code>  <code>type[ExpectType] | None</code>  <p>Require matched node is of this type, or None for any type. Defaults to None.</p>  <code>None</code>     <p>Raises:</p>    Type Description      <code>WrongType</code>  <p>If the wrong type was found.</p>    <code>NoMatchingNodesError</code>  <p>If there are no matching nodes in the query.</p>    <p>Returns:</p>    Type Description      <code>Widget | ExpectType</code>  <p>Widget | ExpectType: The matching Widget.</p>","title":"<code>first(expect_type=None)</code>"},{"location":"reference/query/#textual.css.query.DOMQuery.last","text":"<p>Get the last match node.</p> <p>Parameters:</p>    Name Type Description Default     <code>expect_type</code>  <code>type[ExpectType] | None</code>  <p>Require matched node is of this type, or None for any type. Defaults to None.</p>  <code>None</code>     <p>Raises:</p>    Type Description      <code>WrongType</code>  <p>If the wrong type was found.</p>    <code>NoMatchingNodesError</code>  <p>If there are no matching nodes in the query.</p>    <p>Returns:</p>    Type Description      <code>Widget | ExpectType</code>  <p>Widget | ExpectType: The matching Widget.</p>","title":"<code>last(expect_type=None)</code>"},{"location":"reference/query/#textual.css.query.DOMQuery.nodes","text":"<p>Lazily evaluate nodes.</p>","title":"<code>nodes()</code>  <code>property</code>"},{"location":"reference/query/#textual.css.query.DOMQuery.refresh","text":"<p>Refresh matched nodes.</p> <p>Parameters:</p>    Name Type Description Default     <code>repaint</code>  <code>bool</code>  <p>Repaint node(s). defaults to True.</p>  <code>True</code>    <code>layout</code>  <code>bool</code>  <p>Layout node(s). Defaults to False.</p>  <code>False</code>     <p>Returns:</p>    Name Type Description     <code>DOMQuery</code>  <code>DOMQuery</code>  <p>Query for chaining.</p>","title":"<code>refresh(*, repaint=True, layout=False)</code>"},{"location":"reference/query/#textual.css.query.DOMQuery.remove","text":"<p>Remove matched nodes from the DOM</p>","title":"<code>remove()</code>"},{"location":"reference/query/#textual.css.query.DOMQuery.remove_class","text":"<p>Remove the given class names from the nodes.</p>","title":"<code>remove_class(*class_names)</code>"},{"location":"reference/query/#textual.css.query.DOMQuery.results","text":"<p>Get query results, optionally filtered by a given type.</p> <p>Parameters:</p>    Name Type Description Default     <code>filter_type</code>  <code>type[ExpectType] | None</code>  <p>A Widget class to filter results, or None for no filter. Defaults to None.</p>  <code>None</code>     <p>Yields:</p>    Type Description      <code>Iterator[Widget | ExpectType]</code>  <p>Iterator[Widget | ExpectType]: An iterator of Widget instances.</p>","title":"<code>results(filter_type=None)</code>"},{"location":"reference/query/#textual.css.query.DOMQuery.set_class","text":"<p>Set the given class name(s) according to a condition.</p> <p>Parameters:</p>    Name Type Description Default     <code>add</code>  <code>bool</code>  <p>Add the classes if True, otherwise remove them.</p>  required     <p>Returns:</p>    Name Type Description     <code>DOMQuery</code>  <code>DOMQuery</code>  <p>Self.</p>","title":"<code>set_class(add, *class_names)</code>"},{"location":"reference/query/#textual.css.query.DOMQuery.set_styles","text":"<p>Set styles on matched nodes.</p> <p>Parameters:</p>    Name Type Description Default     <code>css</code>  <code>str</code>  <p>CSS declarations to parser, or None. Defaults to None.</p>  <code>None</code>","title":"<code>set_styles(css=None, **update_styles)</code>"},{"location":"reference/query/#textual.css.query.DOMQuery.toggle_class","text":"<p>Toggle the given class names from matched nodes.</p>","title":"<code>toggle_class(*class_names)</code>"},{"location":"reference/reactive/","text":"","title":"Reactive"},{"location":"reference/reactive/#textual.reactive.Reactive","text":"<p>         Bases: <code>Generic[ReactiveType]</code></p> <p>Reactive descriptor.</p> <p>Parameters:</p>    Name Type Description Default     <code>default</code>  <code>ReactiveType | Callable[[], ReactiveType]</code>  <p>A default value or callable that returns a default.</p>  required    <code>layout</code>  <code>bool</code>  <p>Perform a layout on change. Defaults to False.</p>  <code>False</code>    <code>repaint</code>  <code>bool</code>  <p>Perform a repaint on change. Defaults to True.</p>  <code>True</code>    <code>init</code>  <code>bool</code>  <p>Call watchers on initialize (post mount). Defaults to False.</p>  <code>False</code>","title":"<code>Reactive</code>"},{"location":"reference/reactive/#textual.reactive.Reactive.init","text":"<p>A reactive variable that calls watchers and compute on initialize (post mount).</p> <p>Parameters:</p>    Name Type Description Default     <code>default</code>  <code>ReactiveType | Callable[[], ReactiveType]</code>  <p>A default value or callable that returns a default.</p>  required    <code>layout</code>  <code>bool</code>  <p>Perform a layout on change. Defaults to False.</p>  <code>False</code>    <code>repaint</code>  <code>bool</code>  <p>Perform a repaint on change. Defaults to True.</p>  <code>True</code>     <p>Returns:</p>    Name Type Description     <code>Reactive</code>  <code>Reactive</code>  <p>A Reactive instance which calls watchers or initialize.</p>","title":"<code>init(default, *, layout=False, repaint=True)</code>  <code>classmethod</code>"},{"location":"reference/reactive/#textual.reactive.Reactive.initialize_object","text":"<p>Call any watchers / computes for the first time.</p> <p>Parameters:</p>    Name Type Description Default     <code>obj</code>  <code>Reactable</code>  <p>An object with Reactive descriptors</p>  required","title":"<code>initialize_object(obj)</code>  <code>classmethod</code> <code>async</code>"},{"location":"reference/reactive/#textual.reactive.Reactive.var","text":"<p>A reactive variable that doesn't update or layout.</p> <p>Parameters:</p>    Name Type Description Default     <code>default</code>  <code>ReactiveType | Callable[[], ReactiveType]</code>  <p>A default value or callable that returns a default.</p>  required     <p>Returns:</p>    Name Type Description     <code>Reactive</code>  <code>Reactive</code>  <p>A Reactive descriptor.</p>","title":"<code>var(default)</code>  <code>classmethod</code>"},{"location":"reference/reactive/#textual.reactive.reactive","text":"<p>         Bases: <code>Reactive[ReactiveType]</code></p> <p>Create a reactive attribute.</p> <p>Parameters:</p>    Name Type Description Default     <code>default</code>  <code>ReactiveType | Callable[[], ReactiveType]</code>  <p>A default value or callable that returns a default.</p>  required    <code>layout</code>  <code>bool</code>  <p>Perform a layout on change. Defaults to False.</p>  <code>False</code>    <code>repaint</code>  <code>bool</code>  <p>Perform a repaint on change. Defaults to True.</p>  <code>True</code>    <code>init</code>  <code>bool</code>  <p>Call watchers on initialize (post mount). Defaults to False.</p>  <code>True</code>","title":"<code>reactive</code>"},{"location":"reference/reactive/#textual.reactive.var","text":"<p>         Bases: <code>Reactive[ReactiveType]</code></p> <p>Create a reactive attribute (with no auto-refresh).</p> <p>Parameters:</p>    Name Type Description Default     <code>default</code>  <code>ReactiveType | Callable[[], ReactiveType]</code>  <p>A default value or callable that returns a default.</p>  required","title":"<code>var</code>"},{"location":"reference/reactive/#textual.reactive.watch","text":"<p>Watch a reactive variable on an object.</p> <p>Parameters:</p>    Name Type Description Default     <code>obj</code>  <code>Reactable</code>  <p>The parent object.</p>  required    <code>attribute_name</code>  <code>str</code>  <p>The attribute to watch.</p>  required    <code>callback</code>  <code>Callable[[Any], object]</code>  <p>A callable to call when the attribute changes.</p>  required","title":"<code>watch(obj, attribute_name, callback)</code>"},{"location":"reference/screen/","text":"","title":"Screen"},{"location":"reference/screen/#textual.screen.Screen","text":"<p>         Bases: <code>Widget</code></p> <p>A widget for the root of the app.</p>","title":"<code>Screen</code>"},{"location":"reference/screen/#textual.screen.Screen.find_widget","text":"<p>Get the screen region of a Widget.</p> <p>Parameters:</p>    Name Type Description Default     <code>widget</code>  <code>Widget</code>  <p>A Widget within the composition.</p>  required     <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>MapGeometry</code>  <p>Region relative to screen.</p>","title":"<code>find_widget(widget)</code>"},{"location":"reference/screen/#textual.screen.Screen.get_offset","text":"<p>Get the absolute offset of a given Widget.</p> <p>Parameters:</p>    Name Type Description Default     <code>widget</code>  <code>Widget</code>  <p>A widget</p>  required     <p>Returns:</p>    Name Type Description     <code>Offset</code>  <code>Offset</code>  <p>The widget's offset relative to the top left of the terminal.</p>","title":"<code>get_offset(widget)</code>"},{"location":"reference/screen/#textual.screen.Screen.get_style_at","text":"<p>Get the style under a given coordinate.</p> <p>Parameters:</p>    Name Type Description Default     <code>x</code>  <code>int</code>  <p>X Coordinate.</p>  required    <code>y</code>  <code>int</code>  <p>Y Coordinate.</p>  required     <p>Returns:</p>    Name Type Description     <code>Style</code>  <code>Style</code>  <p>Rich Style object</p>","title":"<code>get_style_at(x, y)</code>"},{"location":"reference/screen/#textual.screen.Screen.get_widget_at","text":"<p>Get the widget at a given coordinate.</p> <p>Parameters:</p>    Name Type Description Default     <code>x</code>  <code>int</code>  <p>X Coordinate.</p>  required    <code>y</code>  <code>int</code>  <p>Y Coordinate.</p>  required     <p>Returns:</p>    Type Description      <code>tuple[Widget, Region]</code>  <p>tuple[Widget, Region]: Widget and screen region.</p>","title":"<code>get_widget_at(x, y)</code>"},{"location":"reference/screen/#textual.screen.Screen.is_current","text":"<p>Check if this screen is current (i.e. visible to user).</p>","title":"<code>is_current()</code>  <code>property</code>"},{"location":"reference/screen/#textual.screen.Screen.update_timer","text":"<p>Timer used to perform updates.</p>","title":"<code>update_timer()</code>  <code>property</code>"},{"location":"reference/screen/#textual.screen.Screen.visible_widgets","text":"<p>Get a list of visible widgets.</p>","title":"<code>visible_widgets()</code>  <code>property</code>"},{"location":"reference/screen/#textual.screen.Screen.widgets","text":"<p>Get all widgets.</p>","title":"<code>widgets()</code>  <code>property</code>"},{"location":"reference/timer/","text":"<p>Timer objects are created by set_interval or     set_interval.</p>","title":"Timer"},{"location":"reference/timer/#textual.timer.Timer","text":"<p>A class to send timer-based events.</p> <p>Parameters:</p>    Name Type Description Default     <code>event_target</code>  <code>MessageTarget</code>  <p>The object which will receive the timer events.</p>  required    <code>interval</code>  <code>float</code>  <p>The time between timer events.</p>  required    <code>sender</code>  <code>MessageTarget</code>  <p>The sender of the event.</p>  required    <code>name</code>  <code>str | None</code>  <p>A name to assign the event (for debugging). Defaults to None.</p>  <code>None</code>    <code>callback</code>  <code>TimerCallback | None</code>  <p>A optional callback to invoke when the event is handled. Defaults to None.</p>  <code>None</code>    <code>repeat</code>  <code>int | None</code>  <p>The number of times to repeat the timer, or None to repeat forever. Defaults to None.</p>  <code>None</code>    <code>skip</code>  <code>bool</code>  <p>Enable skipping of scheduled events that couldn't be sent in time. Defaults to True.</p>  <code>True</code>    <code>pause</code>  <code>bool</code>  <p>Start the timer paused. Defaults to False.</p>  <code>False</code>","title":"<code>Timer</code>"},{"location":"reference/timer/#textual.timer.Timer.pause","text":"<p>Pause the timer.</p> <p>A paused timer will not send events until it is resumed.</p>","title":"<code>pause()</code>"},{"location":"reference/timer/#textual.timer.Timer.resume","text":"<p>Resume a paused timer.</p>","title":"<code>resume()</code>"},{"location":"reference/timer/#textual.timer.Timer.start","text":"<p>Start the timer return the task.</p> <p>Returns:</p>    Name Type Description     <code>Task</code>  <code>Task</code>  <p>A Task instance for the timer.</p>","title":"<code>start()</code>"},{"location":"reference/timer/#textual.timer.Timer.stop","text":"<p>Stop the timer, and block until it exits.</p>","title":"<code>stop()</code>  <code>async</code>"},{"location":"reference/timer/#textual.timer.Timer.stop_no_wait","text":"<p>Stop the timer.</p>","title":"<code>stop_no_wait()</code>"},{"location":"reference/widget/","text":"<p>         Bases: <code>DOMNode</code></p> <p>A Widget is the base class for Textual widgets. Extent this class (or a sub-class) when defining your own widgets.</p>","title":"Widget"},{"location":"reference/widget/#textual.widget.Widget.action","text":"<p>Perform a given action, with this widget as the default namespace.</p> <p>Parameters:</p>    Name Type Description Default     <code>action</code>  <code>str</code>  <p>Action encoded as a string.</p>  required","title":"<code>action(action)</code>  <code>async</code>"},{"location":"reference/widget/#textual.widget.Widget.allow_horizontal_scroll","text":"<p>Check if horizontal scroll is permitted.</p> <p>May be overridden if you want different logic regarding allowing scrolling.</p> <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the widget may scroll horizontally.</p>","title":"<code>allow_horizontal_scroll()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.allow_vertical_scroll","text":"<p>Check if vertical scroll is permitted.</p> <p>May be overridden if you want different logic regarding allowing scrolling.</p> <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the widget may scroll vertically.</p>","title":"<code>allow_vertical_scroll()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.animate","text":"<p>Get an animator to animate attributes on this widget.</p>  Example <pre><code>self.animate(\"brightness\", 0.5)\n</code></pre>  <p>Returns:</p>    Name Type Description     <code>BoundAnimator</code>  <code>BoundAnimator</code>  <p>An animator bound to this widget.</p>","title":"<code>animate()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.capture_mouse","text":"<p>Capture (or release) the mouse.</p> <p>When captured, mouse events will go to this widget even when the pointer is not directly over the widget.</p> <p>Parameters:</p>    Name Type Description Default     <code>capture</code>  <code>bool</code>  <p>True to capture or False to release. Defaults to True.</p>  <code>True</code>","title":"<code>capture_mouse(capture=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.compose","text":"<p>Called by Textual to create child widgets.</p> <p>Extend this to build a UI.</p>  Example <pre><code>def compose(self) -&gt; ComposeResult:\n    yield Header()\n    yield Container(\n        TreeControl(), Viewer()\n    )\n    yield Footer()\n</code></pre>","title":"<code>compose()</code>"},{"location":"reference/widget/#textual.widget.Widget.container_size","text":"<p>The size of the container (parent widget).</p> <p>Returns:</p>    Name Type Description     <code>Size</code>  <code>Size</code>  <p>Container size.</p>","title":"<code>container_size()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.container_viewport","text":"<p>The viewport region (parent window).</p> <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>The region that contains this widget.</p>","title":"<code>container_viewport()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.content_offset","text":"<p>An offset from the Widget origin where the content begins.</p> <p>Returns:</p>    Name Type Description     <code>Offset</code>  <code>Offset</code>  <p>Offset from widget's origin.</p>","title":"<code>content_offset()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.content_region","text":"<p>Gets an absolute region containing the content (minus padding and border).</p> <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>Screen region that contains a widget's content.</p>","title":"<code>content_region()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.focus","text":"<p>Give focus to this widget.</p> <p>Parameters:</p>    Name Type Description Default     <code>scroll_visible</code>  <code>bool</code>  <p>Scroll parent to make this widget visible. Defaults to True.</p>  <code>True</code>","title":"<code>focus(scroll_visible=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.focusable_children","text":"<p>Get the children which may be focused.</p> <p>Returns:</p>    Type Description      <code>list[Widget]</code>  <p>list[Widget]: List of widgets that can receive focus.</p>","title":"<code>focusable_children()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.get_component_rich_style","text":"<p>Get a Rich style for a component.</p> <p>Parameters:</p>    Name Type Description Default     <code>name</code>  <code>str</code>  <p>Name of component.</p>  required     <p>Returns:</p>    Name Type Description     <code>Style</code>  <code>Style</code>  <p>A Rich style object.</p>","title":"<code>get_component_rich_style(name)</code>"},{"location":"reference/widget/#textual.widget.Widget.get_content_height","text":"<p>Gets the height (number of lines) in the content area.</p> <p>May be overridden in a subclass.</p> <p>Parameters:</p>    Name Type Description Default     <code>container</code>  <code>Size</code>  <p>Size of the container (immediate parent) widget.</p>  required    <code>viewport</code>  <code>Size</code>  <p>Size of the viewport.</p>  required    <code>width</code>  <code>int</code>  <p>Width of renderable.</p>  required     <p>Returns:</p>    Name Type Description     <code>int</code>  <code>int</code>  <p>The height of the content.</p>","title":"<code>get_content_height(container, viewport, width)</code>"},{"location":"reference/widget/#textual.widget.Widget.get_content_width","text":"<p>Gets the width of the content area.</p> <p>May be overridden in a subclass.</p> <p>Parameters:</p>    Name Type Description Default     <code>container</code>  <code>Size</code>  <p>Size of the container (immediate parent) widget.</p>  required    <code>viewport</code>  <code>Size</code>  <p>Size of the viewport.</p>  required     <p>Returns:</p>    Name Type Description     <code>int</code>  <code>int</code>  <p>The optimal width of the content.</p>","title":"<code>get_content_width(container, viewport)</code>"},{"location":"reference/widget/#textual.widget.Widget.get_pseudo_classes","text":"<p>Pseudo classes for a widget.</p> <p>Returns:</p>    Type Description      <code>Iterable[str]</code>  <p>Iterable[str]: Names of the pseudo classes.</p>","title":"<code>get_pseudo_classes()</code>"},{"location":"reference/widget/#textual.widget.Widget.get_style_at","text":"<p>Get the Rich style at a given screen offset.</p> <p>Parameters:</p>    Name Type Description Default     <code>x</code>  <code>int</code>  <p>X coordinate relative to the screen.</p>  required    <code>y</code>  <code>int</code>  <p>Y coordinate relative to the screen.</p>  required     <p>Returns:</p>    Name Type Description     <code>Style</code>  <code>Style</code>  <p>A rich Style object.</p>","title":"<code>get_style_at(x, y)</code>"},{"location":"reference/widget/#textual.widget.Widget.gutter","text":"<p>Spacing for padding / border / scrollbars.</p> <p>Returns:</p>    Name Type Description     <code>Spacing</code>  <code>Spacing</code>  <p>Additional spacing around content area.</p>","title":"<code>gutter()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.horizontal_scrollbar","text":"<p>Get a vertical scrollbar (create if necessary).</p> <p>Returns:</p>    Name Type Description     <code>ScrollBar</code>  <code>ScrollBar</code>  <p>ScrollBar Widget.</p>","title":"<code>horizontal_scrollbar()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.is_container","text":"<p>Check if this widget is a container (contains other widgets).</p> <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if this widget is a container.</p>","title":"<code>is_container()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.is_scrollable","text":"<p>Check if this Widget may be scrolled.</p> <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if this widget may be scrolled.</p>","title":"<code>is_scrollable()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.is_transparent","text":"<p>Check if the background styles is not set.</p> <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p><code>True</code> if there is background color, otherwise <code>False</code>.</p>","title":"<code>is_transparent()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.layer","text":"<p>Get the name of this widgets layer.</p> <p>Returns:</p>    Name Type Description     <code>str</code>  <code>str</code>  <p>Name of layer.</p>","title":"<code>layer()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.layers","text":"<p>Layers of from parent.</p> <p>Returns:</p>    Type Description      <code>tuple[str, ...]</code>  <p>tuple[str, ...]: Tuple of layer names.</p>","title":"<code>layers()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.max_scroll_x","text":"<p>The maximum value of <code>scroll_x</code>.</p>","title":"<code>max_scroll_x()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.max_scroll_y","text":"<p>The maximum value of <code>scroll_y</code>.</p>","title":"<code>max_scroll_y()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.mount","text":"<p>Mount child widgets (making this widget a container).</p> <p>Widgets may be passed as positional arguments or keyword arguments. If keyword arguments, the keys will be set as the Widget's id.</p>  Example <pre><code>self.mount(Static(\"hello\"), header=Header())\n</code></pre>","title":"<code>mount(*anon_widgets, **widgets)</code>"},{"location":"reference/widget/#textual.widget.Widget.outer_size","text":"<p>The size of the widget (including padding and border).</p> <p>Returns:</p>    Name Type Description     <code>Size</code>  <code>Size</code>  <p>Outer size.</p>","title":"<code>outer_size()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.post_message","text":"<p>Post a message to this widget.</p> <p>Parameters:</p>    Name Type Description Default     <code>message</code>  <code>Message</code>  <p>Message to post.</p>  required     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the message was posted, False if this widget was closed / closing.</p>","title":"<code>post_message(message)</code>  <code>async</code>"},{"location":"reference/widget/#textual.widget.Widget.post_render","text":"<p>Applies style attributes to the default renderable.</p> <p>Returns:</p>    Name Type Description     <code>RenderableType</code>  <code>ConsoleRenderable</code>  <p>A new renderable.</p>","title":"<code>post_render(renderable)</code>"},{"location":"reference/widget/#textual.widget.Widget.refresh","text":"<p>Initiate a refresh of the widget.</p> <p>This method sets an internal flag to perform a refresh, which will be done on the next idle event. Only one refresh will be done even if this method is called multiple times.</p> <p>By default this method will cause the content of the widget to refresh, but not change its size. You can also set <code>layout=True</code> to perform a layout.</p>  <p>Warning</p> <p>It is rarely necessary to call this method explicitly. Updating styles or reactive attributes will do this automatically.</p>  <p>Parameters:</p>    Name Type Description Default     <code>*regions</code>  <code>Region</code>  <p>Additional screen regions to mark as dirty.</p>  <code>()</code>    <code>repaint</code>  <code>bool</code>  <p>Repaint the widget (will call render() again). Defaults to True.</p>  <code>True</code>    <code>layout</code>  <code>bool</code>  <p>Also layout widgets in the view. Defaults to False.</p>  <code>False</code>","title":"<code>refresh(*regions, repaint=True, layout=False)</code>"},{"location":"reference/widget/#textual.widget.Widget.region","text":"<p>The region occupied by this widget, relative to the Screen.</p> <p>Raises:</p>    Type Description      <code>NoScreen</code>  <p>If there is no screen.</p>    <code>errors.NoWidget</code>  <p>If the widget is not on the screen.</p>    <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>Region within screen occupied by widget.</p>","title":"<code>region()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.release_mouse","text":"<p>Release the mouse.</p> <p>Mouse events will only be sent when the mouse is over the widget.</p>","title":"<code>release_mouse()</code>"},{"location":"reference/widget/#textual.widget.Widget.remove","text":"<p>Remove the Widget from the DOM (effectively deleting it)</p>","title":"<code>remove()</code>"},{"location":"reference/widget/#textual.widget.Widget.render","text":"<p>Get renderable for widget.</p> <p>Returns:</p>    Name Type Description     <code>RenderableType</code>  <code>RenderableType</code>  <p>Any renderable</p>","title":"<code>render()</code>"},{"location":"reference/widget/#textual.widget.Widget.render_line","text":"<p>Render a line of content.</p> <p>Parameters:</p>    Name Type Description Default     <code>y</code>  <code>int</code>  <p>Y Coordinate of line.</p>  required     <p>Returns:</p>    Type Description      <code>list[Segment]</code>  <p>list[Segment]: A rendered line.</p>","title":"<code>render_line(y)</code>"},{"location":"reference/widget/#textual.widget.Widget.render_lines","text":"<p>Render the widget in to lines.</p> <p>Parameters:</p>    Name Type Description Default     <code>crop</code>  <code>Region</code>  <p>Region within visible area to render.</p>  required     <p>Returns:</p>    Name Type Description     <code>Lines</code>  <code>Lines</code>  <p>A list of list of segments.</p>","title":"<code>render_lines(crop)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_down","text":"<p>Scroll one line down.</p> <p>Parameters:</p>    Name Type Description Default     <code>animate</code>  <code>bool</code>  <p>Animate scroll. Defaults to True.</p>  <code>True</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if any scrolling was done.</p>","title":"<code>scroll_down(*, animate=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_end","text":"<p>Scroll to the end of the container.</p> <p>Parameters:</p>    Name Type Description Default     <code>animate</code>  <code>bool</code>  <p>Animate scroll. Defaults to True.</p>  <code>True</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if any scrolling was done.</p>","title":"<code>scroll_end(*, animate=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_home","text":"<p>Scroll to home position.</p> <p>Parameters:</p>    Name Type Description Default     <code>animate</code>  <code>bool</code>  <p>Animate scroll. Defaults to True.</p>  <code>True</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if any scrolling was done.</p>","title":"<code>scroll_home(*, animate=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_left","text":"<p>Scroll one cell left.</p> <p>Parameters:</p>    Name Type Description Default     <code>animate</code>  <code>bool</code>  <p>Animate scroll. Defaults to True.</p>  <code>True</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if any scrolling was done.</p>","title":"<code>scroll_left(*, animate=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_offset","text":"<p>Get the current scroll offset.</p> <p>Returns:</p>    Name Type Description     <code>Offset</code>  <code>Offset</code>  <p>Offset a container has been scrolled by.</p>","title":"<code>scroll_offset()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_page_down","text":"<p>Scroll one page down.</p> <p>Parameters:</p>    Name Type Description Default     <code>animate</code>  <code>bool</code>  <p>Animate scroll. Defaults to True.</p>  <code>True</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if any scrolling was done.</p>","title":"<code>scroll_page_down(*, animate=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_page_left","text":"<p>Scroll one page left.</p> <p>Parameters:</p>    Name Type Description Default     <code>animate</code>  <code>bool</code>  <p>Animate scroll. Defaults to True.</p>  <code>True</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if any scrolling was done.</p>","title":"<code>scroll_page_left(*, animate=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_page_right","text":"<p>Scroll one page right.</p> <p>Parameters:</p>    Name Type Description Default     <code>animate</code>  <code>bool</code>  <p>Animate scroll. Defaults to True.</p>  <code>True</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if any scrolling was done.</p>","title":"<code>scroll_page_right(*, animate=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_page_up","text":"<p>Scroll one page up.</p> <p>Parameters:</p>    Name Type Description Default     <code>animate</code>  <code>bool</code>  <p>Animate scroll. Defaults to True.</p>  <code>True</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if any scrolling was done.</p>","title":"<code>scroll_page_up(*, animate=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_relative","text":"<p>Scroll relative to current position.</p> <p>Parameters:</p>    Name Type Description Default     <code>x</code>  <code>int | None</code>  <p>X distance (columns) to scroll, or <code>None</code> for no change. Defaults to None.</p>  <code>None</code>    <code>y</code>  <code>int | None</code>  <p>Y distance (rows) to scroll, or <code>None</code> for no change. Defaults to None.</p>  <code>None</code>    <code>animate</code>  <code>bool</code>  <p>Animate to new scroll position. Defaults to False.</p>  <code>True</code>    <code>speed</code>  <code>float | None</code>  <p>Speed of scroll if animate is True. Or None to use duration.</p>  <code>None</code>    <code>duration</code>  <code>float | None</code>  <p>Duration of animation, if animate is True and speed is False.</p>  <code>None</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the scroll position changed, otherwise False.</p>","title":"<code>scroll_relative(x=None, y=None, *, animate=True, speed=None, duration=None)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_right","text":"<p>Scroll on cell right.</p> <p>Parameters:</p>    Name Type Description Default     <code>animate</code>  <code>bool</code>  <p>Animate scroll. Defaults to True.</p>  <code>True</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if any scrolling was done.</p>","title":"<code>scroll_right(*, animate=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_to","text":"<p>Scroll to a given (absolute) coordinate, optionally animating.</p> <p>Parameters:</p>    Name Type Description Default     <code>x</code>  <code>int | None</code>  <p>X coordinate (column) to scroll to, or None for no change. Defaults to None.</p>  <code>None</code>    <code>y</code>  <code>int | None</code>  <p>Y coordinate (row) to scroll to, or None for no change. Defaults to None.</p>  <code>None</code>    <code>animate</code>  <code>bool</code>  <p>Animate to new scroll position. Defaults to True.</p>  <code>True</code>    <code>speed</code>  <code>float | None</code>  <p>Speed of scroll if animate is True. Or None to use duration.</p>  <code>None</code>    <code>duration</code>  <code>float | None</code>  <p>Duration of animation, if animate is True and speed is False.</p>  <code>None</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if the scroll position changed, otherwise False.</p>","title":"<code>scroll_to(x=None, y=None, *, animate=True, speed=None, duration=None)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_to_region","text":"<p>Scrolls a given region in to view, if required.</p> <p>This method will scroll the least distance required to move <code>region</code> fully within the scrollable area.</p> <p>Parameters:</p>    Name Type Description Default     <code>region</code>  <code>Region</code>  <p>A region that should be visible.</p>  required    <code>spacing</code>  <code>Spacing | None</code>  <p>Optional spacing around the region. Defaults to None.</p>  <code>None</code>    <code>animate</code>  <code>bool</code>  <p>Enable animation. Defaults to True.</p>  <code>True</code>    <code>spacing</code>  <code>Spacing</code>  <p>Space to subtract from the window region.</p>  <code>None</code>     <p>Returns:</p>    Name Type Description     <code>Offset</code>  <code>Offset</code>  <p>The distance that was scrolled.</p>","title":"<code>scroll_to_region(region, *, spacing=None, animate=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_to_widget","text":"<p>Scroll scrolling to bring a widget in to view.</p> <p>Parameters:</p>    Name Type Description Default     <code>widget</code>  <code>Widget</code>  <p>A descendant widget.</p>  required    <code>animate</code>  <code>bool</code>  <p>True to animate, or False to jump. Defaults to True.</p>  <code>True</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if any scrolling has occurred in any descendant, otherwise False.</p>","title":"<code>scroll_to_widget(widget, *, animate=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_up","text":"<p>Scroll one line up.</p> <p>Parameters:</p>    Name Type Description Default     <code>animate</code>  <code>bool</code>  <p>Animate scroll. Defaults to True.</p>  <code>True</code>     <p>Returns:</p>    Name Type Description     <code>bool</code>  <code>bool</code>  <p>True if any scrolling was done.</p>","title":"<code>scroll_up(*, animate=True)</code>"},{"location":"reference/widget/#textual.widget.Widget.scroll_visible","text":"<p>Scroll the container to make this widget visible.</p>","title":"<code>scroll_visible()</code>"},{"location":"reference/widget/#textual.widget.Widget.scrollbar_corner","text":"<p>Return the ScrollBarCorner - the cells that appear between the horizontal and vertical scrollbars (only when both are visible).</p>","title":"<code>scrollbar_corner()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.scrollbar_gutter","text":"<p>Spacing required to fit scrollbar(s).</p> <p>Returns:</p>    Name Type Description     <code>Spacing</code>  <code>Spacing</code>  <p>Scrollbar gutter spacing.</p>","title":"<code>scrollbar_gutter()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.scrollbar_size_horizontal","text":"<p>Get the height used by the horizontal scrollbar.</p> <p>Returns:</p>    Name Type Description     <code>int</code>  <code>int</code>  <p>Number of rows in the horizontal scrollbar.</p>","title":"<code>scrollbar_size_horizontal()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.scrollbar_size_vertical","text":"<p>Get the width used by the vertical scrollbar.</p> <p>Returns:</p>    Name Type Description     <code>int</code>  <code>int</code>  <p>Number of columns in the vertical scrollbar.</p>","title":"<code>scrollbar_size_vertical()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.scrollbars_enabled","text":"<p>A tuple of booleans that indicate if scrollbars are enabled.</p> <p>Returns:</p>    Type Description      <code>tuple[bool, bool]</code>  <p>tuple[bool, bool]: A tuple of (, )","title":"<code>scrollbars_enabled()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.siblings","text":"<p>Get the widget's siblings (self is removed from the return list).</p> <p>Returns:</p>    Type Description      <code>list[Widget]</code>  <p>list[Widget]: A list of siblings.</p>","title":"<code>siblings()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.size","text":"<p>The size of the content area.</p> <p>Returns:</p>    Name Type Description     <code>Size</code>  <code>Size</code>  <p>Content area size.</p>","title":"<code>size()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.vertical_scrollbar","text":"<p>Get a vertical scrollbar (create if necessary).</p> <p>Returns:</p>    Name Type Description     <code>ScrollBar</code>  <code>ScrollBar</code>  <p>ScrollBar Widget.</p>","title":"<code>vertical_scrollbar()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.virtual_region","text":"<p>The widget region relative to it's container. Which may not be visible, depending on scroll offset.</p>","title":"<code>virtual_region()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.virtual_region_with_margin","text":"<p>The widget region relative to its container (including margin), which may not be visible, depending on the scroll offset.</p> <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>The virtual region of the Widget, inclusive of its margin.</p>","title":"<code>virtual_region_with_margin()</code>  <code>property</code>"},{"location":"reference/widget/#textual.widget.Widget.watch_has_focus","text":"<p>Update from CSS if has focus state changes.</p>","title":"<code>watch_has_focus(value)</code>"},{"location":"reference/widget/#textual.widget.Widget.watch_mouse_over","text":"<p>Update from CSS if mouse over state changes.</p>","title":"<code>watch_mouse_over(value)</code>"},{"location":"reference/widget/#textual.widget.Widget.watch_show_horizontal_scrollbar","text":"<p>Watch function for show_horizontal_scrollbar attribute.</p> <p>Parameters:</p>    Name Type Description Default     <code>value</code>  <code>bool</code>  <p>Show horizontal scrollbar flag.</p>  required","title":"<code>watch_show_horizontal_scrollbar(value)</code>"},{"location":"reference/widget/#textual.widget.Widget.watch_show_vertical_scrollbar","text":"<p>Watch function for show_vertical_scrollbar attribute.</p> <p>Parameters:</p>    Name Type Description Default     <code>value</code>  <code>bool</code>  <p>Show vertical scrollbar flag.</p>  required","title":"<code>watch_show_vertical_scrollbar(value)</code>"},{"location":"reference/widget/#textual.widget.Widget.window_region","text":"<p>The region within the scrollable area that is currently visible.</p> <p>Returns:</p>    Name Type Description     <code>Region</code>  <code>Region</code>  <p>New region.</p>","title":"<code>window_region()</code>  <code>property</code>"},{"location":"styles/","text":"<p>A reference to Widget styles.  </p>","title":"Styles"},{"location":"styles/background/","text":"<p>The <code>background</code> rule sets the background color of the widget.</p>","title":"Background"},{"location":"styles/background/#syntax","text":"<pre><code>background: &lt;COLOR&gt; [&lt;PERCENTAGE&gt;];\n</code></pre>","title":"Syntax"},{"location":"styles/background/#example","text":"<p>This example creates three widgets and applies a different background to each.</p> background.pybackground.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\n\nclass BackgroundApp(App):\n    def compose(self):\n        yield Static(\"Widget 1\", id=\"static1\")\n        yield Static(\"Widget 2\", id=\"static2\")\n        yield Static(\"Widget 3\", id=\"static3\")\n\n\napp = BackgroundApp(css_path=\"background.css\")\n</code></pre>   <pre><code>Static {\n    height: 1fr;\n    content-align: center middle;\n    color: white;\n}    \n#static1 {\n    background: red;\n}\n#static2 {\n    background: rgb(0, 255, 0);\n}\n#static3 {\n    background: hsl(240, 100%, 50%);\n}\n</code></pre>   <p>                                                                             BackgroundApp            Widget\u00a01        Widget\u00a02        Widget\u00a03        </p>","title":"Example"},{"location":"styles/background/#css","text":"<pre><code>/* Blue background */\nbackground: blue;\n\n/* 20% red backround */\nbackground: red 20%;\n\n/* RGB color */\nbackground: rgb(100,120,200);\n</code></pre>","title":"CSS"},{"location":"styles/background/#python","text":"<p>You can use the same syntax as CSS, or explicitly set a <code>Color</code> object for finer-grained control.</p> <pre><code># Set blue background\nwidget.styles.background = \"blue\"\n\nfrom textual.color import Color\n# Set with a color object\nwidget.styles.background = Color.parse(\"pink\")\nwidget.styles.background = Color(120, 60, 100)\n</code></pre>","title":"Python"},{"location":"styles/border/","text":"<p>The <code>border</code> rule enables the drawing of a box around a widget. A border is set with a border value (see below) followed by a color.</p> <p>Borders may also be set individually for the four edges of a widget with the <code>border-top</code>, <code>border-right</code>, <code>border-bottom</code> and <code>border-left</code> rules.</p>","title":"Border"},{"location":"styles/border/#syntax","text":"<pre><code>border: [&lt;COLOR&gt;] [&lt;BORDER VALUE&gt;];\nborder-top: [&lt;COLOR&gt;] [&lt;BORDER VALUE&gt;];\nborder-right: [&lt;COLOR&gt;] [&lt;BORDER VALUE&gt;];\nborder-bottom: [&lt;COLOR&gt;] [&lt;BORDER VALUE&gt;];\nborder-left: [&lt;COLOR&gt;] [&lt;BORDER VALUE&gt;];\n</code></pre>","title":"Syntax"},{"location":"styles/border/#values","text":"Border value Description     <code>\"ascii\"</code> A border with plus, hyphen, and vertical bar   <code>\"blank\"</code> A blank border (reserves space for a border)   <code>\"dashed\"</code> Dashed line border   <code>\"double\"</code> Double lined border   <code>\"heavy\"</code> Heavy border   <code>\"hidden\"</code> Alias for \"none\"   <code>\"hkey\"</code> Horizontal key-line border   <code>\"inner\"</code> Thick solid border   <code>\"none\"</code> Disabled border   <code>\"outer\"</code> Think solid border with additional space around content   <code>\"round\"</code> Rounded corners   <code>\"solid\"</code> Solid border   <code>\"tall\"</code> Solid border with extras space top and bottom   <code>\"vkey\"</code> Vertical key-line border   <code>\"wide\"</code> Solid border with additional space left and right    <p>For example, <code>heavy white</code> would display a heavy white line around a widget.</p>","title":"Values"},{"location":"styles/border/#border-command","text":"<p>The <code>textual</code> CLI has a subcommand which will let you explore the various border types:</p> <pre><code>textual borders\n</code></pre>","title":"Border command"},{"location":"styles/border/#example","text":"<p>This examples shows three widgets with different border styles.</p> border.pyborder.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\n\nclass BorderApp(App):\n    def compose(self):\n        yield Static(\"My border is solid red\", id=\"static1\")\n        yield Static(\"My border is dashed green\", id=\"static2\")\n        yield Static(\"My border is tall blue\", id=\"static3\")\n\n\napp = BorderApp(css_path=\"border.css\")\n</code></pre>   <pre><code>Screen {\n    background: white;\n}\nScreen &gt; Static {\n    height: 5;\n    content-align: center middle;\n    color: white;\n    margin: 1;\n    box-sizing: border-box;\n}    \n#static1 {\n    background: red 20%;\n    color: red;\n    border: solid red;\n}\n#static2 {\n    background: green 20%;\n    color: green;\n    border: dashed green;\n}\n#static3 {\n    background: blue 20%;\n    color: blue;\n    border: tall blue;\n}\n</code></pre>   <p>                                                                             BorderApp          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502 \u2502My\u00a0border\u00a0is\u00a0solid\u00a0red\u2502 \u2502\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u250f\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u2513 \u254f\u254f \u254fMy\u00a0border\u00a0is\u00a0dashed\u00a0green\u254f \u254f\u254f \u2517\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u254d\u251b  \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u258e \u258aMy\u00a0border\u00a0is\u00a0tall\u00a0blue\u258e \u258a\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e          </p>","title":"Example"},{"location":"styles/border/#css","text":"<pre><code>/* Set a heavy white border */\nborder: heavy white;\n\n/* set a red border on the left */\nborder-left: outer red;\n</code></pre>","title":"CSS"},{"location":"styles/border/#python","text":"<pre><code># Set a heavy white border\nwidget.border = (\"heavy\", \"white\")\n\n# Set a red border on the left\nwidget.border_left = (\"outer\", \"red\")\n</code></pre>","title":"Python"},{"location":"styles/box_sizing/","text":"<p>The <code>box-sizing</code> property determines how the width and height of a widget are calculated.</p>","title":"Box-sizing"},{"location":"styles/box_sizing/#syntax","text":"<pre><code>box-sizing: [border-box|content-box];\n</code></pre>","title":"Syntax"},{"location":"styles/box_sizing/#values","text":"Values Description     <code>border-box</code> (default) Padding and border are included in the width and height. If you add padding and/or border the widget will not change in size, but you will have less space for content.   <code>content-box</code> Padding and border will increase the size of the widget, leaving the content area unaffected.","title":"Values"},{"location":"styles/box_sizing/#example","text":"<p>Both widgets in this example have the same height (5). The top widget has <code>box-sizing: border-box</code> which means that padding and border reduces the space for content. The bottom widget has <code>box-sizing: content-box</code> which increases the size of the widget to compensate for padding and border.</p> box_sizing.pybox_sizing.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\n\nclass BoxSizingApp(App):\n    def compose(self):\n        yield Static(\"I'm using border-box!\", id=\"static1\")\n        yield Static(\"I'm using content-box!\", id=\"static2\")\n\n\napp = BoxSizingApp(css_path=\"box_sizing.css\")\n</code></pre>   <pre><code>Screen {\n    background: white;\n    color: black;\n}\nApp Static {\n    background: blue 20%;\n    height: 5;\n    margin: 2;\n    padding: 1;\n    border: wide black;\n}\n#static1 {       \n    box-sizing: border-box;\n}\n#static2 {        \n    box-sizing: content-box;\n}\n</code></pre>   <p>                                                                             BoxSizingApp           \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258e\u258b \u258eI'm\u00a0using\u00a0border-box!\u258b \u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594   \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258e\u258b \u258eI'm\u00a0using\u00a0content-box!\u258b \u258e\u258b \u258e\u258b \u258e\u258b \u258e\u258b \u258e\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594          </p>","title":"Example"},{"location":"styles/box_sizing/#css","text":"<pre><code>/* Set box sizing to border-box (default) */\nbox-sizing: border-box;\n\n/* Set box sizing to content-box */\nbox-sizing: content-box;\n</code></pre>","title":"CSS"},{"location":"styles/box_sizing/#python","text":"<pre><code># Set box sizing to border-box (default)\nwidget.box_sizing = \"border-box\"\n\n# Set box sizing to content-box\nwidget.box_sizing = \"content-box\"\n</code></pre>","title":"Python"},{"location":"styles/color/","text":"<p>The <code>color</code> rule sets the text color of a Widget.</p>","title":"Color"},{"location":"styles/color/#syntax","text":"<pre><code>color: &lt;COLOR&gt; [&lt;PERCENTAGE&gt;];\n</code></pre>","title":"Syntax"},{"location":"styles/color/#example","text":"<p>This example sets a different text color to three different widgets.</p> color.pycolor.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\n\nclass ColorApp(App):\n    def compose(self):\n        yield Static(\"I'm red!\", id=\"static1\")\n        yield Static(\"I'm rgb(0, 255, 0)!\", id=\"static2\")\n        yield Static(\"I'm hsl(240, 100%, 50%)!\", id=\"static3\")\n\n\napp = ColorApp(css_path=\"color.css\")\n</code></pre>   <pre><code>Static {\n    height:1fr;\n    content-align: center middle;\n}    \n#static1 {\n    color: red;\n}\n#static2 {\n    color: rgb(0, 255, 0);\n}\n#static3 {\n    color: hsl(240, 100%, 50%)\n}\n</code></pre>   <p>                                                                             ColorApp            I'm\u00a0red!        I'm\u00a0rgb(0,\u00a0255,\u00a00)!        I'm\u00a0hsl(240,\u00a0100%,\u00a050%)!        </p>","title":"Example"},{"location":"styles/color/#css","text":"<pre><code>/* Blue text */\ncolor: blue;\n\n/* 20% red text */\ncolor: red 20%;\n\n/* RGB color */\ncolor: rgb(100,120,200);\n</code></pre>","title":"CSS"},{"location":"styles/color/#python","text":"<p>You can use the same syntax as CSS, or explicitly set a <code>Color</code> object.</p> <pre><code># Set blue text\nwidget.styles.color = \"blue\"\n\nfrom textual.color import Color\n# Set with a color object\nwidget.styles.color = Color.parse(\"pink\")\n</code></pre>","title":"Python"},{"location":"styles/content_align/","text":"<p>The <code>content-align</code> property allows you to align content inside a widget.</p> <p>You can specify the alignment of content on both the horizontal and vertical axes.</p>","title":"Content-align"},{"location":"styles/content_align/#syntax","text":"<pre><code>content-align: &lt;HORIZONTAL&gt; &lt;VERTICAL&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/content_align/#values","text":"","title":"Values"},{"location":"styles/content_align/#horizontal","text":"Value Description     <code>left</code> (default) Align content on the left of the horizontal axis   <code>center</code> Align content in the center of the horizontal axis   <code>right</code> Align content on the right of the horizontal axis","title":"<code>HORIZONTAL</code>"},{"location":"styles/content_align/#vertical","text":"Value Description     <code>top</code> (default) Align content at the top of the vertical axis   <code>middle</code> Align content in the middle of the vertical axis   <code>bottom</code> Align content at the bottom of the vertical axis","title":"<code>VERTICAL</code>"},{"location":"styles/content_align/#example","text":"content_align.pycontent_align.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\n\nclass ContentAlignApp(App):\n    def compose(self):\n        yield Static(\"With [i]content-align[/] you can...\", id=\"box1\")\n        yield Static(\"...[b]Easily align content[/]...\", id=\"box2\")\n        yield Static(\"...Horizontally [i]and[/] vertically!\", id=\"box3\")\n\n\napp = ContentAlignApp(css_path=\"content_align.css\")\n</code></pre>   <pre><code>#box1 {\n    content-align: left top;\n    background: red;\n}\n\n#box2 {\n    content-align: center middle;\n    background: green;\n}\n\n#box3 {\n    content-align: right bottom;\n    background: blue;\n}\n\nStatic {\n    height: 1fr;\n    padding: 1;\n    color: white;\n}\n</code></pre>   <p>                                                                             ContentAlignApp          With\u00a0content-align\u00a0you\u00a0can...          ...Easily\u00a0align\u00a0content...           ...Horizontally\u00a0and\u00a0vertically!     </p>","title":"Example"},{"location":"styles/content_align/#css","text":"<pre><code>/* Align content in the very center of a widget */\ncontent-align: center middle;\n/* Align content at the top right of a widget */\ncontent-align: right top;\n</code></pre>","title":"CSS"},{"location":"styles/content_align/#python","text":"<pre><code># Align content in the very center of a widget\nwidget.styles.content_align = (\"center\", \"middle\")\n# Align content at the top right of a widget\nwidget.styles.content_align = (\"right\", \"top\")\n</code></pre>","title":"Python"},{"location":"styles/display/","text":"<p>The <code>display</code> property defines whether a widget is displayed or not.</p>","title":"Display"},{"location":"styles/display/#syntax","text":"<pre><code>display: [none|block];\n</code></pre>","title":"Syntax"},{"location":"styles/display/#values","text":"Value Description     <code>block</code> (default) Display the widget as normal   <code>none</code> The widget not be displayed, and space will no longer be reserved for it.","title":"Values"},{"location":"styles/display/#example","text":"<p>Note that the second widget is hidden by adding the \"hidden\" class which sets the display style to None.</p> display.pydisplay.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\n\nclass DisplayApp(App):\n    def compose(self):\n        yield Static(\"Widget 1\")\n        yield Static(\"Widget 2\", classes=\"remove\")\n        yield Static(\"Widget 3\")\n\n\napp = DisplayApp(css_path=\"display.css\")\n</code></pre>   <pre><code>Screen {\n    background: green;\n}\nStatic {             \n    height: 5;        \n    background: white;        \n    color: blue;   \n    border: heavy blue;     \n}\nStatic.remove {\n    display: none;\n}\n</code></pre>   <p>                                                                             DisplayApp         \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Widget\u00a01\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Widget\u00a03\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b                  </p>","title":"Example"},{"location":"styles/display/#css","text":"<pre><code>/* Widget is on screen */\ndisplay: block;\n\n/* Widget is not on the screen */\ndisplay: none;\n</code></pre>","title":"CSS"},{"location":"styles/display/#python","text":"<pre><code># Hide the widget\nself.styles.display = \"none\"\n\n# Show the widget again\nself.styles.display = \"block\"\n</code></pre> <p>There is also a shortcut to show / hide a widget. The <code>display</code> property on <code>Widget</code> may be set to <code>True</code> or <code>False</code> to show or hide the widget.</p> <pre><code># Hide the widget\nwidget.display = False\n\n# Show the widget\nwidget.display = True\n</code></pre>","title":"Python"},{"location":"styles/height/","text":"<p>The <code>height</code> rule sets a widget's height. By default, it sets the height of the content area, but if <code>box-sizing</code> is set to <code>border-box</code> it sets the height of the border area.</p>","title":"Height"},{"location":"styles/height/#syntax","text":"<pre><code>height: &lt;SCALAR&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/height/#example","text":"<p>This examples creates a widget with a height of 50% of the screen.</p> height.pyheight.cssOutput   <pre><code>from textual.app import App\nfrom textual.widget import Widget\n\n\nclass HeightApp(App):\n    def compose(self):\n        yield Widget()\n\n\napp = HeightApp(css_path=\"height.css\")\n</code></pre>   <pre><code>Screen &gt; Widget {     \n    background: green;\n    height: 50%;\n    color: white;\n}\n</code></pre>   <p>                                                                             HeightApp         Widget                           </p>","title":"Example"},{"location":"styles/height/#css","text":"<pre><code>/* Explicit cell height */\nheight: 10;\n\n/* Percentage height */\nheight: 50%;\n\n/* Automatic height */\nwidth: auto\n</code></pre>","title":"CSS"},{"location":"styles/height/#python","text":"<pre><code>self.styles.height = 10\nself.styles.height = \"50%\nself.styles.height = \"auto\"\n</code></pre>","title":"Python"},{"location":"styles/layout/","text":"<p>The <code>layout</code> property defines how a widget arranges its children.</p> <p>See layout guide for more information.</p>","title":"Layout"},{"location":"styles/layout/#syntax","text":"<pre><code>layout: [center|grid|horizontal|vertical];\n</code></pre>","title":"Syntax"},{"location":"styles/layout/#values","text":"Value Description     <code>center</code> A single child widget will be placed in the center.   <code>grid</code> Child widgets will be arranged in a grid.   <code>horizontal</code> Child widgets will be arranged along the horizontal axis, from left to right.   <code>vertical</code> (default) Child widgets will be arranged along the vertical axis, from top to bottom.","title":"Values"},{"location":"styles/layout/#example","text":"<p>Note how the <code>layout</code> property affects the arrangement of widgets in the example below.</p> layout.pylayout.cssOutput   <pre><code>from textual import layout\nfrom textual.app import App\nfrom textual.widget import Widget\nfrom textual.widgets import Static\n\n\nclass LayoutApp(App):\n    def compose(self):\n        yield layout.Container(\n            Static(\"Layout\"),\n            Static(\"Is\"),\n            Static(\"Vertical\"),\n            id=\"vertical-layout\",\n        )\n        yield layout.Container(\n            Static(\"Layout\"),\n            Static(\"Is\"),\n            Static(\"Horizontal\"),\n            id=\"horizontal-layout\",\n        )\n        yield layout.Container(\n            Static(\"Center\"),\n            id=\"center-layout\",\n        )\n\n\napp = LayoutApp(css_path=\"layout.css\")\n</code></pre>   <pre><code>#vertical-layout {\n    layout: vertical;\n    background: darkmagenta;\n    height: auto;\n}\n\n#horizontal-layout {\n    layout: horizontal;\n    background: darkcyan;\n    height: auto;\n}\n\n#center-layout {\n    layout: center;\n    background: darkslateblue;\n    height: 7;\n}\n\nStatic {\n    margin: 1;\n    width: 12;\n    color: black;\n    background: yellowgreen;\n}\n</code></pre>   <p>                                                                             LayoutApp          Layout  Is  Vertical   LayoutIsHorizontal     Center              </p>","title":"Example"},{"location":"styles/layout/#css","text":"<pre><code>layout: horizontal;\n</code></pre>","title":"CSS"},{"location":"styles/layout/#python","text":"<pre><code>widget.layout = \"horizontal\"\n</code></pre>","title":"Python"},{"location":"styles/margin/","text":"<p>The <code>margin</code> rule adds space around the entire widget. Margin may be specified with 1, 2 or 4 values.</p>    Example Description     <code>margin: 1;</code> A single value sets a margin of 1 around all 4 edges   <code>margin: 1 2;</code> Two values sets the margin for the top/bottom and left/right edges   <code>margin: 1 2 3 4;</code> Four values sets top, right, bottom, and left margins independently    <p>Margin may also be set individually by setting <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, or <code>margin-left</code> to a single value.</p>","title":"Margin"},{"location":"styles/margin/#syntax","text":"<pre><code>margin: &lt;INTEGER&gt;;\nmargin: &lt;INTEGER&gt; &lt;INTEGER&gt;;\nmargin: &lt;INTEGER&gt; &lt;INTEGER&gt; &lt;INTEGER&gt; &lt;INTEGER&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/margin/#example","text":"<p>In this example we add a large margin to some static text.</p> margin.pymargin.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass MarginApp(App):\n    def compose(self):\n        yield Static(TEXT)\n\n\napp = MarginApp(css_path=\"margin.css\")\n</code></pre>   <pre><code>Screen {\n    background: white;\n    color: black;\n}\n\nStatic {\n    margin: 4 8;  \n    background: blue 20%;  \n    border: blue wide;\n}    \n</code></pre>   <p>                                                                             MarginApp             \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258eI\u00a0must\u00a0not\u00a0fear.\u258b \u258eFear\u00a0is\u00a0the\u00a0mind-killer.\u258b \u258eFear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u258b \u258eI\u00a0will\u00a0face\u00a0my\u00a0fear.\u258b \u258eI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u258b \u258eAnd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0\u258b \u258eits\u00a0path.\u258b \u258eWhere\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0\u258b \u258eremain.\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594             </p>","title":"Example"},{"location":"styles/margin/#css","text":"<pre><code>/* Set margin of 2 on the top and bottom edges, and 4 on the left and right */\nmargin: 2 4;\n</code></pre>","title":"CSS"},{"location":"styles/margin/#python","text":"<pre><code># In Python you can set the margin as a tuple of integers\nwidget.styles.margin = (2, 3)\n</code></pre>","title":"Python"},{"location":"styles/max_height/","text":"<p>The <code>max-height</code> rule sets a maximum height for a widget.</p>","title":"Max-height"},{"location":"styles/max_height/#syntax","text":"<pre><code>max-height: &lt;SCALAR&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/max_height/#css","text":"<pre><code>/* Set a maximum height of 10 rows */\nmax-height: 10;\n\n/* Set a maximum height of 25% of the screen height */\nmax-height: 25vh;\n</code></pre>","title":"CSS"},{"location":"styles/max_height/#python","text":"<pre><code># Set the maximum width to 10 rows\nwidget.styles.max_height = 10\n\n# Set the maximum width to 25% of the screen width\nwidget.styles.max_height = \"25vw\"\n</code></pre>","title":"Python"},{"location":"styles/max_width/","text":"<p>The <code>max-width</code> rule sets a maximum width for a widget.</p>","title":"Max-width"},{"location":"styles/max_width/#syntax","text":"<pre><code>max-width: &lt;SCALAR&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/max_width/#css","text":"<pre><code>/* Set a maximum width of 10 cells */\nmax-width: 10;\n\n/* Set a maximum width of 25% of the screen width */\nmax-width: 25vh;\n</code></pre>","title":"CSS"},{"location":"styles/max_width/#python","text":"<pre><code># Set the maximum width to 10 cells\nwidget.styles.max_width = 10\n\n# Set the maximum width to 25% of the screen width\nwidget.styles.max_width = \"25vw\"\n</code></pre>","title":"Python"},{"location":"styles/min_height/","text":"<p>The <code>min-height</code> rule sets a minimum height for a widget.</p>","title":"Min-height"},{"location":"styles/min_height/#syntax","text":"<pre><code>min-height: &lt;SCALAR&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/min_height/#css","text":"<pre><code>/* Set a minimum height of 10 rows */\nmin-height: 10;\n\n/* Set a minimum height of 25% of the screen height */\nmin-height: 25vh;\n</code></pre>","title":"CSS"},{"location":"styles/min_height/#python","text":"<pre><code># Set the minimum height to 10 rows\nself.styles.min_height = 10\n\n# Set the minimum height to 25% of the screen height\nself.styles.min_height = \"25vh\"\n</code></pre>","title":"Python"},{"location":"styles/min_width/","text":"<p>The <code>min-width</code> rules sets a minimum width for a widget.</p>","title":"Min-width"},{"location":"styles/min_width/#syntax","text":"<pre><code>min-width: &lt;SCALAR&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/min_width/#css","text":"<pre><code>/* Set a minimum width of 10 cells */\nmin-width: 10;\n\n/* Set a minimum width of 25% of the screen width */\nmin-width: 25vh;\n</code></pre>","title":"CSS"},{"location":"styles/min_width/#python","text":"<pre><code># Set the minimum width to 10 cells\nwidget.styles.min_width = 10\n\n# Set the minimum width to 25% of the screen height\nwidget.styles.min_width = \"25vh\"\n</code></pre>","title":"Python"},{"location":"styles/offset/","text":"<p>The <code>offset</code> rule adds an offset to the widget's position. The offset is given as two values.</p> <p>Coordinates may be specified individually with <code>offset-x</code> and <code>offset-y</code>.</p>","title":"Offset"},{"location":"styles/offset/#syntax","text":"<pre><code>offset: &lt;SCALAR&gt; &lt;SCALAR&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/offset/#example","text":"<p>In this example, we have 3 widgets with differing offsets.</p> offset.pyoffset.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\n\nclass OffsetApp(App):\n    def compose(self):\n        yield Static(\"Paul (offset 8 2)\", classes=\"paul\")\n        yield Static(\"Duncan (offset 4 10)\", classes=\"duncan\")\n        yield Static(\"Chani (offset 0 5)\", classes=\"chani\")\n\n\napp = OffsetApp(css_path=\"offset.css\")\n</code></pre>   <pre><code>Screen {\n    background: white;\n    color: black;\n    layout: horizontal;\n}\nStatic {             \n    width: 20;\n    height: 10;\n    content-align: center middle; \n}\n\n.paul {\n    offset: 8 2;\n    background: red 20%;\n    border: outer red;\n    color: red;\n}\n\n.duncan {\n    offset: 4 10;\n    background: green 20%;\n    border: outer green;\n    color: green;\n}\n\n.chani {\n    offset: 0 5;\n    background: blue 20%;\n    border: outer blue;\n    color: blue;\n}\n</code></pre>   <p>                                                                             OffsetApp           \u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c \u258c\u2590 \u258c\u2590 \u258c\u2590\u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c \u258cPaul\u00a0(offset\u00a08\u00a02)\u2590\u258c\u2590 \u258c\u2590\u258c\u2590 \u258c\u2590\u258c\u2590 \u258c\u2590\u258cChani\u00a0(offset\u00a00\u00a05)\u2590 \u258c\u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u258c\u2590 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u258c\u258c\u2590 \u258c\u258c\u2590 \u258c\u258c\u2590 \u258cDuncan\u00a0(offset\u00a0\u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f \u258c10)\u2590 \u258c\u2590 \u258c\u2590 \u258c\u2590 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f        </p>","title":"Example"},{"location":"styles/offset/#css","text":"<pre><code>/* Move the widget 2 cells in the x direction, and 4 in the y direction. */\noffset: 2 4;\n</code></pre>","title":"CSS"},{"location":"styles/offset/#python","text":"<pre><code># Move the widget 2 cells in the x direction, and 4 in the y direction.\nwidget.styles.offset = (2, 4)\n</code></pre>","title":"Python"},{"location":"styles/opacity/","text":"<p>The <code>opacity</code> property can be used to make a widget partially or fully transparent.</p>","title":"Opacity"},{"location":"styles/opacity/#syntax","text":"<pre><code>opacity: &lt;FRACTIONAL&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/opacity/#values","text":"<p>As a fractional property, <code>opacity</code> can be set to either a float (between 0 and 1), or a percentage, e.g. <code>45%</code>. Float values will be clamped between 0 and 1. Percentage values will be clamped between 0% and 100%.</p>","title":"Values"},{"location":"styles/opacity/#example","text":"<p>This example shows, from top to bottom, increasing opacity values.</p> opacity.pyopacity.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\n\nclass OpacityApp(App):\n    def compose(self):\n        yield Static(\"opacity: 0%\", id=\"zero-opacity\")\n        yield Static(\"opacity: 25%\", id=\"quarter-opacity\")\n        yield Static(\"opacity: 50%\", id=\"half-opacity\")\n        yield Static(\"opacity: 75%\", id=\"three-quarter-opacity\")\n        yield Static(\"opacity: 100%\", id=\"full-opacity\")\n\n\napp = OpacityApp(css_path=\"opacity.css\")\n</code></pre>   <pre><code>#zero-opacity {\n    opacity: 0%;\n}\n\n#quarter-opacity {\n    opacity: 25%;\n}\n\n#half-opacity {\n    opacity: 50%;\n}\n\n#three-quarter-opacity {\n    opacity: 75%;\n}\n\n#full-opacity {\n    opacity: 100%;\n}\n\nScreen {\n    background: antiquewhite;\n}\n\nStatic {\n    height: 1fr;\n    border: outer dodgerblue;\n    background: lightseagreen;\n    content-align: center middle;\n    text-style: bold;\n}\n</code></pre>   <p>                                                                             OpacityApp         \u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c \u258copacity:\u00a00%\u2590 \u258c\u2590 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f \u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c \u258c\u2590 \u258copacity:\u00a025%\u2590 \u258c\u2590 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f \u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c \u258c\u2590 \u258copacity:\u00a050%\u2590 \u258c\u2590 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f \u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c \u258c\u2590 \u258copacity:\u00a075%\u2590 \u258c\u2590 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f \u259b\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u259c \u258c\u2590 \u258copacity:\u00a0100%\u2590 \u258c\u2590 \u2599\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u259f    </p>","title":"Example"},{"location":"styles/opacity/#css","text":"<pre><code>/* Fade the widget to 50% against its parent's background */\nWidget {\n    opacity: 50%;\n}\n</code></pre>","title":"CSS"},{"location":"styles/opacity/#python","text":"<pre><code># Fade the widget to 50% against its parent's background\nwidget.styles.opacity = \"50%\"\n</code></pre>","title":"Python"},{"location":"styles/outline/","text":"<p>The <code>outline</code> rule enables the drawing of a box around a widget. Similar to <code>border</code>, but unlike border, outline will draw over the content area. This rule can be useful for emphasis if you want to display an outline for a brief time to draw the user's attention to it.</p> <p>An outline is set with a border value (see table below) followed by a color.</p> <p>Outlines may also be set individually with the <code>outline-top</code>, <code>outline-right</code>, <code>outline-bottom</code> and <code>outline-left</code> rules.</p>","title":"Outline"},{"location":"styles/outline/#syntax","text":"<pre><code>outline: [&lt;COLOR&gt;] [&lt;BORDER VALUE&gt;];\noutline-top: [&lt;COLOR&gt;] [&lt;BORDER VALUE&gt;];\noutline-right: [&lt;COLOR&gt;] [&lt;BORDER VALUE&gt;];\noutline-bottom: [&lt;COLOR&gt;] [&lt;BORDER VALUE&gt;];\noutline-left: [&lt;COLOR&gt;] [&lt;BORDER VALUE&gt;];\n</code></pre>","title":"Syntax"},{"location":"styles/outline/#values","text":"Border value Description     <code>\"ascii\"</code> A border with plus, hyphen, and vertical bar   <code>\"blank\"</code> A blank border (reserves space for a border)   <code>\"dashed\"</code> Dashed line border   <code>\"double\"</code> Double lined border   <code>\"heavy\"</code> Heavy border   <code>\"hidden\"</code> Alias for \"none\"   <code>\"hkey\"</code> Horizontal key-line border   <code>\"inner\"</code> Thick solid border   <code>\"none\"</code> Disabled border   <code>\"outer\"</code> Think solid border with additional space around content   <code>\"round\"</code> Rounded corners   <code>\"solid\"</code> Solid border   <code>\"tall\"</code> Solid border with extras space top and bottom   <code>\"vkey\"</code> Vertical key-line border   <code>\"wide\"</code> Solid border with additional space left and right    <p>For example, <code>heavy white</code> would display a heavy white line around a widget.</p>","title":"Values"},{"location":"styles/outline/#example","text":"<p>This examples shows a widget with an outline. Note how the outline occludes the text area.</p> outline.pyoutline.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass OutlineApp(App):\n    def compose(self):\n        yield Static(TEXT)\n\n\napp = OutlineApp(css_path=\"outline.css\")\n</code></pre>   <pre><code>Screen {\n    background: white;\n    color: black;\n}\nStatic {\n    margin: 4 8;\n    background: green 20%;\n    outline: wide green;\n}\n</code></pre>   <p>                                                                             OutlineApp             \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258eear\u00a0is\u00a0the\u00a0mind-killer.\u258b \u258eear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration.\u258b \u258e\u00a0will\u00a0face\u00a0my\u00a0fear.\u258b \u258e\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u258b \u258end\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u258b \u258eath.\u258b \u258ehere\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0\u258b \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594               </p>","title":"Example"},{"location":"styles/outline/#css","text":"<pre><code>/* Set a heavy white outline */\noutline:heavy white;\n\n/* set a red outline on the left */\noutline-left:outer red;\n</code></pre>","title":"CSS"},{"location":"styles/outline/#python","text":"<pre><code># Set a heavy white outline\nwidget.outline = (\"heavy\", \"white)\n\n                  # Set a red outline on the left\n                  widget.outline_left = (\"outer\", \"red)\n</code></pre>","title":"Python"},{"location":"styles/overflow/","text":"<p>The <code>overflow</code> rule specifies if and when scrollbars should be displayed on the <code>x</code> and <code>y</code> axis. The rule takes two overflow values; one for the horizontal bar (x-axis), followed by the vertical bar (y-axis).</p> <p>The default value for overflow is <code>\"auto auto\"</code> which will show scrollbars automatically for both scrollbars if content doesn't fit within container.</p> <p>Overflow may also be set independently by setting the <code>overflow-x</code> rule for the horizontal bar, and <code>overflow-y</code> for the vertical bar.</p>","title":"Overflow"},{"location":"styles/overflow/#syntax","text":"<pre><code>overflow: [auto|hidden|scroll];\noverflow-x: [auto|hidden|scroll];\noverflow-y: [auto|hidden|scroll];\n</code></pre>","title":"Syntax"},{"location":"styles/overflow/#values","text":"Value Description     <code>auto</code> (default) Automatically show the scrollbar if content doesn't fit   <code>hidden</code> Never show the scrollbar   <code>scroll</code> Always show the scrollbar","title":"Values"},{"location":"styles/overflow/#example","text":"<p>Here we split the screen in to left and right sections, each with three vertically scrolling widgets that do not fit in to the height of the terminal.</p> <p>The left side has <code>overflow-y: auto</code> (the default) and will automatically show a scrollbar. The right side has <code>overflow-y: hidden</code> which will prevent a scrollbar from being shown.</p> overflow.pyoverflow.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\nfrom textual.layout import Horizontal, Vertical\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass OverflowApp(App):\n    def compose(self):\n        yield Horizontal(\n            Vertical(Static(TEXT), Static(TEXT), Static(TEXT), id=\"left\"),\n            Vertical(Static(TEXT), Static(TEXT), Static(TEXT), id=\"right\"),\n        )\n\n\napp = OverflowApp(css_path=\"overflow.css\")\n</code></pre>   <pre><code>Screen {\n    background: $background;\n    color: black;\n}\n\nVertical {\n    width: 1fr;\n}\n\nStatic {\n    margin: 1 2;  \n    background: blue 20%;  \n    border: blue wide;\n    height: auto;\n}    \n\n#right {\n    overflow-y: hidden;\n}\n</code></pre>   <p>                                                                             OverflowApp          \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u258eI\u00a0must\u00a0not\u00a0fear.\u258b\u258eI\u00a0must\u00a0not\u00a0fear.\u258b \u258eFear\u00a0is\u00a0the\u00a0mind-killer.\u258b\u258eFear\u00a0is\u00a0the\u00a0mind-killer.\u258b \u258eFear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0\u258b\u258eFear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0\u258b \u258ebrings\u00a0total\u00a0obliteration.\u258b\u258ebrings\u00a0total\u00a0obliteration.\u258b \u258eI\u00a0will\u00a0face\u00a0my\u00a0fear.\u258b\u258eI\u00a0will\u00a0face\u00a0my\u00a0fear.\u258b \u258eI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u258b\u258eI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0\u258b \u258eand\u00a0through\u00a0me.\u258b\u258eand\u00a0through\u00a0me.\u258b \u258eAnd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0\u258b\u258eAnd\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0\u258b \u258ewill\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0\u258b\u258eturn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0\u258b \u258eits\u00a0path.\u258b\u2581\u2581\u258epath.\u258b \u258eWhere\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0\u258b\u258eWhere\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u258b \u258ewill\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0\u258b\u258ebe\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.\u258b \u258eremain.\u258b\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258eI\u00a0must\u00a0not\u00a0fear.\u258b \u258eI\u00a0must\u00a0not\u00a0fear.\u258b\u258eFear\u00a0is\u00a0the\u00a0mind-killer.\u258b \u258eFear\u00a0is\u00a0the\u00a0mind-killer.\u258b\u258eFear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0\u258b \u258eFear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0\u258b\u258ebrings\u00a0total\u00a0obliteration.\u258b \u258ebrings\u00a0total\u00a0obliteration.\u258b\u258eI\u00a0will\u00a0face\u00a0my\u00a0fear.\u258b \u258eI\u00a0will\u00a0face\u00a0my\u00a0fear.\u258b\u258eI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0\u258b \u258eI\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u258b\u258eand\u00a0through\u00a0me.\u258b    </p>","title":"Example"},{"location":"styles/overflow/#css","text":"<pre><code>/* Automatic scrollbars on both axies (the default) */\noverflow: auto auto;\n\n/* Hide the vertical scrollbar */\noverflow-y: hidden;\n\n/* Always show the horizontal scrollbar */\noverflow-x: scroll;\n</code></pre>","title":"CSS"},{"location":"styles/overflow/#python","text":"<pre><code># Hide the vertical scrollbar\nwidget.styles.overflow_y = \"hidden\"\n\n# Always show the horizontal scrollbar\nwidget.styles.overflow_x = \"scroll\"\n</code></pre>","title":"Python"},{"location":"styles/padding/","text":"<p>The padding rule adds space around the content of a widget. You can specify padding with 1, 2 or 4 numbers.</p>    example      <code>padding: 1;</code> A single value sets a padding of 1 around all 4 edges   <code>padding: 1 2;</code> Two values sets the padding for the top/bottom and left/right edges   <code>padding: 1 2 3 4;</code> Four values sets top, right, bottom, and left padding independently    <p>Padding may also be set individually by setting <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, or <code>padding-left</code> to a single value.</p>","title":"Padding"},{"location":"styles/padding/#syntax","text":"<pre><code>padding: &lt;INTEGER&gt;;\npadding: &lt;INTEGER&gt; &lt;INTEGER&gt;;\npadding: &lt;INTEGER&gt; &lt;INTEGER&gt; &lt;INTEGER&gt; &lt;INTEGER&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/padding/#example","text":"<p>This example adds padding around static text.</p> padding.pypadding.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass PaddingApp(App):\n    def compose(self):\n        yield Static(TEXT)\n\n\napp = PaddingApp(css_path=\"padding.css\")\n</code></pre>   <pre><code>Screen {\n    background: white;\n    color: blue;\n}\n\nStatic {\n    padding: 4 8;  \n    background: blue 20%;  \n}    \n</code></pre>   <p>                                                                             PaddingApp             I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0 path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0 remain.               </p>","title":"Example"},{"location":"styles/padding/#css","text":"<pre><code>/* Set padding of 2 on the top and bottom edges, and 4 on the left and right */\npadding: 2 4;\n</code></pre>","title":"CSS"},{"location":"styles/padding/#python","text":"<pre><code># In Python you can set the padding as a tuple of integers\nwidget.styles.padding = (2, 3)\n</code></pre>","title":"Python"},{"location":"styles/scrollbar/","text":"<p>There are a number of rules to set the colors used in Textual scrollbars. You won't typically need to do this, as the default themes have carefully chosen colors, but you can if you want to.</p>    Rule Color     <code>scrollbar-color</code> Scrollbar \"thumb\" (movable part)   <code>scrollbar-color-hover</code> Scrollbar thumb when the mouse is hovering over it   <code>scrollbar-color-active</code> Scrollbar thumb when it is active (being dragged)   <code>scrollbar-background</code> Scrollbar background   <code>scrollbar-background-hover</code> Scrollbar background when the mouse is hovering over it   <code>scrollbar-background-active</code> Scrollbar background when the thumb is being dragged   <code>scrollbar-corner-color</code> The gap between the horizontal and vertical scrollbars","title":"Scrollbar colors"},{"location":"styles/scrollbar/#syntax","text":"<pre><code>scrollbar-color: &lt;COLOR&gt;;\nscrollbar-color-hover: &lt;COLOR&gt;;\nscrollbar-color-active: &lt;COLOR&gt;;\nscrollbar-background: &lt;COLOR&gt;;\nscrollbar-background-hover: &lt;COLOR&gt;;\nscrollbar-background-active: &lt;COLOR&gt;;\nscrollbar-corner-color: &lt;COLOR&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/scrollbar/#example","text":"<p>In this example we have two panels with different scrollbar colors set for each.</p> scrollbars.pyscrollbars.cssOutput   <pre><code>from textual.app import App\nfrom textual import layout\nfrom textual.widgets import Static\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\n\"\"\"\n\n\nclass ScrollbarApp(App):\n    def compose(self):\n        yield layout.Vertical(Static(TEXT * 5), classes=\"panel1\")\n        yield layout.Vertical(Static(TEXT * 5), classes=\"panel2\")\n\n\napp = ScrollbarApp(css_path=\"scrollbars.css\")\n</code></pre>   <pre><code>Screen {\n    background: #212121;\n    color: white 80%;\n    layout: horizontal;\n}\n\nStatic {\n    padding: 1 2;\n}\n\n.panel1 {\n    width: 1fr;\n    scrollbar-color: green;\n    scrollbar-background: #bbb;\n    padding: 1 2;        \n} \n\n.panel2 {\n    width: 1fr;\n    scrollbar-color: yellow;\n    scrollbar-background: purple;\n    padding: 1 2;\n}   \n</code></pre>   <p>                                                                             ScrollbarApp           I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0 brings\u00a0total\u00a0obliteration.brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0 me\u00a0and\u00a0through\u00a0me.\u2587\u2587me\u00a0and\u00a0through\u00a0me.\u2587\u2587 And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0 will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0seewill\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see its\u00a0path.its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0 will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0 remain.remain. I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0 brings\u00a0total\u00a0obliteration.brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0 me\u00a0and\u00a0through\u00a0me.me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0     </p>","title":"Example"},{"location":"styles/scrollbar/#css","text":"<pre><code>/* Set widget scrollbar color to yellow */\nWidget {\n    scrollbar-color: yellow;\n}\n</code></pre>","title":"CSS"},{"location":"styles/scrollbar/#python","text":"<pre><code># Set the scrollbar color to yellow\nwidget.styles.scrollbar_color = \"yellow\"\n</code></pre>","title":"Python"},{"location":"styles/scrollbar_gutter/","text":"<p>The <code>scrollbar-gutter</code> rule allows authors to reserve space for the vertical scrollbar.</p> <p>Setting the value to <code>stable</code> prevents unwanted layout changes when the scrollbar becomes visible.</p>","title":"Scrollbar-gutter"},{"location":"styles/scrollbar_gutter/#syntax","text":"<pre><code>scrollbar-gutter: [auto|stable];\n</code></pre>","title":"Syntax"},{"location":"styles/scrollbar_gutter/#values","text":"Value Description     <code>auto</code> (default) No space is reserved for the vertical scrollbar.   <code>stable</code> Space is reserved for the vertical scrollbar.","title":"Values"},{"location":"styles/scrollbar_gutter/#example","text":"<p>In the example below, notice the gap reserved for the scrollbar on the right side of the terminal window.</p> scrollbar_gutter.pyscrollbar_gutter.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass ScrollbarGutterApp(App):\n    def compose(self):\n        yield Static(TEXT, id=\"text-box\")\n\n\napp = ScrollbarGutterApp(css_path=\"scrollbar_gutter.css\")\n</code></pre>   <pre><code>Screen {\n    scrollbar-gutter: stable;\n}\n\n#text-box {\n    color: floralwhite;\n    background: darkmagenta;\n}\n</code></pre>   <p>                                                                             ScrollbarGutterApp         I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.                     </p>","title":"Example"},{"location":"styles/scrollbar_gutter/#css","text":"<pre><code>/* Reserve space for vertical scrollbar */\nscrollbar-gutter: stable;\n</code></pre>","title":"CSS"},{"location":"styles/scrollbar_gutter/#python","text":"<pre><code>self.styles.scrollbar_gutter = \"stable\"\n</code></pre>","title":"Python"},{"location":"styles/scrollbar_size/","text":"<p>The <code>scrollbar-size</code> rule changes the size of the scrollbars. It takes 2 integers for horizontal and vertical scrollbar size respectively.</p> <p>The scrollbar dimensions may also be set individually with <code>scrollbar-size-horizontal</code> and <code>scrollbar-size-vertical</code>.</p>","title":"Scrollbar-size"},{"location":"styles/scrollbar_size/#syntax","text":"<pre><code>scrollbar-size: &lt;INTEGER&gt; &lt;INTEGER&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/scrollbar_size/#example","text":"<p>In this example we modify the size of the widgets scrollbar to be much larger than usual.</p> scrollbar_size.pyscrollbar_size.cssOutput   <pre><code>from textual.app import App\nfrom textual import layout\nfrom textual.widgets import Static\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\n\"\"\"\n\n\nclass ScrollbarApp(App):\n    def compose(self):\n        yield layout.Vertical(Static(TEXT * 5), classes=\"panel\")\n\n\napp = ScrollbarApp(css_path=\"scrollbar_size.css\")\n</code></pre>   <pre><code>Screen {\n    background: white;\n    color: blue 80%;\n    layout: horizontal;\n}\n\nStatic {\n    padding: 1 2;\n    width: 200;\n}\n\n.panel {\n    scrollbar-size: 10 4;\n    padding: 1 2;        \n}  \n</code></pre>   <p>                                                                             ScrollbarApp           I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain. I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me.\u2582\u2582\u2582\u2582 And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain. I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings\u00a0total\u00a0obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Only\u00a0I\u00a0will\u00a0remain.     </p>","title":"Example"},{"location":"styles/scrollbar_size/#css","text":"<pre><code>/* Set horizontal scrollbar to 10, and vertical scrollbar to 4 */\nWidget {\n    scrollbar-size: 10 4;\n}\n</code></pre>","title":"CSS"},{"location":"styles/scrollbar_size/#python","text":"<pre><code># Set horizontal scrollbar to 10, and vertical scrollbar to 4\nwidget.styles.horizontal_scrollbar = 10\nwidget.styles.vertical_scrollbar = 10\n</code></pre>","title":"Python"},{"location":"styles/text_align/","text":"<p>The <code>text-align</code> rule aligns text within a widget.</p>","title":"Text-align"},{"location":"styles/text_align/#syntax","text":"<pre><code>text-align: [left|start|center|right|end|justify];\n</code></pre>","title":"Syntax"},{"location":"styles/text_align/#values","text":"Value Description     <code>left</code> Left aligns text in the widget   <code>start</code> Left aligns text in the widget   <code>center</code> Center aligns text in the widget   <code>right</code> Right aligns text in the widget   <code>end</code> Right aligns text in the widget   <code>justify</code> Justifies text in the widget","title":"Values"},{"location":"styles/text_align/#example","text":"<p>This example shows, from top to bottom: <code>left</code>, <code>center</code>, <code>right</code>, and <code>justify</code> text alignments.</p> text_align.pytext_align.cssOutput   <pre><code>from __future__ import annotations\n\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Static\n\nTEXT = (\n    \"I must not fear. Fear is the mind-killer. Fear is the little-death that \"\n    \"brings total obliteration. I will face my fear. I will permit it to pass over \"\n    \"me and through me.\"\n)\n\n\nclass TextAlign(App):\n    def compose(self) -&gt; ComposeResult:\n        left = Static(\"[b]Left aligned[/]\\n\" + TEXT, id=\"one\")\n        yield left\n\n        right = Static(\"[b]Center aligned[/]\\n\" + TEXT, id=\"two\")\n        yield right\n\n        center = Static(\"[b]Right aligned[/]\\n\" + TEXT, id=\"three\")\n        yield center\n\n        full = Static(\"[b]Justified[/]\\n\" + TEXT, id=\"four\")\n        yield full\n\n\napp = TextAlign(css_path=\"text_align.css\")\n</code></pre>   <pre><code>#one {\n  text-align: left;\n  background: lightblue;\n\n}\n\n#two {\n  text-align: center;\n  background: indianred;\n}\n\n#three {\n  text-align: right;\n  background: palegreen;\n}\n\n#four {\n  text-align: justify;\n  background: palevioletred;\n}\n\nStatic {\n  padding: 1;\n}\n</code></pre>   <p>                                                                             TextAlign          Left\u00a0aligned I\u00a0must\u00a0not\u00a0fear.\u00a0Fear\u00a0is\u00a0the\u00a0mind-killer.\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings total\u00a0obliteration.\u00a0I\u00a0will\u00a0face\u00a0my\u00a0fear.\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and\u00a0 through\u00a0me.   Center\u00a0aligned I\u00a0must\u00a0not\u00a0fear.\u00a0Fear\u00a0is\u00a0the\u00a0mind-killer.\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings total\u00a0obliteration.\u00a0I\u00a0will\u00a0face\u00a0my\u00a0fear.\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and through\u00a0me.   Right\u00a0aligned I\u00a0must\u00a0not\u00a0fear.\u00a0Fear\u00a0is\u00a0the\u00a0mind-killer.\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings total\u00a0obliteration.\u00a0I\u00a0will\u00a0face\u00a0my\u00a0fear.\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0and through\u00a0me.   Justified I\u00a0must\u00a0not\u00a0fear.\u00a0Fear\u00a0is\u00a0the\u00a0mind-killer.\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0that\u00a0brings total\u00a0obliteration.\u00a0I\u00a0will\u00a0face\u00a0my\u00a0fear.\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0over\u00a0me\u00a0\u00a0and through\u00a0me.     </p>","title":"Example"},{"location":"styles/text_align/#css","text":"<pre><code>/* Set text in all Widgets to be right aligned */\nWidget {\n    text-align: right;\n}\n</code></pre>","title":"CSS"},{"location":"styles/text_align/#python","text":"<pre><code># Set text in the widget to be right aligned\nwidget.styles.text_align = \"right\"\n</code></pre>","title":"Python"},{"location":"styles/text_opacity/","text":"<p>The <code>text-opacity</code> blends the color of the content of a widget with the color of the background.</p>","title":"Text-opacity"},{"location":"styles/text_opacity/#syntax","text":"<pre><code>text-opacity: &lt;FRACTIONAL&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/text_opacity/#values","text":"<p>As a fractional property, <code>text-opacity</code> can be set to either a float (between 0 and 1), or a percentage, e.g. <code>45%</code>. Float values will be clamped between 0 and 1. Percentage values will be clamped between 0% and 100%.</p>","title":"Values"},{"location":"styles/text_opacity/#example","text":"<p>This example shows, from top to bottom, increasing text-opacity values.</p> text_opacity.pytext_opacity.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\n\nclass TextOpacityApp(App):\n    def compose(self):\n        yield Static(\"text-opacity: 0%\", id=\"zero-opacity\")\n        yield Static(\"text-opacity: 25%\", id=\"quarter-opacity\")\n        yield Static(\"text-opacity: 50%\", id=\"half-opacity\")\n        yield Static(\"text-opacity: 75%\", id=\"three-quarter-opacity\")\n        yield Static(\"text-opacity: 100%\", id=\"full-opacity\")\n\n\napp = TextOpacityApp(css_path=\"text_opacity.css\")\n</code></pre>   <pre><code>#zero-opacity {\n    text-opacity: 0%;\n}\n\n#quarter-opacity {\n    text-opacity: 25%;\n}\n\n#half-opacity {\n    text-opacity: 50%;\n}\n\n#three-quarter-opacity {\n    text-opacity: 75%;\n}\n\n#full-opacity {\n    text-opacity: 100%;\n}\n\nStatic {\n    height: 1fr;\n    text-align: center;\n    text-style: bold;\n}\n</code></pre>   <p>                                                                             TextOpacityApp         text-opacity:\u00a00%    text-opacity:\u00a025%     text-opacity:\u00a050%     text-opacity:\u00a075%     text-opacity:\u00a0100%        </p>","title":"Example"},{"location":"styles/text_opacity/#css","text":"<pre><code>/* Set the text to be \"half-faded\" against the background of the widget */\nWidget {\n    text-opacity: 50%;\n}\n</code></pre>","title":"CSS"},{"location":"styles/text_opacity/#python","text":"<pre><code># Set the text to be \"half-faded\" against the background of the widget\nwidget.styles.text_opacity = \"50%\"\n</code></pre>","title":"Python"},{"location":"styles/text_style/","text":"<p>The <code>text-style</code> rule enables a number of different ways of displaying text.</p> <p>Text styles may be set in combination. For example <code>bold underline</code> or <code>reverse underline strike</code>.</p>","title":"Text-style"},{"location":"styles/text_style/#syntax","text":"<pre><code>text-style: &lt;TEXT STYLE&gt; ...;\n</code></pre>","title":"Syntax"},{"location":"styles/text_style/#values","text":"Value Description     <code>bold</code> bold text   <code>italic</code> italic text   <code>reverse</code> reverse video text (foreground and background colors reversed)   <code>underline</code> underline text   <code>strike</code> strikethrough text","title":"Values"},{"location":"styles/text_style/#example","text":"<p>Each of the three text panels has a different text style.</p> text_style.pytext_style.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\nTEXT = \"\"\"I must not fear.\nFear is the mind-killer.\nFear is the little-death that brings total obliteration.\nI will face my fear.\nI will permit it to pass over me and through me.\nAnd when it has gone past, I will turn the inner eye to see its path.\nWhere the fear has gone there will be nothing. Only I will remain.\"\"\"\n\n\nclass TextStyleApp(App):\n    def compose(self):\n        yield Static(TEXT, id=\"static1\")\n        yield Static(TEXT, id=\"static2\")\n        yield Static(TEXT, id=\"static3\")\n\n\napp = TextStyleApp(css_path=\"text_style.css\")\n</code></pre>   <pre><code>Screen {\n    layout: horizontal;    \n}\nStatic {\n    width:1fr;        \n}    \n#static1 {\n    background: red 30%;\n    text-style: bold;\n}\n#static2 {\n    background: green 30%;\n    text-style: italic;\n}\n#static3 {\n    background: blue 30%;\n    text-style: reverse;\n}\n</code></pre>   <p>                                                                             TextStyleApp         I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear.I\u00a0must\u00a0not\u00a0fear. Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer.Fear\u00a0is\u00a0the\u00a0mind-killer. Fear\u00a0is\u00a0the\u00a0little-death\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0Fear\u00a0is\u00a0the\u00a0little-death\u00a0 that\u00a0brings\u00a0total\u00a0that\u00a0brings\u00a0total\u00a0that\u00a0brings\u00a0total\u00a0 obliteration.obliteration.obliteration. I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear.I\u00a0will\u00a0face\u00a0my\u00a0fear. I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0I\u00a0will\u00a0permit\u00a0it\u00a0to\u00a0pass\u00a0 over\u00a0me\u00a0and\u00a0through\u00a0me.over\u00a0me\u00a0and\u00a0through\u00a0me.over\u00a0me\u00a0and\u00a0through\u00a0me. And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0And\u00a0when\u00a0it\u00a0has\u00a0gone\u00a0past,\u00a0 I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0I\u00a0will\u00a0turn\u00a0the\u00a0inner\u00a0eye\u00a0 to\u00a0see\u00a0its\u00a0path.to\u00a0see\u00a0its\u00a0path.to\u00a0see\u00a0its\u00a0path. Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0Where\u00a0the\u00a0fear\u00a0has\u00a0gone\u00a0 there\u00a0will\u00a0be\u00a0nothing.\u00a0there\u00a0will\u00a0be\u00a0nothing.\u00a0Onlythere\u00a0will\u00a0be\u00a0nothing.\u00a0Only Only\u00a0I\u00a0will\u00a0remain.I\u00a0will\u00a0remain.I\u00a0will\u00a0remain.              </p>","title":"Example"},{"location":"styles/text_style/#css","text":"<pre><code>text-style: italic;\n</code></pre>","title":"CSS"},{"location":"styles/text_style/#python","text":"<pre><code>widget.styles.text_style = \"italic\"\n</code></pre>","title":"Python"},{"location":"styles/tint/","text":"<p>The tint rule blends a color with the widget. The color should likely have an alpha component, or the end result would obscure the widget content.</p>","title":"Tint"},{"location":"styles/tint/#syntax","text":"<pre><code>tint: &lt;COLOR&gt; [&lt;PERCENTAGE&gt;];\n</code></pre>","title":"Syntax"},{"location":"styles/tint/#example","text":"<p>This examples shows a green tint with gradually increasing alpha.</p> tint.pytint.cssOutput   <pre><code>from textual.app import App\nfrom textual.color import Color\nfrom textual.widgets import Static\n\n\nclass TintApp(App):\n    def compose(self):\n        color = Color.parse(\"green\")\n        for tint_alpha in range(0, 101, 10):\n            widget = Static(f\"tint: green {tint_alpha}%;\")\n            widget.styles.tint = color.with_alpha(tint_alpha / 100)\n            yield widget\n\n\napp = TintApp(css_path=\"tint.css\")\n</code></pre>   <pre><code>Static {             \n    height: 3;\n    text-style: bold;\n    background: white;        \n    color: black;   \n    content-align: center middle; \n}\n</code></pre>   <p>                                                                             TintApp          tint:\u00a0green\u00a00%;   tint:\u00a0green\u00a010%;   tint:\u00a0green\u00a020%;   tint:\u00a0green\u00a030%;   tint:\u00a0green\u00a040%;   tint:\u00a0green\u00a050%; \u2584\u2584  tint:\u00a0green\u00a060%;   tint:\u00a0green\u00a070%;     </p>","title":"Example"},{"location":"styles/tint/#css","text":"<pre><code>/* A red tint (could indicate an error) */\ntint: red 20%\n\n/* A green tint */\ntint: rgba(0, 200, 0, 0.3);\n</code></pre>","title":"CSS"},{"location":"styles/tint/#python","text":"<pre><code># A red tint\nfrom textual.color import Color\nwidget.styles.tint = Color.parse(\"red\").with_alpha(0.2);\n\n# A green tint\nwidget.styles.tint = \"rgba(0, 200, 0, 0.3):\n</code></pre>","title":"Python"},{"location":"styles/visibility/","text":"<p>The <code>visibility</code> rule may be used to make a widget invisible while still reserving spacing for it.</p>","title":"Visibility"},{"location":"styles/visibility/#syntax","text":"<pre><code>visibility: [visible|hidden];\n</code></pre>","title":"Syntax"},{"location":"styles/visibility/#values","text":"Value Description     <code>visible</code> (default) The widget will be displayed as normal   <code>hidden</code> The widget will be invisible","title":"Values"},{"location":"styles/visibility/#example","text":"<p>Note that the second widget is hidden, while leaving a space where it would have been rendered.</p> visibility.pyvisibility.cssOutput   <pre><code>from textual.app import App\nfrom textual.widgets import Static\n\n\nclass VisibilityApp(App):\n    def compose(self):\n        yield Static(\"Widget 1\")\n        yield Static(\"Widget 2\", classes=\"invisible\")\n        yield Static(\"Widget 3\")\n\n\napp = VisibilityApp(css_path=\"visibility.css\")\n</code></pre>   <pre><code>Screen {\n    background: green;\n}\nStatic {             \n    height: 5;        \n    background: white;        \n    color: blue;   \n    border: heavy blue;     \n}\nStatic.invisible {\n    visibility: hidden;\n}\n</code></pre>   <p>                                                                             VisibilityApp         \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Widget\u00a01\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b      \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2503Widget\u00a03\u2503 \u2503\u2503 \u2503\u2503 \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b             </p>","title":"Example"},{"location":"styles/visibility/#css","text":"<pre><code>/* Widget is on screen */\nvisibility: visible;\n\n/* Widget is not on the screen */\nvisibility: hidden;\n</code></pre>","title":"CSS"},{"location":"styles/visibility/#python","text":"<pre><code># Widget is invisible\nself.styles.visibility = \"hidden\"\n\n# Widget is visible\nself.styles.visibility = \"visible\"\n</code></pre> <p>There is also a shortcut to set a Widget's visibility. The <code>visible</code> property on <code>Widget</code> may be set to <code>True</code> or <code>False</code>.</p> <pre><code># Make a widget invisible\nwidget.visible = False\n\n# Make the widget visible again\nwidget.visible = True\n</code></pre>","title":"Python"},{"location":"styles/width/","text":"<p>The <code>width</code> rule sets a widget's width. By default, it sets the width of the content area, but if <code>box-sizing</code> is set to <code>border-box</code> it sets the width of the border area.</p>","title":"Width"},{"location":"styles/width/#syntax","text":"<pre><code>width: &lt;SCALAR&gt;;\n</code></pre>","title":"Syntax"},{"location":"styles/width/#example","text":"<p>This example adds a widget with 50% width of the screen.</p> width.pywidth.cssOutput   <pre><code>from textual.app import App\nfrom textual.widget import Widget\n\n\nclass WidthApp(App):\n    def compose(self):\n        yield Widget()\n\n\napp = WidthApp(css_path=\"width.css\")\n</code></pre>   <pre><code>Screen &gt; Widget {     \n    background: green;\n    width: 50%;\n    color: white;\n}\n</code></pre>   <p>                                                                             WidthApp         Widget                           </p>","title":"Example"},{"location":"styles/width/#css","text":"<pre><code>/* Explicit cell width */\nwidth: 10;\n\n/* Percentage width */\nwidth: 50%;\n\n/* Automatic width */\nwidth: auto\n</code></pre>","title":"CSS"},{"location":"styles/width/#python","text":"<pre><code>self.styles.width = 10\nself.styles.width = \"50%\nself.styles.width = \"auto\"\n</code></pre>","title":"Python"},{"location":"widgets/","text":"<p>A reference to the builtin widgets.</p>","title":"Widgets"},{"location":"widgets/button/","text":"","title":"Button"},{"location":"widgets/button/#description","text":"<p>A simple button widget which can be pressed using a mouse click or by pressing Enter when it has focus.</p> <ul> <li> Focusable</li> <li> Container</li> </ul>","title":"Description"},{"location":"widgets/button/#example","text":"<p>The example below shows each button variant, and its disabled equivalent. Clicking any of the non-disabled buttons in the example app below will result in a ring of the terminal bell.</p> Outputbutton.pybutton.css   <p>                                                                             ButtonsApp          Standard\u00a0ButtonsDisabled\u00a0Buttons  \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Default\u00a0\u00a0Default\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581  \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Primary!\u00a0\u00a0Primary!\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581  \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Success!\u00a0\u00a0Success!\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581  \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Warning!\u00a0\u00a0Warning!\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581  \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0Error!\u00a0\u00a0Error!\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581      </p>   <pre><code>from textual import layout\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Button, Static\n\n\nclass ButtonsApp(App):\n    def compose(self) -&gt; ComposeResult:\n        yield layout.Horizontal(\n            layout.Vertical(\n                Static(\"Standard Buttons\", classes=\"header\"),\n                Button(\"Default\"),\n                Button(\"Primary!\", variant=\"primary\"),\n                Button.success(\"Success!\"),\n                Button.warning(\"Warning!\"),\n                Button.error(\"Error!\"),\n            ),\n            layout.Vertical(\n                Static(\"Disabled Buttons\", classes=\"header\"),\n                Button(\"Default\", disabled=True),\n                Button(\"Primary!\", variant=\"primary\", disabled=True),\n                Button.success(\"Success!\", disabled=True),\n                Button.warning(\"Warning!\", disabled=True),\n                Button.error(\"Error!\", disabled=True),\n            ),\n        )\n\n    def on_button_pressed(self, _event: Button.Pressed) -&gt; None:\n        self.app.bell()\n\n\napp = ButtonsApp(css_path=\"button.css\")\n\nif __name__ == \"__main__\":\n    result = app.run()\n</code></pre>   <pre><code>Button {\n    margin: 1 2;\n}\n\nHorizontal &gt; Vertical {\n    width: 24;\n}\n\n.header {\n    margin: 1 0 0 2;\n    text-style: bold;\n}\n</code></pre>","title":"Example"},{"location":"widgets/button/#reactive-attributes","text":"Name Type Default Description     <code>label</code> <code>str</code> <code>\"\"</code> The text that appears inside the button.   <code>variant</code> <code>str</code> <code>\"default\"</code> Semantic styling variant. One of <code>default</code>, <code>primary</code>, <code>success</code>, <code>warning</code>, <code>error</code>.   <code>disabled</code> <code>bool</code> <code>False</code> Whether the button is disabled or not. Disabled buttons cannot be focused or clicked, and are styled in a way that suggests this.","title":"Reactive Attributes"},{"location":"widgets/button/#events","text":"","title":"Events"},{"location":"widgets/button/#pressed","text":"<p>The <code>Button.Pressed</code> event is sent when the button is pressed.</p> <ul> <li> Bubbles</li> </ul>","title":"Pressed"},{"location":"widgets/button/#attributes","text":"<p>No other attributes</p>","title":"Attributes"},{"location":"widgets/button/#additional-notes","text":"<ul> <li>The spacing between the text and the edges of a button are due to border, not padding. To create a button with zero visible padding, use the <code>border: none;</code> declaration.</li> </ul>","title":"Additional Notes"},{"location":"widgets/button/#see-also","text":"<ul> <li>Button code reference</li> </ul>","title":"See Also"},{"location":"widgets/data_table/","text":"","title":"DataTable"},{"location":"widgets/footer/","text":"","title":"Footer"},{"location":"widgets/header/","text":"","title":"Header"},{"location":"widgets/static/","text":"","title":"Static"},{"location":"widgets/text_input/","text":"","title":"TextInput"},{"location":"widgets/tree_control/","text":"","title":"TreeControl"}]}